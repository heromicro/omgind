// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/heromicro/omgind/internal/api/v2"
	"github.com/heromicro/omgind/internal/app/module/adapter"
	"github.com/heromicro/omgind/internal/app/service"
	"github.com/heromicro/omgind/internal/router"
	"github.com/heromicro/omgind/internal/schema/repo"
	"github.com/heromicro/omgind/pkg/ws/sockio"
)

import (
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/jackc/pgx/v4/stdlib"
	_ "github.com/heromicro/omgind/internal/app/swagger"
)

// Injectors from wire.go:

// BuildInjector 生成注入器
func BuildInjector() (*Injector, func(), error) {
	auther, cleanup, err := InitAuth()
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := InitEntClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	role := &repo.Role{
		EntCli: client,
	}
	roleMenu := &repo.RoleMenu{
		EntCli: client,
	}
	menuActionResource := &repo.MenuActionResource{
		EntCli: client,
	}
	user := &repo.User{
		EntCli: client,
	}
	userRole := &repo.UserRole{
		EntCli: client,
	}
	casbinAdapter := &adapter.CasbinAdapter{
		RoleModel:         role,
		RoleMenuModel:     roleMenu,
		MenuResourceModel: menuActionResource,
		UserModel:         user,
		UserRoleModel:     userRole,
	}
	syncedEnforcer, cleanup3, err := InitCasbin(casbinAdapter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	server, cleanup4, err := sockio.New()
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dict := &repo.Dict{
		EntCli: client,
	}
	dictItem := &repo.DictItem{
		EntCli: client,
	}
	serviceDict := &service.Dict{
		DictModel:     dict,
		DictItemModel: dictItem,
	}
	api_v2Dict := &api_v2.Dict{
		DictSrv: serviceDict,
	}
	demo := &repo.Demo{
		EntCli: client,
	}
	serviceDemo := &service.Demo{
		DemoModel: demo,
	}
	api_v2Demo := &api_v2.Demo{
		DemoSrv: serviceDemo,
	}
	menu := &repo.Menu{
		EntCli: client,
	}
	menuAction := &repo.MenuAction{
		EntCli: client,
	}
	serviceMenu := &service.Menu{
		MenuModel:               menu,
		MenuActionModel:         menuAction,
		MenuActionResourceModel: menuActionResource,
	}
	api_v2Menu := &api_v2.Menu{
		MenuSrv: serviceMenu,
	}
	serviceRole := &service.Role{
		Enforcer:      syncedEnforcer,
		RoleModel:     role,
		RoleMenuModel: roleMenu,
		UserModel:     user,
	}
	api_v2Role := &api_v2.Role{
		RoleSrv: serviceRole,
	}
	serviceUser := &service.User{
		Enforcer:      syncedEnforcer,
		UserModel:     user,
		UserRoleModel: userRole,
		RoleModel:     role,
	}
	api_v2User := &api_v2.User{
		UserSrv: serviceUser,
	}
	cmdable, cleanup5, err := InitRedisCli()
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	vcode := InitVcode(cmdable)
	signIn := &service.SignIn{
		Auth:            auther,
		UserModel:       user,
		UserRoleModel:   userRole,
		RoleModel:       role,
		RoleMenuModel:   roleMenu,
		MenuModel:       menu,
		MenuActionModel: menuAction,
		Vcode:           vcode,
	}
	api_v2SignIn := &api_v2.SignIn{
		SigninSrv: signIn,
		Vcode:     vcode,
	}
	routerRouter := &router.Router{
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		SockIO:         server,
		DictApiV2:      api_v2Dict,
		DemoAPIV2:      api_v2Demo,
		MenuAPIV2:      api_v2Menu,
		RoleAPIV2:      api_v2Role,
		UserAPIV2:      api_v2User,
		SignInAPIV2:    api_v2SignIn,
	}
	engine := InitGinEngine(routerRouter)
	injector := &Injector{
		Engine:         engine,
		Auth:           auther,
		CasbinEnforcer: syncedEnforcer,
		MenuSrv:        serviceMenu,
		RedisCli:       cmdable,
	}
	return injector, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
