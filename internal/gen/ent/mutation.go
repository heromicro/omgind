// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysdict"
	"github.com/heromicro/omgind/internal/gen/ent/sysdictitem"
	"github.com/heromicro/omgind/internal/gen/ent/sysjwtblock"
	"github.com/heromicro/omgind/internal/gen/ent/syslogging"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenu"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenuaction"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenuactionresource"
	"github.com/heromicro/omgind/internal/gen/ent/sysrole"
	"github.com/heromicro/omgind/internal/gen/ent/sysrolemenu"
	"github.com/heromicro/omgind/internal/gen/ent/sysuser"
	"github.com/heromicro/omgind/internal/gen/ent/sysuserrole"
	"github.com/heromicro/omgind/internal/gen/ent/xxxdemo"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSysDict               = "SysDict"
	TypeSysDictItem           = "SysDictItem"
	TypeSysJwtBlock           = "SysJwtBlock"
	TypeSysLogging            = "SysLogging"
	TypeSysMenu               = "SysMenu"
	TypeSysMenuAction         = "SysMenuAction"
	TypeSysMenuActionResource = "SysMenuActionResource"
	TypeSysRole               = "SysRole"
	TypeSysRoleMenu           = "SysRoleMenu"
	TypeSysUser               = "SysUser"
	TypeSysUserRole           = "SysUserRole"
	TypeXxxDemo               = "XxxDemo"
)

// SysDictMutation represents an operation that mutates the SysDict nodes in the graph.
type SysDictMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	name_cn       *string
	name_en       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysDict, error)
	predicates    []predicate.SysDict
}

var _ ent.Mutation = (*SysDictMutation)(nil)

// sysdictOption allows management of the mutation configuration using functional options.
type sysdictOption func(*SysDictMutation)

// newSysDictMutation creates new mutation for the SysDict entity.
func newSysDictMutation(c config, op Op, opts ...sysdictOption) *SysDictMutation {
	m := &SysDictMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDict,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDictID sets the ID field of the mutation.
func withSysDictID(id string) sysdictOption {
	return func(m *SysDictMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDict
		)
		m.oldValue = func(ctx context.Context) (*SysDict, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDict.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDict sets the old SysDict of the mutation.
func withSysDict(node *SysDict) sysdictOption {
	return func(m *SysDictMutation) {
		m.oldValue = func(context.Context) (*SysDict, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDictMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDictMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysDict entities.
func (m *SysDictMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDictMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysDictMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysDict.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysDictMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysDictMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysDictMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysDictMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysDictMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysDictMutation) ResetMemo() {
	m.memo = nil
}

// SetSort sets the "sort" field.
func (m *SysDictMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysDictMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysDictMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysDictMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysDictMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysDictMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysDictMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysDictMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysDictMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysDictMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysDictMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysDictMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysDictMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysDictMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysdict.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysDictMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysdict.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysDictMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysdict.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysDictMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysDictMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysDictMutation) ResetIsActive() {
	m.is_active = nil
}

// SetNameCn sets the "name_cn" field.
func (m *SysDictMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *SysDictMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *SysDictMutation) ResetNameCn() {
	m.name_cn = nil
}

// SetNameEn sets the "name_en" field.
func (m *SysDictMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *SysDictMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *SysDictMutation) ResetNameEn() {
	m.name_en = nil
}

// Where appends a list predicates to the SysDictMutation builder.
func (m *SysDictMutation) Where(ps ...predicate.SysDict) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysDictMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysDict).
func (m *SysDictMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDictMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.is_del != nil {
		fields = append(fields, sysdict.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysdict.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, sysdict.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysdict.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysdict.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysdict.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysdict.FieldIsActive)
	}
	if m.name_cn != nil {
		fields = append(fields, sysdict.FieldNameCn)
	}
	if m.name_en != nil {
		fields = append(fields, sysdict.FieldNameEn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDictMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdict.FieldIsDel:
		return m.IsDel()
	case sysdict.FieldMemo:
		return m.Memo()
	case sysdict.FieldSort:
		return m.Sort()
	case sysdict.FieldCreatedAt:
		return m.CreatedAt()
	case sysdict.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdict.FieldDeletedAt:
		return m.DeletedAt()
	case sysdict.FieldIsActive:
		return m.IsActive()
	case sysdict.FieldNameCn:
		return m.NameCn()
	case sysdict.FieldNameEn:
		return m.NameEn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDictMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdict.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysdict.FieldMemo:
		return m.OldMemo(ctx)
	case sysdict.FieldSort:
		return m.OldSort(ctx)
	case sysdict.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdict.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdict.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysdict.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysdict.FieldNameCn:
		return m.OldNameCn(ctx)
	case sysdict.FieldNameEn:
		return m.OldNameEn(ctx)
	}
	return nil, fmt.Errorf("unknown SysDict field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdict.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysdict.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysdict.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysdict.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdict.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdict.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysdict.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysdict.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	case sysdict.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	}
	return fmt.Errorf("unknown SysDict field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDictMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysdict.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDictMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdict.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdict.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysDict numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDictMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdict.FieldDeletedAt) {
		fields = append(fields, sysdict.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDictMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDictMutation) ClearField(name string) error {
	switch name {
	case sysdict.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysDict nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDictMutation) ResetField(name string) error {
	switch name {
	case sysdict.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysdict.FieldMemo:
		m.ResetMemo()
		return nil
	case sysdict.FieldSort:
		m.ResetSort()
		return nil
	case sysdict.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdict.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdict.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysdict.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysdict.FieldNameCn:
		m.ResetNameCn()
		return nil
	case sysdict.FieldNameEn:
		m.ResetNameEn()
		return nil
	}
	return fmt.Errorf("unknown SysDict field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDictMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDictMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDictMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDictMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDictMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDictMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDictMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysDict unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDictMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysDict edge %s", name)
}

// SysDictItemMutation represents an operation that mutates the SysDictItem nodes in the graph.
type SysDictItemMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	label         *string
	value         *int
	addvalue      *int
	dict_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysDictItem, error)
	predicates    []predicate.SysDictItem
}

var _ ent.Mutation = (*SysDictItemMutation)(nil)

// sysdictitemOption allows management of the mutation configuration using functional options.
type sysdictitemOption func(*SysDictItemMutation)

// newSysDictItemMutation creates new mutation for the SysDictItem entity.
func newSysDictItemMutation(c config, op Op, opts ...sysdictitemOption) *SysDictItemMutation {
	m := &SysDictItemMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDictItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDictItemID sets the ID field of the mutation.
func withSysDictItemID(id string) sysdictitemOption {
	return func(m *SysDictItemMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDictItem
		)
		m.oldValue = func(ctx context.Context) (*SysDictItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDictItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDictItem sets the old SysDictItem of the mutation.
func withSysDictItem(node *SysDictItem) sysdictitemOption {
	return func(m *SysDictItemMutation) {
		m.oldValue = func(context.Context) (*SysDictItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDictItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDictItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysDictItem entities.
func (m *SysDictItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDictItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysDictItemMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysDictItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysDictItemMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysDictItemMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysDictItemMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysDictItemMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysDictItemMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysDictItemMutation) ResetMemo() {
	m.memo = nil
}

// SetSort sets the "sort" field.
func (m *SysDictItemMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysDictItemMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysDictItemMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysDictItemMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysDictItemMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysDictItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysDictItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysDictItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysDictItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysDictItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysDictItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysDictItemMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysDictItemMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysDictItemMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysdictitem.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysDictItemMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysdictitem.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysDictItemMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysdictitem.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysDictItemMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysDictItemMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysDictItemMutation) ResetIsActive() {
	m.is_active = nil
}

// SetLabel sets the "label" field.
func (m *SysDictItemMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *SysDictItemMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *SysDictItemMutation) ResetLabel() {
	m.label = nil
}

// SetValue sets the "value" field.
func (m *SysDictItemMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *SysDictItemMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *SysDictItemMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *SysDictItemMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *SysDictItemMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetDictID sets the "dict_id" field.
func (m *SysDictItemMutation) SetDictID(s string) {
	m.dict_id = &s
}

// DictID returns the value of the "dict_id" field in the mutation.
func (m *SysDictItemMutation) DictID() (r string, exists bool) {
	v := m.dict_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDictID returns the old "dict_id" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldDictID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDictID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDictID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictID: %w", err)
	}
	return oldValue.DictID, nil
}

// ResetDictID resets all changes to the "dict_id" field.
func (m *SysDictItemMutation) ResetDictID() {
	m.dict_id = nil
}

// Where appends a list predicates to the SysDictItemMutation builder.
func (m *SysDictItemMutation) Where(ps ...predicate.SysDictItem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysDictItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysDictItem).
func (m *SysDictItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDictItemMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.is_del != nil {
		fields = append(fields, sysdictitem.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysdictitem.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, sysdictitem.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysdictitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysdictitem.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysdictitem.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysdictitem.FieldIsActive)
	}
	if m.label != nil {
		fields = append(fields, sysdictitem.FieldLabel)
	}
	if m.value != nil {
		fields = append(fields, sysdictitem.FieldValue)
	}
	if m.dict_id != nil {
		fields = append(fields, sysdictitem.FieldDictID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDictItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdictitem.FieldIsDel:
		return m.IsDel()
	case sysdictitem.FieldMemo:
		return m.Memo()
	case sysdictitem.FieldSort:
		return m.Sort()
	case sysdictitem.FieldCreatedAt:
		return m.CreatedAt()
	case sysdictitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdictitem.FieldDeletedAt:
		return m.DeletedAt()
	case sysdictitem.FieldIsActive:
		return m.IsActive()
	case sysdictitem.FieldLabel:
		return m.Label()
	case sysdictitem.FieldValue:
		return m.Value()
	case sysdictitem.FieldDictID:
		return m.DictID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDictItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdictitem.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysdictitem.FieldMemo:
		return m.OldMemo(ctx)
	case sysdictitem.FieldSort:
		return m.OldSort(ctx)
	case sysdictitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdictitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdictitem.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysdictitem.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysdictitem.FieldLabel:
		return m.OldLabel(ctx)
	case sysdictitem.FieldValue:
		return m.OldValue(ctx)
	case sysdictitem.FieldDictID:
		return m.OldDictID(ctx)
	}
	return nil, fmt.Errorf("unknown SysDictItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdictitem.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysdictitem.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysdictitem.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysdictitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdictitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdictitem.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysdictitem.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysdictitem.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case sysdictitem.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case sysdictitem.FieldDictID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictID(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDictItemMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysdictitem.FieldSort)
	}
	if m.addvalue != nil {
		fields = append(fields, sysdictitem.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDictItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdictitem.FieldSort:
		return m.AddedSort()
	case sysdictitem.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdictitem.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysdictitem.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDictItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdictitem.FieldDeletedAt) {
		fields = append(fields, sysdictitem.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDictItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDictItemMutation) ClearField(name string) error {
	switch name {
	case sysdictitem.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysDictItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDictItemMutation) ResetField(name string) error {
	switch name {
	case sysdictitem.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysdictitem.FieldMemo:
		m.ResetMemo()
		return nil
	case sysdictitem.FieldSort:
		m.ResetSort()
		return nil
	case sysdictitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdictitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdictitem.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysdictitem.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysdictitem.FieldLabel:
		m.ResetLabel()
		return nil
	case sysdictitem.FieldValue:
		m.ResetValue()
		return nil
	case sysdictitem.FieldDictID:
		m.ResetDictID()
		return nil
	}
	return fmt.Errorf("unknown SysDictItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDictItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDictItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDictItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDictItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDictItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDictItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDictItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysDictItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDictItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysDictItem edge %s", name)
}

// SysJwtBlockMutation represents an operation that mutates the SysJwtBlock nodes in the graph.
type SysJwtBlockMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	jwt           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysJwtBlock, error)
	predicates    []predicate.SysJwtBlock
}

var _ ent.Mutation = (*SysJwtBlockMutation)(nil)

// sysjwtblockOption allows management of the mutation configuration using functional options.
type sysjwtblockOption func(*SysJwtBlockMutation)

// newSysJwtBlockMutation creates new mutation for the SysJwtBlock entity.
func newSysJwtBlockMutation(c config, op Op, opts ...sysjwtblockOption) *SysJwtBlockMutation {
	m := &SysJwtBlockMutation{
		config:        c,
		op:            op,
		typ:           TypeSysJwtBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysJwtBlockID sets the ID field of the mutation.
func withSysJwtBlockID(id string) sysjwtblockOption {
	return func(m *SysJwtBlockMutation) {
		var (
			err   error
			once  sync.Once
			value *SysJwtBlock
		)
		m.oldValue = func(ctx context.Context) (*SysJwtBlock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysJwtBlock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysJwtBlock sets the old SysJwtBlock of the mutation.
func withSysJwtBlock(node *SysJwtBlock) sysjwtblockOption {
	return func(m *SysJwtBlockMutation) {
		m.oldValue = func(context.Context) (*SysJwtBlock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysJwtBlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysJwtBlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysJwtBlock entities.
func (m *SysJwtBlockMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysJwtBlockMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysJwtBlockMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysJwtBlock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysJwtBlockMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysJwtBlockMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysJwtBlockMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysJwtBlockMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysJwtBlockMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysJwtBlockMutation) ResetMemo() {
	m.memo = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysJwtBlockMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysJwtBlockMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysJwtBlockMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysJwtBlockMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysJwtBlockMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysJwtBlockMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysJwtBlockMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysJwtBlockMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysJwtBlockMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysjwtblock.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysJwtBlockMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysjwtblock.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysJwtBlockMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysjwtblock.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysJwtBlockMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysJwtBlockMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysJwtBlockMutation) ResetIsActive() {
	m.is_active = nil
}

// SetJwt sets the "jwt" field.
func (m *SysJwtBlockMutation) SetJwt(s string) {
	m.jwt = &s
}

// Jwt returns the value of the "jwt" field in the mutation.
func (m *SysJwtBlockMutation) Jwt() (r string, exists bool) {
	v := m.jwt
	if v == nil {
		return
	}
	return *v, true
}

// OldJwt returns the old "jwt" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldJwt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJwt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJwt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJwt: %w", err)
	}
	return oldValue.Jwt, nil
}

// ResetJwt resets all changes to the "jwt" field.
func (m *SysJwtBlockMutation) ResetJwt() {
	m.jwt = nil
}

// Where appends a list predicates to the SysJwtBlockMutation builder.
func (m *SysJwtBlockMutation) Where(ps ...predicate.SysJwtBlock) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysJwtBlockMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysJwtBlock).
func (m *SysJwtBlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysJwtBlockMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.is_del != nil {
		fields = append(fields, sysjwtblock.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysjwtblock.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysjwtblock.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysjwtblock.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysjwtblock.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysjwtblock.FieldIsActive)
	}
	if m.jwt != nil {
		fields = append(fields, sysjwtblock.FieldJwt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysJwtBlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysjwtblock.FieldIsDel:
		return m.IsDel()
	case sysjwtblock.FieldMemo:
		return m.Memo()
	case sysjwtblock.FieldCreatedAt:
		return m.CreatedAt()
	case sysjwtblock.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysjwtblock.FieldDeletedAt:
		return m.DeletedAt()
	case sysjwtblock.FieldIsActive:
		return m.IsActive()
	case sysjwtblock.FieldJwt:
		return m.Jwt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysJwtBlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysjwtblock.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysjwtblock.FieldMemo:
		return m.OldMemo(ctx)
	case sysjwtblock.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysjwtblock.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysjwtblock.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysjwtblock.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysjwtblock.FieldJwt:
		return m.OldJwt(ctx)
	}
	return nil, fmt.Errorf("unknown SysJwtBlock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJwtBlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysjwtblock.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysjwtblock.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysjwtblock.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysjwtblock.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysjwtblock.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysjwtblock.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysjwtblock.FieldJwt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJwt(v)
		return nil
	}
	return fmt.Errorf("unknown SysJwtBlock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysJwtBlockMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysJwtBlockMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJwtBlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysJwtBlock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysJwtBlockMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysjwtblock.FieldDeletedAt) {
		fields = append(fields, sysjwtblock.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysJwtBlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysJwtBlockMutation) ClearField(name string) error {
	switch name {
	case sysjwtblock.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysJwtBlock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysJwtBlockMutation) ResetField(name string) error {
	switch name {
	case sysjwtblock.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysjwtblock.FieldMemo:
		m.ResetMemo()
		return nil
	case sysjwtblock.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysjwtblock.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysjwtblock.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysjwtblock.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysjwtblock.FieldJwt:
		m.ResetJwt()
		return nil
	}
	return fmt.Errorf("unknown SysJwtBlock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysJwtBlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysJwtBlockMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysJwtBlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysJwtBlockMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysJwtBlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysJwtBlockMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysJwtBlockMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysJwtBlock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysJwtBlockMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysJwtBlock edge %s", name)
}

// SysLoggingMutation represents an operation that mutates the SysLogging nodes in the graph.
type SysLoggingMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	level         *string
	trace_id      *string
	user_id       *string
	tag           *string
	version       *string
	message       *string
	data          *string
	error_stack   *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysLogging, error)
	predicates    []predicate.SysLogging
}

var _ ent.Mutation = (*SysLoggingMutation)(nil)

// sysloggingOption allows management of the mutation configuration using functional options.
type sysloggingOption func(*SysLoggingMutation)

// newSysLoggingMutation creates new mutation for the SysLogging entity.
func newSysLoggingMutation(c config, op Op, opts ...sysloggingOption) *SysLoggingMutation {
	m := &SysLoggingMutation{
		config:        c,
		op:            op,
		typ:           TypeSysLogging,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysLoggingID sets the ID field of the mutation.
func withSysLoggingID(id string) sysloggingOption {
	return func(m *SysLoggingMutation) {
		var (
			err   error
			once  sync.Once
			value *SysLogging
		)
		m.oldValue = func(ctx context.Context) (*SysLogging, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysLogging.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysLogging sets the old SysLogging of the mutation.
func withSysLogging(node *SysLogging) sysloggingOption {
	return func(m *SysLoggingMutation) {
		m.oldValue = func(context.Context) (*SysLogging, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysLoggingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysLoggingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysLogging entities.
func (m *SysLoggingMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysLoggingMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysLoggingMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysLogging.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysLoggingMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysLoggingMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysLoggingMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysLoggingMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysLoggingMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysLoggingMutation) ResetMemo() {
	m.memo = nil
}

// SetLevel sets the "level" field.
func (m *SysLoggingMutation) SetLevel(s string) {
	m.level = &s
}

// Level returns the value of the "level" field in the mutation.
func (m *SysLoggingMutation) Level() (r string, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldLevel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ResetLevel resets all changes to the "level" field.
func (m *SysLoggingMutation) ResetLevel() {
	m.level = nil
}

// SetTraceID sets the "trace_id" field.
func (m *SysLoggingMutation) SetTraceID(s string) {
	m.trace_id = &s
}

// TraceID returns the value of the "trace_id" field in the mutation.
func (m *SysLoggingMutation) TraceID() (r string, exists bool) {
	v := m.trace_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTraceID returns the old "trace_id" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldTraceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTraceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTraceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraceID: %w", err)
	}
	return oldValue.TraceID, nil
}

// ResetTraceID resets all changes to the "trace_id" field.
func (m *SysLoggingMutation) ResetTraceID() {
	m.trace_id = nil
}

// SetUserID sets the "user_id" field.
func (m *SysLoggingMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SysLoggingMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SysLoggingMutation) ResetUserID() {
	m.user_id = nil
}

// SetTag sets the "tag" field.
func (m *SysLoggingMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *SysLoggingMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *SysLoggingMutation) ResetTag() {
	m.tag = nil
}

// SetVersion sets the "version" field.
func (m *SysLoggingMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *SysLoggingMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *SysLoggingMutation) ResetVersion() {
	m.version = nil
}

// SetMessage sets the "message" field.
func (m *SysLoggingMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *SysLoggingMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *SysLoggingMutation) ResetMessage() {
	m.message = nil
}

// SetData sets the "data" field.
func (m *SysLoggingMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *SysLoggingMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldData(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *SysLoggingMutation) ClearData() {
	m.data = nil
	m.clearedFields[syslogging.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *SysLoggingMutation) DataCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *SysLoggingMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, syslogging.FieldData)
}

// SetErrorStack sets the "error_stack" field.
func (m *SysLoggingMutation) SetErrorStack(s string) {
	m.error_stack = &s
}

// ErrorStack returns the value of the "error_stack" field in the mutation.
func (m *SysLoggingMutation) ErrorStack() (r string, exists bool) {
	v := m.error_stack
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorStack returns the old "error_stack" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldErrorStack(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorStack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorStack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorStack: %w", err)
	}
	return oldValue.ErrorStack, nil
}

// ResetErrorStack resets all changes to the "error_stack" field.
func (m *SysLoggingMutation) ResetErrorStack() {
	m.error_stack = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysLoggingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysLoggingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysLoggingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the SysLoggingMutation builder.
func (m *SysLoggingMutation) Where(ps ...predicate.SysLogging) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysLoggingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysLogging).
func (m *SysLoggingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysLoggingMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.is_del != nil {
		fields = append(fields, syslogging.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, syslogging.FieldMemo)
	}
	if m.level != nil {
		fields = append(fields, syslogging.FieldLevel)
	}
	if m.trace_id != nil {
		fields = append(fields, syslogging.FieldTraceID)
	}
	if m.user_id != nil {
		fields = append(fields, syslogging.FieldUserID)
	}
	if m.tag != nil {
		fields = append(fields, syslogging.FieldTag)
	}
	if m.version != nil {
		fields = append(fields, syslogging.FieldVersion)
	}
	if m.message != nil {
		fields = append(fields, syslogging.FieldMessage)
	}
	if m.data != nil {
		fields = append(fields, syslogging.FieldData)
	}
	if m.error_stack != nil {
		fields = append(fields, syslogging.FieldErrorStack)
	}
	if m.created_at != nil {
		fields = append(fields, syslogging.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysLoggingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syslogging.FieldIsDel:
		return m.IsDel()
	case syslogging.FieldMemo:
		return m.Memo()
	case syslogging.FieldLevel:
		return m.Level()
	case syslogging.FieldTraceID:
		return m.TraceID()
	case syslogging.FieldUserID:
		return m.UserID()
	case syslogging.FieldTag:
		return m.Tag()
	case syslogging.FieldVersion:
		return m.Version()
	case syslogging.FieldMessage:
		return m.Message()
	case syslogging.FieldData:
		return m.Data()
	case syslogging.FieldErrorStack:
		return m.ErrorStack()
	case syslogging.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysLoggingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syslogging.FieldIsDel:
		return m.OldIsDel(ctx)
	case syslogging.FieldMemo:
		return m.OldMemo(ctx)
	case syslogging.FieldLevel:
		return m.OldLevel(ctx)
	case syslogging.FieldTraceID:
		return m.OldTraceID(ctx)
	case syslogging.FieldUserID:
		return m.OldUserID(ctx)
	case syslogging.FieldTag:
		return m.OldTag(ctx)
	case syslogging.FieldVersion:
		return m.OldVersion(ctx)
	case syslogging.FieldMessage:
		return m.OldMessage(ctx)
	case syslogging.FieldData:
		return m.OldData(ctx)
	case syslogging.FieldErrorStack:
		return m.OldErrorStack(ctx)
	case syslogging.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SysLogging field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLoggingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syslogging.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case syslogging.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case syslogging.FieldLevel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case syslogging.FieldTraceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraceID(v)
		return nil
	case syslogging.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case syslogging.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case syslogging.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case syslogging.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case syslogging.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case syslogging.FieldErrorStack:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorStack(v)
		return nil
	case syslogging.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SysLogging field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysLoggingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysLoggingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLoggingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysLogging numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysLoggingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(syslogging.FieldData) {
		fields = append(fields, syslogging.FieldData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysLoggingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysLoggingMutation) ClearField(name string) error {
	switch name {
	case syslogging.FieldData:
		m.ClearData()
		return nil
	}
	return fmt.Errorf("unknown SysLogging nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysLoggingMutation) ResetField(name string) error {
	switch name {
	case syslogging.FieldIsDel:
		m.ResetIsDel()
		return nil
	case syslogging.FieldMemo:
		m.ResetMemo()
		return nil
	case syslogging.FieldLevel:
		m.ResetLevel()
		return nil
	case syslogging.FieldTraceID:
		m.ResetTraceID()
		return nil
	case syslogging.FieldUserID:
		m.ResetUserID()
		return nil
	case syslogging.FieldTag:
		m.ResetTag()
		return nil
	case syslogging.FieldVersion:
		m.ResetVersion()
		return nil
	case syslogging.FieldMessage:
		m.ResetMessage()
		return nil
	case syslogging.FieldData:
		m.ResetData()
		return nil
	case syslogging.FieldErrorStack:
		m.ResetErrorStack()
		return nil
	case syslogging.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown SysLogging field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysLoggingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysLoggingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysLoggingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysLoggingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysLoggingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysLoggingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysLoggingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysLogging unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysLoggingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysLogging edge %s", name)
}

// SysMenuMutation represents an operation that mutates the SysMenu nodes in the graph.
type SysMenuMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	name          *string
	icon          *string
	router        *string
	is_show       *bool
	parent_id     *string
	parent_path   *string
	level         *int32
	addlevel      *int32
	is_leaf       *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysMenu, error)
	predicates    []predicate.SysMenu
}

var _ ent.Mutation = (*SysMenuMutation)(nil)

// sysmenuOption allows management of the mutation configuration using functional options.
type sysmenuOption func(*SysMenuMutation)

// newSysMenuMutation creates new mutation for the SysMenu entity.
func newSysMenuMutation(c config, op Op, opts ...sysmenuOption) *SysMenuMutation {
	m := &SysMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuID sets the ID field of the mutation.
func withSysMenuID(id string) sysmenuOption {
	return func(m *SysMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenu
		)
		m.oldValue = func(ctx context.Context) (*SysMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenu sets the old SysMenu of the mutation.
func withSysMenu(node *SysMenu) sysmenuOption {
	return func(m *SysMenuMutation) {
		m.oldValue = func(context.Context) (*SysMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenu entities.
func (m *SysMenuMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysMenuMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysMenuMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysMenuMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysMenuMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysMenuMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysMenuMutation) ResetMemo() {
	m.memo = nil
}

// SetSort sets the "sort" field.
func (m *SysMenuMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysMenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysMenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysMenuMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysMenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysMenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysMenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysMenuMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysMenuMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysMenuMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysmenu.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysMenuMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysMenuMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysmenu.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysMenuMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysMenuMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysMenuMutation) ResetIsActive() {
	m.is_active = nil
}

// SetName sets the "name" field.
func (m *SysMenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysMenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysMenuMutation) ResetName() {
	m.name = nil
}

// SetIcon sets the "icon" field.
func (m *SysMenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *SysMenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *SysMenuMutation) ResetIcon() {
	m.icon = nil
}

// SetRouter sets the "router" field.
func (m *SysMenuMutation) SetRouter(s string) {
	m.router = &s
}

// Router returns the value of the "router" field in the mutation.
func (m *SysMenuMutation) Router() (r string, exists bool) {
	v := m.router
	if v == nil {
		return
	}
	return *v, true
}

// OldRouter returns the old "router" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldRouter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRouter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRouter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRouter: %w", err)
	}
	return oldValue.Router, nil
}

// ResetRouter resets all changes to the "router" field.
func (m *SysMenuMutation) ResetRouter() {
	m.router = nil
}

// SetIsShow sets the "is_show" field.
func (m *SysMenuMutation) SetIsShow(b bool) {
	m.is_show = &b
}

// IsShow returns the value of the "is_show" field in the mutation.
func (m *SysMenuMutation) IsShow() (r bool, exists bool) {
	v := m.is_show
	if v == nil {
		return
	}
	return *v, true
}

// OldIsShow returns the old "is_show" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsShow(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsShow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsShow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsShow: %w", err)
	}
	return oldValue.IsShow, nil
}

// ResetIsShow resets all changes to the "is_show" field.
func (m *SysMenuMutation) ResetIsShow() {
	m.is_show = nil
}

// SetParentID sets the "parent_id" field.
func (m *SysMenuMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *SysMenuMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldParentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *SysMenuMutation) ClearParentID() {
	m.parent_id = nil
	m.clearedFields[sysmenu.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *SysMenuMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *SysMenuMutation) ResetParentID() {
	m.parent_id = nil
	delete(m.clearedFields, sysmenu.FieldParentID)
}

// SetParentPath sets the "parent_path" field.
func (m *SysMenuMutation) SetParentPath(s string) {
	m.parent_path = &s
}

// ParentPath returns the value of the "parent_path" field in the mutation.
func (m *SysMenuMutation) ParentPath() (r string, exists bool) {
	v := m.parent_path
	if v == nil {
		return
	}
	return *v, true
}

// OldParentPath returns the old "parent_path" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldParentPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentPath: %w", err)
	}
	return oldValue.ParentPath, nil
}

// ClearParentPath clears the value of the "parent_path" field.
func (m *SysMenuMutation) ClearParentPath() {
	m.parent_path = nil
	m.clearedFields[sysmenu.FieldParentPath] = struct{}{}
}

// ParentPathCleared returns if the "parent_path" field was cleared in this mutation.
func (m *SysMenuMutation) ParentPathCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldParentPath]
	return ok
}

// ResetParentPath resets all changes to the "parent_path" field.
func (m *SysMenuMutation) ResetParentPath() {
	m.parent_path = nil
	delete(m.clearedFields, sysmenu.FieldParentPath)
}

// SetLevel sets the "level" field.
func (m *SysMenuMutation) SetLevel(i int32) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *SysMenuMutation) Level() (r int32, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldLevel(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *SysMenuMutation) AddLevel(i int32) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *SysMenuMutation) AddedLevel() (r int32, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *SysMenuMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetIsLeaf sets the "is_leaf" field.
func (m *SysMenuMutation) SetIsLeaf(b bool) {
	m.is_leaf = &b
}

// IsLeaf returns the value of the "is_leaf" field in the mutation.
func (m *SysMenuMutation) IsLeaf() (r bool, exists bool) {
	v := m.is_leaf
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeaf returns the old "is_leaf" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsLeaf(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLeaf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLeaf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeaf: %w", err)
	}
	return oldValue.IsLeaf, nil
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (m *SysMenuMutation) ClearIsLeaf() {
	m.is_leaf = nil
	m.clearedFields[sysmenu.FieldIsLeaf] = struct{}{}
}

// IsLeafCleared returns if the "is_leaf" field was cleared in this mutation.
func (m *SysMenuMutation) IsLeafCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsLeaf]
	return ok
}

// ResetIsLeaf resets all changes to the "is_leaf" field.
func (m *SysMenuMutation) ResetIsLeaf() {
	m.is_leaf = nil
	delete(m.clearedFields, sysmenu.FieldIsLeaf)
}

// Where appends a list predicates to the SysMenuMutation builder.
func (m *SysMenuMutation) Where(ps ...predicate.SysMenu) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysMenuMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysMenu).
func (m *SysMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.is_del != nil {
		fields = append(fields, sysmenu.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysmenu.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysmenu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysmenu.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysmenu.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysmenu.FieldIsActive)
	}
	if m.name != nil {
		fields = append(fields, sysmenu.FieldName)
	}
	if m.icon != nil {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m.router != nil {
		fields = append(fields, sysmenu.FieldRouter)
	}
	if m.is_show != nil {
		fields = append(fields, sysmenu.FieldIsShow)
	}
	if m.parent_id != nil {
		fields = append(fields, sysmenu.FieldParentID)
	}
	if m.parent_path != nil {
		fields = append(fields, sysmenu.FieldParentPath)
	}
	if m.level != nil {
		fields = append(fields, sysmenu.FieldLevel)
	}
	if m.is_leaf != nil {
		fields = append(fields, sysmenu.FieldIsLeaf)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldIsDel:
		return m.IsDel()
	case sysmenu.FieldMemo:
		return m.Memo()
	case sysmenu.FieldSort:
		return m.Sort()
	case sysmenu.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenu.FieldDeletedAt:
		return m.DeletedAt()
	case sysmenu.FieldIsActive:
		return m.IsActive()
	case sysmenu.FieldName:
		return m.Name()
	case sysmenu.FieldIcon:
		return m.Icon()
	case sysmenu.FieldRouter:
		return m.Router()
	case sysmenu.FieldIsShow:
		return m.IsShow()
	case sysmenu.FieldParentID:
		return m.ParentID()
	case sysmenu.FieldParentPath:
		return m.ParentPath()
	case sysmenu.FieldLevel:
		return m.Level()
	case sysmenu.FieldIsLeaf:
		return m.IsLeaf()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenu.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysmenu.FieldMemo:
		return m.OldMemo(ctx)
	case sysmenu.FieldSort:
		return m.OldSort(ctx)
	case sysmenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenu.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysmenu.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysmenu.FieldName:
		return m.OldName(ctx)
	case sysmenu.FieldIcon:
		return m.OldIcon(ctx)
	case sysmenu.FieldRouter:
		return m.OldRouter(ctx)
	case sysmenu.FieldIsShow:
		return m.OldIsShow(ctx)
	case sysmenu.FieldParentID:
		return m.OldParentID(ctx)
	case sysmenu.FieldParentPath:
		return m.OldParentPath(ctx)
	case sysmenu.FieldLevel:
		return m.OldLevel(ctx)
	case sysmenu.FieldIsLeaf:
		return m.OldIsLeaf(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysmenu.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenu.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysmenu.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysmenu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sysmenu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case sysmenu.FieldRouter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRouter(v)
		return nil
	case sysmenu.FieldIsShow:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsShow(v)
		return nil
	case sysmenu.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case sysmenu.FieldParentPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentPath(v)
		return nil
	case sysmenu.FieldLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case sysmenu.FieldIsLeaf:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeaf(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.addlevel != nil {
		fields = append(fields, sysmenu.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldSort:
		return m.AddedSort()
	case sysmenu.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysmenu.FieldLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenu.FieldDeletedAt) {
		fields = append(fields, sysmenu.FieldDeletedAt)
	}
	if m.FieldCleared(sysmenu.FieldParentID) {
		fields = append(fields, sysmenu.FieldParentID)
	}
	if m.FieldCleared(sysmenu.FieldParentPath) {
		fields = append(fields, sysmenu.FieldParentPath)
	}
	if m.FieldCleared(sysmenu.FieldIsLeaf) {
		fields = append(fields, sysmenu.FieldIsLeaf)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuMutation) ClearField(name string) error {
	switch name {
	case sysmenu.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysmenu.FieldParentID:
		m.ClearParentID()
		return nil
	case sysmenu.FieldParentPath:
		m.ClearParentPath()
		return nil
	case sysmenu.FieldIsLeaf:
		m.ClearIsLeaf()
		return nil
	}
	return fmt.Errorf("unknown SysMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuMutation) ResetField(name string) error {
	switch name {
	case sysmenu.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysmenu.FieldMemo:
		m.ResetMemo()
		return nil
	case sysmenu.FieldSort:
		m.ResetSort()
		return nil
	case sysmenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenu.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysmenu.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysmenu.FieldName:
		m.ResetName()
		return nil
	case sysmenu.FieldIcon:
		m.ResetIcon()
		return nil
	case sysmenu.FieldRouter:
		m.ResetRouter()
		return nil
	case sysmenu.FieldIsShow:
		m.ResetIsShow()
		return nil
	case sysmenu.FieldParentID:
		m.ResetParentID()
		return nil
	case sysmenu.FieldParentPath:
		m.ResetParentPath()
		return nil
	case sysmenu.FieldLevel:
		m.ResetLevel()
		return nil
	case sysmenu.FieldIsLeaf:
		m.ResetIsLeaf()
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenu edge %s", name)
}

// SysMenuActionMutation represents an operation that mutates the SysMenuAction nodes in the graph.
type SysMenuActionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	sort          *int32
	addsort       *int32
	is_active     *bool
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	menu_id       *string
	code          *string
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysMenuAction, error)
	predicates    []predicate.SysMenuAction
}

var _ ent.Mutation = (*SysMenuActionMutation)(nil)

// sysmenuactionOption allows management of the mutation configuration using functional options.
type sysmenuactionOption func(*SysMenuActionMutation)

// newSysMenuActionMutation creates new mutation for the SysMenuAction entity.
func newSysMenuActionMutation(c config, op Op, opts ...sysmenuactionOption) *SysMenuActionMutation {
	m := &SysMenuActionMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenuAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuActionID sets the ID field of the mutation.
func withSysMenuActionID(id string) sysmenuactionOption {
	return func(m *SysMenuActionMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenuAction
		)
		m.oldValue = func(ctx context.Context) (*SysMenuAction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenuAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenuAction sets the old SysMenuAction of the mutation.
func withSysMenuAction(node *SysMenuAction) sysmenuactionOption {
	return func(m *SysMenuActionMutation) {
		m.oldValue = func(context.Context) (*SysMenuAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenuAction entities.
func (m *SysMenuActionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuActionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuActionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenuAction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysMenuActionMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysMenuActionMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysMenuActionMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *SysMenuActionMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuActionMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuActionMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuActionMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuActionMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetIsActive sets the "is_active" field.
func (m *SysMenuActionMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysMenuActionMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysMenuActionMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMemo sets the "memo" field.
func (m *SysMenuActionMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysMenuActionMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysMenuActionMutation) ResetMemo() {
	m.memo = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysMenuActionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysMenuActionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysMenuActionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysMenuActionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysMenuActionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysMenuActionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysMenuActionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysMenuActionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysMenuActionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysmenuaction.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysMenuActionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuaction.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysMenuActionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysmenuaction.FieldDeletedAt)
}

// SetMenuID sets the "menu_id" field.
func (m *SysMenuActionMutation) SetMenuID(s string) {
	m.menu_id = &s
}

// MenuID returns the value of the "menu_id" field in the mutation.
func (m *SysMenuActionMutation) MenuID() (r string, exists bool) {
	v := m.menu_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuID returns the old "menu_id" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldMenuID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuID: %w", err)
	}
	return oldValue.MenuID, nil
}

// ResetMenuID resets all changes to the "menu_id" field.
func (m *SysMenuActionMutation) ResetMenuID() {
	m.menu_id = nil
}

// SetCode sets the "code" field.
func (m *SysMenuActionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *SysMenuActionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *SysMenuActionMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *SysMenuActionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysMenuActionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysMenuActionMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the SysMenuActionMutation builder.
func (m *SysMenuActionMutation) Where(ps ...predicate.SysMenuAction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysMenuActionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysMenuAction).
func (m *SysMenuActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuActionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.is_del != nil {
		fields = append(fields, sysmenuaction.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, sysmenuaction.FieldSort)
	}
	if m.is_active != nil {
		fields = append(fields, sysmenuaction.FieldIsActive)
	}
	if m.memo != nil {
		fields = append(fields, sysmenuaction.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysmenuaction.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysmenuaction.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysmenuaction.FieldDeletedAt)
	}
	if m.menu_id != nil {
		fields = append(fields, sysmenuaction.FieldMenuID)
	}
	if m.code != nil {
		fields = append(fields, sysmenuaction.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, sysmenuaction.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenuaction.FieldIsDel:
		return m.IsDel()
	case sysmenuaction.FieldSort:
		return m.Sort()
	case sysmenuaction.FieldIsActive:
		return m.IsActive()
	case sysmenuaction.FieldMemo:
		return m.Memo()
	case sysmenuaction.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenuaction.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenuaction.FieldDeletedAt:
		return m.DeletedAt()
	case sysmenuaction.FieldMenuID:
		return m.MenuID()
	case sysmenuaction.FieldCode:
		return m.Code()
	case sysmenuaction.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenuaction.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysmenuaction.FieldSort:
		return m.OldSort(ctx)
	case sysmenuaction.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysmenuaction.FieldMemo:
		return m.OldMemo(ctx)
	case sysmenuaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenuaction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenuaction.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysmenuaction.FieldMenuID:
		return m.OldMenuID(ctx)
	case sysmenuaction.FieldCode:
		return m.OldCode(ctx)
	case sysmenuaction.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenuAction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenuaction.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysmenuaction.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenuaction.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysmenuaction.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysmenuaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenuaction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenuaction.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysmenuaction.FieldMenuID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuID(v)
		return nil
	case sysmenuaction.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case sysmenuaction.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuActionMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysmenuaction.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuActionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenuaction.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenuaction.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuActionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenuaction.FieldDeletedAt) {
		fields = append(fields, sysmenuaction.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuActionMutation) ClearField(name string) error {
	switch name {
	case sysmenuaction.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuActionMutation) ResetField(name string) error {
	switch name {
	case sysmenuaction.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysmenuaction.FieldSort:
		m.ResetSort()
		return nil
	case sysmenuaction.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysmenuaction.FieldMemo:
		m.ResetMemo()
		return nil
	case sysmenuaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenuaction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenuaction.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysmenuaction.FieldMenuID:
		m.ResetMenuID()
		return nil
	case sysmenuaction.FieldCode:
		m.ResetCode()
		return nil
	case sysmenuaction.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuActionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuActionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuActionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuActionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenuAction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuActionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenuAction edge %s", name)
}

// SysMenuActionResourceMutation represents an operation that mutates the SysMenuActionResource nodes in the graph.
type SysMenuActionResourceMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	sort          *int32
	addsort       *int32
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	method        *string
	_path         *string
	action_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysMenuActionResource, error)
	predicates    []predicate.SysMenuActionResource
}

var _ ent.Mutation = (*SysMenuActionResourceMutation)(nil)

// sysmenuactionresourceOption allows management of the mutation configuration using functional options.
type sysmenuactionresourceOption func(*SysMenuActionResourceMutation)

// newSysMenuActionResourceMutation creates new mutation for the SysMenuActionResource entity.
func newSysMenuActionResourceMutation(c config, op Op, opts ...sysmenuactionresourceOption) *SysMenuActionResourceMutation {
	m := &SysMenuActionResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenuActionResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuActionResourceID sets the ID field of the mutation.
func withSysMenuActionResourceID(id string) sysmenuactionresourceOption {
	return func(m *SysMenuActionResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenuActionResource
		)
		m.oldValue = func(ctx context.Context) (*SysMenuActionResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenuActionResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenuActionResource sets the old SysMenuActionResource of the mutation.
func withSysMenuActionResource(node *SysMenuActionResource) sysmenuactionresourceOption {
	return func(m *SysMenuActionResourceMutation) {
		m.oldValue = func(context.Context) (*SysMenuActionResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuActionResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuActionResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenuActionResource entities.
func (m *SysMenuActionResourceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuActionResourceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuActionResourceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenuActionResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysMenuActionResourceMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysMenuActionResourceMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysMenuActionResourceMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *SysMenuActionResourceMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuActionResourceMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuActionResourceMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuActionResourceMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuActionResourceMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetMemo sets the "memo" field.
func (m *SysMenuActionResourceMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysMenuActionResourceMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysMenuActionResourceMutation) ResetMemo() {
	m.memo = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysMenuActionResourceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysMenuActionResourceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysMenuActionResourceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysMenuActionResourceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysMenuActionResourceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysMenuActionResourceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysMenuActionResourceMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysMenuActionResourceMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysMenuActionResourceMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysmenuactionresource.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysMenuActionResourceMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuactionresource.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysMenuActionResourceMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysmenuactionresource.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysMenuActionResourceMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysMenuActionResourceMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysMenuActionResourceMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMethod sets the "method" field.
func (m *SysMenuActionResourceMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *SysMenuActionResourceMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *SysMenuActionResourceMutation) ResetMethod() {
	m.method = nil
}

// SetPath sets the "path" field.
func (m *SysMenuActionResourceMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *SysMenuActionResourceMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *SysMenuActionResourceMutation) ResetPath() {
	m._path = nil
}

// SetActionID sets the "action_id" field.
func (m *SysMenuActionResourceMutation) SetActionID(s string) {
	m.action_id = &s
}

// ActionID returns the value of the "action_id" field in the mutation.
func (m *SysMenuActionResourceMutation) ActionID() (r string, exists bool) {
	v := m.action_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActionID returns the old "action_id" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldActionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionID: %w", err)
	}
	return oldValue.ActionID, nil
}

// ResetActionID resets all changes to the "action_id" field.
func (m *SysMenuActionResourceMutation) ResetActionID() {
	m.action_id = nil
}

// Where appends a list predicates to the SysMenuActionResourceMutation builder.
func (m *SysMenuActionResourceMutation) Where(ps ...predicate.SysMenuActionResource) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysMenuActionResourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysMenuActionResource).
func (m *SysMenuActionResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuActionResourceMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.is_del != nil {
		fields = append(fields, sysmenuactionresource.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, sysmenuactionresource.FieldSort)
	}
	if m.memo != nil {
		fields = append(fields, sysmenuactionresource.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysmenuactionresource.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysmenuactionresource.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysmenuactionresource.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysmenuactionresource.FieldIsActive)
	}
	if m.method != nil {
		fields = append(fields, sysmenuactionresource.FieldMethod)
	}
	if m._path != nil {
		fields = append(fields, sysmenuactionresource.FieldPath)
	}
	if m.action_id != nil {
		fields = append(fields, sysmenuactionresource.FieldActionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuActionResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		return m.IsDel()
	case sysmenuactionresource.FieldSort:
		return m.Sort()
	case sysmenuactionresource.FieldMemo:
		return m.Memo()
	case sysmenuactionresource.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenuactionresource.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenuactionresource.FieldDeletedAt:
		return m.DeletedAt()
	case sysmenuactionresource.FieldIsActive:
		return m.IsActive()
	case sysmenuactionresource.FieldMethod:
		return m.Method()
	case sysmenuactionresource.FieldPath:
		return m.Path()
	case sysmenuactionresource.FieldActionID:
		return m.ActionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuActionResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysmenuactionresource.FieldSort:
		return m.OldSort(ctx)
	case sysmenuactionresource.FieldMemo:
		return m.OldMemo(ctx)
	case sysmenuactionresource.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenuactionresource.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenuactionresource.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysmenuactionresource.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysmenuactionresource.FieldMethod:
		return m.OldMethod(ctx)
	case sysmenuactionresource.FieldPath:
		return m.OldPath(ctx)
	case sysmenuactionresource.FieldActionID:
		return m.OldActionID(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenuActionResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysmenuactionresource.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenuactionresource.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysmenuactionresource.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenuactionresource.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenuactionresource.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysmenuactionresource.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysmenuactionresource.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case sysmenuactionresource.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case sysmenuactionresource.FieldActionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionID(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuActionResourceMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysmenuactionresource.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuActionResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenuactionresource.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenuactionresource.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuActionResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenuactionresource.FieldDeletedAt) {
		fields = append(fields, sysmenuactionresource.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuActionResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuActionResourceMutation) ClearField(name string) error {
	switch name {
	case sysmenuactionresource.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuActionResourceMutation) ResetField(name string) error {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysmenuactionresource.FieldSort:
		m.ResetSort()
		return nil
	case sysmenuactionresource.FieldMemo:
		m.ResetMemo()
		return nil
	case sysmenuactionresource.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenuactionresource.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenuactionresource.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysmenuactionresource.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysmenuactionresource.FieldMethod:
		m.ResetMethod()
		return nil
	case sysmenuactionresource.FieldPath:
		m.ResetPath()
		return nil
	case sysmenuactionresource.FieldActionID:
		m.ResetActionID()
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuActionResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuActionResourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuActionResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuActionResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuActionResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuActionResourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuActionResourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenuActionResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuActionResourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenuActionResource edge %s", name)
}

// SysRoleMutation represents an operation that mutates the SysRole nodes in the graph.
type SysRoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	is_active     *bool
	sort          *int32
	addsort       *int32
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysRole, error)
	predicates    []predicate.SysRole
}

var _ ent.Mutation = (*SysRoleMutation)(nil)

// sysroleOption allows management of the mutation configuration using functional options.
type sysroleOption func(*SysRoleMutation)

// newSysRoleMutation creates new mutation for the SysRole entity.
func newSysRoleMutation(c config, op Op, opts ...sysroleOption) *SysRoleMutation {
	m := &SysRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleID sets the ID field of the mutation.
func withSysRoleID(id string) sysroleOption {
	return func(m *SysRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRole
		)
		m.oldValue = func(ctx context.Context) (*SysRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRole sets the old SysRole of the mutation.
func withSysRole(node *SysRole) sysroleOption {
	return func(m *SysRoleMutation) {
		m.oldValue = func(context.Context) (*SysRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRole entities.
func (m *SysRoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysRoleMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysRoleMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysRoleMutation) ResetIsDel() {
	m.is_del = nil
}

// SetIsActive sets the "is_active" field.
func (m *SysRoleMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysRoleMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysRoleMutation) ResetIsActive() {
	m.is_active = nil
}

// SetSort sets the "sort" field.
func (m *SysRoleMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysRoleMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysRoleMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysRoleMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysRoleMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetMemo sets the "memo" field.
func (m *SysRoleMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysRoleMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysRoleMutation) ResetMemo() {
	m.memo = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysRoleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysRoleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysRoleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysRoleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysrole.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysRoleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysRoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysrole.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *SysRoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysRoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysRoleMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the SysRoleMutation builder.
func (m *SysRoleMutation) Where(ps ...predicate.SysRole) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysRoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysRole).
func (m *SysRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.is_del != nil {
		fields = append(fields, sysrole.FieldIsDel)
	}
	if m.is_active != nil {
		fields = append(fields, sysrole.FieldIsActive)
	}
	if m.sort != nil {
		fields = append(fields, sysrole.FieldSort)
	}
	if m.memo != nil {
		fields = append(fields, sysrole.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysrole.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysrole.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, sysrole.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldIsDel:
		return m.IsDel()
	case sysrole.FieldIsActive:
		return m.IsActive()
	case sysrole.FieldSort:
		return m.Sort()
	case sysrole.FieldMemo:
		return m.Memo()
	case sysrole.FieldCreatedAt:
		return m.CreatedAt()
	case sysrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysrole.FieldDeletedAt:
		return m.DeletedAt()
	case sysrole.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrole.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysrole.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysrole.FieldSort:
		return m.OldSort(ctx)
	case sysrole.FieldMemo:
		return m.OldMemo(ctx)
	case sysrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysrole.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysrole.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown SysRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysrole.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysrole.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysrole.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysrole.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysrole.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysrole.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysrole.FieldDeletedAt) {
		fields = append(fields, sysrole.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleMutation) ClearField(name string) error {
	switch name {
	case sysrole.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleMutation) ResetField(name string) error {
	switch name {
	case sysrole.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysrole.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysrole.FieldSort:
		m.ResetSort()
		return nil
	case sysrole.FieldMemo:
		m.ResetMemo()
		return nil
	case sysrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysrole.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysrole.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRole edge %s", name)
}

// SysRoleMenuMutation represents an operation that mutates the SysRoleMenu nodes in the graph.
type SysRoleMenuMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	role_id       *string
	menu_id       *string
	action_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysRoleMenu, error)
	predicates    []predicate.SysRoleMenu
}

var _ ent.Mutation = (*SysRoleMenuMutation)(nil)

// sysrolemenuOption allows management of the mutation configuration using functional options.
type sysrolemenuOption func(*SysRoleMenuMutation)

// newSysRoleMenuMutation creates new mutation for the SysRoleMenu entity.
func newSysRoleMenuMutation(c config, op Op, opts ...sysrolemenuOption) *SysRoleMenuMutation {
	m := &SysRoleMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRoleMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleMenuID sets the ID field of the mutation.
func withSysRoleMenuID(id string) sysrolemenuOption {
	return func(m *SysRoleMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRoleMenu
		)
		m.oldValue = func(ctx context.Context) (*SysRoleMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRoleMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRoleMenu sets the old SysRoleMenu of the mutation.
func withSysRoleMenu(node *SysRoleMenu) sysrolemenuOption {
	return func(m *SysRoleMenuMutation) {
		m.oldValue = func(context.Context) (*SysRoleMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRoleMenu entities.
func (m *SysRoleMenuMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleMenuMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRoleMenuMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRoleMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysRoleMenuMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysRoleMenuMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysRoleMenuMutation) ResetIsDel() {
	m.is_del = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysRoleMenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysRoleMenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysRoleMenuMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysRoleMenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysRoleMenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysRoleMenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysRoleMenuMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysRoleMenuMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysRoleMenuMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysrolemenu.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysRoleMenuMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysrolemenu.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysRoleMenuMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysrolemenu.FieldDeletedAt)
}

// SetRoleID sets the "role_id" field.
func (m *SysRoleMenuMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *SysRoleMenuMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *SysRoleMenuMutation) ResetRoleID() {
	m.role_id = nil
}

// SetMenuID sets the "menu_id" field.
func (m *SysRoleMenuMutation) SetMenuID(s string) {
	m.menu_id = &s
}

// MenuID returns the value of the "menu_id" field in the mutation.
func (m *SysRoleMenuMutation) MenuID() (r string, exists bool) {
	v := m.menu_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuID returns the old "menu_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldMenuID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuID: %w", err)
	}
	return oldValue.MenuID, nil
}

// ResetMenuID resets all changes to the "menu_id" field.
func (m *SysRoleMenuMutation) ResetMenuID() {
	m.menu_id = nil
}

// SetActionID sets the "action_id" field.
func (m *SysRoleMenuMutation) SetActionID(s string) {
	m.action_id = &s
}

// ActionID returns the value of the "action_id" field in the mutation.
func (m *SysRoleMenuMutation) ActionID() (r string, exists bool) {
	v := m.action_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActionID returns the old "action_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldActionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionID: %w", err)
	}
	return oldValue.ActionID, nil
}

// ClearActionID clears the value of the "action_id" field.
func (m *SysRoleMenuMutation) ClearActionID() {
	m.action_id = nil
	m.clearedFields[sysrolemenu.FieldActionID] = struct{}{}
}

// ActionIDCleared returns if the "action_id" field was cleared in this mutation.
func (m *SysRoleMenuMutation) ActionIDCleared() bool {
	_, ok := m.clearedFields[sysrolemenu.FieldActionID]
	return ok
}

// ResetActionID resets all changes to the "action_id" field.
func (m *SysRoleMenuMutation) ResetActionID() {
	m.action_id = nil
	delete(m.clearedFields, sysrolemenu.FieldActionID)
}

// Where appends a list predicates to the SysRoleMenuMutation builder.
func (m *SysRoleMenuMutation) Where(ps ...predicate.SysRoleMenu) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysRoleMenuMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysRoleMenu).
func (m *SysRoleMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleMenuMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.is_del != nil {
		fields = append(fields, sysrolemenu.FieldIsDel)
	}
	if m.created_at != nil {
		fields = append(fields, sysrolemenu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysrolemenu.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysrolemenu.FieldDeletedAt)
	}
	if m.role_id != nil {
		fields = append(fields, sysrolemenu.FieldRoleID)
	}
	if m.menu_id != nil {
		fields = append(fields, sysrolemenu.FieldMenuID)
	}
	if m.action_id != nil {
		fields = append(fields, sysrolemenu.FieldActionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrolemenu.FieldIsDel:
		return m.IsDel()
	case sysrolemenu.FieldCreatedAt:
		return m.CreatedAt()
	case sysrolemenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysrolemenu.FieldDeletedAt:
		return m.DeletedAt()
	case sysrolemenu.FieldRoleID:
		return m.RoleID()
	case sysrolemenu.FieldMenuID:
		return m.MenuID()
	case sysrolemenu.FieldActionID:
		return m.ActionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrolemenu.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysrolemenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysrolemenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysrolemenu.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysrolemenu.FieldRoleID:
		return m.OldRoleID(ctx)
	case sysrolemenu.FieldMenuID:
		return m.OldMenuID(ctx)
	case sysrolemenu.FieldActionID:
		return m.OldActionID(ctx)
	}
	return nil, fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrolemenu.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysrolemenu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysrolemenu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysrolemenu.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysrolemenu.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case sysrolemenu.FieldMenuID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuID(v)
		return nil
	case sysrolemenu.FieldActionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionID(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleMenuMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleMenuMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysRoleMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysrolemenu.FieldDeletedAt) {
		fields = append(fields, sysrolemenu.FieldDeletedAt)
	}
	if m.FieldCleared(sysrolemenu.FieldActionID) {
		fields = append(fields, sysrolemenu.FieldActionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleMenuMutation) ClearField(name string) error {
	switch name {
	case sysrolemenu.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysrolemenu.FieldActionID:
		m.ClearActionID()
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleMenuMutation) ResetField(name string) error {
	switch name {
	case sysrolemenu.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysrolemenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysrolemenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysrolemenu.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysrolemenu.FieldRoleID:
		m.ResetRoleID()
		return nil
	case sysrolemenu.FieldMenuID:
		m.ResetMenuID()
		return nil
	case sysrolemenu.FieldActionID:
		m.ResetActionID()
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRoleMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRoleMenu edge %s", name)
}

// SysUserMutation represents an operation that mutates the SysUser nodes in the graph.
type SysUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	user_name     *string
	real_name     *string
	first_name    *string
	last_name     *string
	password      *string
	email         *string
	mobile        *string
	salt          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysUser, error)
	predicates    []predicate.SysUser
}

var _ ent.Mutation = (*SysUserMutation)(nil)

// sysuserOption allows management of the mutation configuration using functional options.
type sysuserOption func(*SysUserMutation)

// newSysUserMutation creates new mutation for the SysUser entity.
func newSysUserMutation(c config, op Op, opts ...sysuserOption) *SysUserMutation {
	m := &SysUserMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysUserID sets the ID field of the mutation.
func withSysUserID(id string) sysuserOption {
	return func(m *SysUserMutation) {
		var (
			err   error
			once  sync.Once
			value *SysUser
		)
		m.oldValue = func(ctx context.Context) (*SysUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysUser sets the old SysUser of the mutation.
func withSysUser(node *SysUser) sysuserOption {
	return func(m *SysUserMutation) {
		m.oldValue = func(context.Context) (*SysUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysUser entities.
func (m *SysUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysUserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysUserMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysUserMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysUserMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *SysUserMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysUserMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysUserMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysUserMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysUserMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysUserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysUserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysUserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysuser.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysUserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysUserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysUserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetUserName sets the "user_name" field.
func (m *SysUserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *SysUserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *SysUserMutation) ResetUserName() {
	m.user_name = nil
}

// SetRealName sets the "real_name" field.
func (m *SysUserMutation) SetRealName(s string) {
	m.real_name = &s
}

// RealName returns the value of the "real_name" field in the mutation.
func (m *SysUserMutation) RealName() (r string, exists bool) {
	v := m.real_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRealName returns the old "real_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldRealName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRealName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRealName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRealName: %w", err)
	}
	return oldValue.RealName, nil
}

// ClearRealName clears the value of the "real_name" field.
func (m *SysUserMutation) ClearRealName() {
	m.real_name = nil
	m.clearedFields[sysuser.FieldRealName] = struct{}{}
}

// RealNameCleared returns if the "real_name" field was cleared in this mutation.
func (m *SysUserMutation) RealNameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldRealName]
	return ok
}

// ResetRealName resets all changes to the "real_name" field.
func (m *SysUserMutation) ResetRealName() {
	m.real_name = nil
	delete(m.clearedFields, sysuser.FieldRealName)
}

// SetFirstName sets the "first_name" field.
func (m *SysUserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *SysUserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldFirstName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *SysUserMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[sysuser.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *SysUserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *SysUserMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, sysuser.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *SysUserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *SysUserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldLastName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *SysUserMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[sysuser.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *SysUserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *SysUserMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, sysuser.FieldLastName)
}

// SetPassword sets the "password" field.
func (m *SysUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *SysUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *SysUserMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *SysUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SysUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *SysUserMutation) ResetEmail() {
	m.email = nil
}

// SetMobile sets the "mobile" field.
func (m *SysUserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *SysUserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *SysUserMutation) ResetMobile() {
	m.mobile = nil
}

// SetSalt sets the "salt" field.
func (m *SysUserMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *SysUserMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *SysUserMutation) ResetSalt() {
	m.salt = nil
}

// Where appends a list predicates to the SysUserMutation builder.
func (m *SysUserMutation) Where(ps ...predicate.SysUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysUser).
func (m *SysUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.is_del != nil {
		fields = append(fields, sysuser.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, sysuser.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysuser.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysuser.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysuser.FieldIsActive)
	}
	if m.user_name != nil {
		fields = append(fields, sysuser.FieldUserName)
	}
	if m.real_name != nil {
		fields = append(fields, sysuser.FieldRealName)
	}
	if m.first_name != nil {
		fields = append(fields, sysuser.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, sysuser.FieldLastName)
	}
	if m.password != nil {
		fields = append(fields, sysuser.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, sysuser.FieldEmail)
	}
	if m.mobile != nil {
		fields = append(fields, sysuser.FieldMobile)
	}
	if m.salt != nil {
		fields = append(fields, sysuser.FieldSalt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldIsDel:
		return m.IsDel()
	case sysuser.FieldSort:
		return m.Sort()
	case sysuser.FieldCreatedAt:
		return m.CreatedAt()
	case sysuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysuser.FieldDeletedAt:
		return m.DeletedAt()
	case sysuser.FieldIsActive:
		return m.IsActive()
	case sysuser.FieldUserName:
		return m.UserName()
	case sysuser.FieldRealName:
		return m.RealName()
	case sysuser.FieldFirstName:
		return m.FirstName()
	case sysuser.FieldLastName:
		return m.LastName()
	case sysuser.FieldPassword:
		return m.Password()
	case sysuser.FieldEmail:
		return m.Email()
	case sysuser.FieldMobile:
		return m.Mobile()
	case sysuser.FieldSalt:
		return m.Salt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysuser.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysuser.FieldSort:
		return m.OldSort(ctx)
	case sysuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysuser.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysuser.FieldUserName:
		return m.OldUserName(ctx)
	case sysuser.FieldRealName:
		return m.OldRealName(ctx)
	case sysuser.FieldFirstName:
		return m.OldFirstName(ctx)
	case sysuser.FieldLastName:
		return m.OldLastName(ctx)
	case sysuser.FieldPassword:
		return m.OldPassword(ctx)
	case sysuser.FieldEmail:
		return m.OldEmail(ctx)
	case sysuser.FieldMobile:
		return m.OldMobile(ctx)
	case sysuser.FieldSalt:
		return m.OldSalt(ctx)
	}
	return nil, fmt.Errorf("unknown SysUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysuser.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysuser.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysuser.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysuser.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case sysuser.FieldRealName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRealName(v)
		return nil
	case sysuser.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case sysuser.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case sysuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case sysuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case sysuser.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case sysuser.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysuser.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysuser.FieldDeletedAt) {
		fields = append(fields, sysuser.FieldDeletedAt)
	}
	if m.FieldCleared(sysuser.FieldRealName) {
		fields = append(fields, sysuser.FieldRealName)
	}
	if m.FieldCleared(sysuser.FieldFirstName) {
		fields = append(fields, sysuser.FieldFirstName)
	}
	if m.FieldCleared(sysuser.FieldLastName) {
		fields = append(fields, sysuser.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserMutation) ClearField(name string) error {
	switch name {
	case sysuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysuser.FieldRealName:
		m.ClearRealName()
		return nil
	case sysuser.FieldFirstName:
		m.ClearFirstName()
		return nil
	case sysuser.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown SysUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserMutation) ResetField(name string) error {
	switch name {
	case sysuser.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysuser.FieldSort:
		m.ResetSort()
		return nil
	case sysuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysuser.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysuser.FieldUserName:
		m.ResetUserName()
		return nil
	case sysuser.FieldRealName:
		m.ResetRealName()
		return nil
	case sysuser.FieldFirstName:
		m.ResetFirstName()
		return nil
	case sysuser.FieldLastName:
		m.ResetLastName()
		return nil
	case sysuser.FieldPassword:
		m.ResetPassword()
		return nil
	case sysuser.FieldEmail:
		m.ResetEmail()
		return nil
	case sysuser.FieldMobile:
		m.ResetMobile()
		return nil
	case sysuser.FieldSalt:
		m.ResetSalt()
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysUser edge %s", name)
}

// SysUserRoleMutation represents an operation that mutates the SysUserRole nodes in the graph.
type SysUserRoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	user_id       *string
	role_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysUserRole, error)
	predicates    []predicate.SysUserRole
}

var _ ent.Mutation = (*SysUserRoleMutation)(nil)

// sysuserroleOption allows management of the mutation configuration using functional options.
type sysuserroleOption func(*SysUserRoleMutation)

// newSysUserRoleMutation creates new mutation for the SysUserRole entity.
func newSysUserRoleMutation(c config, op Op, opts ...sysuserroleOption) *SysUserRoleMutation {
	m := &SysUserRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUserRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysUserRoleID sets the ID field of the mutation.
func withSysUserRoleID(id string) sysuserroleOption {
	return func(m *SysUserRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *SysUserRole
		)
		m.oldValue = func(ctx context.Context) (*SysUserRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysUserRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysUserRole sets the old SysUserRole of the mutation.
func withSysUserRole(node *SysUserRole) sysuserroleOption {
	return func(m *SysUserRoleMutation) {
		m.oldValue = func(context.Context) (*SysUserRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysUserRole entities.
func (m *SysUserRoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysUserRoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysUserRoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysUserRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysUserRoleMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysUserRoleMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysUserRoleMutation) ResetIsDel() {
	m.is_del = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysUserRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysUserRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysUserRoleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysUserRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysUserRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysUserRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysUserRoleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysUserRoleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysUserRoleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysuserrole.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysUserRoleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysuserrole.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysUserRoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysuserrole.FieldDeletedAt)
}

// SetUserID sets the "user_id" field.
func (m *SysUserRoleMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SysUserRoleMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SysUserRoleMutation) ResetUserID() {
	m.user_id = nil
}

// SetRoleID sets the "role_id" field.
func (m *SysUserRoleMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *SysUserRoleMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *SysUserRoleMutation) ResetRoleID() {
	m.role_id = nil
}

// Where appends a list predicates to the SysUserRoleMutation builder.
func (m *SysUserRoleMutation) Where(ps ...predicate.SysUserRole) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SysUserRoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SysUserRole).
func (m *SysUserRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserRoleMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.is_del != nil {
		fields = append(fields, sysuserrole.FieldIsDel)
	}
	if m.created_at != nil {
		fields = append(fields, sysuserrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysuserrole.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysuserrole.FieldDeletedAt)
	}
	if m.user_id != nil {
		fields = append(fields, sysuserrole.FieldUserID)
	}
	if m.role_id != nil {
		fields = append(fields, sysuserrole.FieldRoleID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuserrole.FieldIsDel:
		return m.IsDel()
	case sysuserrole.FieldCreatedAt:
		return m.CreatedAt()
	case sysuserrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysuserrole.FieldDeletedAt:
		return m.DeletedAt()
	case sysuserrole.FieldUserID:
		return m.UserID()
	case sysuserrole.FieldRoleID:
		return m.RoleID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysuserrole.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysuserrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysuserrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysuserrole.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysuserrole.FieldUserID:
		return m.OldUserID(ctx)
	case sysuserrole.FieldRoleID:
		return m.OldRoleID(ctx)
	}
	return nil, fmt.Errorf("unknown SysUserRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuserrole.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysuserrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysuserrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysuserrole.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysuserrole.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sysuserrole.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown SysUserRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysUserRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysuserrole.FieldDeletedAt) {
		fields = append(fields, sysuserrole.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserRoleMutation) ClearField(name string) error {
	switch name {
	case sysuserrole.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysUserRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserRoleMutation) ResetField(name string) error {
	switch name {
	case sysuserrole.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysuserrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysuserrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysuserrole.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysuserrole.FieldUserID:
		m.ResetUserID()
		return nil
	case sysuserrole.FieldRoleID:
		m.ResetRoleID()
		return nil
	}
	return fmt.Errorf("unknown SysUserRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysUserRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysUserRole edge %s", name)
}

// XxxDemoMutation represents an operation that mutates the XxxDemo nodes in the graph.
type XxxDemoMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	code          *string
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*XxxDemo, error)
	predicates    []predicate.XxxDemo
}

var _ ent.Mutation = (*XxxDemoMutation)(nil)

// xxxdemoOption allows management of the mutation configuration using functional options.
type xxxdemoOption func(*XxxDemoMutation)

// newXxxDemoMutation creates new mutation for the XxxDemo entity.
func newXxxDemoMutation(c config, op Op, opts ...xxxdemoOption) *XxxDemoMutation {
	m := &XxxDemoMutation{
		config:        c,
		op:            op,
		typ:           TypeXxxDemo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withXxxDemoID sets the ID field of the mutation.
func withXxxDemoID(id string) xxxdemoOption {
	return func(m *XxxDemoMutation) {
		var (
			err   error
			once  sync.Once
			value *XxxDemo
		)
		m.oldValue = func(ctx context.Context) (*XxxDemo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().XxxDemo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withXxxDemo sets the old XxxDemo of the mutation.
func withXxxDemo(node *XxxDemo) xxxdemoOption {
	return func(m *XxxDemoMutation) {
		m.oldValue = func(context.Context) (*XxxDemo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m XxxDemoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m XxxDemoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of XxxDemo entities.
func (m *XxxDemoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *XxxDemoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *XxxDemoMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().XxxDemo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *XxxDemoMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *XxxDemoMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *XxxDemoMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *XxxDemoMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *XxxDemoMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *XxxDemoMutation) ResetMemo() {
	m.memo = nil
}

// SetSort sets the "sort" field.
func (m *XxxDemoMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *XxxDemoMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *XxxDemoMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *XxxDemoMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *XxxDemoMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *XxxDemoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *XxxDemoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *XxxDemoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *XxxDemoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *XxxDemoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *XxxDemoMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *XxxDemoMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *XxxDemoMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *XxxDemoMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[xxxdemo.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *XxxDemoMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[xxxdemo.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *XxxDemoMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, xxxdemo.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *XxxDemoMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *XxxDemoMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *XxxDemoMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCode sets the "code" field.
func (m *XxxDemoMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *XxxDemoMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *XxxDemoMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *XxxDemoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *XxxDemoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *XxxDemoMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the XxxDemoMutation builder.
func (m *XxxDemoMutation) Where(ps ...predicate.XxxDemo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *XxxDemoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (XxxDemo).
func (m *XxxDemoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *XxxDemoMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.is_del != nil {
		fields = append(fields, xxxdemo.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, xxxdemo.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, xxxdemo.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, xxxdemo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, xxxdemo.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, xxxdemo.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, xxxdemo.FieldIsActive)
	}
	if m.code != nil {
		fields = append(fields, xxxdemo.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, xxxdemo.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *XxxDemoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case xxxdemo.FieldIsDel:
		return m.IsDel()
	case xxxdemo.FieldMemo:
		return m.Memo()
	case xxxdemo.FieldSort:
		return m.Sort()
	case xxxdemo.FieldCreatedAt:
		return m.CreatedAt()
	case xxxdemo.FieldUpdatedAt:
		return m.UpdatedAt()
	case xxxdemo.FieldDeletedAt:
		return m.DeletedAt()
	case xxxdemo.FieldIsActive:
		return m.IsActive()
	case xxxdemo.FieldCode:
		return m.Code()
	case xxxdemo.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *XxxDemoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case xxxdemo.FieldIsDel:
		return m.OldIsDel(ctx)
	case xxxdemo.FieldMemo:
		return m.OldMemo(ctx)
	case xxxdemo.FieldSort:
		return m.OldSort(ctx)
	case xxxdemo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case xxxdemo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case xxxdemo.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case xxxdemo.FieldIsActive:
		return m.OldIsActive(ctx)
	case xxxdemo.FieldCode:
		return m.OldCode(ctx)
	case xxxdemo.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown XxxDemo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XxxDemoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case xxxdemo.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case xxxdemo.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case xxxdemo.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case xxxdemo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case xxxdemo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case xxxdemo.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case xxxdemo.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case xxxdemo.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case xxxdemo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown XxxDemo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *XxxDemoMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, xxxdemo.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *XxxDemoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case xxxdemo.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XxxDemoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case xxxdemo.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown XxxDemo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *XxxDemoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(xxxdemo.FieldDeletedAt) {
		fields = append(fields, xxxdemo.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *XxxDemoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *XxxDemoMutation) ClearField(name string) error {
	switch name {
	case xxxdemo.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown XxxDemo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *XxxDemoMutation) ResetField(name string) error {
	switch name {
	case xxxdemo.FieldIsDel:
		m.ResetIsDel()
		return nil
	case xxxdemo.FieldMemo:
		m.ResetMemo()
		return nil
	case xxxdemo.FieldSort:
		m.ResetSort()
		return nil
	case xxxdemo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case xxxdemo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case xxxdemo.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case xxxdemo.FieldIsActive:
		m.ResetIsActive()
		return nil
	case xxxdemo.FieldCode:
		m.ResetCode()
		return nil
	case xxxdemo.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown XxxDemo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *XxxDemoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *XxxDemoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *XxxDemoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *XxxDemoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *XxxDemoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *XxxDemoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *XxxDemoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown XxxDemo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *XxxDemoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown XxxDemo edge %s", name)
}
