// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/orgdept"
	"github.com/heromicro/omgind/internal/gen/ent/orgorgan"
	"github.com/heromicro/omgind/internal/gen/ent/orgposition"
	"github.com/heromicro/omgind/internal/gen/ent/orgstaff"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysaddress"
	"github.com/heromicro/omgind/internal/gen/ent/sysdict"
	"github.com/heromicro/omgind/internal/gen/ent/sysdictitem"
	"github.com/heromicro/omgind/internal/gen/ent/sysdistrict"
	"github.com/heromicro/omgind/internal/gen/ent/sysjwtblock"
	"github.com/heromicro/omgind/internal/gen/ent/syslogging"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenu"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenuaction"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenuactionresource"
	"github.com/heromicro/omgind/internal/gen/ent/sysrole"
	"github.com/heromicro/omgind/internal/gen/ent/sysrolemenu"
	"github.com/heromicro/omgind/internal/gen/ent/sysuser"
	"github.com/heromicro/omgind/internal/gen/ent/sysuserrole"
	"github.com/heromicro/omgind/internal/gen/ent/xxxdemo"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrgDept               = "OrgDept"
	TypeOrgOrgan              = "OrgOrgan"
	TypeOrgPosition           = "OrgPosition"
	TypeOrgStaff              = "OrgStaff"
	TypeSysAddress            = "SysAddress"
	TypeSysDict               = "SysDict"
	TypeSysDictItem           = "SysDictItem"
	TypeSysDistrict           = "SysDistrict"
	TypeSysJwtBlock           = "SysJwtBlock"
	TypeSysLogging            = "SysLogging"
	TypeSysMenu               = "SysMenu"
	TypeSysMenuAction         = "SysMenuAction"
	TypeSysMenuActionResource = "SysMenuActionResource"
	TypeSysRole               = "SysRole"
	TypeSysRoleMenu           = "SysRoleMenu"
	TypeSysUser               = "SysUser"
	TypeSysUserRole           = "SysUserRole"
	TypeXxxDemo               = "XxxDemo"
)

// OrgDeptMutation represents an operation that mutates the OrgDept nodes in the graph.
type OrgDeptMutation struct {
	config
	op              Op
	typ             string
	id              *string
	is_del          *bool
	sort            *int32
	addsort         *int32
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	is_active       *bool
	memo            *string
	tree_id         *int64
	addtree_id      *int64
	tree_level      *int32
	addtree_level   *int32
	tree_left       *int64
	addtree_left    *int64
	tree_right      *int64
	addtree_right   *int64
	is_leaf         *bool
	tree_path       *string
	name            *string
	code            *string
	merge_name      *string
	is_real         *bool
	is_show         *bool
	creator         *string
	clearedFields   map[string]struct{}
	parent          *string
	clearedparent   bool
	children        map[string]struct{}
	removedchildren map[string]struct{}
	clearedchildren bool
	organ           *string
	clearedorgan    bool
	staffs          map[string]struct{}
	removedstaffs   map[string]struct{}
	clearedstaffs   bool
	done            bool
	oldValue        func(context.Context) (*OrgDept, error)
	predicates      []predicate.OrgDept
}

var _ ent.Mutation = (*OrgDeptMutation)(nil)

// orgdeptOption allows management of the mutation configuration using functional options.
type orgdeptOption func(*OrgDeptMutation)

// newOrgDeptMutation creates new mutation for the OrgDept entity.
func newOrgDeptMutation(c config, op Op, opts ...orgdeptOption) *OrgDeptMutation {
	m := &OrgDeptMutation{
		config:        c,
		op:            op,
		typ:           TypeOrgDept,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrgDeptID sets the ID field of the mutation.
func withOrgDeptID(id string) orgdeptOption {
	return func(m *OrgDeptMutation) {
		var (
			err   error
			once  sync.Once
			value *OrgDept
		)
		m.oldValue = func(ctx context.Context) (*OrgDept, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrgDept.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrgDept sets the old OrgDept of the mutation.
func withOrgDept(node *OrgDept) orgdeptOption {
	return func(m *OrgDeptMutation) {
		m.oldValue = func(context.Context) (*OrgDept, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrgDeptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrgDeptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrgDept entities.
func (m *OrgDeptMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrgDeptMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrgDeptMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrgDept.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *OrgDeptMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *OrgDeptMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *OrgDeptMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *OrgDeptMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *OrgDeptMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *OrgDeptMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *OrgDeptMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *OrgDeptMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OrgDeptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrgDeptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OrgDeptMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[orgdept.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OrgDeptMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrgDeptMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, orgdept.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrgDeptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrgDeptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OrgDeptMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[orgdept.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OrgDeptMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrgDeptMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, orgdept.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrgDeptMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrgDeptMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrgDeptMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[orgdept.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrgDeptMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrgDeptMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, orgdept.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *OrgDeptMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *OrgDeptMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *OrgDeptMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMemo sets the "memo" field.
func (m *OrgDeptMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *OrgDeptMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *OrgDeptMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[orgdept.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *OrgDeptMutation) MemoCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *OrgDeptMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, orgdept.FieldMemo)
}

// SetTreeID sets the "tree_id" field.
func (m *OrgDeptMutation) SetTreeID(i int64) {
	m.tree_id = &i
	m.addtree_id = nil
}

// TreeID returns the value of the "tree_id" field in the mutation.
func (m *OrgDeptMutation) TreeID() (r int64, exists bool) {
	v := m.tree_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeID returns the old "tree_id" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldTreeID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeID: %w", err)
	}
	return oldValue.TreeID, nil
}

// AddTreeID adds i to the "tree_id" field.
func (m *OrgDeptMutation) AddTreeID(i int64) {
	if m.addtree_id != nil {
		*m.addtree_id += i
	} else {
		m.addtree_id = &i
	}
}

// AddedTreeID returns the value that was added to the "tree_id" field in this mutation.
func (m *OrgDeptMutation) AddedTreeID() (r int64, exists bool) {
	v := m.addtree_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeID clears the value of the "tree_id" field.
func (m *OrgDeptMutation) ClearTreeID() {
	m.tree_id = nil
	m.addtree_id = nil
	m.clearedFields[orgdept.FieldTreeID] = struct{}{}
}

// TreeIDCleared returns if the "tree_id" field was cleared in this mutation.
func (m *OrgDeptMutation) TreeIDCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldTreeID]
	return ok
}

// ResetTreeID resets all changes to the "tree_id" field.
func (m *OrgDeptMutation) ResetTreeID() {
	m.tree_id = nil
	m.addtree_id = nil
	delete(m.clearedFields, orgdept.FieldTreeID)
}

// SetTreeLevel sets the "tree_level" field.
func (m *OrgDeptMutation) SetTreeLevel(i int32) {
	m.tree_level = &i
	m.addtree_level = nil
}

// TreeLevel returns the value of the "tree_level" field in the mutation.
func (m *OrgDeptMutation) TreeLevel() (r int32, exists bool) {
	v := m.tree_level
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeLevel returns the old "tree_level" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldTreeLevel(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeLevel: %w", err)
	}
	return oldValue.TreeLevel, nil
}

// AddTreeLevel adds i to the "tree_level" field.
func (m *OrgDeptMutation) AddTreeLevel(i int32) {
	if m.addtree_level != nil {
		*m.addtree_level += i
	} else {
		m.addtree_level = &i
	}
}

// AddedTreeLevel returns the value that was added to the "tree_level" field in this mutation.
func (m *OrgDeptMutation) AddedTreeLevel() (r int32, exists bool) {
	v := m.addtree_level
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (m *OrgDeptMutation) ClearTreeLevel() {
	m.tree_level = nil
	m.addtree_level = nil
	m.clearedFields[orgdept.FieldTreeLevel] = struct{}{}
}

// TreeLevelCleared returns if the "tree_level" field was cleared in this mutation.
func (m *OrgDeptMutation) TreeLevelCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldTreeLevel]
	return ok
}

// ResetTreeLevel resets all changes to the "tree_level" field.
func (m *OrgDeptMutation) ResetTreeLevel() {
	m.tree_level = nil
	m.addtree_level = nil
	delete(m.clearedFields, orgdept.FieldTreeLevel)
}

// SetTreeLeft sets the "tree_left" field.
func (m *OrgDeptMutation) SetTreeLeft(i int64) {
	m.tree_left = &i
	m.addtree_left = nil
}

// TreeLeft returns the value of the "tree_left" field in the mutation.
func (m *OrgDeptMutation) TreeLeft() (r int64, exists bool) {
	v := m.tree_left
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeLeft returns the old "tree_left" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldTreeLeft(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeLeft is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeLeft requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeLeft: %w", err)
	}
	return oldValue.TreeLeft, nil
}

// AddTreeLeft adds i to the "tree_left" field.
func (m *OrgDeptMutation) AddTreeLeft(i int64) {
	if m.addtree_left != nil {
		*m.addtree_left += i
	} else {
		m.addtree_left = &i
	}
}

// AddedTreeLeft returns the value that was added to the "tree_left" field in this mutation.
func (m *OrgDeptMutation) AddedTreeLeft() (r int64, exists bool) {
	v := m.addtree_left
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (m *OrgDeptMutation) ClearTreeLeft() {
	m.tree_left = nil
	m.addtree_left = nil
	m.clearedFields[orgdept.FieldTreeLeft] = struct{}{}
}

// TreeLeftCleared returns if the "tree_left" field was cleared in this mutation.
func (m *OrgDeptMutation) TreeLeftCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldTreeLeft]
	return ok
}

// ResetTreeLeft resets all changes to the "tree_left" field.
func (m *OrgDeptMutation) ResetTreeLeft() {
	m.tree_left = nil
	m.addtree_left = nil
	delete(m.clearedFields, orgdept.FieldTreeLeft)
}

// SetTreeRight sets the "tree_right" field.
func (m *OrgDeptMutation) SetTreeRight(i int64) {
	m.tree_right = &i
	m.addtree_right = nil
}

// TreeRight returns the value of the "tree_right" field in the mutation.
func (m *OrgDeptMutation) TreeRight() (r int64, exists bool) {
	v := m.tree_right
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeRight returns the old "tree_right" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldTreeRight(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeRight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeRight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeRight: %w", err)
	}
	return oldValue.TreeRight, nil
}

// AddTreeRight adds i to the "tree_right" field.
func (m *OrgDeptMutation) AddTreeRight(i int64) {
	if m.addtree_right != nil {
		*m.addtree_right += i
	} else {
		m.addtree_right = &i
	}
}

// AddedTreeRight returns the value that was added to the "tree_right" field in this mutation.
func (m *OrgDeptMutation) AddedTreeRight() (r int64, exists bool) {
	v := m.addtree_right
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeRight clears the value of the "tree_right" field.
func (m *OrgDeptMutation) ClearTreeRight() {
	m.tree_right = nil
	m.addtree_right = nil
	m.clearedFields[orgdept.FieldTreeRight] = struct{}{}
}

// TreeRightCleared returns if the "tree_right" field was cleared in this mutation.
func (m *OrgDeptMutation) TreeRightCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldTreeRight]
	return ok
}

// ResetTreeRight resets all changes to the "tree_right" field.
func (m *OrgDeptMutation) ResetTreeRight() {
	m.tree_right = nil
	m.addtree_right = nil
	delete(m.clearedFields, orgdept.FieldTreeRight)
}

// SetIsLeaf sets the "is_leaf" field.
func (m *OrgDeptMutation) SetIsLeaf(b bool) {
	m.is_leaf = &b
}

// IsLeaf returns the value of the "is_leaf" field in the mutation.
func (m *OrgDeptMutation) IsLeaf() (r bool, exists bool) {
	v := m.is_leaf
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeaf returns the old "is_leaf" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldIsLeaf(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLeaf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLeaf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeaf: %w", err)
	}
	return oldValue.IsLeaf, nil
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (m *OrgDeptMutation) ClearIsLeaf() {
	m.is_leaf = nil
	m.clearedFields[orgdept.FieldIsLeaf] = struct{}{}
}

// IsLeafCleared returns if the "is_leaf" field was cleared in this mutation.
func (m *OrgDeptMutation) IsLeafCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldIsLeaf]
	return ok
}

// ResetIsLeaf resets all changes to the "is_leaf" field.
func (m *OrgDeptMutation) ResetIsLeaf() {
	m.is_leaf = nil
	delete(m.clearedFields, orgdept.FieldIsLeaf)
}

// SetTreePath sets the "tree_path" field.
func (m *OrgDeptMutation) SetTreePath(s string) {
	m.tree_path = &s
}

// TreePath returns the value of the "tree_path" field in the mutation.
func (m *OrgDeptMutation) TreePath() (r string, exists bool) {
	v := m.tree_path
	if v == nil {
		return
	}
	return *v, true
}

// OldTreePath returns the old "tree_path" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldTreePath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreePath: %w", err)
	}
	return oldValue.TreePath, nil
}

// ClearTreePath clears the value of the "tree_path" field.
func (m *OrgDeptMutation) ClearTreePath() {
	m.tree_path = nil
	m.clearedFields[orgdept.FieldTreePath] = struct{}{}
}

// TreePathCleared returns if the "tree_path" field was cleared in this mutation.
func (m *OrgDeptMutation) TreePathCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldTreePath]
	return ok
}

// ResetTreePath resets all changes to the "tree_path" field.
func (m *OrgDeptMutation) ResetTreePath() {
	m.tree_path = nil
	delete(m.clearedFields, orgdept.FieldTreePath)
}

// SetName sets the "name" field.
func (m *OrgDeptMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrgDeptMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *OrgDeptMutation) ClearName() {
	m.name = nil
	m.clearedFields[orgdept.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *OrgDeptMutation) NameCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *OrgDeptMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, orgdept.FieldName)
}

// SetCode sets the "code" field.
func (m *OrgDeptMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *OrgDeptMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *OrgDeptMutation) ClearCode() {
	m.code = nil
	m.clearedFields[orgdept.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *OrgDeptMutation) CodeCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *OrgDeptMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, orgdept.FieldCode)
}

// SetMergeName sets the "merge_name" field.
func (m *OrgDeptMutation) SetMergeName(s string) {
	m.merge_name = &s
}

// MergeName returns the value of the "merge_name" field in the mutation.
func (m *OrgDeptMutation) MergeName() (r string, exists bool) {
	v := m.merge_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMergeName returns the old "merge_name" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldMergeName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMergeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMergeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMergeName: %w", err)
	}
	return oldValue.MergeName, nil
}

// ClearMergeName clears the value of the "merge_name" field.
func (m *OrgDeptMutation) ClearMergeName() {
	m.merge_name = nil
	m.clearedFields[orgdept.FieldMergeName] = struct{}{}
}

// MergeNameCleared returns if the "merge_name" field was cleared in this mutation.
func (m *OrgDeptMutation) MergeNameCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldMergeName]
	return ok
}

// ResetMergeName resets all changes to the "merge_name" field.
func (m *OrgDeptMutation) ResetMergeName() {
	m.merge_name = nil
	delete(m.clearedFields, orgdept.FieldMergeName)
}

// SetOrgID sets the "org_id" field.
func (m *OrgDeptMutation) SetOrgID(s string) {
	m.organ = &s
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *OrgDeptMutation) OrgID() (r string, exists bool) {
	v := m.organ
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldOrgID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ClearOrgID clears the value of the "org_id" field.
func (m *OrgDeptMutation) ClearOrgID() {
	m.organ = nil
	m.clearedFields[orgdept.FieldOrgID] = struct{}{}
}

// OrgIDCleared returns if the "org_id" field was cleared in this mutation.
func (m *OrgDeptMutation) OrgIDCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldOrgID]
	return ok
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *OrgDeptMutation) ResetOrgID() {
	m.organ = nil
	delete(m.clearedFields, orgdept.FieldOrgID)
}

// SetParentID sets the "parent_id" field.
func (m *OrgDeptMutation) SetParentID(s string) {
	m.parent = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *OrgDeptMutation) ParentID() (r string, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldParentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *OrgDeptMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[orgdept.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *OrgDeptMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *OrgDeptMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, orgdept.FieldParentID)
}

// SetIsReal sets the "is_real" field.
func (m *OrgDeptMutation) SetIsReal(b bool) {
	m.is_real = &b
}

// IsReal returns the value of the "is_real" field in the mutation.
func (m *OrgDeptMutation) IsReal() (r bool, exists bool) {
	v := m.is_real
	if v == nil {
		return
	}
	return *v, true
}

// OldIsReal returns the old "is_real" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldIsReal(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsReal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsReal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsReal: %w", err)
	}
	return oldValue.IsReal, nil
}

// ClearIsReal clears the value of the "is_real" field.
func (m *OrgDeptMutation) ClearIsReal() {
	m.is_real = nil
	m.clearedFields[orgdept.FieldIsReal] = struct{}{}
}

// IsRealCleared returns if the "is_real" field was cleared in this mutation.
func (m *OrgDeptMutation) IsRealCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldIsReal]
	return ok
}

// ResetIsReal resets all changes to the "is_real" field.
func (m *OrgDeptMutation) ResetIsReal() {
	m.is_real = nil
	delete(m.clearedFields, orgdept.FieldIsReal)
}

// SetIsShow sets the "is_show" field.
func (m *OrgDeptMutation) SetIsShow(b bool) {
	m.is_show = &b
}

// IsShow returns the value of the "is_show" field in the mutation.
func (m *OrgDeptMutation) IsShow() (r bool, exists bool) {
	v := m.is_show
	if v == nil {
		return
	}
	return *v, true
}

// OldIsShow returns the old "is_show" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldIsShow(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsShow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsShow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsShow: %w", err)
	}
	return oldValue.IsShow, nil
}

// ClearIsShow clears the value of the "is_show" field.
func (m *OrgDeptMutation) ClearIsShow() {
	m.is_show = nil
	m.clearedFields[orgdept.FieldIsShow] = struct{}{}
}

// IsShowCleared returns if the "is_show" field was cleared in this mutation.
func (m *OrgDeptMutation) IsShowCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldIsShow]
	return ok
}

// ResetIsShow resets all changes to the "is_show" field.
func (m *OrgDeptMutation) ResetIsShow() {
	m.is_show = nil
	delete(m.clearedFields, orgdept.FieldIsShow)
}

// SetCreator sets the "creator" field.
func (m *OrgDeptMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *OrgDeptMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the OrgDept entity.
// If the OrgDept object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgDeptMutation) OldCreator(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *OrgDeptMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[orgdept.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *OrgDeptMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[orgdept.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *OrgDeptMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, orgdept.FieldCreator)
}

// ClearParent clears the "parent" edge to the OrgDept entity.
func (m *OrgDeptMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the OrgDept entity was cleared.
func (m *OrgDeptMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OrgDeptMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OrgDeptMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the OrgDept entity by ids.
func (m *OrgDeptMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the OrgDept entity.
func (m *OrgDeptMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the OrgDept entity was cleared.
func (m *OrgDeptMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the OrgDept entity by IDs.
func (m *OrgDeptMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the OrgDept entity.
func (m *OrgDeptMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OrgDeptMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OrgDeptMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by id.
func (m *OrgDeptMutation) SetOrganID(id string) {
	m.organ = &id
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (m *OrgDeptMutation) ClearOrgan() {
	m.clearedorgan = true
}

// OrganCleared reports if the "organ" edge to the OrgOrgan entity was cleared.
func (m *OrgDeptMutation) OrganCleared() bool {
	return m.OrgIDCleared() || m.clearedorgan
}

// OrganID returns the "organ" edge ID in the mutation.
func (m *OrgDeptMutation) OrganID() (id string, exists bool) {
	if m.organ != nil {
		return *m.organ, true
	}
	return
}

// OrganIDs returns the "organ" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganID instead. It exists only for internal usage by the builders.
func (m *OrgDeptMutation) OrganIDs() (ids []string) {
	if id := m.organ; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrgan resets all changes to the "organ" edge.
func (m *OrgDeptMutation) ResetOrgan() {
	m.organ = nil
	m.clearedorgan = false
}

// AddStaffIDs adds the "staffs" edge to the OrgStaff entity by ids.
func (m *OrgDeptMutation) AddStaffIDs(ids ...string) {
	if m.staffs == nil {
		m.staffs = make(map[string]struct{})
	}
	for i := range ids {
		m.staffs[ids[i]] = struct{}{}
	}
}

// ClearStaffs clears the "staffs" edge to the OrgStaff entity.
func (m *OrgDeptMutation) ClearStaffs() {
	m.clearedstaffs = true
}

// StaffsCleared reports if the "staffs" edge to the OrgStaff entity was cleared.
func (m *OrgDeptMutation) StaffsCleared() bool {
	return m.clearedstaffs
}

// RemoveStaffIDs removes the "staffs" edge to the OrgStaff entity by IDs.
func (m *OrgDeptMutation) RemoveStaffIDs(ids ...string) {
	if m.removedstaffs == nil {
		m.removedstaffs = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.staffs, ids[i])
		m.removedstaffs[ids[i]] = struct{}{}
	}
}

// RemovedStaffs returns the removed IDs of the "staffs" edge to the OrgStaff entity.
func (m *OrgDeptMutation) RemovedStaffsIDs() (ids []string) {
	for id := range m.removedstaffs {
		ids = append(ids, id)
	}
	return
}

// StaffsIDs returns the "staffs" edge IDs in the mutation.
func (m *OrgDeptMutation) StaffsIDs() (ids []string) {
	for id := range m.staffs {
		ids = append(ids, id)
	}
	return
}

// ResetStaffs resets all changes to the "staffs" edge.
func (m *OrgDeptMutation) ResetStaffs() {
	m.staffs = nil
	m.clearedstaffs = false
	m.removedstaffs = nil
}

// Where appends a list predicates to the OrgDeptMutation builder.
func (m *OrgDeptMutation) Where(ps ...predicate.OrgDept) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrgDeptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrgDeptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrgDept, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrgDeptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrgDeptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrgDept).
func (m *OrgDeptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrgDeptMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.is_del != nil {
		fields = append(fields, orgdept.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, orgdept.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, orgdept.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orgdept.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orgdept.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, orgdept.FieldIsActive)
	}
	if m.memo != nil {
		fields = append(fields, orgdept.FieldMemo)
	}
	if m.tree_id != nil {
		fields = append(fields, orgdept.FieldTreeID)
	}
	if m.tree_level != nil {
		fields = append(fields, orgdept.FieldTreeLevel)
	}
	if m.tree_left != nil {
		fields = append(fields, orgdept.FieldTreeLeft)
	}
	if m.tree_right != nil {
		fields = append(fields, orgdept.FieldTreeRight)
	}
	if m.is_leaf != nil {
		fields = append(fields, orgdept.FieldIsLeaf)
	}
	if m.tree_path != nil {
		fields = append(fields, orgdept.FieldTreePath)
	}
	if m.name != nil {
		fields = append(fields, orgdept.FieldName)
	}
	if m.code != nil {
		fields = append(fields, orgdept.FieldCode)
	}
	if m.merge_name != nil {
		fields = append(fields, orgdept.FieldMergeName)
	}
	if m.organ != nil {
		fields = append(fields, orgdept.FieldOrgID)
	}
	if m.parent != nil {
		fields = append(fields, orgdept.FieldParentID)
	}
	if m.is_real != nil {
		fields = append(fields, orgdept.FieldIsReal)
	}
	if m.is_show != nil {
		fields = append(fields, orgdept.FieldIsShow)
	}
	if m.creator != nil {
		fields = append(fields, orgdept.FieldCreator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrgDeptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orgdept.FieldIsDel:
		return m.IsDel()
	case orgdept.FieldSort:
		return m.Sort()
	case orgdept.FieldCreatedAt:
		return m.CreatedAt()
	case orgdept.FieldUpdatedAt:
		return m.UpdatedAt()
	case orgdept.FieldDeletedAt:
		return m.DeletedAt()
	case orgdept.FieldIsActive:
		return m.IsActive()
	case orgdept.FieldMemo:
		return m.Memo()
	case orgdept.FieldTreeID:
		return m.TreeID()
	case orgdept.FieldTreeLevel:
		return m.TreeLevel()
	case orgdept.FieldTreeLeft:
		return m.TreeLeft()
	case orgdept.FieldTreeRight:
		return m.TreeRight()
	case orgdept.FieldIsLeaf:
		return m.IsLeaf()
	case orgdept.FieldTreePath:
		return m.TreePath()
	case orgdept.FieldName:
		return m.Name()
	case orgdept.FieldCode:
		return m.Code()
	case orgdept.FieldMergeName:
		return m.MergeName()
	case orgdept.FieldOrgID:
		return m.OrgID()
	case orgdept.FieldParentID:
		return m.ParentID()
	case orgdept.FieldIsReal:
		return m.IsReal()
	case orgdept.FieldIsShow:
		return m.IsShow()
	case orgdept.FieldCreator:
		return m.Creator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrgDeptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orgdept.FieldIsDel:
		return m.OldIsDel(ctx)
	case orgdept.FieldSort:
		return m.OldSort(ctx)
	case orgdept.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orgdept.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orgdept.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orgdept.FieldIsActive:
		return m.OldIsActive(ctx)
	case orgdept.FieldMemo:
		return m.OldMemo(ctx)
	case orgdept.FieldTreeID:
		return m.OldTreeID(ctx)
	case orgdept.FieldTreeLevel:
		return m.OldTreeLevel(ctx)
	case orgdept.FieldTreeLeft:
		return m.OldTreeLeft(ctx)
	case orgdept.FieldTreeRight:
		return m.OldTreeRight(ctx)
	case orgdept.FieldIsLeaf:
		return m.OldIsLeaf(ctx)
	case orgdept.FieldTreePath:
		return m.OldTreePath(ctx)
	case orgdept.FieldName:
		return m.OldName(ctx)
	case orgdept.FieldCode:
		return m.OldCode(ctx)
	case orgdept.FieldMergeName:
		return m.OldMergeName(ctx)
	case orgdept.FieldOrgID:
		return m.OldOrgID(ctx)
	case orgdept.FieldParentID:
		return m.OldParentID(ctx)
	case orgdept.FieldIsReal:
		return m.OldIsReal(ctx)
	case orgdept.FieldIsShow:
		return m.OldIsShow(ctx)
	case orgdept.FieldCreator:
		return m.OldCreator(ctx)
	}
	return nil, fmt.Errorf("unknown OrgDept field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgDeptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orgdept.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case orgdept.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case orgdept.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orgdept.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orgdept.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orgdept.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case orgdept.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case orgdept.FieldTreeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeID(v)
		return nil
	case orgdept.FieldTreeLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeLevel(v)
		return nil
	case orgdept.FieldTreeLeft:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeLeft(v)
		return nil
	case orgdept.FieldTreeRight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeRight(v)
		return nil
	case orgdept.FieldIsLeaf:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeaf(v)
		return nil
	case orgdept.FieldTreePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreePath(v)
		return nil
	case orgdept.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case orgdept.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case orgdept.FieldMergeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMergeName(v)
		return nil
	case orgdept.FieldOrgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case orgdept.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case orgdept.FieldIsReal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsReal(v)
		return nil
	case orgdept.FieldIsShow:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsShow(v)
		return nil
	case orgdept.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	}
	return fmt.Errorf("unknown OrgDept field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrgDeptMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, orgdept.FieldSort)
	}
	if m.addtree_id != nil {
		fields = append(fields, orgdept.FieldTreeID)
	}
	if m.addtree_level != nil {
		fields = append(fields, orgdept.FieldTreeLevel)
	}
	if m.addtree_left != nil {
		fields = append(fields, orgdept.FieldTreeLeft)
	}
	if m.addtree_right != nil {
		fields = append(fields, orgdept.FieldTreeRight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrgDeptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orgdept.FieldSort:
		return m.AddedSort()
	case orgdept.FieldTreeID:
		return m.AddedTreeID()
	case orgdept.FieldTreeLevel:
		return m.AddedTreeLevel()
	case orgdept.FieldTreeLeft:
		return m.AddedTreeLeft()
	case orgdept.FieldTreeRight:
		return m.AddedTreeRight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgDeptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orgdept.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case orgdept.FieldTreeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeID(v)
		return nil
	case orgdept.FieldTreeLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeLevel(v)
		return nil
	case orgdept.FieldTreeLeft:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeLeft(v)
		return nil
	case orgdept.FieldTreeRight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeRight(v)
		return nil
	}
	return fmt.Errorf("unknown OrgDept numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrgDeptMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orgdept.FieldCreatedAt) {
		fields = append(fields, orgdept.FieldCreatedAt)
	}
	if m.FieldCleared(orgdept.FieldUpdatedAt) {
		fields = append(fields, orgdept.FieldUpdatedAt)
	}
	if m.FieldCleared(orgdept.FieldDeletedAt) {
		fields = append(fields, orgdept.FieldDeletedAt)
	}
	if m.FieldCleared(orgdept.FieldMemo) {
		fields = append(fields, orgdept.FieldMemo)
	}
	if m.FieldCleared(orgdept.FieldTreeID) {
		fields = append(fields, orgdept.FieldTreeID)
	}
	if m.FieldCleared(orgdept.FieldTreeLevel) {
		fields = append(fields, orgdept.FieldTreeLevel)
	}
	if m.FieldCleared(orgdept.FieldTreeLeft) {
		fields = append(fields, orgdept.FieldTreeLeft)
	}
	if m.FieldCleared(orgdept.FieldTreeRight) {
		fields = append(fields, orgdept.FieldTreeRight)
	}
	if m.FieldCleared(orgdept.FieldIsLeaf) {
		fields = append(fields, orgdept.FieldIsLeaf)
	}
	if m.FieldCleared(orgdept.FieldTreePath) {
		fields = append(fields, orgdept.FieldTreePath)
	}
	if m.FieldCleared(orgdept.FieldName) {
		fields = append(fields, orgdept.FieldName)
	}
	if m.FieldCleared(orgdept.FieldCode) {
		fields = append(fields, orgdept.FieldCode)
	}
	if m.FieldCleared(orgdept.FieldMergeName) {
		fields = append(fields, orgdept.FieldMergeName)
	}
	if m.FieldCleared(orgdept.FieldOrgID) {
		fields = append(fields, orgdept.FieldOrgID)
	}
	if m.FieldCleared(orgdept.FieldParentID) {
		fields = append(fields, orgdept.FieldParentID)
	}
	if m.FieldCleared(orgdept.FieldIsReal) {
		fields = append(fields, orgdept.FieldIsReal)
	}
	if m.FieldCleared(orgdept.FieldIsShow) {
		fields = append(fields, orgdept.FieldIsShow)
	}
	if m.FieldCleared(orgdept.FieldCreator) {
		fields = append(fields, orgdept.FieldCreator)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrgDeptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrgDeptMutation) ClearField(name string) error {
	switch name {
	case orgdept.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case orgdept.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case orgdept.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case orgdept.FieldMemo:
		m.ClearMemo()
		return nil
	case orgdept.FieldTreeID:
		m.ClearTreeID()
		return nil
	case orgdept.FieldTreeLevel:
		m.ClearTreeLevel()
		return nil
	case orgdept.FieldTreeLeft:
		m.ClearTreeLeft()
		return nil
	case orgdept.FieldTreeRight:
		m.ClearTreeRight()
		return nil
	case orgdept.FieldIsLeaf:
		m.ClearIsLeaf()
		return nil
	case orgdept.FieldTreePath:
		m.ClearTreePath()
		return nil
	case orgdept.FieldName:
		m.ClearName()
		return nil
	case orgdept.FieldCode:
		m.ClearCode()
		return nil
	case orgdept.FieldMergeName:
		m.ClearMergeName()
		return nil
	case orgdept.FieldOrgID:
		m.ClearOrgID()
		return nil
	case orgdept.FieldParentID:
		m.ClearParentID()
		return nil
	case orgdept.FieldIsReal:
		m.ClearIsReal()
		return nil
	case orgdept.FieldIsShow:
		m.ClearIsShow()
		return nil
	case orgdept.FieldCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgDept nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrgDeptMutation) ResetField(name string) error {
	switch name {
	case orgdept.FieldIsDel:
		m.ResetIsDel()
		return nil
	case orgdept.FieldSort:
		m.ResetSort()
		return nil
	case orgdept.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orgdept.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orgdept.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orgdept.FieldIsActive:
		m.ResetIsActive()
		return nil
	case orgdept.FieldMemo:
		m.ResetMemo()
		return nil
	case orgdept.FieldTreeID:
		m.ResetTreeID()
		return nil
	case orgdept.FieldTreeLevel:
		m.ResetTreeLevel()
		return nil
	case orgdept.FieldTreeLeft:
		m.ResetTreeLeft()
		return nil
	case orgdept.FieldTreeRight:
		m.ResetTreeRight()
		return nil
	case orgdept.FieldIsLeaf:
		m.ResetIsLeaf()
		return nil
	case orgdept.FieldTreePath:
		m.ResetTreePath()
		return nil
	case orgdept.FieldName:
		m.ResetName()
		return nil
	case orgdept.FieldCode:
		m.ResetCode()
		return nil
	case orgdept.FieldMergeName:
		m.ResetMergeName()
		return nil
	case orgdept.FieldOrgID:
		m.ResetOrgID()
		return nil
	case orgdept.FieldParentID:
		m.ResetParentID()
		return nil
	case orgdept.FieldIsReal:
		m.ResetIsReal()
		return nil
	case orgdept.FieldIsShow:
		m.ResetIsShow()
		return nil
	case orgdept.FieldCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgDept field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrgDeptMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.parent != nil {
		edges = append(edges, orgdept.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, orgdept.EdgeChildren)
	}
	if m.organ != nil {
		edges = append(edges, orgdept.EdgeOrgan)
	}
	if m.staffs != nil {
		edges = append(edges, orgdept.EdgeStaffs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrgDeptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orgdept.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case orgdept.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case orgdept.EdgeOrgan:
		if id := m.organ; id != nil {
			return []ent.Value{*id}
		}
	case orgdept.EdgeStaffs:
		ids := make([]ent.Value, 0, len(m.staffs))
		for id := range m.staffs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrgDeptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedchildren != nil {
		edges = append(edges, orgdept.EdgeChildren)
	}
	if m.removedstaffs != nil {
		edges = append(edges, orgdept.EdgeStaffs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrgDeptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orgdept.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case orgdept.EdgeStaffs:
		ids := make([]ent.Value, 0, len(m.removedstaffs))
		for id := range m.removedstaffs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrgDeptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedparent {
		edges = append(edges, orgdept.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, orgdept.EdgeChildren)
	}
	if m.clearedorgan {
		edges = append(edges, orgdept.EdgeOrgan)
	}
	if m.clearedstaffs {
		edges = append(edges, orgdept.EdgeStaffs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrgDeptMutation) EdgeCleared(name string) bool {
	switch name {
	case orgdept.EdgeParent:
		return m.clearedparent
	case orgdept.EdgeChildren:
		return m.clearedchildren
	case orgdept.EdgeOrgan:
		return m.clearedorgan
	case orgdept.EdgeStaffs:
		return m.clearedstaffs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrgDeptMutation) ClearEdge(name string) error {
	switch name {
	case orgdept.EdgeParent:
		m.ClearParent()
		return nil
	case orgdept.EdgeOrgan:
		m.ClearOrgan()
		return nil
	}
	return fmt.Errorf("unknown OrgDept unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrgDeptMutation) ResetEdge(name string) error {
	switch name {
	case orgdept.EdgeParent:
		m.ResetParent()
		return nil
	case orgdept.EdgeChildren:
		m.ResetChildren()
		return nil
	case orgdept.EdgeOrgan:
		m.ResetOrgan()
		return nil
	case orgdept.EdgeStaffs:
		m.ResetStaffs()
		return nil
	}
	return fmt.Errorf("unknown OrgDept edge %s", name)
}

// OrgOrganMutation represents an operation that mutates the OrgOrgan nodes in the graph.
type OrgOrganMutation struct {
	config
	op               Op
	typ              string
	id               *string
	is_del           *bool
	sort             *int32
	addsort          *int32
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	is_active        *bool
	memo             *string
	name             *string
	sname            *string
	code             *string
	iden_no          *string
	owner_id         *string
	creator          *string
	clearedFields    map[string]struct{}
	haddr            *string
	clearedhaddr     bool
	depts            map[string]struct{}
	removeddepts     map[string]struct{}
	cleareddepts     bool
	staffs           map[string]struct{}
	removedstaffs    map[string]struct{}
	clearedstaffs    bool
	positions        map[string]struct{}
	removedpositions map[string]struct{}
	clearedpositions bool
	done             bool
	oldValue         func(context.Context) (*OrgOrgan, error)
	predicates       []predicate.OrgOrgan
}

var _ ent.Mutation = (*OrgOrganMutation)(nil)

// orgorganOption allows management of the mutation configuration using functional options.
type orgorganOption func(*OrgOrganMutation)

// newOrgOrganMutation creates new mutation for the OrgOrgan entity.
func newOrgOrganMutation(c config, op Op, opts ...orgorganOption) *OrgOrganMutation {
	m := &OrgOrganMutation{
		config:        c,
		op:            op,
		typ:           TypeOrgOrgan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrgOrganID sets the ID field of the mutation.
func withOrgOrganID(id string) orgorganOption {
	return func(m *OrgOrganMutation) {
		var (
			err   error
			once  sync.Once
			value *OrgOrgan
		)
		m.oldValue = func(ctx context.Context) (*OrgOrgan, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrgOrgan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrgOrgan sets the old OrgOrgan of the mutation.
func withOrgOrgan(node *OrgOrgan) orgorganOption {
	return func(m *OrgOrganMutation) {
		m.oldValue = func(context.Context) (*OrgOrgan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrgOrganMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrgOrganMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrgOrgan entities.
func (m *OrgOrganMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrgOrganMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrgOrganMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrgOrgan.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *OrgOrganMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *OrgOrganMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *OrgOrganMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *OrgOrganMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *OrgOrganMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *OrgOrganMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *OrgOrganMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *OrgOrganMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OrgOrganMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrgOrganMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OrgOrganMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[orgorgan.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OrgOrganMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrgOrganMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, orgorgan.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrgOrganMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrgOrganMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OrgOrganMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[orgorgan.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OrgOrganMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrgOrganMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, orgorgan.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrgOrganMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrgOrganMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrgOrganMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[orgorgan.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrgOrganMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrgOrganMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, orgorgan.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *OrgOrganMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *OrgOrganMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *OrgOrganMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMemo sets the "memo" field.
func (m *OrgOrganMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *OrgOrganMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *OrgOrganMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[orgorgan.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *OrgOrganMutation) MemoCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *OrgOrganMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, orgorgan.FieldMemo)
}

// SetName sets the "name" field.
func (m *OrgOrganMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrgOrganMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *OrgOrganMutation) ClearName() {
	m.name = nil
	m.clearedFields[orgorgan.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *OrgOrganMutation) NameCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *OrgOrganMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, orgorgan.FieldName)
}

// SetSname sets the "sname" field.
func (m *OrgOrganMutation) SetSname(s string) {
	m.sname = &s
}

// Sname returns the value of the "sname" field in the mutation.
func (m *OrgOrganMutation) Sname() (r string, exists bool) {
	v := m.sname
	if v == nil {
		return
	}
	return *v, true
}

// OldSname returns the old "sname" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldSname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSname: %w", err)
	}
	return oldValue.Sname, nil
}

// ClearSname clears the value of the "sname" field.
func (m *OrgOrganMutation) ClearSname() {
	m.sname = nil
	m.clearedFields[orgorgan.FieldSname] = struct{}{}
}

// SnameCleared returns if the "sname" field was cleared in this mutation.
func (m *OrgOrganMutation) SnameCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldSname]
	return ok
}

// ResetSname resets all changes to the "sname" field.
func (m *OrgOrganMutation) ResetSname() {
	m.sname = nil
	delete(m.clearedFields, orgorgan.FieldSname)
}

// SetCode sets the "code" field.
func (m *OrgOrganMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *OrgOrganMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *OrgOrganMutation) ClearCode() {
	m.code = nil
	m.clearedFields[orgorgan.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *OrgOrganMutation) CodeCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *OrgOrganMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, orgorgan.FieldCode)
}

// SetIdenNo sets the "iden_no" field.
func (m *OrgOrganMutation) SetIdenNo(s string) {
	m.iden_no = &s
}

// IdenNo returns the value of the "iden_no" field in the mutation.
func (m *OrgOrganMutation) IdenNo() (r string, exists bool) {
	v := m.iden_no
	if v == nil {
		return
	}
	return *v, true
}

// OldIdenNo returns the old "iden_no" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldIdenNo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdenNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdenNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdenNo: %w", err)
	}
	return oldValue.IdenNo, nil
}

// ClearIdenNo clears the value of the "iden_no" field.
func (m *OrgOrganMutation) ClearIdenNo() {
	m.iden_no = nil
	m.clearedFields[orgorgan.FieldIdenNo] = struct{}{}
}

// IdenNoCleared returns if the "iden_no" field was cleared in this mutation.
func (m *OrgOrganMutation) IdenNoCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldIdenNo]
	return ok
}

// ResetIdenNo resets all changes to the "iden_no" field.
func (m *OrgOrganMutation) ResetIdenNo() {
	m.iden_no = nil
	delete(m.clearedFields, orgorgan.FieldIdenNo)
}

// SetOwnerID sets the "owner_id" field.
func (m *OrgOrganMutation) SetOwnerID(s string) {
	m.owner_id = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *OrgOrganMutation) OwnerID() (r string, exists bool) {
	v := m.owner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldOwnerID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ClearOwnerID clears the value of the "owner_id" field.
func (m *OrgOrganMutation) ClearOwnerID() {
	m.owner_id = nil
	m.clearedFields[orgorgan.FieldOwnerID] = struct{}{}
}

// OwnerIDCleared returns if the "owner_id" field was cleared in this mutation.
func (m *OrgOrganMutation) OwnerIDCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldOwnerID]
	return ok
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *OrgOrganMutation) ResetOwnerID() {
	m.owner_id = nil
	delete(m.clearedFields, orgorgan.FieldOwnerID)
}

// SetHaddrID sets the "haddr_id" field.
func (m *OrgOrganMutation) SetHaddrID(s string) {
	m.haddr = &s
}

// HaddrID returns the value of the "haddr_id" field in the mutation.
func (m *OrgOrganMutation) HaddrID() (r string, exists bool) {
	v := m.haddr
	if v == nil {
		return
	}
	return *v, true
}

// OldHaddrID returns the old "haddr_id" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldHaddrID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHaddrID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHaddrID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHaddrID: %w", err)
	}
	return oldValue.HaddrID, nil
}

// ClearHaddrID clears the value of the "haddr_id" field.
func (m *OrgOrganMutation) ClearHaddrID() {
	m.haddr = nil
	m.clearedFields[orgorgan.FieldHaddrID] = struct{}{}
}

// HaddrIDCleared returns if the "haddr_id" field was cleared in this mutation.
func (m *OrgOrganMutation) HaddrIDCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldHaddrID]
	return ok
}

// ResetHaddrID resets all changes to the "haddr_id" field.
func (m *OrgOrganMutation) ResetHaddrID() {
	m.haddr = nil
	delete(m.clearedFields, orgorgan.FieldHaddrID)
}

// SetCreator sets the "creator" field.
func (m *OrgOrganMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *OrgOrganMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the OrgOrgan entity.
// If the OrgOrgan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgOrganMutation) OldCreator(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *OrgOrganMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[orgorgan.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *OrgOrganMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[orgorgan.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *OrgOrganMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, orgorgan.FieldCreator)
}

// ClearHaddr clears the "haddr" edge to the SysAddress entity.
func (m *OrgOrganMutation) ClearHaddr() {
	m.clearedhaddr = true
}

// HaddrCleared reports if the "haddr" edge to the SysAddress entity was cleared.
func (m *OrgOrganMutation) HaddrCleared() bool {
	return m.HaddrIDCleared() || m.clearedhaddr
}

// HaddrIDs returns the "haddr" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HaddrID instead. It exists only for internal usage by the builders.
func (m *OrgOrganMutation) HaddrIDs() (ids []string) {
	if id := m.haddr; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHaddr resets all changes to the "haddr" edge.
func (m *OrgOrganMutation) ResetHaddr() {
	m.haddr = nil
	m.clearedhaddr = false
}

// AddDeptIDs adds the "depts" edge to the OrgDept entity by ids.
func (m *OrgOrganMutation) AddDeptIDs(ids ...string) {
	if m.depts == nil {
		m.depts = make(map[string]struct{})
	}
	for i := range ids {
		m.depts[ids[i]] = struct{}{}
	}
}

// ClearDepts clears the "depts" edge to the OrgDept entity.
func (m *OrgOrganMutation) ClearDepts() {
	m.cleareddepts = true
}

// DeptsCleared reports if the "depts" edge to the OrgDept entity was cleared.
func (m *OrgOrganMutation) DeptsCleared() bool {
	return m.cleareddepts
}

// RemoveDeptIDs removes the "depts" edge to the OrgDept entity by IDs.
func (m *OrgOrganMutation) RemoveDeptIDs(ids ...string) {
	if m.removeddepts == nil {
		m.removeddepts = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.depts, ids[i])
		m.removeddepts[ids[i]] = struct{}{}
	}
}

// RemovedDepts returns the removed IDs of the "depts" edge to the OrgDept entity.
func (m *OrgOrganMutation) RemovedDeptsIDs() (ids []string) {
	for id := range m.removeddepts {
		ids = append(ids, id)
	}
	return
}

// DeptsIDs returns the "depts" edge IDs in the mutation.
func (m *OrgOrganMutation) DeptsIDs() (ids []string) {
	for id := range m.depts {
		ids = append(ids, id)
	}
	return
}

// ResetDepts resets all changes to the "depts" edge.
func (m *OrgOrganMutation) ResetDepts() {
	m.depts = nil
	m.cleareddepts = false
	m.removeddepts = nil
}

// AddStaffIDs adds the "staffs" edge to the OrgStaff entity by ids.
func (m *OrgOrganMutation) AddStaffIDs(ids ...string) {
	if m.staffs == nil {
		m.staffs = make(map[string]struct{})
	}
	for i := range ids {
		m.staffs[ids[i]] = struct{}{}
	}
}

// ClearStaffs clears the "staffs" edge to the OrgStaff entity.
func (m *OrgOrganMutation) ClearStaffs() {
	m.clearedstaffs = true
}

// StaffsCleared reports if the "staffs" edge to the OrgStaff entity was cleared.
func (m *OrgOrganMutation) StaffsCleared() bool {
	return m.clearedstaffs
}

// RemoveStaffIDs removes the "staffs" edge to the OrgStaff entity by IDs.
func (m *OrgOrganMutation) RemoveStaffIDs(ids ...string) {
	if m.removedstaffs == nil {
		m.removedstaffs = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.staffs, ids[i])
		m.removedstaffs[ids[i]] = struct{}{}
	}
}

// RemovedStaffs returns the removed IDs of the "staffs" edge to the OrgStaff entity.
func (m *OrgOrganMutation) RemovedStaffsIDs() (ids []string) {
	for id := range m.removedstaffs {
		ids = append(ids, id)
	}
	return
}

// StaffsIDs returns the "staffs" edge IDs in the mutation.
func (m *OrgOrganMutation) StaffsIDs() (ids []string) {
	for id := range m.staffs {
		ids = append(ids, id)
	}
	return
}

// ResetStaffs resets all changes to the "staffs" edge.
func (m *OrgOrganMutation) ResetStaffs() {
	m.staffs = nil
	m.clearedstaffs = false
	m.removedstaffs = nil
}

// AddPositionIDs adds the "positions" edge to the OrgPosition entity by ids.
func (m *OrgOrganMutation) AddPositionIDs(ids ...string) {
	if m.positions == nil {
		m.positions = make(map[string]struct{})
	}
	for i := range ids {
		m.positions[ids[i]] = struct{}{}
	}
}

// ClearPositions clears the "positions" edge to the OrgPosition entity.
func (m *OrgOrganMutation) ClearPositions() {
	m.clearedpositions = true
}

// PositionsCleared reports if the "positions" edge to the OrgPosition entity was cleared.
func (m *OrgOrganMutation) PositionsCleared() bool {
	return m.clearedpositions
}

// RemovePositionIDs removes the "positions" edge to the OrgPosition entity by IDs.
func (m *OrgOrganMutation) RemovePositionIDs(ids ...string) {
	if m.removedpositions == nil {
		m.removedpositions = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.positions, ids[i])
		m.removedpositions[ids[i]] = struct{}{}
	}
}

// RemovedPositions returns the removed IDs of the "positions" edge to the OrgPosition entity.
func (m *OrgOrganMutation) RemovedPositionsIDs() (ids []string) {
	for id := range m.removedpositions {
		ids = append(ids, id)
	}
	return
}

// PositionsIDs returns the "positions" edge IDs in the mutation.
func (m *OrgOrganMutation) PositionsIDs() (ids []string) {
	for id := range m.positions {
		ids = append(ids, id)
	}
	return
}

// ResetPositions resets all changes to the "positions" edge.
func (m *OrgOrganMutation) ResetPositions() {
	m.positions = nil
	m.clearedpositions = false
	m.removedpositions = nil
}

// Where appends a list predicates to the OrgOrganMutation builder.
func (m *OrgOrganMutation) Where(ps ...predicate.OrgOrgan) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrgOrganMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrgOrganMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrgOrgan, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrgOrganMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrgOrganMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrgOrgan).
func (m *OrgOrganMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrgOrganMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.is_del != nil {
		fields = append(fields, orgorgan.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, orgorgan.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, orgorgan.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orgorgan.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orgorgan.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, orgorgan.FieldIsActive)
	}
	if m.memo != nil {
		fields = append(fields, orgorgan.FieldMemo)
	}
	if m.name != nil {
		fields = append(fields, orgorgan.FieldName)
	}
	if m.sname != nil {
		fields = append(fields, orgorgan.FieldSname)
	}
	if m.code != nil {
		fields = append(fields, orgorgan.FieldCode)
	}
	if m.iden_no != nil {
		fields = append(fields, orgorgan.FieldIdenNo)
	}
	if m.owner_id != nil {
		fields = append(fields, orgorgan.FieldOwnerID)
	}
	if m.haddr != nil {
		fields = append(fields, orgorgan.FieldHaddrID)
	}
	if m.creator != nil {
		fields = append(fields, orgorgan.FieldCreator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrgOrganMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orgorgan.FieldIsDel:
		return m.IsDel()
	case orgorgan.FieldSort:
		return m.Sort()
	case orgorgan.FieldCreatedAt:
		return m.CreatedAt()
	case orgorgan.FieldUpdatedAt:
		return m.UpdatedAt()
	case orgorgan.FieldDeletedAt:
		return m.DeletedAt()
	case orgorgan.FieldIsActive:
		return m.IsActive()
	case orgorgan.FieldMemo:
		return m.Memo()
	case orgorgan.FieldName:
		return m.Name()
	case orgorgan.FieldSname:
		return m.Sname()
	case orgorgan.FieldCode:
		return m.Code()
	case orgorgan.FieldIdenNo:
		return m.IdenNo()
	case orgorgan.FieldOwnerID:
		return m.OwnerID()
	case orgorgan.FieldHaddrID:
		return m.HaddrID()
	case orgorgan.FieldCreator:
		return m.Creator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrgOrganMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orgorgan.FieldIsDel:
		return m.OldIsDel(ctx)
	case orgorgan.FieldSort:
		return m.OldSort(ctx)
	case orgorgan.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orgorgan.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orgorgan.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orgorgan.FieldIsActive:
		return m.OldIsActive(ctx)
	case orgorgan.FieldMemo:
		return m.OldMemo(ctx)
	case orgorgan.FieldName:
		return m.OldName(ctx)
	case orgorgan.FieldSname:
		return m.OldSname(ctx)
	case orgorgan.FieldCode:
		return m.OldCode(ctx)
	case orgorgan.FieldIdenNo:
		return m.OldIdenNo(ctx)
	case orgorgan.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case orgorgan.FieldHaddrID:
		return m.OldHaddrID(ctx)
	case orgorgan.FieldCreator:
		return m.OldCreator(ctx)
	}
	return nil, fmt.Errorf("unknown OrgOrgan field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgOrganMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orgorgan.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case orgorgan.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case orgorgan.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orgorgan.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orgorgan.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orgorgan.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case orgorgan.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case orgorgan.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case orgorgan.FieldSname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSname(v)
		return nil
	case orgorgan.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case orgorgan.FieldIdenNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdenNo(v)
		return nil
	case orgorgan.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case orgorgan.FieldHaddrID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHaddrID(v)
		return nil
	case orgorgan.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	}
	return fmt.Errorf("unknown OrgOrgan field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrgOrganMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, orgorgan.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrgOrganMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orgorgan.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgOrganMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orgorgan.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown OrgOrgan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrgOrganMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orgorgan.FieldCreatedAt) {
		fields = append(fields, orgorgan.FieldCreatedAt)
	}
	if m.FieldCleared(orgorgan.FieldUpdatedAt) {
		fields = append(fields, orgorgan.FieldUpdatedAt)
	}
	if m.FieldCleared(orgorgan.FieldDeletedAt) {
		fields = append(fields, orgorgan.FieldDeletedAt)
	}
	if m.FieldCleared(orgorgan.FieldMemo) {
		fields = append(fields, orgorgan.FieldMemo)
	}
	if m.FieldCleared(orgorgan.FieldName) {
		fields = append(fields, orgorgan.FieldName)
	}
	if m.FieldCleared(orgorgan.FieldSname) {
		fields = append(fields, orgorgan.FieldSname)
	}
	if m.FieldCleared(orgorgan.FieldCode) {
		fields = append(fields, orgorgan.FieldCode)
	}
	if m.FieldCleared(orgorgan.FieldIdenNo) {
		fields = append(fields, orgorgan.FieldIdenNo)
	}
	if m.FieldCleared(orgorgan.FieldOwnerID) {
		fields = append(fields, orgorgan.FieldOwnerID)
	}
	if m.FieldCleared(orgorgan.FieldHaddrID) {
		fields = append(fields, orgorgan.FieldHaddrID)
	}
	if m.FieldCleared(orgorgan.FieldCreator) {
		fields = append(fields, orgorgan.FieldCreator)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrgOrganMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrgOrganMutation) ClearField(name string) error {
	switch name {
	case orgorgan.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case orgorgan.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case orgorgan.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case orgorgan.FieldMemo:
		m.ClearMemo()
		return nil
	case orgorgan.FieldName:
		m.ClearName()
		return nil
	case orgorgan.FieldSname:
		m.ClearSname()
		return nil
	case orgorgan.FieldCode:
		m.ClearCode()
		return nil
	case orgorgan.FieldIdenNo:
		m.ClearIdenNo()
		return nil
	case orgorgan.FieldOwnerID:
		m.ClearOwnerID()
		return nil
	case orgorgan.FieldHaddrID:
		m.ClearHaddrID()
		return nil
	case orgorgan.FieldCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgOrgan nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrgOrganMutation) ResetField(name string) error {
	switch name {
	case orgorgan.FieldIsDel:
		m.ResetIsDel()
		return nil
	case orgorgan.FieldSort:
		m.ResetSort()
		return nil
	case orgorgan.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orgorgan.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orgorgan.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orgorgan.FieldIsActive:
		m.ResetIsActive()
		return nil
	case orgorgan.FieldMemo:
		m.ResetMemo()
		return nil
	case orgorgan.FieldName:
		m.ResetName()
		return nil
	case orgorgan.FieldSname:
		m.ResetSname()
		return nil
	case orgorgan.FieldCode:
		m.ResetCode()
		return nil
	case orgorgan.FieldIdenNo:
		m.ResetIdenNo()
		return nil
	case orgorgan.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case orgorgan.FieldHaddrID:
		m.ResetHaddrID()
		return nil
	case orgorgan.FieldCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgOrgan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrgOrganMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.haddr != nil {
		edges = append(edges, orgorgan.EdgeHaddr)
	}
	if m.depts != nil {
		edges = append(edges, orgorgan.EdgeDepts)
	}
	if m.staffs != nil {
		edges = append(edges, orgorgan.EdgeStaffs)
	}
	if m.positions != nil {
		edges = append(edges, orgorgan.EdgePositions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrgOrganMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orgorgan.EdgeHaddr:
		if id := m.haddr; id != nil {
			return []ent.Value{*id}
		}
	case orgorgan.EdgeDepts:
		ids := make([]ent.Value, 0, len(m.depts))
		for id := range m.depts {
			ids = append(ids, id)
		}
		return ids
	case orgorgan.EdgeStaffs:
		ids := make([]ent.Value, 0, len(m.staffs))
		for id := range m.staffs {
			ids = append(ids, id)
		}
		return ids
	case orgorgan.EdgePositions:
		ids := make([]ent.Value, 0, len(m.positions))
		for id := range m.positions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrgOrganMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removeddepts != nil {
		edges = append(edges, orgorgan.EdgeDepts)
	}
	if m.removedstaffs != nil {
		edges = append(edges, orgorgan.EdgeStaffs)
	}
	if m.removedpositions != nil {
		edges = append(edges, orgorgan.EdgePositions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrgOrganMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orgorgan.EdgeDepts:
		ids := make([]ent.Value, 0, len(m.removeddepts))
		for id := range m.removeddepts {
			ids = append(ids, id)
		}
		return ids
	case orgorgan.EdgeStaffs:
		ids := make([]ent.Value, 0, len(m.removedstaffs))
		for id := range m.removedstaffs {
			ids = append(ids, id)
		}
		return ids
	case orgorgan.EdgePositions:
		ids := make([]ent.Value, 0, len(m.removedpositions))
		for id := range m.removedpositions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrgOrganMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedhaddr {
		edges = append(edges, orgorgan.EdgeHaddr)
	}
	if m.cleareddepts {
		edges = append(edges, orgorgan.EdgeDepts)
	}
	if m.clearedstaffs {
		edges = append(edges, orgorgan.EdgeStaffs)
	}
	if m.clearedpositions {
		edges = append(edges, orgorgan.EdgePositions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrgOrganMutation) EdgeCleared(name string) bool {
	switch name {
	case orgorgan.EdgeHaddr:
		return m.clearedhaddr
	case orgorgan.EdgeDepts:
		return m.cleareddepts
	case orgorgan.EdgeStaffs:
		return m.clearedstaffs
	case orgorgan.EdgePositions:
		return m.clearedpositions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrgOrganMutation) ClearEdge(name string) error {
	switch name {
	case orgorgan.EdgeHaddr:
		m.ClearHaddr()
		return nil
	}
	return fmt.Errorf("unknown OrgOrgan unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrgOrganMutation) ResetEdge(name string) error {
	switch name {
	case orgorgan.EdgeHaddr:
		m.ResetHaddr()
		return nil
	case orgorgan.EdgeDepts:
		m.ResetDepts()
		return nil
	case orgorgan.EdgeStaffs:
		m.ResetStaffs()
		return nil
	case orgorgan.EdgePositions:
		m.ResetPositions()
		return nil
	}
	return fmt.Errorf("unknown OrgOrgan edge %s", name)
}

// OrgPositionMutation represents an operation that mutates the OrgPosition nodes in the graph.
type OrgPositionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	memo          *string
	name          *string
	code          *string
	creator       *string
	clearedFields map[string]struct{}
	organ         *string
	clearedorgan  bool
	staffs        map[string]struct{}
	removedstaffs map[string]struct{}
	clearedstaffs bool
	done          bool
	oldValue      func(context.Context) (*OrgPosition, error)
	predicates    []predicate.OrgPosition
}

var _ ent.Mutation = (*OrgPositionMutation)(nil)

// orgpositionOption allows management of the mutation configuration using functional options.
type orgpositionOption func(*OrgPositionMutation)

// newOrgPositionMutation creates new mutation for the OrgPosition entity.
func newOrgPositionMutation(c config, op Op, opts ...orgpositionOption) *OrgPositionMutation {
	m := &OrgPositionMutation{
		config:        c,
		op:            op,
		typ:           TypeOrgPosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrgPositionID sets the ID field of the mutation.
func withOrgPositionID(id string) orgpositionOption {
	return func(m *OrgPositionMutation) {
		var (
			err   error
			once  sync.Once
			value *OrgPosition
		)
		m.oldValue = func(ctx context.Context) (*OrgPosition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrgPosition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrgPosition sets the old OrgPosition of the mutation.
func withOrgPosition(node *OrgPosition) orgpositionOption {
	return func(m *OrgPositionMutation) {
		m.oldValue = func(context.Context) (*OrgPosition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrgPositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrgPositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrgPosition entities.
func (m *OrgPositionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrgPositionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrgPositionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrgPosition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *OrgPositionMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *OrgPositionMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *OrgPositionMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *OrgPositionMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *OrgPositionMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *OrgPositionMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *OrgPositionMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *OrgPositionMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OrgPositionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrgPositionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OrgPositionMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[orgposition.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OrgPositionMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrgPositionMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, orgposition.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrgPositionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrgPositionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OrgPositionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[orgposition.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OrgPositionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrgPositionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, orgposition.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrgPositionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrgPositionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrgPositionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[orgposition.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrgPositionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrgPositionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, orgposition.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *OrgPositionMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *OrgPositionMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *OrgPositionMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMemo sets the "memo" field.
func (m *OrgPositionMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *OrgPositionMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *OrgPositionMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[orgposition.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *OrgPositionMutation) MemoCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *OrgPositionMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, orgposition.FieldMemo)
}

// SetName sets the "name" field.
func (m *OrgPositionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrgPositionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *OrgPositionMutation) ClearName() {
	m.name = nil
	m.clearedFields[orgposition.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *OrgPositionMutation) NameCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *OrgPositionMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, orgposition.FieldName)
}

// SetCode sets the "code" field.
func (m *OrgPositionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *OrgPositionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *OrgPositionMutation) ClearCode() {
	m.code = nil
	m.clearedFields[orgposition.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *OrgPositionMutation) CodeCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *OrgPositionMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, orgposition.FieldCode)
}

// SetOrgID sets the "org_id" field.
func (m *OrgPositionMutation) SetOrgID(s string) {
	m.organ = &s
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *OrgPositionMutation) OrgID() (r string, exists bool) {
	v := m.organ
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldOrgID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ClearOrgID clears the value of the "org_id" field.
func (m *OrgPositionMutation) ClearOrgID() {
	m.organ = nil
	m.clearedFields[orgposition.FieldOrgID] = struct{}{}
}

// OrgIDCleared returns if the "org_id" field was cleared in this mutation.
func (m *OrgPositionMutation) OrgIDCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldOrgID]
	return ok
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *OrgPositionMutation) ResetOrgID() {
	m.organ = nil
	delete(m.clearedFields, orgposition.FieldOrgID)
}

// SetCreator sets the "creator" field.
func (m *OrgPositionMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *OrgPositionMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the OrgPosition entity.
// If the OrgPosition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgPositionMutation) OldCreator(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *OrgPositionMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[orgposition.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *OrgPositionMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[orgposition.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *OrgPositionMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, orgposition.FieldCreator)
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by id.
func (m *OrgPositionMutation) SetOrganID(id string) {
	m.organ = &id
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (m *OrgPositionMutation) ClearOrgan() {
	m.clearedorgan = true
}

// OrganCleared reports if the "organ" edge to the OrgOrgan entity was cleared.
func (m *OrgPositionMutation) OrganCleared() bool {
	return m.OrgIDCleared() || m.clearedorgan
}

// OrganID returns the "organ" edge ID in the mutation.
func (m *OrgPositionMutation) OrganID() (id string, exists bool) {
	if m.organ != nil {
		return *m.organ, true
	}
	return
}

// OrganIDs returns the "organ" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganID instead. It exists only for internal usage by the builders.
func (m *OrgPositionMutation) OrganIDs() (ids []string) {
	if id := m.organ; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrgan resets all changes to the "organ" edge.
func (m *OrgPositionMutation) ResetOrgan() {
	m.organ = nil
	m.clearedorgan = false
}

// AddStaffIDs adds the "staffs" edge to the OrgStaff entity by ids.
func (m *OrgPositionMutation) AddStaffIDs(ids ...string) {
	if m.staffs == nil {
		m.staffs = make(map[string]struct{})
	}
	for i := range ids {
		m.staffs[ids[i]] = struct{}{}
	}
}

// ClearStaffs clears the "staffs" edge to the OrgStaff entity.
func (m *OrgPositionMutation) ClearStaffs() {
	m.clearedstaffs = true
}

// StaffsCleared reports if the "staffs" edge to the OrgStaff entity was cleared.
func (m *OrgPositionMutation) StaffsCleared() bool {
	return m.clearedstaffs
}

// RemoveStaffIDs removes the "staffs" edge to the OrgStaff entity by IDs.
func (m *OrgPositionMutation) RemoveStaffIDs(ids ...string) {
	if m.removedstaffs == nil {
		m.removedstaffs = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.staffs, ids[i])
		m.removedstaffs[ids[i]] = struct{}{}
	}
}

// RemovedStaffs returns the removed IDs of the "staffs" edge to the OrgStaff entity.
func (m *OrgPositionMutation) RemovedStaffsIDs() (ids []string) {
	for id := range m.removedstaffs {
		ids = append(ids, id)
	}
	return
}

// StaffsIDs returns the "staffs" edge IDs in the mutation.
func (m *OrgPositionMutation) StaffsIDs() (ids []string) {
	for id := range m.staffs {
		ids = append(ids, id)
	}
	return
}

// ResetStaffs resets all changes to the "staffs" edge.
func (m *OrgPositionMutation) ResetStaffs() {
	m.staffs = nil
	m.clearedstaffs = false
	m.removedstaffs = nil
}

// Where appends a list predicates to the OrgPositionMutation builder.
func (m *OrgPositionMutation) Where(ps ...predicate.OrgPosition) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrgPositionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrgPositionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrgPosition, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrgPositionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrgPositionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrgPosition).
func (m *OrgPositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrgPositionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.is_del != nil {
		fields = append(fields, orgposition.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, orgposition.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, orgposition.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orgposition.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orgposition.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, orgposition.FieldIsActive)
	}
	if m.memo != nil {
		fields = append(fields, orgposition.FieldMemo)
	}
	if m.name != nil {
		fields = append(fields, orgposition.FieldName)
	}
	if m.code != nil {
		fields = append(fields, orgposition.FieldCode)
	}
	if m.organ != nil {
		fields = append(fields, orgposition.FieldOrgID)
	}
	if m.creator != nil {
		fields = append(fields, orgposition.FieldCreator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrgPositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orgposition.FieldIsDel:
		return m.IsDel()
	case orgposition.FieldSort:
		return m.Sort()
	case orgposition.FieldCreatedAt:
		return m.CreatedAt()
	case orgposition.FieldUpdatedAt:
		return m.UpdatedAt()
	case orgposition.FieldDeletedAt:
		return m.DeletedAt()
	case orgposition.FieldIsActive:
		return m.IsActive()
	case orgposition.FieldMemo:
		return m.Memo()
	case orgposition.FieldName:
		return m.Name()
	case orgposition.FieldCode:
		return m.Code()
	case orgposition.FieldOrgID:
		return m.OrgID()
	case orgposition.FieldCreator:
		return m.Creator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrgPositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orgposition.FieldIsDel:
		return m.OldIsDel(ctx)
	case orgposition.FieldSort:
		return m.OldSort(ctx)
	case orgposition.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orgposition.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orgposition.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orgposition.FieldIsActive:
		return m.OldIsActive(ctx)
	case orgposition.FieldMemo:
		return m.OldMemo(ctx)
	case orgposition.FieldName:
		return m.OldName(ctx)
	case orgposition.FieldCode:
		return m.OldCode(ctx)
	case orgposition.FieldOrgID:
		return m.OldOrgID(ctx)
	case orgposition.FieldCreator:
		return m.OldCreator(ctx)
	}
	return nil, fmt.Errorf("unknown OrgPosition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgPositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orgposition.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case orgposition.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case orgposition.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orgposition.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orgposition.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orgposition.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case orgposition.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case orgposition.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case orgposition.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case orgposition.FieldOrgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case orgposition.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	}
	return fmt.Errorf("unknown OrgPosition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrgPositionMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, orgposition.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrgPositionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orgposition.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgPositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orgposition.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown OrgPosition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrgPositionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orgposition.FieldCreatedAt) {
		fields = append(fields, orgposition.FieldCreatedAt)
	}
	if m.FieldCleared(orgposition.FieldUpdatedAt) {
		fields = append(fields, orgposition.FieldUpdatedAt)
	}
	if m.FieldCleared(orgposition.FieldDeletedAt) {
		fields = append(fields, orgposition.FieldDeletedAt)
	}
	if m.FieldCleared(orgposition.FieldMemo) {
		fields = append(fields, orgposition.FieldMemo)
	}
	if m.FieldCleared(orgposition.FieldName) {
		fields = append(fields, orgposition.FieldName)
	}
	if m.FieldCleared(orgposition.FieldCode) {
		fields = append(fields, orgposition.FieldCode)
	}
	if m.FieldCleared(orgposition.FieldOrgID) {
		fields = append(fields, orgposition.FieldOrgID)
	}
	if m.FieldCleared(orgposition.FieldCreator) {
		fields = append(fields, orgposition.FieldCreator)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrgPositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrgPositionMutation) ClearField(name string) error {
	switch name {
	case orgposition.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case orgposition.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case orgposition.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case orgposition.FieldMemo:
		m.ClearMemo()
		return nil
	case orgposition.FieldName:
		m.ClearName()
		return nil
	case orgposition.FieldCode:
		m.ClearCode()
		return nil
	case orgposition.FieldOrgID:
		m.ClearOrgID()
		return nil
	case orgposition.FieldCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgPosition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrgPositionMutation) ResetField(name string) error {
	switch name {
	case orgposition.FieldIsDel:
		m.ResetIsDel()
		return nil
	case orgposition.FieldSort:
		m.ResetSort()
		return nil
	case orgposition.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orgposition.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orgposition.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orgposition.FieldIsActive:
		m.ResetIsActive()
		return nil
	case orgposition.FieldMemo:
		m.ResetMemo()
		return nil
	case orgposition.FieldName:
		m.ResetName()
		return nil
	case orgposition.FieldCode:
		m.ResetCode()
		return nil
	case orgposition.FieldOrgID:
		m.ResetOrgID()
		return nil
	case orgposition.FieldCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgPosition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrgPositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.organ != nil {
		edges = append(edges, orgposition.EdgeOrgan)
	}
	if m.staffs != nil {
		edges = append(edges, orgposition.EdgeStaffs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrgPositionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orgposition.EdgeOrgan:
		if id := m.organ; id != nil {
			return []ent.Value{*id}
		}
	case orgposition.EdgeStaffs:
		ids := make([]ent.Value, 0, len(m.staffs))
		for id := range m.staffs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrgPositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedstaffs != nil {
		edges = append(edges, orgposition.EdgeStaffs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrgPositionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case orgposition.EdgeStaffs:
		ids := make([]ent.Value, 0, len(m.removedstaffs))
		for id := range m.removedstaffs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrgPositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorgan {
		edges = append(edges, orgposition.EdgeOrgan)
	}
	if m.clearedstaffs {
		edges = append(edges, orgposition.EdgeStaffs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrgPositionMutation) EdgeCleared(name string) bool {
	switch name {
	case orgposition.EdgeOrgan:
		return m.clearedorgan
	case orgposition.EdgeStaffs:
		return m.clearedstaffs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrgPositionMutation) ClearEdge(name string) error {
	switch name {
	case orgposition.EdgeOrgan:
		m.ClearOrgan()
		return nil
	}
	return fmt.Errorf("unknown OrgPosition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrgPositionMutation) ResetEdge(name string) error {
	switch name {
	case orgposition.EdgeOrgan:
		m.ResetOrgan()
		return nil
	case orgposition.EdgeStaffs:
		m.ResetStaffs()
		return nil
	}
	return fmt.Errorf("unknown OrgPosition edge %s", name)
}

// OrgStaffMutation represents an operation that mutates the OrgStaff nodes in the graph.
type OrgStaffMutation struct {
	config
	op               Op
	typ              string
	id               *string
	is_del           *bool
	sort             *int32
	addsort          *int32
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	is_active        *bool
	memo             *string
	first_name       *string
	last_name        *string
	mobile           *string
	gender           *int32
	addgender        *int32
	gender_dict_id   *string
	birth_date       *time.Time
	iden_no          *string
	worker_no        *string
	cubicle          *string
	entry_date       *time.Time
	regular_date     *time.Time
	resign_date      *time.Time
	empy_stat        *int32
	addempy_stat     *int32
	empyst_dict_id   *string
	creator          *string
	clearedFields    map[string]struct{}
	organ            *string
	clearedorgan     bool
	iden_addr        *string
	clearediden_addr bool
	resi_addr        *string
	clearedresi_addr bool
	dept             *string
	cleareddept      bool
	posi             *string
	clearedposi      bool
	done             bool
	oldValue         func(context.Context) (*OrgStaff, error)
	predicates       []predicate.OrgStaff
}

var _ ent.Mutation = (*OrgStaffMutation)(nil)

// orgstaffOption allows management of the mutation configuration using functional options.
type orgstaffOption func(*OrgStaffMutation)

// newOrgStaffMutation creates new mutation for the OrgStaff entity.
func newOrgStaffMutation(c config, op Op, opts ...orgstaffOption) *OrgStaffMutation {
	m := &OrgStaffMutation{
		config:        c,
		op:            op,
		typ:           TypeOrgStaff,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrgStaffID sets the ID field of the mutation.
func withOrgStaffID(id string) orgstaffOption {
	return func(m *OrgStaffMutation) {
		var (
			err   error
			once  sync.Once
			value *OrgStaff
		)
		m.oldValue = func(ctx context.Context) (*OrgStaff, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrgStaff.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrgStaff sets the old OrgStaff of the mutation.
func withOrgStaff(node *OrgStaff) orgstaffOption {
	return func(m *OrgStaffMutation) {
		m.oldValue = func(context.Context) (*OrgStaff, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrgStaffMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrgStaffMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrgStaff entities.
func (m *OrgStaffMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrgStaffMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrgStaffMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrgStaff.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *OrgStaffMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *OrgStaffMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *OrgStaffMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *OrgStaffMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *OrgStaffMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *OrgStaffMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *OrgStaffMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *OrgStaffMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OrgStaffMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrgStaffMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *OrgStaffMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[orgstaff.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *OrgStaffMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrgStaffMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, orgstaff.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrgStaffMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrgStaffMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *OrgStaffMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[orgstaff.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *OrgStaffMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrgStaffMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, orgstaff.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrgStaffMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrgStaffMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrgStaffMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[orgstaff.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrgStaffMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrgStaffMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, orgstaff.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *OrgStaffMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *OrgStaffMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *OrgStaffMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMemo sets the "memo" field.
func (m *OrgStaffMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *OrgStaffMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *OrgStaffMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[orgstaff.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *OrgStaffMutation) MemoCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *OrgStaffMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, orgstaff.FieldMemo)
}

// SetFirstName sets the "first_name" field.
func (m *OrgStaffMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *OrgStaffMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldFirstName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *OrgStaffMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[orgstaff.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *OrgStaffMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *OrgStaffMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, orgstaff.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *OrgStaffMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *OrgStaffMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldLastName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *OrgStaffMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[orgstaff.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *OrgStaffMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *OrgStaffMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, orgstaff.FieldLastName)
}

// SetMobile sets the "mobile" field.
func (m *OrgStaffMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *OrgStaffMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldMobile(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *OrgStaffMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[orgstaff.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *OrgStaffMutation) MobileCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *OrgStaffMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, orgstaff.FieldMobile)
}

// SetGender sets the "gender" field.
func (m *OrgStaffMutation) SetGender(i int32) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *OrgStaffMutation) Gender() (r int32, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldGender(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *OrgStaffMutation) AddGender(i int32) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *OrgStaffMutation) AddedGender() (r int32, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ClearGender clears the value of the "gender" field.
func (m *OrgStaffMutation) ClearGender() {
	m.gender = nil
	m.addgender = nil
	m.clearedFields[orgstaff.FieldGender] = struct{}{}
}

// GenderCleared returns if the "gender" field was cleared in this mutation.
func (m *OrgStaffMutation) GenderCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldGender]
	return ok
}

// ResetGender resets all changes to the "gender" field.
func (m *OrgStaffMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
	delete(m.clearedFields, orgstaff.FieldGender)
}

// SetGenderDictID sets the "gender_dict_id" field.
func (m *OrgStaffMutation) SetGenderDictID(s string) {
	m.gender_dict_id = &s
}

// GenderDictID returns the value of the "gender_dict_id" field in the mutation.
func (m *OrgStaffMutation) GenderDictID() (r string, exists bool) {
	v := m.gender_dict_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGenderDictID returns the old "gender_dict_id" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldGenderDictID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenderDictID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenderDictID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenderDictID: %w", err)
	}
	return oldValue.GenderDictID, nil
}

// ClearGenderDictID clears the value of the "gender_dict_id" field.
func (m *OrgStaffMutation) ClearGenderDictID() {
	m.gender_dict_id = nil
	m.clearedFields[orgstaff.FieldGenderDictID] = struct{}{}
}

// GenderDictIDCleared returns if the "gender_dict_id" field was cleared in this mutation.
func (m *OrgStaffMutation) GenderDictIDCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldGenderDictID]
	return ok
}

// ResetGenderDictID resets all changes to the "gender_dict_id" field.
func (m *OrgStaffMutation) ResetGenderDictID() {
	m.gender_dict_id = nil
	delete(m.clearedFields, orgstaff.FieldGenderDictID)
}

// SetBirthDate sets the "birth_date" field.
func (m *OrgStaffMutation) SetBirthDate(t time.Time) {
	m.birth_date = &t
}

// BirthDate returns the value of the "birth_date" field in the mutation.
func (m *OrgStaffMutation) BirthDate() (r time.Time, exists bool) {
	v := m.birth_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthDate returns the old "birth_date" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldBirthDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthDate: %w", err)
	}
	return oldValue.BirthDate, nil
}

// ClearBirthDate clears the value of the "birth_date" field.
func (m *OrgStaffMutation) ClearBirthDate() {
	m.birth_date = nil
	m.clearedFields[orgstaff.FieldBirthDate] = struct{}{}
}

// BirthDateCleared returns if the "birth_date" field was cleared in this mutation.
func (m *OrgStaffMutation) BirthDateCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldBirthDate]
	return ok
}

// ResetBirthDate resets all changes to the "birth_date" field.
func (m *OrgStaffMutation) ResetBirthDate() {
	m.birth_date = nil
	delete(m.clearedFields, orgstaff.FieldBirthDate)
}

// SetIdenNo sets the "iden_no" field.
func (m *OrgStaffMutation) SetIdenNo(s string) {
	m.iden_no = &s
}

// IdenNo returns the value of the "iden_no" field in the mutation.
func (m *OrgStaffMutation) IdenNo() (r string, exists bool) {
	v := m.iden_no
	if v == nil {
		return
	}
	return *v, true
}

// OldIdenNo returns the old "iden_no" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldIdenNo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdenNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdenNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdenNo: %w", err)
	}
	return oldValue.IdenNo, nil
}

// ClearIdenNo clears the value of the "iden_no" field.
func (m *OrgStaffMutation) ClearIdenNo() {
	m.iden_no = nil
	m.clearedFields[orgstaff.FieldIdenNo] = struct{}{}
}

// IdenNoCleared returns if the "iden_no" field was cleared in this mutation.
func (m *OrgStaffMutation) IdenNoCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldIdenNo]
	return ok
}

// ResetIdenNo resets all changes to the "iden_no" field.
func (m *OrgStaffMutation) ResetIdenNo() {
	m.iden_no = nil
	delete(m.clearedFields, orgstaff.FieldIdenNo)
}

// SetIdenAddrID sets the "iden_addr_id" field.
func (m *OrgStaffMutation) SetIdenAddrID(s string) {
	m.iden_addr = &s
}

// IdenAddrID returns the value of the "iden_addr_id" field in the mutation.
func (m *OrgStaffMutation) IdenAddrID() (r string, exists bool) {
	v := m.iden_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldIdenAddrID returns the old "iden_addr_id" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldIdenAddrID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdenAddrID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdenAddrID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdenAddrID: %w", err)
	}
	return oldValue.IdenAddrID, nil
}

// ClearIdenAddrID clears the value of the "iden_addr_id" field.
func (m *OrgStaffMutation) ClearIdenAddrID() {
	m.iden_addr = nil
	m.clearedFields[orgstaff.FieldIdenAddrID] = struct{}{}
}

// IdenAddrIDCleared returns if the "iden_addr_id" field was cleared in this mutation.
func (m *OrgStaffMutation) IdenAddrIDCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldIdenAddrID]
	return ok
}

// ResetIdenAddrID resets all changes to the "iden_addr_id" field.
func (m *OrgStaffMutation) ResetIdenAddrID() {
	m.iden_addr = nil
	delete(m.clearedFields, orgstaff.FieldIdenAddrID)
}

// SetResiAddrID sets the "resi_addr_id" field.
func (m *OrgStaffMutation) SetResiAddrID(s string) {
	m.resi_addr = &s
}

// ResiAddrID returns the value of the "resi_addr_id" field in the mutation.
func (m *OrgStaffMutation) ResiAddrID() (r string, exists bool) {
	v := m.resi_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldResiAddrID returns the old "resi_addr_id" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldResiAddrID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResiAddrID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResiAddrID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResiAddrID: %w", err)
	}
	return oldValue.ResiAddrID, nil
}

// ClearResiAddrID clears the value of the "resi_addr_id" field.
func (m *OrgStaffMutation) ClearResiAddrID() {
	m.resi_addr = nil
	m.clearedFields[orgstaff.FieldResiAddrID] = struct{}{}
}

// ResiAddrIDCleared returns if the "resi_addr_id" field was cleared in this mutation.
func (m *OrgStaffMutation) ResiAddrIDCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldResiAddrID]
	return ok
}

// ResetResiAddrID resets all changes to the "resi_addr_id" field.
func (m *OrgStaffMutation) ResetResiAddrID() {
	m.resi_addr = nil
	delete(m.clearedFields, orgstaff.FieldResiAddrID)
}

// SetWorkerNo sets the "worker_no" field.
func (m *OrgStaffMutation) SetWorkerNo(s string) {
	m.worker_no = &s
}

// WorkerNo returns the value of the "worker_no" field in the mutation.
func (m *OrgStaffMutation) WorkerNo() (r string, exists bool) {
	v := m.worker_no
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkerNo returns the old "worker_no" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldWorkerNo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkerNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkerNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkerNo: %w", err)
	}
	return oldValue.WorkerNo, nil
}

// ClearWorkerNo clears the value of the "worker_no" field.
func (m *OrgStaffMutation) ClearWorkerNo() {
	m.worker_no = nil
	m.clearedFields[orgstaff.FieldWorkerNo] = struct{}{}
}

// WorkerNoCleared returns if the "worker_no" field was cleared in this mutation.
func (m *OrgStaffMutation) WorkerNoCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldWorkerNo]
	return ok
}

// ResetWorkerNo resets all changes to the "worker_no" field.
func (m *OrgStaffMutation) ResetWorkerNo() {
	m.worker_no = nil
	delete(m.clearedFields, orgstaff.FieldWorkerNo)
}

// SetCubicle sets the "cubicle" field.
func (m *OrgStaffMutation) SetCubicle(s string) {
	m.cubicle = &s
}

// Cubicle returns the value of the "cubicle" field in the mutation.
func (m *OrgStaffMutation) Cubicle() (r string, exists bool) {
	v := m.cubicle
	if v == nil {
		return
	}
	return *v, true
}

// OldCubicle returns the old "cubicle" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldCubicle(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCubicle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCubicle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCubicle: %w", err)
	}
	return oldValue.Cubicle, nil
}

// ClearCubicle clears the value of the "cubicle" field.
func (m *OrgStaffMutation) ClearCubicle() {
	m.cubicle = nil
	m.clearedFields[orgstaff.FieldCubicle] = struct{}{}
}

// CubicleCleared returns if the "cubicle" field was cleared in this mutation.
func (m *OrgStaffMutation) CubicleCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldCubicle]
	return ok
}

// ResetCubicle resets all changes to the "cubicle" field.
func (m *OrgStaffMutation) ResetCubicle() {
	m.cubicle = nil
	delete(m.clearedFields, orgstaff.FieldCubicle)
}

// SetEntryDate sets the "entry_date" field.
func (m *OrgStaffMutation) SetEntryDate(t time.Time) {
	m.entry_date = &t
}

// EntryDate returns the value of the "entry_date" field in the mutation.
func (m *OrgStaffMutation) EntryDate() (r time.Time, exists bool) {
	v := m.entry_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryDate returns the old "entry_date" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldEntryDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntryDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntryDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryDate: %w", err)
	}
	return oldValue.EntryDate, nil
}

// ClearEntryDate clears the value of the "entry_date" field.
func (m *OrgStaffMutation) ClearEntryDate() {
	m.entry_date = nil
	m.clearedFields[orgstaff.FieldEntryDate] = struct{}{}
}

// EntryDateCleared returns if the "entry_date" field was cleared in this mutation.
func (m *OrgStaffMutation) EntryDateCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldEntryDate]
	return ok
}

// ResetEntryDate resets all changes to the "entry_date" field.
func (m *OrgStaffMutation) ResetEntryDate() {
	m.entry_date = nil
	delete(m.clearedFields, orgstaff.FieldEntryDate)
}

// SetRegularDate sets the "regular_date" field.
func (m *OrgStaffMutation) SetRegularDate(t time.Time) {
	m.regular_date = &t
}

// RegularDate returns the value of the "regular_date" field in the mutation.
func (m *OrgStaffMutation) RegularDate() (r time.Time, exists bool) {
	v := m.regular_date
	if v == nil {
		return
	}
	return *v, true
}

// OldRegularDate returns the old "regular_date" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldRegularDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegularDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegularDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegularDate: %w", err)
	}
	return oldValue.RegularDate, nil
}

// ClearRegularDate clears the value of the "regular_date" field.
func (m *OrgStaffMutation) ClearRegularDate() {
	m.regular_date = nil
	m.clearedFields[orgstaff.FieldRegularDate] = struct{}{}
}

// RegularDateCleared returns if the "regular_date" field was cleared in this mutation.
func (m *OrgStaffMutation) RegularDateCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldRegularDate]
	return ok
}

// ResetRegularDate resets all changes to the "regular_date" field.
func (m *OrgStaffMutation) ResetRegularDate() {
	m.regular_date = nil
	delete(m.clearedFields, orgstaff.FieldRegularDate)
}

// SetResignDate sets the "resign_date" field.
func (m *OrgStaffMutation) SetResignDate(t time.Time) {
	m.resign_date = &t
}

// ResignDate returns the value of the "resign_date" field in the mutation.
func (m *OrgStaffMutation) ResignDate() (r time.Time, exists bool) {
	v := m.resign_date
	if v == nil {
		return
	}
	return *v, true
}

// OldResignDate returns the old "resign_date" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldResignDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResignDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResignDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResignDate: %w", err)
	}
	return oldValue.ResignDate, nil
}

// ClearResignDate clears the value of the "resign_date" field.
func (m *OrgStaffMutation) ClearResignDate() {
	m.resign_date = nil
	m.clearedFields[orgstaff.FieldResignDate] = struct{}{}
}

// ResignDateCleared returns if the "resign_date" field was cleared in this mutation.
func (m *OrgStaffMutation) ResignDateCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldResignDate]
	return ok
}

// ResetResignDate resets all changes to the "resign_date" field.
func (m *OrgStaffMutation) ResetResignDate() {
	m.resign_date = nil
	delete(m.clearedFields, orgstaff.FieldResignDate)
}

// SetOrgID sets the "org_id" field.
func (m *OrgStaffMutation) SetOrgID(s string) {
	m.organ = &s
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *OrgStaffMutation) OrgID() (r string, exists bool) {
	v := m.organ
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldOrgID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ClearOrgID clears the value of the "org_id" field.
func (m *OrgStaffMutation) ClearOrgID() {
	m.organ = nil
	m.clearedFields[orgstaff.FieldOrgID] = struct{}{}
}

// OrgIDCleared returns if the "org_id" field was cleared in this mutation.
func (m *OrgStaffMutation) OrgIDCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldOrgID]
	return ok
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *OrgStaffMutation) ResetOrgID() {
	m.organ = nil
	delete(m.clearedFields, orgstaff.FieldOrgID)
}

// SetEmpyStat sets the "empy_stat" field.
func (m *OrgStaffMutation) SetEmpyStat(i int32) {
	m.empy_stat = &i
	m.addempy_stat = nil
}

// EmpyStat returns the value of the "empy_stat" field in the mutation.
func (m *OrgStaffMutation) EmpyStat() (r int32, exists bool) {
	v := m.empy_stat
	if v == nil {
		return
	}
	return *v, true
}

// OldEmpyStat returns the old "empy_stat" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldEmpyStat(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmpyStat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmpyStat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmpyStat: %w", err)
	}
	return oldValue.EmpyStat, nil
}

// AddEmpyStat adds i to the "empy_stat" field.
func (m *OrgStaffMutation) AddEmpyStat(i int32) {
	if m.addempy_stat != nil {
		*m.addempy_stat += i
	} else {
		m.addempy_stat = &i
	}
}

// AddedEmpyStat returns the value that was added to the "empy_stat" field in this mutation.
func (m *OrgStaffMutation) AddedEmpyStat() (r int32, exists bool) {
	v := m.addempy_stat
	if v == nil {
		return
	}
	return *v, true
}

// ResetEmpyStat resets all changes to the "empy_stat" field.
func (m *OrgStaffMutation) ResetEmpyStat() {
	m.empy_stat = nil
	m.addempy_stat = nil
}

// SetEmpystDictID sets the "empyst_dict_id" field.
func (m *OrgStaffMutation) SetEmpystDictID(s string) {
	m.empyst_dict_id = &s
}

// EmpystDictID returns the value of the "empyst_dict_id" field in the mutation.
func (m *OrgStaffMutation) EmpystDictID() (r string, exists bool) {
	v := m.empyst_dict_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEmpystDictID returns the old "empyst_dict_id" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldEmpystDictID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmpystDictID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmpystDictID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmpystDictID: %w", err)
	}
	return oldValue.EmpystDictID, nil
}

// ClearEmpystDictID clears the value of the "empyst_dict_id" field.
func (m *OrgStaffMutation) ClearEmpystDictID() {
	m.empyst_dict_id = nil
	m.clearedFields[orgstaff.FieldEmpystDictID] = struct{}{}
}

// EmpystDictIDCleared returns if the "empyst_dict_id" field was cleared in this mutation.
func (m *OrgStaffMutation) EmpystDictIDCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldEmpystDictID]
	return ok
}

// ResetEmpystDictID resets all changes to the "empyst_dict_id" field.
func (m *OrgStaffMutation) ResetEmpystDictID() {
	m.empyst_dict_id = nil
	delete(m.clearedFields, orgstaff.FieldEmpystDictID)
}

// SetDeptID sets the "dept_id" field.
func (m *OrgStaffMutation) SetDeptID(s string) {
	m.dept = &s
}

// DeptID returns the value of the "dept_id" field in the mutation.
func (m *OrgStaffMutation) DeptID() (r string, exists bool) {
	v := m.dept
	if v == nil {
		return
	}
	return *v, true
}

// OldDeptID returns the old "dept_id" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldDeptID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeptID: %w", err)
	}
	return oldValue.DeptID, nil
}

// ClearDeptID clears the value of the "dept_id" field.
func (m *OrgStaffMutation) ClearDeptID() {
	m.dept = nil
	m.clearedFields[orgstaff.FieldDeptID] = struct{}{}
}

// DeptIDCleared returns if the "dept_id" field was cleared in this mutation.
func (m *OrgStaffMutation) DeptIDCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldDeptID]
	return ok
}

// ResetDeptID resets all changes to the "dept_id" field.
func (m *OrgStaffMutation) ResetDeptID() {
	m.dept = nil
	delete(m.clearedFields, orgstaff.FieldDeptID)
}

// SetPosiID sets the "posi_id" field.
func (m *OrgStaffMutation) SetPosiID(s string) {
	m.posi = &s
}

// PosiID returns the value of the "posi_id" field in the mutation.
func (m *OrgStaffMutation) PosiID() (r string, exists bool) {
	v := m.posi
	if v == nil {
		return
	}
	return *v, true
}

// OldPosiID returns the old "posi_id" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldPosiID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosiID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosiID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosiID: %w", err)
	}
	return oldValue.PosiID, nil
}

// ClearPosiID clears the value of the "posi_id" field.
func (m *OrgStaffMutation) ClearPosiID() {
	m.posi = nil
	m.clearedFields[orgstaff.FieldPosiID] = struct{}{}
}

// PosiIDCleared returns if the "posi_id" field was cleared in this mutation.
func (m *OrgStaffMutation) PosiIDCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldPosiID]
	return ok
}

// ResetPosiID resets all changes to the "posi_id" field.
func (m *OrgStaffMutation) ResetPosiID() {
	m.posi = nil
	delete(m.clearedFields, orgstaff.FieldPosiID)
}

// SetCreator sets the "creator" field.
func (m *OrgStaffMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *OrgStaffMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the OrgStaff entity.
// If the OrgStaff object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgStaffMutation) OldCreator(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *OrgStaffMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[orgstaff.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *OrgStaffMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[orgstaff.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *OrgStaffMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, orgstaff.FieldCreator)
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by id.
func (m *OrgStaffMutation) SetOrganID(id string) {
	m.organ = &id
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (m *OrgStaffMutation) ClearOrgan() {
	m.clearedorgan = true
}

// OrganCleared reports if the "organ" edge to the OrgOrgan entity was cleared.
func (m *OrgStaffMutation) OrganCleared() bool {
	return m.OrgIDCleared() || m.clearedorgan
}

// OrganID returns the "organ" edge ID in the mutation.
func (m *OrgStaffMutation) OrganID() (id string, exists bool) {
	if m.organ != nil {
		return *m.organ, true
	}
	return
}

// OrganIDs returns the "organ" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganID instead. It exists only for internal usage by the builders.
func (m *OrgStaffMutation) OrganIDs() (ids []string) {
	if id := m.organ; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrgan resets all changes to the "organ" edge.
func (m *OrgStaffMutation) ResetOrgan() {
	m.organ = nil
	m.clearedorgan = false
}

// ClearIdenAddr clears the "iden_addr" edge to the SysAddress entity.
func (m *OrgStaffMutation) ClearIdenAddr() {
	m.clearediden_addr = true
}

// IdenAddrCleared reports if the "iden_addr" edge to the SysAddress entity was cleared.
func (m *OrgStaffMutation) IdenAddrCleared() bool {
	return m.IdenAddrIDCleared() || m.clearediden_addr
}

// IdenAddrIDs returns the "iden_addr" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IdenAddrID instead. It exists only for internal usage by the builders.
func (m *OrgStaffMutation) IdenAddrIDs() (ids []string) {
	if id := m.iden_addr; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIdenAddr resets all changes to the "iden_addr" edge.
func (m *OrgStaffMutation) ResetIdenAddr() {
	m.iden_addr = nil
	m.clearediden_addr = false
}

// ClearResiAddr clears the "resi_addr" edge to the SysAddress entity.
func (m *OrgStaffMutation) ClearResiAddr() {
	m.clearedresi_addr = true
}

// ResiAddrCleared reports if the "resi_addr" edge to the SysAddress entity was cleared.
func (m *OrgStaffMutation) ResiAddrCleared() bool {
	return m.ResiAddrIDCleared() || m.clearedresi_addr
}

// ResiAddrIDs returns the "resi_addr" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ResiAddrID instead. It exists only for internal usage by the builders.
func (m *OrgStaffMutation) ResiAddrIDs() (ids []string) {
	if id := m.resi_addr; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetResiAddr resets all changes to the "resi_addr" edge.
func (m *OrgStaffMutation) ResetResiAddr() {
	m.resi_addr = nil
	m.clearedresi_addr = false
}

// ClearDept clears the "dept" edge to the OrgDept entity.
func (m *OrgStaffMutation) ClearDept() {
	m.cleareddept = true
}

// DeptCleared reports if the "dept" edge to the OrgDept entity was cleared.
func (m *OrgStaffMutation) DeptCleared() bool {
	return m.DeptIDCleared() || m.cleareddept
}

// DeptIDs returns the "dept" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DeptID instead. It exists only for internal usage by the builders.
func (m *OrgStaffMutation) DeptIDs() (ids []string) {
	if id := m.dept; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDept resets all changes to the "dept" edge.
func (m *OrgStaffMutation) ResetDept() {
	m.dept = nil
	m.cleareddept = false
}

// ClearPosi clears the "posi" edge to the OrgPosition entity.
func (m *OrgStaffMutation) ClearPosi() {
	m.clearedposi = true
}

// PosiCleared reports if the "posi" edge to the OrgPosition entity was cleared.
func (m *OrgStaffMutation) PosiCleared() bool {
	return m.PosiIDCleared() || m.clearedposi
}

// PosiIDs returns the "posi" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PosiID instead. It exists only for internal usage by the builders.
func (m *OrgStaffMutation) PosiIDs() (ids []string) {
	if id := m.posi; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPosi resets all changes to the "posi" edge.
func (m *OrgStaffMutation) ResetPosi() {
	m.posi = nil
	m.clearedposi = false
}

// Where appends a list predicates to the OrgStaffMutation builder.
func (m *OrgStaffMutation) Where(ps ...predicate.OrgStaff) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrgStaffMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrgStaffMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrgStaff, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrgStaffMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrgStaffMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrgStaff).
func (m *OrgStaffMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrgStaffMutation) Fields() []string {
	fields := make([]string, 0, 27)
	if m.is_del != nil {
		fields = append(fields, orgstaff.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, orgstaff.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, orgstaff.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orgstaff.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orgstaff.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, orgstaff.FieldIsActive)
	}
	if m.memo != nil {
		fields = append(fields, orgstaff.FieldMemo)
	}
	if m.first_name != nil {
		fields = append(fields, orgstaff.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, orgstaff.FieldLastName)
	}
	if m.mobile != nil {
		fields = append(fields, orgstaff.FieldMobile)
	}
	if m.gender != nil {
		fields = append(fields, orgstaff.FieldGender)
	}
	if m.gender_dict_id != nil {
		fields = append(fields, orgstaff.FieldGenderDictID)
	}
	if m.birth_date != nil {
		fields = append(fields, orgstaff.FieldBirthDate)
	}
	if m.iden_no != nil {
		fields = append(fields, orgstaff.FieldIdenNo)
	}
	if m.iden_addr != nil {
		fields = append(fields, orgstaff.FieldIdenAddrID)
	}
	if m.resi_addr != nil {
		fields = append(fields, orgstaff.FieldResiAddrID)
	}
	if m.worker_no != nil {
		fields = append(fields, orgstaff.FieldWorkerNo)
	}
	if m.cubicle != nil {
		fields = append(fields, orgstaff.FieldCubicle)
	}
	if m.entry_date != nil {
		fields = append(fields, orgstaff.FieldEntryDate)
	}
	if m.regular_date != nil {
		fields = append(fields, orgstaff.FieldRegularDate)
	}
	if m.resign_date != nil {
		fields = append(fields, orgstaff.FieldResignDate)
	}
	if m.organ != nil {
		fields = append(fields, orgstaff.FieldOrgID)
	}
	if m.empy_stat != nil {
		fields = append(fields, orgstaff.FieldEmpyStat)
	}
	if m.empyst_dict_id != nil {
		fields = append(fields, orgstaff.FieldEmpystDictID)
	}
	if m.dept != nil {
		fields = append(fields, orgstaff.FieldDeptID)
	}
	if m.posi != nil {
		fields = append(fields, orgstaff.FieldPosiID)
	}
	if m.creator != nil {
		fields = append(fields, orgstaff.FieldCreator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrgStaffMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orgstaff.FieldIsDel:
		return m.IsDel()
	case orgstaff.FieldSort:
		return m.Sort()
	case orgstaff.FieldCreatedAt:
		return m.CreatedAt()
	case orgstaff.FieldUpdatedAt:
		return m.UpdatedAt()
	case orgstaff.FieldDeletedAt:
		return m.DeletedAt()
	case orgstaff.FieldIsActive:
		return m.IsActive()
	case orgstaff.FieldMemo:
		return m.Memo()
	case orgstaff.FieldFirstName:
		return m.FirstName()
	case orgstaff.FieldLastName:
		return m.LastName()
	case orgstaff.FieldMobile:
		return m.Mobile()
	case orgstaff.FieldGender:
		return m.Gender()
	case orgstaff.FieldGenderDictID:
		return m.GenderDictID()
	case orgstaff.FieldBirthDate:
		return m.BirthDate()
	case orgstaff.FieldIdenNo:
		return m.IdenNo()
	case orgstaff.FieldIdenAddrID:
		return m.IdenAddrID()
	case orgstaff.FieldResiAddrID:
		return m.ResiAddrID()
	case orgstaff.FieldWorkerNo:
		return m.WorkerNo()
	case orgstaff.FieldCubicle:
		return m.Cubicle()
	case orgstaff.FieldEntryDate:
		return m.EntryDate()
	case orgstaff.FieldRegularDate:
		return m.RegularDate()
	case orgstaff.FieldResignDate:
		return m.ResignDate()
	case orgstaff.FieldOrgID:
		return m.OrgID()
	case orgstaff.FieldEmpyStat:
		return m.EmpyStat()
	case orgstaff.FieldEmpystDictID:
		return m.EmpystDictID()
	case orgstaff.FieldDeptID:
		return m.DeptID()
	case orgstaff.FieldPosiID:
		return m.PosiID()
	case orgstaff.FieldCreator:
		return m.Creator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrgStaffMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orgstaff.FieldIsDel:
		return m.OldIsDel(ctx)
	case orgstaff.FieldSort:
		return m.OldSort(ctx)
	case orgstaff.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orgstaff.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orgstaff.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orgstaff.FieldIsActive:
		return m.OldIsActive(ctx)
	case orgstaff.FieldMemo:
		return m.OldMemo(ctx)
	case orgstaff.FieldFirstName:
		return m.OldFirstName(ctx)
	case orgstaff.FieldLastName:
		return m.OldLastName(ctx)
	case orgstaff.FieldMobile:
		return m.OldMobile(ctx)
	case orgstaff.FieldGender:
		return m.OldGender(ctx)
	case orgstaff.FieldGenderDictID:
		return m.OldGenderDictID(ctx)
	case orgstaff.FieldBirthDate:
		return m.OldBirthDate(ctx)
	case orgstaff.FieldIdenNo:
		return m.OldIdenNo(ctx)
	case orgstaff.FieldIdenAddrID:
		return m.OldIdenAddrID(ctx)
	case orgstaff.FieldResiAddrID:
		return m.OldResiAddrID(ctx)
	case orgstaff.FieldWorkerNo:
		return m.OldWorkerNo(ctx)
	case orgstaff.FieldCubicle:
		return m.OldCubicle(ctx)
	case orgstaff.FieldEntryDate:
		return m.OldEntryDate(ctx)
	case orgstaff.FieldRegularDate:
		return m.OldRegularDate(ctx)
	case orgstaff.FieldResignDate:
		return m.OldResignDate(ctx)
	case orgstaff.FieldOrgID:
		return m.OldOrgID(ctx)
	case orgstaff.FieldEmpyStat:
		return m.OldEmpyStat(ctx)
	case orgstaff.FieldEmpystDictID:
		return m.OldEmpystDictID(ctx)
	case orgstaff.FieldDeptID:
		return m.OldDeptID(ctx)
	case orgstaff.FieldPosiID:
		return m.OldPosiID(ctx)
	case orgstaff.FieldCreator:
		return m.OldCreator(ctx)
	}
	return nil, fmt.Errorf("unknown OrgStaff field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgStaffMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orgstaff.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case orgstaff.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case orgstaff.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orgstaff.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orgstaff.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orgstaff.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case orgstaff.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case orgstaff.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case orgstaff.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case orgstaff.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case orgstaff.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case orgstaff.FieldGenderDictID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenderDictID(v)
		return nil
	case orgstaff.FieldBirthDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthDate(v)
		return nil
	case orgstaff.FieldIdenNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdenNo(v)
		return nil
	case orgstaff.FieldIdenAddrID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdenAddrID(v)
		return nil
	case orgstaff.FieldResiAddrID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResiAddrID(v)
		return nil
	case orgstaff.FieldWorkerNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkerNo(v)
		return nil
	case orgstaff.FieldCubicle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCubicle(v)
		return nil
	case orgstaff.FieldEntryDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryDate(v)
		return nil
	case orgstaff.FieldRegularDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegularDate(v)
		return nil
	case orgstaff.FieldResignDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResignDate(v)
		return nil
	case orgstaff.FieldOrgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case orgstaff.FieldEmpyStat:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmpyStat(v)
		return nil
	case orgstaff.FieldEmpystDictID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmpystDictID(v)
		return nil
	case orgstaff.FieldDeptID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeptID(v)
		return nil
	case orgstaff.FieldPosiID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosiID(v)
		return nil
	case orgstaff.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	}
	return fmt.Errorf("unknown OrgStaff field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrgStaffMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, orgstaff.FieldSort)
	}
	if m.addgender != nil {
		fields = append(fields, orgstaff.FieldGender)
	}
	if m.addempy_stat != nil {
		fields = append(fields, orgstaff.FieldEmpyStat)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrgStaffMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orgstaff.FieldSort:
		return m.AddedSort()
	case orgstaff.FieldGender:
		return m.AddedGender()
	case orgstaff.FieldEmpyStat:
		return m.AddedEmpyStat()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgStaffMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orgstaff.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case orgstaff.FieldGender:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case orgstaff.FieldEmpyStat:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEmpyStat(v)
		return nil
	}
	return fmt.Errorf("unknown OrgStaff numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrgStaffMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orgstaff.FieldCreatedAt) {
		fields = append(fields, orgstaff.FieldCreatedAt)
	}
	if m.FieldCleared(orgstaff.FieldUpdatedAt) {
		fields = append(fields, orgstaff.FieldUpdatedAt)
	}
	if m.FieldCleared(orgstaff.FieldDeletedAt) {
		fields = append(fields, orgstaff.FieldDeletedAt)
	}
	if m.FieldCleared(orgstaff.FieldMemo) {
		fields = append(fields, orgstaff.FieldMemo)
	}
	if m.FieldCleared(orgstaff.FieldFirstName) {
		fields = append(fields, orgstaff.FieldFirstName)
	}
	if m.FieldCleared(orgstaff.FieldLastName) {
		fields = append(fields, orgstaff.FieldLastName)
	}
	if m.FieldCleared(orgstaff.FieldMobile) {
		fields = append(fields, orgstaff.FieldMobile)
	}
	if m.FieldCleared(orgstaff.FieldGender) {
		fields = append(fields, orgstaff.FieldGender)
	}
	if m.FieldCleared(orgstaff.FieldGenderDictID) {
		fields = append(fields, orgstaff.FieldGenderDictID)
	}
	if m.FieldCleared(orgstaff.FieldBirthDate) {
		fields = append(fields, orgstaff.FieldBirthDate)
	}
	if m.FieldCleared(orgstaff.FieldIdenNo) {
		fields = append(fields, orgstaff.FieldIdenNo)
	}
	if m.FieldCleared(orgstaff.FieldIdenAddrID) {
		fields = append(fields, orgstaff.FieldIdenAddrID)
	}
	if m.FieldCleared(orgstaff.FieldResiAddrID) {
		fields = append(fields, orgstaff.FieldResiAddrID)
	}
	if m.FieldCleared(orgstaff.FieldWorkerNo) {
		fields = append(fields, orgstaff.FieldWorkerNo)
	}
	if m.FieldCleared(orgstaff.FieldCubicle) {
		fields = append(fields, orgstaff.FieldCubicle)
	}
	if m.FieldCleared(orgstaff.FieldEntryDate) {
		fields = append(fields, orgstaff.FieldEntryDate)
	}
	if m.FieldCleared(orgstaff.FieldRegularDate) {
		fields = append(fields, orgstaff.FieldRegularDate)
	}
	if m.FieldCleared(orgstaff.FieldResignDate) {
		fields = append(fields, orgstaff.FieldResignDate)
	}
	if m.FieldCleared(orgstaff.FieldOrgID) {
		fields = append(fields, orgstaff.FieldOrgID)
	}
	if m.FieldCleared(orgstaff.FieldEmpystDictID) {
		fields = append(fields, orgstaff.FieldEmpystDictID)
	}
	if m.FieldCleared(orgstaff.FieldDeptID) {
		fields = append(fields, orgstaff.FieldDeptID)
	}
	if m.FieldCleared(orgstaff.FieldPosiID) {
		fields = append(fields, orgstaff.FieldPosiID)
	}
	if m.FieldCleared(orgstaff.FieldCreator) {
		fields = append(fields, orgstaff.FieldCreator)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrgStaffMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrgStaffMutation) ClearField(name string) error {
	switch name {
	case orgstaff.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case orgstaff.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case orgstaff.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case orgstaff.FieldMemo:
		m.ClearMemo()
		return nil
	case orgstaff.FieldFirstName:
		m.ClearFirstName()
		return nil
	case orgstaff.FieldLastName:
		m.ClearLastName()
		return nil
	case orgstaff.FieldMobile:
		m.ClearMobile()
		return nil
	case orgstaff.FieldGender:
		m.ClearGender()
		return nil
	case orgstaff.FieldGenderDictID:
		m.ClearGenderDictID()
		return nil
	case orgstaff.FieldBirthDate:
		m.ClearBirthDate()
		return nil
	case orgstaff.FieldIdenNo:
		m.ClearIdenNo()
		return nil
	case orgstaff.FieldIdenAddrID:
		m.ClearIdenAddrID()
		return nil
	case orgstaff.FieldResiAddrID:
		m.ClearResiAddrID()
		return nil
	case orgstaff.FieldWorkerNo:
		m.ClearWorkerNo()
		return nil
	case orgstaff.FieldCubicle:
		m.ClearCubicle()
		return nil
	case orgstaff.FieldEntryDate:
		m.ClearEntryDate()
		return nil
	case orgstaff.FieldRegularDate:
		m.ClearRegularDate()
		return nil
	case orgstaff.FieldResignDate:
		m.ClearResignDate()
		return nil
	case orgstaff.FieldOrgID:
		m.ClearOrgID()
		return nil
	case orgstaff.FieldEmpystDictID:
		m.ClearEmpystDictID()
		return nil
	case orgstaff.FieldDeptID:
		m.ClearDeptID()
		return nil
	case orgstaff.FieldPosiID:
		m.ClearPosiID()
		return nil
	case orgstaff.FieldCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgStaff nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrgStaffMutation) ResetField(name string) error {
	switch name {
	case orgstaff.FieldIsDel:
		m.ResetIsDel()
		return nil
	case orgstaff.FieldSort:
		m.ResetSort()
		return nil
	case orgstaff.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orgstaff.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orgstaff.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orgstaff.FieldIsActive:
		m.ResetIsActive()
		return nil
	case orgstaff.FieldMemo:
		m.ResetMemo()
		return nil
	case orgstaff.FieldFirstName:
		m.ResetFirstName()
		return nil
	case orgstaff.FieldLastName:
		m.ResetLastName()
		return nil
	case orgstaff.FieldMobile:
		m.ResetMobile()
		return nil
	case orgstaff.FieldGender:
		m.ResetGender()
		return nil
	case orgstaff.FieldGenderDictID:
		m.ResetGenderDictID()
		return nil
	case orgstaff.FieldBirthDate:
		m.ResetBirthDate()
		return nil
	case orgstaff.FieldIdenNo:
		m.ResetIdenNo()
		return nil
	case orgstaff.FieldIdenAddrID:
		m.ResetIdenAddrID()
		return nil
	case orgstaff.FieldResiAddrID:
		m.ResetResiAddrID()
		return nil
	case orgstaff.FieldWorkerNo:
		m.ResetWorkerNo()
		return nil
	case orgstaff.FieldCubicle:
		m.ResetCubicle()
		return nil
	case orgstaff.FieldEntryDate:
		m.ResetEntryDate()
		return nil
	case orgstaff.FieldRegularDate:
		m.ResetRegularDate()
		return nil
	case orgstaff.FieldResignDate:
		m.ResetResignDate()
		return nil
	case orgstaff.FieldOrgID:
		m.ResetOrgID()
		return nil
	case orgstaff.FieldEmpyStat:
		m.ResetEmpyStat()
		return nil
	case orgstaff.FieldEmpystDictID:
		m.ResetEmpystDictID()
		return nil
	case orgstaff.FieldDeptID:
		m.ResetDeptID()
		return nil
	case orgstaff.FieldPosiID:
		m.ResetPosiID()
		return nil
	case orgstaff.FieldCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown OrgStaff field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrgStaffMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.organ != nil {
		edges = append(edges, orgstaff.EdgeOrgan)
	}
	if m.iden_addr != nil {
		edges = append(edges, orgstaff.EdgeIdenAddr)
	}
	if m.resi_addr != nil {
		edges = append(edges, orgstaff.EdgeResiAddr)
	}
	if m.dept != nil {
		edges = append(edges, orgstaff.EdgeDept)
	}
	if m.posi != nil {
		edges = append(edges, orgstaff.EdgePosi)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrgStaffMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orgstaff.EdgeOrgan:
		if id := m.organ; id != nil {
			return []ent.Value{*id}
		}
	case orgstaff.EdgeIdenAddr:
		if id := m.iden_addr; id != nil {
			return []ent.Value{*id}
		}
	case orgstaff.EdgeResiAddr:
		if id := m.resi_addr; id != nil {
			return []ent.Value{*id}
		}
	case orgstaff.EdgeDept:
		if id := m.dept; id != nil {
			return []ent.Value{*id}
		}
	case orgstaff.EdgePosi:
		if id := m.posi; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrgStaffMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrgStaffMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrgStaffMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedorgan {
		edges = append(edges, orgstaff.EdgeOrgan)
	}
	if m.clearediden_addr {
		edges = append(edges, orgstaff.EdgeIdenAddr)
	}
	if m.clearedresi_addr {
		edges = append(edges, orgstaff.EdgeResiAddr)
	}
	if m.cleareddept {
		edges = append(edges, orgstaff.EdgeDept)
	}
	if m.clearedposi {
		edges = append(edges, orgstaff.EdgePosi)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrgStaffMutation) EdgeCleared(name string) bool {
	switch name {
	case orgstaff.EdgeOrgan:
		return m.clearedorgan
	case orgstaff.EdgeIdenAddr:
		return m.clearediden_addr
	case orgstaff.EdgeResiAddr:
		return m.clearedresi_addr
	case orgstaff.EdgeDept:
		return m.cleareddept
	case orgstaff.EdgePosi:
		return m.clearedposi
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrgStaffMutation) ClearEdge(name string) error {
	switch name {
	case orgstaff.EdgeOrgan:
		m.ClearOrgan()
		return nil
	case orgstaff.EdgeIdenAddr:
		m.ClearIdenAddr()
		return nil
	case orgstaff.EdgeResiAddr:
		m.ClearResiAddr()
		return nil
	case orgstaff.EdgeDept:
		m.ClearDept()
		return nil
	case orgstaff.EdgePosi:
		m.ClearPosi()
		return nil
	}
	return fmt.Errorf("unknown OrgStaff unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrgStaffMutation) ResetEdge(name string) error {
	switch name {
	case orgstaff.EdgeOrgan:
		m.ResetOrgan()
		return nil
	case orgstaff.EdgeIdenAddr:
		m.ResetIdenAddr()
		return nil
	case orgstaff.EdgeResiAddr:
		m.ResetResiAddr()
		return nil
	case orgstaff.EdgeDept:
		m.ResetDept()
		return nil
	case orgstaff.EdgePosi:
		m.ResetPosi()
		return nil
	}
	return fmt.Errorf("unknown OrgStaff edge %s", name)
}

// SysAddressMutation represents an operation that mutates the SysAddress nodes in the graph.
type SysAddressMutation struct {
	config
	op                Op
	typ               string
	id                *string
	is_del            *bool
	user_id           *string
	org_id            *string
	sort              *int32
	addsort           *int32
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	is_active         *bool
	memo              *string
	country           *string
	province          *string
	city              *string
	county            *string
	country_id        *string
	province_id       *string
	city_id           *string
	county_id         *string
	zip_code          *string
	daddr             *string
	first_name        *string
	last_name         *string
	area_code         *string
	mobile            *string
	creator           *string
	clearedFields     map[string]struct{}
	organ             *string
	clearedorgan      bool
	staff_resi        *string
	clearedstaff_resi bool
	staff_iden        *string
	clearedstaff_iden bool
	done              bool
	oldValue          func(context.Context) (*SysAddress, error)
	predicates        []predicate.SysAddress
}

var _ ent.Mutation = (*SysAddressMutation)(nil)

// sysaddressOption allows management of the mutation configuration using functional options.
type sysaddressOption func(*SysAddressMutation)

// newSysAddressMutation creates new mutation for the SysAddress entity.
func newSysAddressMutation(c config, op Op, opts ...sysaddressOption) *SysAddressMutation {
	m := &SysAddressMutation{
		config:        c,
		op:            op,
		typ:           TypeSysAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysAddressID sets the ID field of the mutation.
func withSysAddressID(id string) sysaddressOption {
	return func(m *SysAddressMutation) {
		var (
			err   error
			once  sync.Once
			value *SysAddress
		)
		m.oldValue = func(ctx context.Context) (*SysAddress, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysAddress.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysAddress sets the old SysAddress of the mutation.
func withSysAddress(node *SysAddress) sysaddressOption {
	return func(m *SysAddressMutation) {
		m.oldValue = func(context.Context) (*SysAddress, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysAddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysAddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysAddress entities.
func (m *SysAddressMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysAddressMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysAddressMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysAddress.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysAddressMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysAddressMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysAddressMutation) ResetIsDel() {
	m.is_del = nil
}

// SetUserID sets the "user_id" field.
func (m *SysAddressMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SysAddressMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *SysAddressMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[sysaddress.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *SysAddressMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SysAddressMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, sysaddress.FieldUserID)
}

// SetOrgID sets the "org_id" field.
func (m *SysAddressMutation) SetOrgID(s string) {
	m.org_id = &s
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *SysAddressMutation) OrgID() (r string, exists bool) {
	v := m.org_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldOrgID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ClearOrgID clears the value of the "org_id" field.
func (m *SysAddressMutation) ClearOrgID() {
	m.org_id = nil
	m.clearedFields[sysaddress.FieldOrgID] = struct{}{}
}

// OrgIDCleared returns if the "org_id" field was cleared in this mutation.
func (m *SysAddressMutation) OrgIDCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldOrgID]
	return ok
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *SysAddressMutation) ResetOrgID() {
	m.org_id = nil
	delete(m.clearedFields, sysaddress.FieldOrgID)
}

// SetSort sets the "sort" field.
func (m *SysAddressMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysAddressMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysAddressMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysAddressMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysAddressMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysAddressMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysAddressMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysAddressMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysaddress.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysAddressMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysAddressMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysaddress.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysAddressMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysAddressMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysAddressMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysaddress.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysAddressMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysAddressMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysaddress.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysAddressMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysAddressMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysAddressMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysaddress.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysAddressMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysAddressMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysaddress.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysAddressMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysAddressMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysAddressMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMemo sets the "memo" field.
func (m *SysAddressMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysAddressMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysAddressMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysaddress.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysAddressMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysAddressMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysaddress.FieldMemo)
}

// SetCountry sets the "country" field.
func (m *SysAddressMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *SysAddressMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCountry(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ClearCountry clears the value of the "country" field.
func (m *SysAddressMutation) ClearCountry() {
	m.country = nil
	m.clearedFields[sysaddress.FieldCountry] = struct{}{}
}

// CountryCleared returns if the "country" field was cleared in this mutation.
func (m *SysAddressMutation) CountryCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCountry]
	return ok
}

// ResetCountry resets all changes to the "country" field.
func (m *SysAddressMutation) ResetCountry() {
	m.country = nil
	delete(m.clearedFields, sysaddress.FieldCountry)
}

// SetProvince sets the "province" field.
func (m *SysAddressMutation) SetProvince(s string) {
	m.province = &s
}

// Province returns the value of the "province" field in the mutation.
func (m *SysAddressMutation) Province() (r string, exists bool) {
	v := m.province
	if v == nil {
		return
	}
	return *v, true
}

// OldProvince returns the old "province" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldProvince(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvince is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvince requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvince: %w", err)
	}
	return oldValue.Province, nil
}

// ClearProvince clears the value of the "province" field.
func (m *SysAddressMutation) ClearProvince() {
	m.province = nil
	m.clearedFields[sysaddress.FieldProvince] = struct{}{}
}

// ProvinceCleared returns if the "province" field was cleared in this mutation.
func (m *SysAddressMutation) ProvinceCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldProvince]
	return ok
}

// ResetProvince resets all changes to the "province" field.
func (m *SysAddressMutation) ResetProvince() {
	m.province = nil
	delete(m.clearedFields, sysaddress.FieldProvince)
}

// SetCity sets the "city" field.
func (m *SysAddressMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *SysAddressMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCity(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ClearCity clears the value of the "city" field.
func (m *SysAddressMutation) ClearCity() {
	m.city = nil
	m.clearedFields[sysaddress.FieldCity] = struct{}{}
}

// CityCleared returns if the "city" field was cleared in this mutation.
func (m *SysAddressMutation) CityCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCity]
	return ok
}

// ResetCity resets all changes to the "city" field.
func (m *SysAddressMutation) ResetCity() {
	m.city = nil
	delete(m.clearedFields, sysaddress.FieldCity)
}

// SetCounty sets the "county" field.
func (m *SysAddressMutation) SetCounty(s string) {
	m.county = &s
}

// County returns the value of the "county" field in the mutation.
func (m *SysAddressMutation) County() (r string, exists bool) {
	v := m.county
	if v == nil {
		return
	}
	return *v, true
}

// OldCounty returns the old "county" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCounty(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCounty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCounty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCounty: %w", err)
	}
	return oldValue.County, nil
}

// ClearCounty clears the value of the "county" field.
func (m *SysAddressMutation) ClearCounty() {
	m.county = nil
	m.clearedFields[sysaddress.FieldCounty] = struct{}{}
}

// CountyCleared returns if the "county" field was cleared in this mutation.
func (m *SysAddressMutation) CountyCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCounty]
	return ok
}

// ResetCounty resets all changes to the "county" field.
func (m *SysAddressMutation) ResetCounty() {
	m.county = nil
	delete(m.clearedFields, sysaddress.FieldCounty)
}

// SetCountryID sets the "country_id" field.
func (m *SysAddressMutation) SetCountryID(s string) {
	m.country_id = &s
}

// CountryID returns the value of the "country_id" field in the mutation.
func (m *SysAddressMutation) CountryID() (r string, exists bool) {
	v := m.country_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryID returns the old "country_id" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCountryID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryID: %w", err)
	}
	return oldValue.CountryID, nil
}

// ClearCountryID clears the value of the "country_id" field.
func (m *SysAddressMutation) ClearCountryID() {
	m.country_id = nil
	m.clearedFields[sysaddress.FieldCountryID] = struct{}{}
}

// CountryIDCleared returns if the "country_id" field was cleared in this mutation.
func (m *SysAddressMutation) CountryIDCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCountryID]
	return ok
}

// ResetCountryID resets all changes to the "country_id" field.
func (m *SysAddressMutation) ResetCountryID() {
	m.country_id = nil
	delete(m.clearedFields, sysaddress.FieldCountryID)
}

// SetProvinceID sets the "province_id" field.
func (m *SysAddressMutation) SetProvinceID(s string) {
	m.province_id = &s
}

// ProvinceID returns the value of the "province_id" field in the mutation.
func (m *SysAddressMutation) ProvinceID() (r string, exists bool) {
	v := m.province_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProvinceID returns the old "province_id" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldProvinceID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvinceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvinceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvinceID: %w", err)
	}
	return oldValue.ProvinceID, nil
}

// ClearProvinceID clears the value of the "province_id" field.
func (m *SysAddressMutation) ClearProvinceID() {
	m.province_id = nil
	m.clearedFields[sysaddress.FieldProvinceID] = struct{}{}
}

// ProvinceIDCleared returns if the "province_id" field was cleared in this mutation.
func (m *SysAddressMutation) ProvinceIDCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldProvinceID]
	return ok
}

// ResetProvinceID resets all changes to the "province_id" field.
func (m *SysAddressMutation) ResetProvinceID() {
	m.province_id = nil
	delete(m.clearedFields, sysaddress.FieldProvinceID)
}

// SetCityID sets the "city_id" field.
func (m *SysAddressMutation) SetCityID(s string) {
	m.city_id = &s
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *SysAddressMutation) CityID() (r string, exists bool) {
	v := m.city_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCityID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ClearCityID clears the value of the "city_id" field.
func (m *SysAddressMutation) ClearCityID() {
	m.city_id = nil
	m.clearedFields[sysaddress.FieldCityID] = struct{}{}
}

// CityIDCleared returns if the "city_id" field was cleared in this mutation.
func (m *SysAddressMutation) CityIDCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCityID]
	return ok
}

// ResetCityID resets all changes to the "city_id" field.
func (m *SysAddressMutation) ResetCityID() {
	m.city_id = nil
	delete(m.clearedFields, sysaddress.FieldCityID)
}

// SetCountyID sets the "county_id" field.
func (m *SysAddressMutation) SetCountyID(s string) {
	m.county_id = &s
}

// CountyID returns the value of the "county_id" field in the mutation.
func (m *SysAddressMutation) CountyID() (r string, exists bool) {
	v := m.county_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCountyID returns the old "county_id" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCountyID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountyID: %w", err)
	}
	return oldValue.CountyID, nil
}

// ClearCountyID clears the value of the "county_id" field.
func (m *SysAddressMutation) ClearCountyID() {
	m.county_id = nil
	m.clearedFields[sysaddress.FieldCountyID] = struct{}{}
}

// CountyIDCleared returns if the "county_id" field was cleared in this mutation.
func (m *SysAddressMutation) CountyIDCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCountyID]
	return ok
}

// ResetCountyID resets all changes to the "county_id" field.
func (m *SysAddressMutation) ResetCountyID() {
	m.county_id = nil
	delete(m.clearedFields, sysaddress.FieldCountyID)
}

// SetZipCode sets the "zip_code" field.
func (m *SysAddressMutation) SetZipCode(s string) {
	m.zip_code = &s
}

// ZipCode returns the value of the "zip_code" field in the mutation.
func (m *SysAddressMutation) ZipCode() (r string, exists bool) {
	v := m.zip_code
	if v == nil {
		return
	}
	return *v, true
}

// OldZipCode returns the old "zip_code" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldZipCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldZipCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldZipCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZipCode: %w", err)
	}
	return oldValue.ZipCode, nil
}

// ClearZipCode clears the value of the "zip_code" field.
func (m *SysAddressMutation) ClearZipCode() {
	m.zip_code = nil
	m.clearedFields[sysaddress.FieldZipCode] = struct{}{}
}

// ZipCodeCleared returns if the "zip_code" field was cleared in this mutation.
func (m *SysAddressMutation) ZipCodeCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldZipCode]
	return ok
}

// ResetZipCode resets all changes to the "zip_code" field.
func (m *SysAddressMutation) ResetZipCode() {
	m.zip_code = nil
	delete(m.clearedFields, sysaddress.FieldZipCode)
}

// SetDaddr sets the "daddr" field.
func (m *SysAddressMutation) SetDaddr(s string) {
	m.daddr = &s
}

// Daddr returns the value of the "daddr" field in the mutation.
func (m *SysAddressMutation) Daddr() (r string, exists bool) {
	v := m.daddr
	if v == nil {
		return
	}
	return *v, true
}

// OldDaddr returns the old "daddr" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldDaddr(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDaddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDaddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDaddr: %w", err)
	}
	return oldValue.Daddr, nil
}

// ClearDaddr clears the value of the "daddr" field.
func (m *SysAddressMutation) ClearDaddr() {
	m.daddr = nil
	m.clearedFields[sysaddress.FieldDaddr] = struct{}{}
}

// DaddrCleared returns if the "daddr" field was cleared in this mutation.
func (m *SysAddressMutation) DaddrCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldDaddr]
	return ok
}

// ResetDaddr resets all changes to the "daddr" field.
func (m *SysAddressMutation) ResetDaddr() {
	m.daddr = nil
	delete(m.clearedFields, sysaddress.FieldDaddr)
}

// SetFirstName sets the "first_name" field.
func (m *SysAddressMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *SysAddressMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldFirstName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *SysAddressMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[sysaddress.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *SysAddressMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *SysAddressMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, sysaddress.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *SysAddressMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *SysAddressMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldLastName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *SysAddressMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[sysaddress.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *SysAddressMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *SysAddressMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, sysaddress.FieldLastName)
}

// SetAreaCode sets the "area_code" field.
func (m *SysAddressMutation) SetAreaCode(s string) {
	m.area_code = &s
}

// AreaCode returns the value of the "area_code" field in the mutation.
func (m *SysAddressMutation) AreaCode() (r string, exists bool) {
	v := m.area_code
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaCode returns the old "area_code" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldAreaCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAreaCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAreaCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaCode: %w", err)
	}
	return oldValue.AreaCode, nil
}

// ClearAreaCode clears the value of the "area_code" field.
func (m *SysAddressMutation) ClearAreaCode() {
	m.area_code = nil
	m.clearedFields[sysaddress.FieldAreaCode] = struct{}{}
}

// AreaCodeCleared returns if the "area_code" field was cleared in this mutation.
func (m *SysAddressMutation) AreaCodeCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldAreaCode]
	return ok
}

// ResetAreaCode resets all changes to the "area_code" field.
func (m *SysAddressMutation) ResetAreaCode() {
	m.area_code = nil
	delete(m.clearedFields, sysaddress.FieldAreaCode)
}

// SetMobile sets the "mobile" field.
func (m *SysAddressMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *SysAddressMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldMobile(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *SysAddressMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[sysaddress.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *SysAddressMutation) MobileCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *SysAddressMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, sysaddress.FieldMobile)
}

// SetCreator sets the "creator" field.
func (m *SysAddressMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *SysAddressMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the SysAddress entity.
// If the SysAddress object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysAddressMutation) OldCreator(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *SysAddressMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[sysaddress.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *SysAddressMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[sysaddress.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *SysAddressMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, sysaddress.FieldCreator)
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by id.
func (m *SysAddressMutation) SetOrganID(id string) {
	m.organ = &id
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (m *SysAddressMutation) ClearOrgan() {
	m.clearedorgan = true
}

// OrganCleared reports if the "organ" edge to the OrgOrgan entity was cleared.
func (m *SysAddressMutation) OrganCleared() bool {
	return m.clearedorgan
}

// OrganID returns the "organ" edge ID in the mutation.
func (m *SysAddressMutation) OrganID() (id string, exists bool) {
	if m.organ != nil {
		return *m.organ, true
	}
	return
}

// OrganIDs returns the "organ" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganID instead. It exists only for internal usage by the builders.
func (m *SysAddressMutation) OrganIDs() (ids []string) {
	if id := m.organ; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrgan resets all changes to the "organ" edge.
func (m *SysAddressMutation) ResetOrgan() {
	m.organ = nil
	m.clearedorgan = false
}

// SetStaffResiID sets the "staff_resi" edge to the OrgStaff entity by id.
func (m *SysAddressMutation) SetStaffResiID(id string) {
	m.staff_resi = &id
}

// ClearStaffResi clears the "staff_resi" edge to the OrgStaff entity.
func (m *SysAddressMutation) ClearStaffResi() {
	m.clearedstaff_resi = true
}

// StaffResiCleared reports if the "staff_resi" edge to the OrgStaff entity was cleared.
func (m *SysAddressMutation) StaffResiCleared() bool {
	return m.clearedstaff_resi
}

// StaffResiID returns the "staff_resi" edge ID in the mutation.
func (m *SysAddressMutation) StaffResiID() (id string, exists bool) {
	if m.staff_resi != nil {
		return *m.staff_resi, true
	}
	return
}

// StaffResiIDs returns the "staff_resi" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StaffResiID instead. It exists only for internal usage by the builders.
func (m *SysAddressMutation) StaffResiIDs() (ids []string) {
	if id := m.staff_resi; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStaffResi resets all changes to the "staff_resi" edge.
func (m *SysAddressMutation) ResetStaffResi() {
	m.staff_resi = nil
	m.clearedstaff_resi = false
}

// SetStaffIdenID sets the "staff_iden" edge to the OrgStaff entity by id.
func (m *SysAddressMutation) SetStaffIdenID(id string) {
	m.staff_iden = &id
}

// ClearStaffIden clears the "staff_iden" edge to the OrgStaff entity.
func (m *SysAddressMutation) ClearStaffIden() {
	m.clearedstaff_iden = true
}

// StaffIdenCleared reports if the "staff_iden" edge to the OrgStaff entity was cleared.
func (m *SysAddressMutation) StaffIdenCleared() bool {
	return m.clearedstaff_iden
}

// StaffIdenID returns the "staff_iden" edge ID in the mutation.
func (m *SysAddressMutation) StaffIdenID() (id string, exists bool) {
	if m.staff_iden != nil {
		return *m.staff_iden, true
	}
	return
}

// StaffIdenIDs returns the "staff_iden" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StaffIdenID instead. It exists only for internal usage by the builders.
func (m *SysAddressMutation) StaffIdenIDs() (ids []string) {
	if id := m.staff_iden; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStaffIden resets all changes to the "staff_iden" edge.
func (m *SysAddressMutation) ResetStaffIden() {
	m.staff_iden = nil
	m.clearedstaff_iden = false
}

// Where appends a list predicates to the SysAddressMutation builder.
func (m *SysAddressMutation) Where(ps ...predicate.SysAddress) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysAddressMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysAddressMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysAddress, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysAddressMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysAddressMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysAddress).
func (m *SysAddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysAddressMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.is_del != nil {
		fields = append(fields, sysaddress.FieldIsDel)
	}
	if m.user_id != nil {
		fields = append(fields, sysaddress.FieldUserID)
	}
	if m.org_id != nil {
		fields = append(fields, sysaddress.FieldOrgID)
	}
	if m.sort != nil {
		fields = append(fields, sysaddress.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysaddress.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysaddress.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysaddress.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysaddress.FieldIsActive)
	}
	if m.memo != nil {
		fields = append(fields, sysaddress.FieldMemo)
	}
	if m.country != nil {
		fields = append(fields, sysaddress.FieldCountry)
	}
	if m.province != nil {
		fields = append(fields, sysaddress.FieldProvince)
	}
	if m.city != nil {
		fields = append(fields, sysaddress.FieldCity)
	}
	if m.county != nil {
		fields = append(fields, sysaddress.FieldCounty)
	}
	if m.country_id != nil {
		fields = append(fields, sysaddress.FieldCountryID)
	}
	if m.province_id != nil {
		fields = append(fields, sysaddress.FieldProvinceID)
	}
	if m.city_id != nil {
		fields = append(fields, sysaddress.FieldCityID)
	}
	if m.county_id != nil {
		fields = append(fields, sysaddress.FieldCountyID)
	}
	if m.zip_code != nil {
		fields = append(fields, sysaddress.FieldZipCode)
	}
	if m.daddr != nil {
		fields = append(fields, sysaddress.FieldDaddr)
	}
	if m.first_name != nil {
		fields = append(fields, sysaddress.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, sysaddress.FieldLastName)
	}
	if m.area_code != nil {
		fields = append(fields, sysaddress.FieldAreaCode)
	}
	if m.mobile != nil {
		fields = append(fields, sysaddress.FieldMobile)
	}
	if m.creator != nil {
		fields = append(fields, sysaddress.FieldCreator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysAddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysaddress.FieldIsDel:
		return m.IsDel()
	case sysaddress.FieldUserID:
		return m.UserID()
	case sysaddress.FieldOrgID:
		return m.OrgID()
	case sysaddress.FieldSort:
		return m.Sort()
	case sysaddress.FieldCreatedAt:
		return m.CreatedAt()
	case sysaddress.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysaddress.FieldDeletedAt:
		return m.DeletedAt()
	case sysaddress.FieldIsActive:
		return m.IsActive()
	case sysaddress.FieldMemo:
		return m.Memo()
	case sysaddress.FieldCountry:
		return m.Country()
	case sysaddress.FieldProvince:
		return m.Province()
	case sysaddress.FieldCity:
		return m.City()
	case sysaddress.FieldCounty:
		return m.County()
	case sysaddress.FieldCountryID:
		return m.CountryID()
	case sysaddress.FieldProvinceID:
		return m.ProvinceID()
	case sysaddress.FieldCityID:
		return m.CityID()
	case sysaddress.FieldCountyID:
		return m.CountyID()
	case sysaddress.FieldZipCode:
		return m.ZipCode()
	case sysaddress.FieldDaddr:
		return m.Daddr()
	case sysaddress.FieldFirstName:
		return m.FirstName()
	case sysaddress.FieldLastName:
		return m.LastName()
	case sysaddress.FieldAreaCode:
		return m.AreaCode()
	case sysaddress.FieldMobile:
		return m.Mobile()
	case sysaddress.FieldCreator:
		return m.Creator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysAddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysaddress.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysaddress.FieldUserID:
		return m.OldUserID(ctx)
	case sysaddress.FieldOrgID:
		return m.OldOrgID(ctx)
	case sysaddress.FieldSort:
		return m.OldSort(ctx)
	case sysaddress.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysaddress.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysaddress.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysaddress.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysaddress.FieldMemo:
		return m.OldMemo(ctx)
	case sysaddress.FieldCountry:
		return m.OldCountry(ctx)
	case sysaddress.FieldProvince:
		return m.OldProvince(ctx)
	case sysaddress.FieldCity:
		return m.OldCity(ctx)
	case sysaddress.FieldCounty:
		return m.OldCounty(ctx)
	case sysaddress.FieldCountryID:
		return m.OldCountryID(ctx)
	case sysaddress.FieldProvinceID:
		return m.OldProvinceID(ctx)
	case sysaddress.FieldCityID:
		return m.OldCityID(ctx)
	case sysaddress.FieldCountyID:
		return m.OldCountyID(ctx)
	case sysaddress.FieldZipCode:
		return m.OldZipCode(ctx)
	case sysaddress.FieldDaddr:
		return m.OldDaddr(ctx)
	case sysaddress.FieldFirstName:
		return m.OldFirstName(ctx)
	case sysaddress.FieldLastName:
		return m.OldLastName(ctx)
	case sysaddress.FieldAreaCode:
		return m.OldAreaCode(ctx)
	case sysaddress.FieldMobile:
		return m.OldMobile(ctx)
	case sysaddress.FieldCreator:
		return m.OldCreator(ctx)
	}
	return nil, fmt.Errorf("unknown SysAddress field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysAddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysaddress.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysaddress.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sysaddress.FieldOrgID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case sysaddress.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysaddress.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysaddress.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysaddress.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysaddress.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysaddress.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysaddress.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case sysaddress.FieldProvince:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvince(v)
		return nil
	case sysaddress.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case sysaddress.FieldCounty:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCounty(v)
		return nil
	case sysaddress.FieldCountryID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryID(v)
		return nil
	case sysaddress.FieldProvinceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvinceID(v)
		return nil
	case sysaddress.FieldCityID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case sysaddress.FieldCountyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountyID(v)
		return nil
	case sysaddress.FieldZipCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZipCode(v)
		return nil
	case sysaddress.FieldDaddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDaddr(v)
		return nil
	case sysaddress.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case sysaddress.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case sysaddress.FieldAreaCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaCode(v)
		return nil
	case sysaddress.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case sysaddress.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	}
	return fmt.Errorf("unknown SysAddress field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysAddressMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysaddress.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysAddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysaddress.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysAddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysaddress.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysAddress numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysAddressMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysaddress.FieldUserID) {
		fields = append(fields, sysaddress.FieldUserID)
	}
	if m.FieldCleared(sysaddress.FieldOrgID) {
		fields = append(fields, sysaddress.FieldOrgID)
	}
	if m.FieldCleared(sysaddress.FieldCreatedAt) {
		fields = append(fields, sysaddress.FieldCreatedAt)
	}
	if m.FieldCleared(sysaddress.FieldUpdatedAt) {
		fields = append(fields, sysaddress.FieldUpdatedAt)
	}
	if m.FieldCleared(sysaddress.FieldDeletedAt) {
		fields = append(fields, sysaddress.FieldDeletedAt)
	}
	if m.FieldCleared(sysaddress.FieldMemo) {
		fields = append(fields, sysaddress.FieldMemo)
	}
	if m.FieldCleared(sysaddress.FieldCountry) {
		fields = append(fields, sysaddress.FieldCountry)
	}
	if m.FieldCleared(sysaddress.FieldProvince) {
		fields = append(fields, sysaddress.FieldProvince)
	}
	if m.FieldCleared(sysaddress.FieldCity) {
		fields = append(fields, sysaddress.FieldCity)
	}
	if m.FieldCleared(sysaddress.FieldCounty) {
		fields = append(fields, sysaddress.FieldCounty)
	}
	if m.FieldCleared(sysaddress.FieldCountryID) {
		fields = append(fields, sysaddress.FieldCountryID)
	}
	if m.FieldCleared(sysaddress.FieldProvinceID) {
		fields = append(fields, sysaddress.FieldProvinceID)
	}
	if m.FieldCleared(sysaddress.FieldCityID) {
		fields = append(fields, sysaddress.FieldCityID)
	}
	if m.FieldCleared(sysaddress.FieldCountyID) {
		fields = append(fields, sysaddress.FieldCountyID)
	}
	if m.FieldCleared(sysaddress.FieldZipCode) {
		fields = append(fields, sysaddress.FieldZipCode)
	}
	if m.FieldCleared(sysaddress.FieldDaddr) {
		fields = append(fields, sysaddress.FieldDaddr)
	}
	if m.FieldCleared(sysaddress.FieldFirstName) {
		fields = append(fields, sysaddress.FieldFirstName)
	}
	if m.FieldCleared(sysaddress.FieldLastName) {
		fields = append(fields, sysaddress.FieldLastName)
	}
	if m.FieldCleared(sysaddress.FieldAreaCode) {
		fields = append(fields, sysaddress.FieldAreaCode)
	}
	if m.FieldCleared(sysaddress.FieldMobile) {
		fields = append(fields, sysaddress.FieldMobile)
	}
	if m.FieldCleared(sysaddress.FieldCreator) {
		fields = append(fields, sysaddress.FieldCreator)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysAddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysAddressMutation) ClearField(name string) error {
	switch name {
	case sysaddress.FieldUserID:
		m.ClearUserID()
		return nil
	case sysaddress.FieldOrgID:
		m.ClearOrgID()
		return nil
	case sysaddress.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysaddress.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysaddress.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysaddress.FieldMemo:
		m.ClearMemo()
		return nil
	case sysaddress.FieldCountry:
		m.ClearCountry()
		return nil
	case sysaddress.FieldProvince:
		m.ClearProvince()
		return nil
	case sysaddress.FieldCity:
		m.ClearCity()
		return nil
	case sysaddress.FieldCounty:
		m.ClearCounty()
		return nil
	case sysaddress.FieldCountryID:
		m.ClearCountryID()
		return nil
	case sysaddress.FieldProvinceID:
		m.ClearProvinceID()
		return nil
	case sysaddress.FieldCityID:
		m.ClearCityID()
		return nil
	case sysaddress.FieldCountyID:
		m.ClearCountyID()
		return nil
	case sysaddress.FieldZipCode:
		m.ClearZipCode()
		return nil
	case sysaddress.FieldDaddr:
		m.ClearDaddr()
		return nil
	case sysaddress.FieldFirstName:
		m.ClearFirstName()
		return nil
	case sysaddress.FieldLastName:
		m.ClearLastName()
		return nil
	case sysaddress.FieldAreaCode:
		m.ClearAreaCode()
		return nil
	case sysaddress.FieldMobile:
		m.ClearMobile()
		return nil
	case sysaddress.FieldCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown SysAddress nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysAddressMutation) ResetField(name string) error {
	switch name {
	case sysaddress.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysaddress.FieldUserID:
		m.ResetUserID()
		return nil
	case sysaddress.FieldOrgID:
		m.ResetOrgID()
		return nil
	case sysaddress.FieldSort:
		m.ResetSort()
		return nil
	case sysaddress.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysaddress.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysaddress.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysaddress.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysaddress.FieldMemo:
		m.ResetMemo()
		return nil
	case sysaddress.FieldCountry:
		m.ResetCountry()
		return nil
	case sysaddress.FieldProvince:
		m.ResetProvince()
		return nil
	case sysaddress.FieldCity:
		m.ResetCity()
		return nil
	case sysaddress.FieldCounty:
		m.ResetCounty()
		return nil
	case sysaddress.FieldCountryID:
		m.ResetCountryID()
		return nil
	case sysaddress.FieldProvinceID:
		m.ResetProvinceID()
		return nil
	case sysaddress.FieldCityID:
		m.ResetCityID()
		return nil
	case sysaddress.FieldCountyID:
		m.ResetCountyID()
		return nil
	case sysaddress.FieldZipCode:
		m.ResetZipCode()
		return nil
	case sysaddress.FieldDaddr:
		m.ResetDaddr()
		return nil
	case sysaddress.FieldFirstName:
		m.ResetFirstName()
		return nil
	case sysaddress.FieldLastName:
		m.ResetLastName()
		return nil
	case sysaddress.FieldAreaCode:
		m.ResetAreaCode()
		return nil
	case sysaddress.FieldMobile:
		m.ResetMobile()
		return nil
	case sysaddress.FieldCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown SysAddress field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysAddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.organ != nil {
		edges = append(edges, sysaddress.EdgeOrgan)
	}
	if m.staff_resi != nil {
		edges = append(edges, sysaddress.EdgeStaffResi)
	}
	if m.staff_iden != nil {
		edges = append(edges, sysaddress.EdgeStaffIden)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysAddressMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysaddress.EdgeOrgan:
		if id := m.organ; id != nil {
			return []ent.Value{*id}
		}
	case sysaddress.EdgeStaffResi:
		if id := m.staff_resi; id != nil {
			return []ent.Value{*id}
		}
	case sysaddress.EdgeStaffIden:
		if id := m.staff_iden; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysAddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysAddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysAddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedorgan {
		edges = append(edges, sysaddress.EdgeOrgan)
	}
	if m.clearedstaff_resi {
		edges = append(edges, sysaddress.EdgeStaffResi)
	}
	if m.clearedstaff_iden {
		edges = append(edges, sysaddress.EdgeStaffIden)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysAddressMutation) EdgeCleared(name string) bool {
	switch name {
	case sysaddress.EdgeOrgan:
		return m.clearedorgan
	case sysaddress.EdgeStaffResi:
		return m.clearedstaff_resi
	case sysaddress.EdgeStaffIden:
		return m.clearedstaff_iden
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysAddressMutation) ClearEdge(name string) error {
	switch name {
	case sysaddress.EdgeOrgan:
		m.ClearOrgan()
		return nil
	case sysaddress.EdgeStaffResi:
		m.ClearStaffResi()
		return nil
	case sysaddress.EdgeStaffIden:
		m.ClearStaffIden()
		return nil
	}
	return fmt.Errorf("unknown SysAddress unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysAddressMutation) ResetEdge(name string) error {
	switch name {
	case sysaddress.EdgeOrgan:
		m.ResetOrgan()
		return nil
	case sysaddress.EdgeStaffResi:
		m.ResetStaffResi()
		return nil
	case sysaddress.EdgeStaffIden:
		m.ResetStaffIden()
		return nil
	}
	return fmt.Errorf("unknown SysAddress edge %s", name)
}

// SysDictMutation represents an operation that mutates the SysDict nodes in the graph.
type SysDictMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	name_cn       *string
	name_en       *string
	tipe          *sysdict.Tipe
	clearedFields map[string]struct{}
	items         map[string]struct{}
	removeditems  map[string]struct{}
	cleareditems  bool
	done          bool
	oldValue      func(context.Context) (*SysDict, error)
	predicates    []predicate.SysDict
}

var _ ent.Mutation = (*SysDictMutation)(nil)

// sysdictOption allows management of the mutation configuration using functional options.
type sysdictOption func(*SysDictMutation)

// newSysDictMutation creates new mutation for the SysDict entity.
func newSysDictMutation(c config, op Op, opts ...sysdictOption) *SysDictMutation {
	m := &SysDictMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDict,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDictID sets the ID field of the mutation.
func withSysDictID(id string) sysdictOption {
	return func(m *SysDictMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDict
		)
		m.oldValue = func(ctx context.Context) (*SysDict, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDict.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDict sets the old SysDict of the mutation.
func withSysDict(node *SysDict) sysdictOption {
	return func(m *SysDictMutation) {
		m.oldValue = func(context.Context) (*SysDict, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDictMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDictMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysDict entities.
func (m *SysDictMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDictMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysDictMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysDict.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysDictMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysDictMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysDictMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysDictMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysDictMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysDictMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysdict.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysDictMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysdict.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysDictMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysdict.FieldMemo)
}

// SetSort sets the "sort" field.
func (m *SysDictMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysDictMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysDictMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysDictMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysDictMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysDictMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysDictMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysDictMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysdict.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysDictMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysdict.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysDictMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysdict.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysDictMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysDictMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysDictMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysdict.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysDictMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysdict.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysDictMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysdict.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysDictMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysDictMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysDictMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysdict.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysDictMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysdict.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysDictMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysdict.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysDictMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysDictMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysDictMutation) ResetIsActive() {
	m.is_active = nil
}

// SetNameCn sets the "name_cn" field.
func (m *SysDictMutation) SetNameCn(s string) {
	m.name_cn = &s
}

// NameCn returns the value of the "name_cn" field in the mutation.
func (m *SysDictMutation) NameCn() (r string, exists bool) {
	v := m.name_cn
	if v == nil {
		return
	}
	return *v, true
}

// OldNameCn returns the old "name_cn" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldNameCn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameCn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameCn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameCn: %w", err)
	}
	return oldValue.NameCn, nil
}

// ResetNameCn resets all changes to the "name_cn" field.
func (m *SysDictMutation) ResetNameCn() {
	m.name_cn = nil
}

// SetNameEn sets the "name_en" field.
func (m *SysDictMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *SysDictMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldNameEn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *SysDictMutation) ResetNameEn() {
	m.name_en = nil
}

// SetTipe sets the "tipe" field.
func (m *SysDictMutation) SetTipe(s sysdict.Tipe) {
	m.tipe = &s
}

// Tipe returns the value of the "tipe" field in the mutation.
func (m *SysDictMutation) Tipe() (r sysdict.Tipe, exists bool) {
	v := m.tipe
	if v == nil {
		return
	}
	return *v, true
}

// OldTipe returns the old "tipe" field's value of the SysDict entity.
// If the SysDict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictMutation) OldTipe(ctx context.Context) (v sysdict.Tipe, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTipe is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTipe requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTipe: %w", err)
	}
	return oldValue.Tipe, nil
}

// ResetTipe resets all changes to the "tipe" field.
func (m *SysDictMutation) ResetTipe() {
	m.tipe = nil
}

// AddItemIDs adds the "items" edge to the SysDictItem entity by ids.
func (m *SysDictMutation) AddItemIDs(ids ...string) {
	if m.items == nil {
		m.items = make(map[string]struct{})
	}
	for i := range ids {
		m.items[ids[i]] = struct{}{}
	}
}

// ClearItems clears the "items" edge to the SysDictItem entity.
func (m *SysDictMutation) ClearItems() {
	m.cleareditems = true
}

// ItemsCleared reports if the "items" edge to the SysDictItem entity was cleared.
func (m *SysDictMutation) ItemsCleared() bool {
	return m.cleareditems
}

// RemoveItemIDs removes the "items" edge to the SysDictItem entity by IDs.
func (m *SysDictMutation) RemoveItemIDs(ids ...string) {
	if m.removeditems == nil {
		m.removeditems = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.items, ids[i])
		m.removeditems[ids[i]] = struct{}{}
	}
}

// RemovedItems returns the removed IDs of the "items" edge to the SysDictItem entity.
func (m *SysDictMutation) RemovedItemsIDs() (ids []string) {
	for id := range m.removeditems {
		ids = append(ids, id)
	}
	return
}

// ItemsIDs returns the "items" edge IDs in the mutation.
func (m *SysDictMutation) ItemsIDs() (ids []string) {
	for id := range m.items {
		ids = append(ids, id)
	}
	return
}

// ResetItems resets all changes to the "items" edge.
func (m *SysDictMutation) ResetItems() {
	m.items = nil
	m.cleareditems = false
	m.removeditems = nil
}

// Where appends a list predicates to the SysDictMutation builder.
func (m *SysDictMutation) Where(ps ...predicate.SysDict) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysDictMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysDictMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysDict, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysDictMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysDictMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysDict).
func (m *SysDictMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDictMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.is_del != nil {
		fields = append(fields, sysdict.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysdict.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, sysdict.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysdict.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysdict.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysdict.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysdict.FieldIsActive)
	}
	if m.name_cn != nil {
		fields = append(fields, sysdict.FieldNameCn)
	}
	if m.name_en != nil {
		fields = append(fields, sysdict.FieldNameEn)
	}
	if m.tipe != nil {
		fields = append(fields, sysdict.FieldTipe)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDictMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdict.FieldIsDel:
		return m.IsDel()
	case sysdict.FieldMemo:
		return m.Memo()
	case sysdict.FieldSort:
		return m.Sort()
	case sysdict.FieldCreatedAt:
		return m.CreatedAt()
	case sysdict.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdict.FieldDeletedAt:
		return m.DeletedAt()
	case sysdict.FieldIsActive:
		return m.IsActive()
	case sysdict.FieldNameCn:
		return m.NameCn()
	case sysdict.FieldNameEn:
		return m.NameEn()
	case sysdict.FieldTipe:
		return m.Tipe()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDictMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdict.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysdict.FieldMemo:
		return m.OldMemo(ctx)
	case sysdict.FieldSort:
		return m.OldSort(ctx)
	case sysdict.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdict.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdict.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysdict.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysdict.FieldNameCn:
		return m.OldNameCn(ctx)
	case sysdict.FieldNameEn:
		return m.OldNameEn(ctx)
	case sysdict.FieldTipe:
		return m.OldTipe(ctx)
	}
	return nil, fmt.Errorf("unknown SysDict field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdict.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysdict.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysdict.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysdict.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdict.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdict.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysdict.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysdict.FieldNameCn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameCn(v)
		return nil
	case sysdict.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case sysdict.FieldTipe:
		v, ok := value.(sysdict.Tipe)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTipe(v)
		return nil
	}
	return fmt.Errorf("unknown SysDict field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDictMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysdict.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDictMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdict.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdict.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysDict numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDictMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdict.FieldMemo) {
		fields = append(fields, sysdict.FieldMemo)
	}
	if m.FieldCleared(sysdict.FieldCreatedAt) {
		fields = append(fields, sysdict.FieldCreatedAt)
	}
	if m.FieldCleared(sysdict.FieldUpdatedAt) {
		fields = append(fields, sysdict.FieldUpdatedAt)
	}
	if m.FieldCleared(sysdict.FieldDeletedAt) {
		fields = append(fields, sysdict.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDictMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDictMutation) ClearField(name string) error {
	switch name {
	case sysdict.FieldMemo:
		m.ClearMemo()
		return nil
	case sysdict.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysdict.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysdict.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysDict nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDictMutation) ResetField(name string) error {
	switch name {
	case sysdict.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysdict.FieldMemo:
		m.ResetMemo()
		return nil
	case sysdict.FieldSort:
		m.ResetSort()
		return nil
	case sysdict.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdict.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdict.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysdict.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysdict.FieldNameCn:
		m.ResetNameCn()
		return nil
	case sysdict.FieldNameEn:
		m.ResetNameEn()
		return nil
	case sysdict.FieldTipe:
		m.ResetTipe()
		return nil
	}
	return fmt.Errorf("unknown SysDict field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDictMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.items != nil {
		edges = append(edges, sysdict.EdgeItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDictMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysdict.EdgeItems:
		ids := make([]ent.Value, 0, len(m.items))
		for id := range m.items {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDictMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeditems != nil {
		edges = append(edges, sysdict.EdgeItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDictMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysdict.EdgeItems:
		ids := make([]ent.Value, 0, len(m.removeditems))
		for id := range m.removeditems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDictMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareditems {
		edges = append(edges, sysdict.EdgeItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDictMutation) EdgeCleared(name string) bool {
	switch name {
	case sysdict.EdgeItems:
		return m.cleareditems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDictMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown SysDict unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDictMutation) ResetEdge(name string) error {
	switch name {
	case sysdict.EdgeItems:
		m.ResetItems()
		return nil
	}
	return fmt.Errorf("unknown SysDict edge %s", name)
}

// SysDictItemMutation represents an operation that mutates the SysDictItem nodes in the graph.
type SysDictItemMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	label         *string
	value         *int
	addvalue      *int
	clearedFields map[string]struct{}
	dict          *string
	cleareddict   bool
	done          bool
	oldValue      func(context.Context) (*SysDictItem, error)
	predicates    []predicate.SysDictItem
}

var _ ent.Mutation = (*SysDictItemMutation)(nil)

// sysdictitemOption allows management of the mutation configuration using functional options.
type sysdictitemOption func(*SysDictItemMutation)

// newSysDictItemMutation creates new mutation for the SysDictItem entity.
func newSysDictItemMutation(c config, op Op, opts ...sysdictitemOption) *SysDictItemMutation {
	m := &SysDictItemMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDictItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDictItemID sets the ID field of the mutation.
func withSysDictItemID(id string) sysdictitemOption {
	return func(m *SysDictItemMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDictItem
		)
		m.oldValue = func(ctx context.Context) (*SysDictItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDictItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDictItem sets the old SysDictItem of the mutation.
func withSysDictItem(node *SysDictItem) sysdictitemOption {
	return func(m *SysDictItemMutation) {
		m.oldValue = func(context.Context) (*SysDictItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDictItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDictItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysDictItem entities.
func (m *SysDictItemMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDictItemMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysDictItemMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysDictItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysDictItemMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysDictItemMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysDictItemMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysDictItemMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysDictItemMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysDictItemMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysdictitem.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysDictItemMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysdictitem.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysDictItemMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysdictitem.FieldMemo)
}

// SetSort sets the "sort" field.
func (m *SysDictItemMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysDictItemMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysDictItemMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysDictItemMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysDictItemMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysDictItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysDictItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysDictItemMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysdictitem.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysDictItemMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysdictitem.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysDictItemMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysdictitem.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysDictItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysDictItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysDictItemMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysdictitem.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysDictItemMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysdictitem.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysDictItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysdictitem.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysDictItemMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysDictItemMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysDictItemMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysdictitem.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysDictItemMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysdictitem.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysDictItemMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysdictitem.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysDictItemMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysDictItemMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysDictItemMutation) ResetIsActive() {
	m.is_active = nil
}

// SetLabel sets the "label" field.
func (m *SysDictItemMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *SysDictItemMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *SysDictItemMutation) ResetLabel() {
	m.label = nil
}

// SetValue sets the "value" field.
func (m *SysDictItemMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *SysDictItemMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *SysDictItemMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *SysDictItemMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *SysDictItemMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetDictID sets the "dict_id" field.
func (m *SysDictItemMutation) SetDictID(s string) {
	m.dict = &s
}

// DictID returns the value of the "dict_id" field in the mutation.
func (m *SysDictItemMutation) DictID() (r string, exists bool) {
	v := m.dict
	if v == nil {
		return
	}
	return *v, true
}

// OldDictID returns the old "dict_id" field's value of the SysDictItem entity.
// If the SysDictItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDictItemMutation) OldDictID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDictID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDictID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDictID: %w", err)
	}
	return oldValue.DictID, nil
}

// ClearDictID clears the value of the "dict_id" field.
func (m *SysDictItemMutation) ClearDictID() {
	m.dict = nil
	m.clearedFields[sysdictitem.FieldDictID] = struct{}{}
}

// DictIDCleared returns if the "dict_id" field was cleared in this mutation.
func (m *SysDictItemMutation) DictIDCleared() bool {
	_, ok := m.clearedFields[sysdictitem.FieldDictID]
	return ok
}

// ResetDictID resets all changes to the "dict_id" field.
func (m *SysDictItemMutation) ResetDictID() {
	m.dict = nil
	delete(m.clearedFields, sysdictitem.FieldDictID)
}

// ClearDict clears the "dict" edge to the SysDict entity.
func (m *SysDictItemMutation) ClearDict() {
	m.cleareddict = true
}

// DictCleared reports if the "dict" edge to the SysDict entity was cleared.
func (m *SysDictItemMutation) DictCleared() bool {
	return m.DictIDCleared() || m.cleareddict
}

// DictIDs returns the "dict" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DictID instead. It exists only for internal usage by the builders.
func (m *SysDictItemMutation) DictIDs() (ids []string) {
	if id := m.dict; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDict resets all changes to the "dict" edge.
func (m *SysDictItemMutation) ResetDict() {
	m.dict = nil
	m.cleareddict = false
}

// Where appends a list predicates to the SysDictItemMutation builder.
func (m *SysDictItemMutation) Where(ps ...predicate.SysDictItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysDictItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysDictItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysDictItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysDictItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysDictItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysDictItem).
func (m *SysDictItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDictItemMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.is_del != nil {
		fields = append(fields, sysdictitem.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysdictitem.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, sysdictitem.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysdictitem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysdictitem.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysdictitem.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysdictitem.FieldIsActive)
	}
	if m.label != nil {
		fields = append(fields, sysdictitem.FieldLabel)
	}
	if m.value != nil {
		fields = append(fields, sysdictitem.FieldValue)
	}
	if m.dict != nil {
		fields = append(fields, sysdictitem.FieldDictID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDictItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdictitem.FieldIsDel:
		return m.IsDel()
	case sysdictitem.FieldMemo:
		return m.Memo()
	case sysdictitem.FieldSort:
		return m.Sort()
	case sysdictitem.FieldCreatedAt:
		return m.CreatedAt()
	case sysdictitem.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdictitem.FieldDeletedAt:
		return m.DeletedAt()
	case sysdictitem.FieldIsActive:
		return m.IsActive()
	case sysdictitem.FieldLabel:
		return m.Label()
	case sysdictitem.FieldValue:
		return m.Value()
	case sysdictitem.FieldDictID:
		return m.DictID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDictItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdictitem.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysdictitem.FieldMemo:
		return m.OldMemo(ctx)
	case sysdictitem.FieldSort:
		return m.OldSort(ctx)
	case sysdictitem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdictitem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdictitem.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysdictitem.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysdictitem.FieldLabel:
		return m.OldLabel(ctx)
	case sysdictitem.FieldValue:
		return m.OldValue(ctx)
	case sysdictitem.FieldDictID:
		return m.OldDictID(ctx)
	}
	return nil, fmt.Errorf("unknown SysDictItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdictitem.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysdictitem.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysdictitem.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysdictitem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdictitem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdictitem.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysdictitem.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysdictitem.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case sysdictitem.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case sysdictitem.FieldDictID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDictID(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDictItemMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysdictitem.FieldSort)
	}
	if m.addvalue != nil {
		fields = append(fields, sysdictitem.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDictItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdictitem.FieldSort:
		return m.AddedSort()
	case sysdictitem.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDictItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdictitem.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysdictitem.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown SysDictItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDictItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdictitem.FieldMemo) {
		fields = append(fields, sysdictitem.FieldMemo)
	}
	if m.FieldCleared(sysdictitem.FieldCreatedAt) {
		fields = append(fields, sysdictitem.FieldCreatedAt)
	}
	if m.FieldCleared(sysdictitem.FieldUpdatedAt) {
		fields = append(fields, sysdictitem.FieldUpdatedAt)
	}
	if m.FieldCleared(sysdictitem.FieldDeletedAt) {
		fields = append(fields, sysdictitem.FieldDeletedAt)
	}
	if m.FieldCleared(sysdictitem.FieldDictID) {
		fields = append(fields, sysdictitem.FieldDictID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDictItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDictItemMutation) ClearField(name string) error {
	switch name {
	case sysdictitem.FieldMemo:
		m.ClearMemo()
		return nil
	case sysdictitem.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysdictitem.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysdictitem.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysdictitem.FieldDictID:
		m.ClearDictID()
		return nil
	}
	return fmt.Errorf("unknown SysDictItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDictItemMutation) ResetField(name string) error {
	switch name {
	case sysdictitem.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysdictitem.FieldMemo:
		m.ResetMemo()
		return nil
	case sysdictitem.FieldSort:
		m.ResetSort()
		return nil
	case sysdictitem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdictitem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdictitem.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysdictitem.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysdictitem.FieldLabel:
		m.ResetLabel()
		return nil
	case sysdictitem.FieldValue:
		m.ResetValue()
		return nil
	case sysdictitem.FieldDictID:
		m.ResetDictID()
		return nil
	}
	return fmt.Errorf("unknown SysDictItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDictItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dict != nil {
		edges = append(edges, sysdictitem.EdgeDict)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDictItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysdictitem.EdgeDict:
		if id := m.dict; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDictItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDictItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDictItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddict {
		edges = append(edges, sysdictitem.EdgeDict)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDictItemMutation) EdgeCleared(name string) bool {
	switch name {
	case sysdictitem.EdgeDict:
		return m.cleareddict
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDictItemMutation) ClearEdge(name string) error {
	switch name {
	case sysdictitem.EdgeDict:
		m.ClearDict()
		return nil
	}
	return fmt.Errorf("unknown SysDictItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDictItemMutation) ResetEdge(name string) error {
	switch name {
	case sysdictitem.EdgeDict:
		m.ResetDict()
		return nil
	}
	return fmt.Errorf("unknown SysDictItem edge %s", name)
}

// SysDistrictMutation represents an operation that mutates the SysDistrict nodes in the graph.
type SysDistrictMutation struct {
	config
	op              Op
	typ             string
	id              *string
	is_del          *bool
	sort            *int32
	addsort         *int32
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	is_active       *bool
	tree_id         *int64
	addtree_id      *int64
	tree_level      *int32
	addtree_level   *int32
	tree_left       *int64
	addtree_left    *int64
	tree_right      *int64
	addtree_right   *int64
	is_leaf         *bool
	tree_path       *string
	name            *string
	name_en         *string
	sname           *string
	sname_en        *string
	abbr            *string
	st_code         *string
	initials        *string
	pinyin          *string
	longitude       *float64
	addlongitude    *float64
	latitude        *float64
	addlatitude     *float64
	area_code       *string
	zip_code        *string
	merge_name      *string
	merge_sname     *string
	extra           *string
	suffix          *string
	is_hot          *bool
	is_real         *bool
	is_main         *bool
	is_direct       *bool
	creator         *string
	clearedFields   map[string]struct{}
	parent          *string
	clearedparent   bool
	children        map[string]struct{}
	removedchildren map[string]struct{}
	clearedchildren bool
	done            bool
	oldValue        func(context.Context) (*SysDistrict, error)
	predicates      []predicate.SysDistrict
}

var _ ent.Mutation = (*SysDistrictMutation)(nil)

// sysdistrictOption allows management of the mutation configuration using functional options.
type sysdistrictOption func(*SysDistrictMutation)

// newSysDistrictMutation creates new mutation for the SysDistrict entity.
func newSysDistrictMutation(c config, op Op, opts ...sysdistrictOption) *SysDistrictMutation {
	m := &SysDistrictMutation{
		config:        c,
		op:            op,
		typ:           TypeSysDistrict,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysDistrictID sets the ID field of the mutation.
func withSysDistrictID(id string) sysdistrictOption {
	return func(m *SysDistrictMutation) {
		var (
			err   error
			once  sync.Once
			value *SysDistrict
		)
		m.oldValue = func(ctx context.Context) (*SysDistrict, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysDistrict.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysDistrict sets the old SysDistrict of the mutation.
func withSysDistrict(node *SysDistrict) sysdistrictOption {
	return func(m *SysDistrictMutation) {
		m.oldValue = func(context.Context) (*SysDistrict, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysDistrictMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysDistrictMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysDistrict entities.
func (m *SysDistrictMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysDistrictMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysDistrictMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysDistrict.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysDistrictMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysDistrictMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysDistrictMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *SysDistrictMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysDistrictMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysDistrictMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysDistrictMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysDistrictMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysDistrictMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysDistrictMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysDistrictMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysdistrict.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysDistrictMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysDistrictMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysdistrict.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysDistrictMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysDistrictMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysDistrictMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysdistrict.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysDistrictMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysDistrictMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysdistrict.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysDistrictMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysDistrictMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysDistrictMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysdistrict.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysDistrictMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysDistrictMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysdistrict.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysDistrictMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysDistrictMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysDistrictMutation) ResetIsActive() {
	m.is_active = nil
}

// SetTreeID sets the "tree_id" field.
func (m *SysDistrictMutation) SetTreeID(i int64) {
	m.tree_id = &i
	m.addtree_id = nil
}

// TreeID returns the value of the "tree_id" field in the mutation.
func (m *SysDistrictMutation) TreeID() (r int64, exists bool) {
	v := m.tree_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeID returns the old "tree_id" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldTreeID(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeID: %w", err)
	}
	return oldValue.TreeID, nil
}

// AddTreeID adds i to the "tree_id" field.
func (m *SysDistrictMutation) AddTreeID(i int64) {
	if m.addtree_id != nil {
		*m.addtree_id += i
	} else {
		m.addtree_id = &i
	}
}

// AddedTreeID returns the value that was added to the "tree_id" field in this mutation.
func (m *SysDistrictMutation) AddedTreeID() (r int64, exists bool) {
	v := m.addtree_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeID clears the value of the "tree_id" field.
func (m *SysDistrictMutation) ClearTreeID() {
	m.tree_id = nil
	m.addtree_id = nil
	m.clearedFields[sysdistrict.FieldTreeID] = struct{}{}
}

// TreeIDCleared returns if the "tree_id" field was cleared in this mutation.
func (m *SysDistrictMutation) TreeIDCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldTreeID]
	return ok
}

// ResetTreeID resets all changes to the "tree_id" field.
func (m *SysDistrictMutation) ResetTreeID() {
	m.tree_id = nil
	m.addtree_id = nil
	delete(m.clearedFields, sysdistrict.FieldTreeID)
}

// SetTreeLevel sets the "tree_level" field.
func (m *SysDistrictMutation) SetTreeLevel(i int32) {
	m.tree_level = &i
	m.addtree_level = nil
}

// TreeLevel returns the value of the "tree_level" field in the mutation.
func (m *SysDistrictMutation) TreeLevel() (r int32, exists bool) {
	v := m.tree_level
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeLevel returns the old "tree_level" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldTreeLevel(ctx context.Context) (v *int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeLevel: %w", err)
	}
	return oldValue.TreeLevel, nil
}

// AddTreeLevel adds i to the "tree_level" field.
func (m *SysDistrictMutation) AddTreeLevel(i int32) {
	if m.addtree_level != nil {
		*m.addtree_level += i
	} else {
		m.addtree_level = &i
	}
}

// AddedTreeLevel returns the value that was added to the "tree_level" field in this mutation.
func (m *SysDistrictMutation) AddedTreeLevel() (r int32, exists bool) {
	v := m.addtree_level
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (m *SysDistrictMutation) ClearTreeLevel() {
	m.tree_level = nil
	m.addtree_level = nil
	m.clearedFields[sysdistrict.FieldTreeLevel] = struct{}{}
}

// TreeLevelCleared returns if the "tree_level" field was cleared in this mutation.
func (m *SysDistrictMutation) TreeLevelCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldTreeLevel]
	return ok
}

// ResetTreeLevel resets all changes to the "tree_level" field.
func (m *SysDistrictMutation) ResetTreeLevel() {
	m.tree_level = nil
	m.addtree_level = nil
	delete(m.clearedFields, sysdistrict.FieldTreeLevel)
}

// SetTreeLeft sets the "tree_left" field.
func (m *SysDistrictMutation) SetTreeLeft(i int64) {
	m.tree_left = &i
	m.addtree_left = nil
}

// TreeLeft returns the value of the "tree_left" field in the mutation.
func (m *SysDistrictMutation) TreeLeft() (r int64, exists bool) {
	v := m.tree_left
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeLeft returns the old "tree_left" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldTreeLeft(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeLeft is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeLeft requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeLeft: %w", err)
	}
	return oldValue.TreeLeft, nil
}

// AddTreeLeft adds i to the "tree_left" field.
func (m *SysDistrictMutation) AddTreeLeft(i int64) {
	if m.addtree_left != nil {
		*m.addtree_left += i
	} else {
		m.addtree_left = &i
	}
}

// AddedTreeLeft returns the value that was added to the "tree_left" field in this mutation.
func (m *SysDistrictMutation) AddedTreeLeft() (r int64, exists bool) {
	v := m.addtree_left
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (m *SysDistrictMutation) ClearTreeLeft() {
	m.tree_left = nil
	m.addtree_left = nil
	m.clearedFields[sysdistrict.FieldTreeLeft] = struct{}{}
}

// TreeLeftCleared returns if the "tree_left" field was cleared in this mutation.
func (m *SysDistrictMutation) TreeLeftCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldTreeLeft]
	return ok
}

// ResetTreeLeft resets all changes to the "tree_left" field.
func (m *SysDistrictMutation) ResetTreeLeft() {
	m.tree_left = nil
	m.addtree_left = nil
	delete(m.clearedFields, sysdistrict.FieldTreeLeft)
}

// SetTreeRight sets the "tree_right" field.
func (m *SysDistrictMutation) SetTreeRight(i int64) {
	m.tree_right = &i
	m.addtree_right = nil
}

// TreeRight returns the value of the "tree_right" field in the mutation.
func (m *SysDistrictMutation) TreeRight() (r int64, exists bool) {
	v := m.tree_right
	if v == nil {
		return
	}
	return *v, true
}

// OldTreeRight returns the old "tree_right" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldTreeRight(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreeRight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreeRight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreeRight: %w", err)
	}
	return oldValue.TreeRight, nil
}

// AddTreeRight adds i to the "tree_right" field.
func (m *SysDistrictMutation) AddTreeRight(i int64) {
	if m.addtree_right != nil {
		*m.addtree_right += i
	} else {
		m.addtree_right = &i
	}
}

// AddedTreeRight returns the value that was added to the "tree_right" field in this mutation.
func (m *SysDistrictMutation) AddedTreeRight() (r int64, exists bool) {
	v := m.addtree_right
	if v == nil {
		return
	}
	return *v, true
}

// ClearTreeRight clears the value of the "tree_right" field.
func (m *SysDistrictMutation) ClearTreeRight() {
	m.tree_right = nil
	m.addtree_right = nil
	m.clearedFields[sysdistrict.FieldTreeRight] = struct{}{}
}

// TreeRightCleared returns if the "tree_right" field was cleared in this mutation.
func (m *SysDistrictMutation) TreeRightCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldTreeRight]
	return ok
}

// ResetTreeRight resets all changes to the "tree_right" field.
func (m *SysDistrictMutation) ResetTreeRight() {
	m.tree_right = nil
	m.addtree_right = nil
	delete(m.clearedFields, sysdistrict.FieldTreeRight)
}

// SetIsLeaf sets the "is_leaf" field.
func (m *SysDistrictMutation) SetIsLeaf(b bool) {
	m.is_leaf = &b
}

// IsLeaf returns the value of the "is_leaf" field in the mutation.
func (m *SysDistrictMutation) IsLeaf() (r bool, exists bool) {
	v := m.is_leaf
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeaf returns the old "is_leaf" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldIsLeaf(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLeaf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLeaf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeaf: %w", err)
	}
	return oldValue.IsLeaf, nil
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (m *SysDistrictMutation) ClearIsLeaf() {
	m.is_leaf = nil
	m.clearedFields[sysdistrict.FieldIsLeaf] = struct{}{}
}

// IsLeafCleared returns if the "is_leaf" field was cleared in this mutation.
func (m *SysDistrictMutation) IsLeafCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldIsLeaf]
	return ok
}

// ResetIsLeaf resets all changes to the "is_leaf" field.
func (m *SysDistrictMutation) ResetIsLeaf() {
	m.is_leaf = nil
	delete(m.clearedFields, sysdistrict.FieldIsLeaf)
}

// SetTreePath sets the "tree_path" field.
func (m *SysDistrictMutation) SetTreePath(s string) {
	m.tree_path = &s
}

// TreePath returns the value of the "tree_path" field in the mutation.
func (m *SysDistrictMutation) TreePath() (r string, exists bool) {
	v := m.tree_path
	if v == nil {
		return
	}
	return *v, true
}

// OldTreePath returns the old "tree_path" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldTreePath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTreePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTreePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTreePath: %w", err)
	}
	return oldValue.TreePath, nil
}

// ClearTreePath clears the value of the "tree_path" field.
func (m *SysDistrictMutation) ClearTreePath() {
	m.tree_path = nil
	m.clearedFields[sysdistrict.FieldTreePath] = struct{}{}
}

// TreePathCleared returns if the "tree_path" field was cleared in this mutation.
func (m *SysDistrictMutation) TreePathCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldTreePath]
	return ok
}

// ResetTreePath resets all changes to the "tree_path" field.
func (m *SysDistrictMutation) ResetTreePath() {
	m.tree_path = nil
	delete(m.clearedFields, sysdistrict.FieldTreePath)
}

// SetName sets the "name" field.
func (m *SysDistrictMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysDistrictMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *SysDistrictMutation) ClearName() {
	m.name = nil
	m.clearedFields[sysdistrict.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *SysDistrictMutation) NameCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *SysDistrictMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, sysdistrict.FieldName)
}

// SetNameEn sets the "name_en" field.
func (m *SysDistrictMutation) SetNameEn(s string) {
	m.name_en = &s
}

// NameEn returns the value of the "name_en" field in the mutation.
func (m *SysDistrictMutation) NameEn() (r string, exists bool) {
	v := m.name_en
	if v == nil {
		return
	}
	return *v, true
}

// OldNameEn returns the old "name_en" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldNameEn(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameEn: %w", err)
	}
	return oldValue.NameEn, nil
}

// ClearNameEn clears the value of the "name_en" field.
func (m *SysDistrictMutation) ClearNameEn() {
	m.name_en = nil
	m.clearedFields[sysdistrict.FieldNameEn] = struct{}{}
}

// NameEnCleared returns if the "name_en" field was cleared in this mutation.
func (m *SysDistrictMutation) NameEnCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldNameEn]
	return ok
}

// ResetNameEn resets all changes to the "name_en" field.
func (m *SysDistrictMutation) ResetNameEn() {
	m.name_en = nil
	delete(m.clearedFields, sysdistrict.FieldNameEn)
}

// SetSname sets the "sname" field.
func (m *SysDistrictMutation) SetSname(s string) {
	m.sname = &s
}

// Sname returns the value of the "sname" field in the mutation.
func (m *SysDistrictMutation) Sname() (r string, exists bool) {
	v := m.sname
	if v == nil {
		return
	}
	return *v, true
}

// OldSname returns the old "sname" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldSname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSname: %w", err)
	}
	return oldValue.Sname, nil
}

// ClearSname clears the value of the "sname" field.
func (m *SysDistrictMutation) ClearSname() {
	m.sname = nil
	m.clearedFields[sysdistrict.FieldSname] = struct{}{}
}

// SnameCleared returns if the "sname" field was cleared in this mutation.
func (m *SysDistrictMutation) SnameCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldSname]
	return ok
}

// ResetSname resets all changes to the "sname" field.
func (m *SysDistrictMutation) ResetSname() {
	m.sname = nil
	delete(m.clearedFields, sysdistrict.FieldSname)
}

// SetSnameEn sets the "sname_en" field.
func (m *SysDistrictMutation) SetSnameEn(s string) {
	m.sname_en = &s
}

// SnameEn returns the value of the "sname_en" field in the mutation.
func (m *SysDistrictMutation) SnameEn() (r string, exists bool) {
	v := m.sname_en
	if v == nil {
		return
	}
	return *v, true
}

// OldSnameEn returns the old "sname_en" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldSnameEn(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnameEn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnameEn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnameEn: %w", err)
	}
	return oldValue.SnameEn, nil
}

// ClearSnameEn clears the value of the "sname_en" field.
func (m *SysDistrictMutation) ClearSnameEn() {
	m.sname_en = nil
	m.clearedFields[sysdistrict.FieldSnameEn] = struct{}{}
}

// SnameEnCleared returns if the "sname_en" field was cleared in this mutation.
func (m *SysDistrictMutation) SnameEnCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldSnameEn]
	return ok
}

// ResetSnameEn resets all changes to the "sname_en" field.
func (m *SysDistrictMutation) ResetSnameEn() {
	m.sname_en = nil
	delete(m.clearedFields, sysdistrict.FieldSnameEn)
}

// SetAbbr sets the "abbr" field.
func (m *SysDistrictMutation) SetAbbr(s string) {
	m.abbr = &s
}

// Abbr returns the value of the "abbr" field in the mutation.
func (m *SysDistrictMutation) Abbr() (r string, exists bool) {
	v := m.abbr
	if v == nil {
		return
	}
	return *v, true
}

// OldAbbr returns the old "abbr" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldAbbr(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbbr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbbr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbbr: %w", err)
	}
	return oldValue.Abbr, nil
}

// ClearAbbr clears the value of the "abbr" field.
func (m *SysDistrictMutation) ClearAbbr() {
	m.abbr = nil
	m.clearedFields[sysdistrict.FieldAbbr] = struct{}{}
}

// AbbrCleared returns if the "abbr" field was cleared in this mutation.
func (m *SysDistrictMutation) AbbrCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldAbbr]
	return ok
}

// ResetAbbr resets all changes to the "abbr" field.
func (m *SysDistrictMutation) ResetAbbr() {
	m.abbr = nil
	delete(m.clearedFields, sysdistrict.FieldAbbr)
}

// SetStCode sets the "st_code" field.
func (m *SysDistrictMutation) SetStCode(s string) {
	m.st_code = &s
}

// StCode returns the value of the "st_code" field in the mutation.
func (m *SysDistrictMutation) StCode() (r string, exists bool) {
	v := m.st_code
	if v == nil {
		return
	}
	return *v, true
}

// OldStCode returns the old "st_code" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldStCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStCode: %w", err)
	}
	return oldValue.StCode, nil
}

// ClearStCode clears the value of the "st_code" field.
func (m *SysDistrictMutation) ClearStCode() {
	m.st_code = nil
	m.clearedFields[sysdistrict.FieldStCode] = struct{}{}
}

// StCodeCleared returns if the "st_code" field was cleared in this mutation.
func (m *SysDistrictMutation) StCodeCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldStCode]
	return ok
}

// ResetStCode resets all changes to the "st_code" field.
func (m *SysDistrictMutation) ResetStCode() {
	m.st_code = nil
	delete(m.clearedFields, sysdistrict.FieldStCode)
}

// SetInitials sets the "initials" field.
func (m *SysDistrictMutation) SetInitials(s string) {
	m.initials = &s
}

// Initials returns the value of the "initials" field in the mutation.
func (m *SysDistrictMutation) Initials() (r string, exists bool) {
	v := m.initials
	if v == nil {
		return
	}
	return *v, true
}

// OldInitials returns the old "initials" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldInitials(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInitials is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInitials requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInitials: %w", err)
	}
	return oldValue.Initials, nil
}

// ClearInitials clears the value of the "initials" field.
func (m *SysDistrictMutation) ClearInitials() {
	m.initials = nil
	m.clearedFields[sysdistrict.FieldInitials] = struct{}{}
}

// InitialsCleared returns if the "initials" field was cleared in this mutation.
func (m *SysDistrictMutation) InitialsCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldInitials]
	return ok
}

// ResetInitials resets all changes to the "initials" field.
func (m *SysDistrictMutation) ResetInitials() {
	m.initials = nil
	delete(m.clearedFields, sysdistrict.FieldInitials)
}

// SetPinyin sets the "pinyin" field.
func (m *SysDistrictMutation) SetPinyin(s string) {
	m.pinyin = &s
}

// Pinyin returns the value of the "pinyin" field in the mutation.
func (m *SysDistrictMutation) Pinyin() (r string, exists bool) {
	v := m.pinyin
	if v == nil {
		return
	}
	return *v, true
}

// OldPinyin returns the old "pinyin" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldPinyin(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPinyin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPinyin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPinyin: %w", err)
	}
	return oldValue.Pinyin, nil
}

// ClearPinyin clears the value of the "pinyin" field.
func (m *SysDistrictMutation) ClearPinyin() {
	m.pinyin = nil
	m.clearedFields[sysdistrict.FieldPinyin] = struct{}{}
}

// PinyinCleared returns if the "pinyin" field was cleared in this mutation.
func (m *SysDistrictMutation) PinyinCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldPinyin]
	return ok
}

// ResetPinyin resets all changes to the "pinyin" field.
func (m *SysDistrictMutation) ResetPinyin() {
	m.pinyin = nil
	delete(m.clearedFields, sysdistrict.FieldPinyin)
}

// SetParentID sets the "parent_id" field.
func (m *SysDistrictMutation) SetParentID(s string) {
	m.parent = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *SysDistrictMutation) ParentID() (r string, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldParentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *SysDistrictMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[sysdistrict.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *SysDistrictMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *SysDistrictMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, sysdistrict.FieldParentID)
}

// SetLongitude sets the "longitude" field.
func (m *SysDistrictMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *SysDistrictMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldLongitude(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *SysDistrictMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *SysDistrictMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ClearLongitude clears the value of the "longitude" field.
func (m *SysDistrictMutation) ClearLongitude() {
	m.longitude = nil
	m.addlongitude = nil
	m.clearedFields[sysdistrict.FieldLongitude] = struct{}{}
}

// LongitudeCleared returns if the "longitude" field was cleared in this mutation.
func (m *SysDistrictMutation) LongitudeCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldLongitude]
	return ok
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *SysDistrictMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
	delete(m.clearedFields, sysdistrict.FieldLongitude)
}

// SetLatitude sets the "latitude" field.
func (m *SysDistrictMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *SysDistrictMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldLatitude(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *SysDistrictMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *SysDistrictMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ClearLatitude clears the value of the "latitude" field.
func (m *SysDistrictMutation) ClearLatitude() {
	m.latitude = nil
	m.addlatitude = nil
	m.clearedFields[sysdistrict.FieldLatitude] = struct{}{}
}

// LatitudeCleared returns if the "latitude" field was cleared in this mutation.
func (m *SysDistrictMutation) LatitudeCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldLatitude]
	return ok
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *SysDistrictMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
	delete(m.clearedFields, sysdistrict.FieldLatitude)
}

// SetAreaCode sets the "area_code" field.
func (m *SysDistrictMutation) SetAreaCode(s string) {
	m.area_code = &s
}

// AreaCode returns the value of the "area_code" field in the mutation.
func (m *SysDistrictMutation) AreaCode() (r string, exists bool) {
	v := m.area_code
	if v == nil {
		return
	}
	return *v, true
}

// OldAreaCode returns the old "area_code" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldAreaCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAreaCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAreaCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAreaCode: %w", err)
	}
	return oldValue.AreaCode, nil
}

// ClearAreaCode clears the value of the "area_code" field.
func (m *SysDistrictMutation) ClearAreaCode() {
	m.area_code = nil
	m.clearedFields[sysdistrict.FieldAreaCode] = struct{}{}
}

// AreaCodeCleared returns if the "area_code" field was cleared in this mutation.
func (m *SysDistrictMutation) AreaCodeCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldAreaCode]
	return ok
}

// ResetAreaCode resets all changes to the "area_code" field.
func (m *SysDistrictMutation) ResetAreaCode() {
	m.area_code = nil
	delete(m.clearedFields, sysdistrict.FieldAreaCode)
}

// SetZipCode sets the "zip_code" field.
func (m *SysDistrictMutation) SetZipCode(s string) {
	m.zip_code = &s
}

// ZipCode returns the value of the "zip_code" field in the mutation.
func (m *SysDistrictMutation) ZipCode() (r string, exists bool) {
	v := m.zip_code
	if v == nil {
		return
	}
	return *v, true
}

// OldZipCode returns the old "zip_code" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldZipCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldZipCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldZipCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZipCode: %w", err)
	}
	return oldValue.ZipCode, nil
}

// ClearZipCode clears the value of the "zip_code" field.
func (m *SysDistrictMutation) ClearZipCode() {
	m.zip_code = nil
	m.clearedFields[sysdistrict.FieldZipCode] = struct{}{}
}

// ZipCodeCleared returns if the "zip_code" field was cleared in this mutation.
func (m *SysDistrictMutation) ZipCodeCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldZipCode]
	return ok
}

// ResetZipCode resets all changes to the "zip_code" field.
func (m *SysDistrictMutation) ResetZipCode() {
	m.zip_code = nil
	delete(m.clearedFields, sysdistrict.FieldZipCode)
}

// SetMergeName sets the "merge_name" field.
func (m *SysDistrictMutation) SetMergeName(s string) {
	m.merge_name = &s
}

// MergeName returns the value of the "merge_name" field in the mutation.
func (m *SysDistrictMutation) MergeName() (r string, exists bool) {
	v := m.merge_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMergeName returns the old "merge_name" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldMergeName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMergeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMergeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMergeName: %w", err)
	}
	return oldValue.MergeName, nil
}

// ClearMergeName clears the value of the "merge_name" field.
func (m *SysDistrictMutation) ClearMergeName() {
	m.merge_name = nil
	m.clearedFields[sysdistrict.FieldMergeName] = struct{}{}
}

// MergeNameCleared returns if the "merge_name" field was cleared in this mutation.
func (m *SysDistrictMutation) MergeNameCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldMergeName]
	return ok
}

// ResetMergeName resets all changes to the "merge_name" field.
func (m *SysDistrictMutation) ResetMergeName() {
	m.merge_name = nil
	delete(m.clearedFields, sysdistrict.FieldMergeName)
}

// SetMergeSname sets the "merge_sname" field.
func (m *SysDistrictMutation) SetMergeSname(s string) {
	m.merge_sname = &s
}

// MergeSname returns the value of the "merge_sname" field in the mutation.
func (m *SysDistrictMutation) MergeSname() (r string, exists bool) {
	v := m.merge_sname
	if v == nil {
		return
	}
	return *v, true
}

// OldMergeSname returns the old "merge_sname" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldMergeSname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMergeSname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMergeSname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMergeSname: %w", err)
	}
	return oldValue.MergeSname, nil
}

// ClearMergeSname clears the value of the "merge_sname" field.
func (m *SysDistrictMutation) ClearMergeSname() {
	m.merge_sname = nil
	m.clearedFields[sysdistrict.FieldMergeSname] = struct{}{}
}

// MergeSnameCleared returns if the "merge_sname" field was cleared in this mutation.
func (m *SysDistrictMutation) MergeSnameCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldMergeSname]
	return ok
}

// ResetMergeSname resets all changes to the "merge_sname" field.
func (m *SysDistrictMutation) ResetMergeSname() {
	m.merge_sname = nil
	delete(m.clearedFields, sysdistrict.FieldMergeSname)
}

// SetExtra sets the "extra" field.
func (m *SysDistrictMutation) SetExtra(s string) {
	m.extra = &s
}

// Extra returns the value of the "extra" field in the mutation.
func (m *SysDistrictMutation) Extra() (r string, exists bool) {
	v := m.extra
	if v == nil {
		return
	}
	return *v, true
}

// OldExtra returns the old "extra" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldExtra(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtra: %w", err)
	}
	return oldValue.Extra, nil
}

// ClearExtra clears the value of the "extra" field.
func (m *SysDistrictMutation) ClearExtra() {
	m.extra = nil
	m.clearedFields[sysdistrict.FieldExtra] = struct{}{}
}

// ExtraCleared returns if the "extra" field was cleared in this mutation.
func (m *SysDistrictMutation) ExtraCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldExtra]
	return ok
}

// ResetExtra resets all changes to the "extra" field.
func (m *SysDistrictMutation) ResetExtra() {
	m.extra = nil
	delete(m.clearedFields, sysdistrict.FieldExtra)
}

// SetSuffix sets the "suffix" field.
func (m *SysDistrictMutation) SetSuffix(s string) {
	m.suffix = &s
}

// Suffix returns the value of the "suffix" field in the mutation.
func (m *SysDistrictMutation) Suffix() (r string, exists bool) {
	v := m.suffix
	if v == nil {
		return
	}
	return *v, true
}

// OldSuffix returns the old "suffix" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldSuffix(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuffix is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuffix requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuffix: %w", err)
	}
	return oldValue.Suffix, nil
}

// ClearSuffix clears the value of the "suffix" field.
func (m *SysDistrictMutation) ClearSuffix() {
	m.suffix = nil
	m.clearedFields[sysdistrict.FieldSuffix] = struct{}{}
}

// SuffixCleared returns if the "suffix" field was cleared in this mutation.
func (m *SysDistrictMutation) SuffixCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldSuffix]
	return ok
}

// ResetSuffix resets all changes to the "suffix" field.
func (m *SysDistrictMutation) ResetSuffix() {
	m.suffix = nil
	delete(m.clearedFields, sysdistrict.FieldSuffix)
}

// SetIsHot sets the "is_hot" field.
func (m *SysDistrictMutation) SetIsHot(b bool) {
	m.is_hot = &b
}

// IsHot returns the value of the "is_hot" field in the mutation.
func (m *SysDistrictMutation) IsHot() (r bool, exists bool) {
	v := m.is_hot
	if v == nil {
		return
	}
	return *v, true
}

// OldIsHot returns the old "is_hot" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldIsHot(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsHot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsHot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsHot: %w", err)
	}
	return oldValue.IsHot, nil
}

// ClearIsHot clears the value of the "is_hot" field.
func (m *SysDistrictMutation) ClearIsHot() {
	m.is_hot = nil
	m.clearedFields[sysdistrict.FieldIsHot] = struct{}{}
}

// IsHotCleared returns if the "is_hot" field was cleared in this mutation.
func (m *SysDistrictMutation) IsHotCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldIsHot]
	return ok
}

// ResetIsHot resets all changes to the "is_hot" field.
func (m *SysDistrictMutation) ResetIsHot() {
	m.is_hot = nil
	delete(m.clearedFields, sysdistrict.FieldIsHot)
}

// SetIsReal sets the "is_real" field.
func (m *SysDistrictMutation) SetIsReal(b bool) {
	m.is_real = &b
}

// IsReal returns the value of the "is_real" field in the mutation.
func (m *SysDistrictMutation) IsReal() (r bool, exists bool) {
	v := m.is_real
	if v == nil {
		return
	}
	return *v, true
}

// OldIsReal returns the old "is_real" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldIsReal(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsReal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsReal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsReal: %w", err)
	}
	return oldValue.IsReal, nil
}

// ClearIsReal clears the value of the "is_real" field.
func (m *SysDistrictMutation) ClearIsReal() {
	m.is_real = nil
	m.clearedFields[sysdistrict.FieldIsReal] = struct{}{}
}

// IsRealCleared returns if the "is_real" field was cleared in this mutation.
func (m *SysDistrictMutation) IsRealCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldIsReal]
	return ok
}

// ResetIsReal resets all changes to the "is_real" field.
func (m *SysDistrictMutation) ResetIsReal() {
	m.is_real = nil
	delete(m.clearedFields, sysdistrict.FieldIsReal)
}

// SetIsMain sets the "is_main" field.
func (m *SysDistrictMutation) SetIsMain(b bool) {
	m.is_main = &b
}

// IsMain returns the value of the "is_main" field in the mutation.
func (m *SysDistrictMutation) IsMain() (r bool, exists bool) {
	v := m.is_main
	if v == nil {
		return
	}
	return *v, true
}

// OldIsMain returns the old "is_main" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldIsMain(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsMain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsMain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsMain: %w", err)
	}
	return oldValue.IsMain, nil
}

// ClearIsMain clears the value of the "is_main" field.
func (m *SysDistrictMutation) ClearIsMain() {
	m.is_main = nil
	m.clearedFields[sysdistrict.FieldIsMain] = struct{}{}
}

// IsMainCleared returns if the "is_main" field was cleared in this mutation.
func (m *SysDistrictMutation) IsMainCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldIsMain]
	return ok
}

// ResetIsMain resets all changes to the "is_main" field.
func (m *SysDistrictMutation) ResetIsMain() {
	m.is_main = nil
	delete(m.clearedFields, sysdistrict.FieldIsMain)
}

// SetIsDirect sets the "is_direct" field.
func (m *SysDistrictMutation) SetIsDirect(b bool) {
	m.is_direct = &b
}

// IsDirect returns the value of the "is_direct" field in the mutation.
func (m *SysDistrictMutation) IsDirect() (r bool, exists bool) {
	v := m.is_direct
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDirect returns the old "is_direct" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldIsDirect(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDirect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDirect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDirect: %w", err)
	}
	return oldValue.IsDirect, nil
}

// ClearIsDirect clears the value of the "is_direct" field.
func (m *SysDistrictMutation) ClearIsDirect() {
	m.is_direct = nil
	m.clearedFields[sysdistrict.FieldIsDirect] = struct{}{}
}

// IsDirectCleared returns if the "is_direct" field was cleared in this mutation.
func (m *SysDistrictMutation) IsDirectCleared() bool {
	_, ok := m.clearedFields[sysdistrict.FieldIsDirect]
	return ok
}

// ResetIsDirect resets all changes to the "is_direct" field.
func (m *SysDistrictMutation) ResetIsDirect() {
	m.is_direct = nil
	delete(m.clearedFields, sysdistrict.FieldIsDirect)
}

// SetCreator sets the "creator" field.
func (m *SysDistrictMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *SysDistrictMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the SysDistrict entity.
// If the SysDistrict object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysDistrictMutation) OldCreator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ResetCreator resets all changes to the "creator" field.
func (m *SysDistrictMutation) ResetCreator() {
	m.creator = nil
}

// ClearParent clears the "parent" edge to the SysDistrict entity.
func (m *SysDistrictMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the SysDistrict entity was cleared.
func (m *SysDistrictMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *SysDistrictMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *SysDistrictMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the SysDistrict entity by ids.
func (m *SysDistrictMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the SysDistrict entity.
func (m *SysDistrictMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the SysDistrict entity was cleared.
func (m *SysDistrictMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the SysDistrict entity by IDs.
func (m *SysDistrictMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the SysDistrict entity.
func (m *SysDistrictMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *SysDistrictMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *SysDistrictMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// Where appends a list predicates to the SysDistrictMutation builder.
func (m *SysDistrictMutation) Where(ps ...predicate.SysDistrict) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysDistrictMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysDistrictMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysDistrict, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysDistrictMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysDistrictMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysDistrict).
func (m *SysDistrictMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysDistrictMutation) Fields() []string {
	fields := make([]string, 0, 34)
	if m.is_del != nil {
		fields = append(fields, sysdistrict.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, sysdistrict.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysdistrict.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysdistrict.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysdistrict.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysdistrict.FieldIsActive)
	}
	if m.tree_id != nil {
		fields = append(fields, sysdistrict.FieldTreeID)
	}
	if m.tree_level != nil {
		fields = append(fields, sysdistrict.FieldTreeLevel)
	}
	if m.tree_left != nil {
		fields = append(fields, sysdistrict.FieldTreeLeft)
	}
	if m.tree_right != nil {
		fields = append(fields, sysdistrict.FieldTreeRight)
	}
	if m.is_leaf != nil {
		fields = append(fields, sysdistrict.FieldIsLeaf)
	}
	if m.tree_path != nil {
		fields = append(fields, sysdistrict.FieldTreePath)
	}
	if m.name != nil {
		fields = append(fields, sysdistrict.FieldName)
	}
	if m.name_en != nil {
		fields = append(fields, sysdistrict.FieldNameEn)
	}
	if m.sname != nil {
		fields = append(fields, sysdistrict.FieldSname)
	}
	if m.sname_en != nil {
		fields = append(fields, sysdistrict.FieldSnameEn)
	}
	if m.abbr != nil {
		fields = append(fields, sysdistrict.FieldAbbr)
	}
	if m.st_code != nil {
		fields = append(fields, sysdistrict.FieldStCode)
	}
	if m.initials != nil {
		fields = append(fields, sysdistrict.FieldInitials)
	}
	if m.pinyin != nil {
		fields = append(fields, sysdistrict.FieldPinyin)
	}
	if m.parent != nil {
		fields = append(fields, sysdistrict.FieldParentID)
	}
	if m.longitude != nil {
		fields = append(fields, sysdistrict.FieldLongitude)
	}
	if m.latitude != nil {
		fields = append(fields, sysdistrict.FieldLatitude)
	}
	if m.area_code != nil {
		fields = append(fields, sysdistrict.FieldAreaCode)
	}
	if m.zip_code != nil {
		fields = append(fields, sysdistrict.FieldZipCode)
	}
	if m.merge_name != nil {
		fields = append(fields, sysdistrict.FieldMergeName)
	}
	if m.merge_sname != nil {
		fields = append(fields, sysdistrict.FieldMergeSname)
	}
	if m.extra != nil {
		fields = append(fields, sysdistrict.FieldExtra)
	}
	if m.suffix != nil {
		fields = append(fields, sysdistrict.FieldSuffix)
	}
	if m.is_hot != nil {
		fields = append(fields, sysdistrict.FieldIsHot)
	}
	if m.is_real != nil {
		fields = append(fields, sysdistrict.FieldIsReal)
	}
	if m.is_main != nil {
		fields = append(fields, sysdistrict.FieldIsMain)
	}
	if m.is_direct != nil {
		fields = append(fields, sysdistrict.FieldIsDirect)
	}
	if m.creator != nil {
		fields = append(fields, sysdistrict.FieldCreator)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysDistrictMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysdistrict.FieldIsDel:
		return m.IsDel()
	case sysdistrict.FieldSort:
		return m.Sort()
	case sysdistrict.FieldCreatedAt:
		return m.CreatedAt()
	case sysdistrict.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysdistrict.FieldDeletedAt:
		return m.DeletedAt()
	case sysdistrict.FieldIsActive:
		return m.IsActive()
	case sysdistrict.FieldTreeID:
		return m.TreeID()
	case sysdistrict.FieldTreeLevel:
		return m.TreeLevel()
	case sysdistrict.FieldTreeLeft:
		return m.TreeLeft()
	case sysdistrict.FieldTreeRight:
		return m.TreeRight()
	case sysdistrict.FieldIsLeaf:
		return m.IsLeaf()
	case sysdistrict.FieldTreePath:
		return m.TreePath()
	case sysdistrict.FieldName:
		return m.Name()
	case sysdistrict.FieldNameEn:
		return m.NameEn()
	case sysdistrict.FieldSname:
		return m.Sname()
	case sysdistrict.FieldSnameEn:
		return m.SnameEn()
	case sysdistrict.FieldAbbr:
		return m.Abbr()
	case sysdistrict.FieldStCode:
		return m.StCode()
	case sysdistrict.FieldInitials:
		return m.Initials()
	case sysdistrict.FieldPinyin:
		return m.Pinyin()
	case sysdistrict.FieldParentID:
		return m.ParentID()
	case sysdistrict.FieldLongitude:
		return m.Longitude()
	case sysdistrict.FieldLatitude:
		return m.Latitude()
	case sysdistrict.FieldAreaCode:
		return m.AreaCode()
	case sysdistrict.FieldZipCode:
		return m.ZipCode()
	case sysdistrict.FieldMergeName:
		return m.MergeName()
	case sysdistrict.FieldMergeSname:
		return m.MergeSname()
	case sysdistrict.FieldExtra:
		return m.Extra()
	case sysdistrict.FieldSuffix:
		return m.Suffix()
	case sysdistrict.FieldIsHot:
		return m.IsHot()
	case sysdistrict.FieldIsReal:
		return m.IsReal()
	case sysdistrict.FieldIsMain:
		return m.IsMain()
	case sysdistrict.FieldIsDirect:
		return m.IsDirect()
	case sysdistrict.FieldCreator:
		return m.Creator()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysDistrictMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysdistrict.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysdistrict.FieldSort:
		return m.OldSort(ctx)
	case sysdistrict.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysdistrict.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysdistrict.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysdistrict.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysdistrict.FieldTreeID:
		return m.OldTreeID(ctx)
	case sysdistrict.FieldTreeLevel:
		return m.OldTreeLevel(ctx)
	case sysdistrict.FieldTreeLeft:
		return m.OldTreeLeft(ctx)
	case sysdistrict.FieldTreeRight:
		return m.OldTreeRight(ctx)
	case sysdistrict.FieldIsLeaf:
		return m.OldIsLeaf(ctx)
	case sysdistrict.FieldTreePath:
		return m.OldTreePath(ctx)
	case sysdistrict.FieldName:
		return m.OldName(ctx)
	case sysdistrict.FieldNameEn:
		return m.OldNameEn(ctx)
	case sysdistrict.FieldSname:
		return m.OldSname(ctx)
	case sysdistrict.FieldSnameEn:
		return m.OldSnameEn(ctx)
	case sysdistrict.FieldAbbr:
		return m.OldAbbr(ctx)
	case sysdistrict.FieldStCode:
		return m.OldStCode(ctx)
	case sysdistrict.FieldInitials:
		return m.OldInitials(ctx)
	case sysdistrict.FieldPinyin:
		return m.OldPinyin(ctx)
	case sysdistrict.FieldParentID:
		return m.OldParentID(ctx)
	case sysdistrict.FieldLongitude:
		return m.OldLongitude(ctx)
	case sysdistrict.FieldLatitude:
		return m.OldLatitude(ctx)
	case sysdistrict.FieldAreaCode:
		return m.OldAreaCode(ctx)
	case sysdistrict.FieldZipCode:
		return m.OldZipCode(ctx)
	case sysdistrict.FieldMergeName:
		return m.OldMergeName(ctx)
	case sysdistrict.FieldMergeSname:
		return m.OldMergeSname(ctx)
	case sysdistrict.FieldExtra:
		return m.OldExtra(ctx)
	case sysdistrict.FieldSuffix:
		return m.OldSuffix(ctx)
	case sysdistrict.FieldIsHot:
		return m.OldIsHot(ctx)
	case sysdistrict.FieldIsReal:
		return m.OldIsReal(ctx)
	case sysdistrict.FieldIsMain:
		return m.OldIsMain(ctx)
	case sysdistrict.FieldIsDirect:
		return m.OldIsDirect(ctx)
	case sysdistrict.FieldCreator:
		return m.OldCreator(ctx)
	}
	return nil, fmt.Errorf("unknown SysDistrict field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDistrictMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysdistrict.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysdistrict.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysdistrict.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysdistrict.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysdistrict.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysdistrict.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysdistrict.FieldTreeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeID(v)
		return nil
	case sysdistrict.FieldTreeLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeLevel(v)
		return nil
	case sysdistrict.FieldTreeLeft:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeLeft(v)
		return nil
	case sysdistrict.FieldTreeRight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreeRight(v)
		return nil
	case sysdistrict.FieldIsLeaf:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeaf(v)
		return nil
	case sysdistrict.FieldTreePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTreePath(v)
		return nil
	case sysdistrict.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sysdistrict.FieldNameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameEn(v)
		return nil
	case sysdistrict.FieldSname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSname(v)
		return nil
	case sysdistrict.FieldSnameEn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnameEn(v)
		return nil
	case sysdistrict.FieldAbbr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbbr(v)
		return nil
	case sysdistrict.FieldStCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStCode(v)
		return nil
	case sysdistrict.FieldInitials:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitials(v)
		return nil
	case sysdistrict.FieldPinyin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPinyin(v)
		return nil
	case sysdistrict.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case sysdistrict.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case sysdistrict.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case sysdistrict.FieldAreaCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAreaCode(v)
		return nil
	case sysdistrict.FieldZipCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZipCode(v)
		return nil
	case sysdistrict.FieldMergeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMergeName(v)
		return nil
	case sysdistrict.FieldMergeSname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMergeSname(v)
		return nil
	case sysdistrict.FieldExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtra(v)
		return nil
	case sysdistrict.FieldSuffix:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuffix(v)
		return nil
	case sysdistrict.FieldIsHot:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsHot(v)
		return nil
	case sysdistrict.FieldIsReal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsReal(v)
		return nil
	case sysdistrict.FieldIsMain:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsMain(v)
		return nil
	case sysdistrict.FieldIsDirect:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDirect(v)
		return nil
	case sysdistrict.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	}
	return fmt.Errorf("unknown SysDistrict field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysDistrictMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysdistrict.FieldSort)
	}
	if m.addtree_id != nil {
		fields = append(fields, sysdistrict.FieldTreeID)
	}
	if m.addtree_level != nil {
		fields = append(fields, sysdistrict.FieldTreeLevel)
	}
	if m.addtree_left != nil {
		fields = append(fields, sysdistrict.FieldTreeLeft)
	}
	if m.addtree_right != nil {
		fields = append(fields, sysdistrict.FieldTreeRight)
	}
	if m.addlongitude != nil {
		fields = append(fields, sysdistrict.FieldLongitude)
	}
	if m.addlatitude != nil {
		fields = append(fields, sysdistrict.FieldLatitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysDistrictMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysdistrict.FieldSort:
		return m.AddedSort()
	case sysdistrict.FieldTreeID:
		return m.AddedTreeID()
	case sysdistrict.FieldTreeLevel:
		return m.AddedTreeLevel()
	case sysdistrict.FieldTreeLeft:
		return m.AddedTreeLeft()
	case sysdistrict.FieldTreeRight:
		return m.AddedTreeRight()
	case sysdistrict.FieldLongitude:
		return m.AddedLongitude()
	case sysdistrict.FieldLatitude:
		return m.AddedLatitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysDistrictMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysdistrict.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysdistrict.FieldTreeID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeID(v)
		return nil
	case sysdistrict.FieldTreeLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeLevel(v)
		return nil
	case sysdistrict.FieldTreeLeft:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeLeft(v)
		return nil
	case sysdistrict.FieldTreeRight:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTreeRight(v)
		return nil
	case sysdistrict.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	case sysdistrict.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	}
	return fmt.Errorf("unknown SysDistrict numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysDistrictMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysdistrict.FieldCreatedAt) {
		fields = append(fields, sysdistrict.FieldCreatedAt)
	}
	if m.FieldCleared(sysdistrict.FieldUpdatedAt) {
		fields = append(fields, sysdistrict.FieldUpdatedAt)
	}
	if m.FieldCleared(sysdistrict.FieldDeletedAt) {
		fields = append(fields, sysdistrict.FieldDeletedAt)
	}
	if m.FieldCleared(sysdistrict.FieldTreeID) {
		fields = append(fields, sysdistrict.FieldTreeID)
	}
	if m.FieldCleared(sysdistrict.FieldTreeLevel) {
		fields = append(fields, sysdistrict.FieldTreeLevel)
	}
	if m.FieldCleared(sysdistrict.FieldTreeLeft) {
		fields = append(fields, sysdistrict.FieldTreeLeft)
	}
	if m.FieldCleared(sysdistrict.FieldTreeRight) {
		fields = append(fields, sysdistrict.FieldTreeRight)
	}
	if m.FieldCleared(sysdistrict.FieldIsLeaf) {
		fields = append(fields, sysdistrict.FieldIsLeaf)
	}
	if m.FieldCleared(sysdistrict.FieldTreePath) {
		fields = append(fields, sysdistrict.FieldTreePath)
	}
	if m.FieldCleared(sysdistrict.FieldName) {
		fields = append(fields, sysdistrict.FieldName)
	}
	if m.FieldCleared(sysdistrict.FieldNameEn) {
		fields = append(fields, sysdistrict.FieldNameEn)
	}
	if m.FieldCleared(sysdistrict.FieldSname) {
		fields = append(fields, sysdistrict.FieldSname)
	}
	if m.FieldCleared(sysdistrict.FieldSnameEn) {
		fields = append(fields, sysdistrict.FieldSnameEn)
	}
	if m.FieldCleared(sysdistrict.FieldAbbr) {
		fields = append(fields, sysdistrict.FieldAbbr)
	}
	if m.FieldCleared(sysdistrict.FieldStCode) {
		fields = append(fields, sysdistrict.FieldStCode)
	}
	if m.FieldCleared(sysdistrict.FieldInitials) {
		fields = append(fields, sysdistrict.FieldInitials)
	}
	if m.FieldCleared(sysdistrict.FieldPinyin) {
		fields = append(fields, sysdistrict.FieldPinyin)
	}
	if m.FieldCleared(sysdistrict.FieldParentID) {
		fields = append(fields, sysdistrict.FieldParentID)
	}
	if m.FieldCleared(sysdistrict.FieldLongitude) {
		fields = append(fields, sysdistrict.FieldLongitude)
	}
	if m.FieldCleared(sysdistrict.FieldLatitude) {
		fields = append(fields, sysdistrict.FieldLatitude)
	}
	if m.FieldCleared(sysdistrict.FieldAreaCode) {
		fields = append(fields, sysdistrict.FieldAreaCode)
	}
	if m.FieldCleared(sysdistrict.FieldZipCode) {
		fields = append(fields, sysdistrict.FieldZipCode)
	}
	if m.FieldCleared(sysdistrict.FieldMergeName) {
		fields = append(fields, sysdistrict.FieldMergeName)
	}
	if m.FieldCleared(sysdistrict.FieldMergeSname) {
		fields = append(fields, sysdistrict.FieldMergeSname)
	}
	if m.FieldCleared(sysdistrict.FieldExtra) {
		fields = append(fields, sysdistrict.FieldExtra)
	}
	if m.FieldCleared(sysdistrict.FieldSuffix) {
		fields = append(fields, sysdistrict.FieldSuffix)
	}
	if m.FieldCleared(sysdistrict.FieldIsHot) {
		fields = append(fields, sysdistrict.FieldIsHot)
	}
	if m.FieldCleared(sysdistrict.FieldIsReal) {
		fields = append(fields, sysdistrict.FieldIsReal)
	}
	if m.FieldCleared(sysdistrict.FieldIsMain) {
		fields = append(fields, sysdistrict.FieldIsMain)
	}
	if m.FieldCleared(sysdistrict.FieldIsDirect) {
		fields = append(fields, sysdistrict.FieldIsDirect)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysDistrictMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysDistrictMutation) ClearField(name string) error {
	switch name {
	case sysdistrict.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysdistrict.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysdistrict.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysdistrict.FieldTreeID:
		m.ClearTreeID()
		return nil
	case sysdistrict.FieldTreeLevel:
		m.ClearTreeLevel()
		return nil
	case sysdistrict.FieldTreeLeft:
		m.ClearTreeLeft()
		return nil
	case sysdistrict.FieldTreeRight:
		m.ClearTreeRight()
		return nil
	case sysdistrict.FieldIsLeaf:
		m.ClearIsLeaf()
		return nil
	case sysdistrict.FieldTreePath:
		m.ClearTreePath()
		return nil
	case sysdistrict.FieldName:
		m.ClearName()
		return nil
	case sysdistrict.FieldNameEn:
		m.ClearNameEn()
		return nil
	case sysdistrict.FieldSname:
		m.ClearSname()
		return nil
	case sysdistrict.FieldSnameEn:
		m.ClearSnameEn()
		return nil
	case sysdistrict.FieldAbbr:
		m.ClearAbbr()
		return nil
	case sysdistrict.FieldStCode:
		m.ClearStCode()
		return nil
	case sysdistrict.FieldInitials:
		m.ClearInitials()
		return nil
	case sysdistrict.FieldPinyin:
		m.ClearPinyin()
		return nil
	case sysdistrict.FieldParentID:
		m.ClearParentID()
		return nil
	case sysdistrict.FieldLongitude:
		m.ClearLongitude()
		return nil
	case sysdistrict.FieldLatitude:
		m.ClearLatitude()
		return nil
	case sysdistrict.FieldAreaCode:
		m.ClearAreaCode()
		return nil
	case sysdistrict.FieldZipCode:
		m.ClearZipCode()
		return nil
	case sysdistrict.FieldMergeName:
		m.ClearMergeName()
		return nil
	case sysdistrict.FieldMergeSname:
		m.ClearMergeSname()
		return nil
	case sysdistrict.FieldExtra:
		m.ClearExtra()
		return nil
	case sysdistrict.FieldSuffix:
		m.ClearSuffix()
		return nil
	case sysdistrict.FieldIsHot:
		m.ClearIsHot()
		return nil
	case sysdistrict.FieldIsReal:
		m.ClearIsReal()
		return nil
	case sysdistrict.FieldIsMain:
		m.ClearIsMain()
		return nil
	case sysdistrict.FieldIsDirect:
		m.ClearIsDirect()
		return nil
	}
	return fmt.Errorf("unknown SysDistrict nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysDistrictMutation) ResetField(name string) error {
	switch name {
	case sysdistrict.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysdistrict.FieldSort:
		m.ResetSort()
		return nil
	case sysdistrict.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysdistrict.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysdistrict.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysdistrict.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysdistrict.FieldTreeID:
		m.ResetTreeID()
		return nil
	case sysdistrict.FieldTreeLevel:
		m.ResetTreeLevel()
		return nil
	case sysdistrict.FieldTreeLeft:
		m.ResetTreeLeft()
		return nil
	case sysdistrict.FieldTreeRight:
		m.ResetTreeRight()
		return nil
	case sysdistrict.FieldIsLeaf:
		m.ResetIsLeaf()
		return nil
	case sysdistrict.FieldTreePath:
		m.ResetTreePath()
		return nil
	case sysdistrict.FieldName:
		m.ResetName()
		return nil
	case sysdistrict.FieldNameEn:
		m.ResetNameEn()
		return nil
	case sysdistrict.FieldSname:
		m.ResetSname()
		return nil
	case sysdistrict.FieldSnameEn:
		m.ResetSnameEn()
		return nil
	case sysdistrict.FieldAbbr:
		m.ResetAbbr()
		return nil
	case sysdistrict.FieldStCode:
		m.ResetStCode()
		return nil
	case sysdistrict.FieldInitials:
		m.ResetInitials()
		return nil
	case sysdistrict.FieldPinyin:
		m.ResetPinyin()
		return nil
	case sysdistrict.FieldParentID:
		m.ResetParentID()
		return nil
	case sysdistrict.FieldLongitude:
		m.ResetLongitude()
		return nil
	case sysdistrict.FieldLatitude:
		m.ResetLatitude()
		return nil
	case sysdistrict.FieldAreaCode:
		m.ResetAreaCode()
		return nil
	case sysdistrict.FieldZipCode:
		m.ResetZipCode()
		return nil
	case sysdistrict.FieldMergeName:
		m.ResetMergeName()
		return nil
	case sysdistrict.FieldMergeSname:
		m.ResetMergeSname()
		return nil
	case sysdistrict.FieldExtra:
		m.ResetExtra()
		return nil
	case sysdistrict.FieldSuffix:
		m.ResetSuffix()
		return nil
	case sysdistrict.FieldIsHot:
		m.ResetIsHot()
		return nil
	case sysdistrict.FieldIsReal:
		m.ResetIsReal()
		return nil
	case sysdistrict.FieldIsMain:
		m.ResetIsMain()
		return nil
	case sysdistrict.FieldIsDirect:
		m.ResetIsDirect()
		return nil
	case sysdistrict.FieldCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown SysDistrict field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysDistrictMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parent != nil {
		edges = append(edges, sysdistrict.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, sysdistrict.EdgeChildren)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysDistrictMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sysdistrict.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case sysdistrict.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysDistrictMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedchildren != nil {
		edges = append(edges, sysdistrict.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysDistrictMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sysdistrict.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysDistrictMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparent {
		edges = append(edges, sysdistrict.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, sysdistrict.EdgeChildren)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysDistrictMutation) EdgeCleared(name string) bool {
	switch name {
	case sysdistrict.EdgeParent:
		return m.clearedparent
	case sysdistrict.EdgeChildren:
		return m.clearedchildren
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysDistrictMutation) ClearEdge(name string) error {
	switch name {
	case sysdistrict.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown SysDistrict unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysDistrictMutation) ResetEdge(name string) error {
	switch name {
	case sysdistrict.EdgeParent:
		m.ResetParent()
		return nil
	case sysdistrict.EdgeChildren:
		m.ResetChildren()
		return nil
	}
	return fmt.Errorf("unknown SysDistrict edge %s", name)
}

// SysJwtBlockMutation represents an operation that mutates the SysJwtBlock nodes in the graph.
type SysJwtBlockMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	jwt           *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysJwtBlock, error)
	predicates    []predicate.SysJwtBlock
}

var _ ent.Mutation = (*SysJwtBlockMutation)(nil)

// sysjwtblockOption allows management of the mutation configuration using functional options.
type sysjwtblockOption func(*SysJwtBlockMutation)

// newSysJwtBlockMutation creates new mutation for the SysJwtBlock entity.
func newSysJwtBlockMutation(c config, op Op, opts ...sysjwtblockOption) *SysJwtBlockMutation {
	m := &SysJwtBlockMutation{
		config:        c,
		op:            op,
		typ:           TypeSysJwtBlock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysJwtBlockID sets the ID field of the mutation.
func withSysJwtBlockID(id string) sysjwtblockOption {
	return func(m *SysJwtBlockMutation) {
		var (
			err   error
			once  sync.Once
			value *SysJwtBlock
		)
		m.oldValue = func(ctx context.Context) (*SysJwtBlock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysJwtBlock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysJwtBlock sets the old SysJwtBlock of the mutation.
func withSysJwtBlock(node *SysJwtBlock) sysjwtblockOption {
	return func(m *SysJwtBlockMutation) {
		m.oldValue = func(context.Context) (*SysJwtBlock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysJwtBlockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysJwtBlockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysJwtBlock entities.
func (m *SysJwtBlockMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysJwtBlockMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysJwtBlockMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysJwtBlock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysJwtBlockMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysJwtBlockMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysJwtBlockMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysJwtBlockMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysJwtBlockMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysJwtBlockMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysjwtblock.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysJwtBlockMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysjwtblock.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysJwtBlockMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysjwtblock.FieldMemo)
}

// SetCreatedAt sets the "created_at" field.
func (m *SysJwtBlockMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysJwtBlockMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysJwtBlockMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysjwtblock.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysJwtBlockMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysjwtblock.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysJwtBlockMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysjwtblock.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysJwtBlockMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysJwtBlockMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysJwtBlockMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysjwtblock.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysJwtBlockMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysjwtblock.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysJwtBlockMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysjwtblock.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysJwtBlockMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysJwtBlockMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysJwtBlockMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysjwtblock.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysJwtBlockMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysjwtblock.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysJwtBlockMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysjwtblock.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysJwtBlockMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysJwtBlockMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysJwtBlockMutation) ResetIsActive() {
	m.is_active = nil
}

// SetJwt sets the "jwt" field.
func (m *SysJwtBlockMutation) SetJwt(s string) {
	m.jwt = &s
}

// Jwt returns the value of the "jwt" field in the mutation.
func (m *SysJwtBlockMutation) Jwt() (r string, exists bool) {
	v := m.jwt
	if v == nil {
		return
	}
	return *v, true
}

// OldJwt returns the old "jwt" field's value of the SysJwtBlock entity.
// If the SysJwtBlock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysJwtBlockMutation) OldJwt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJwt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJwt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJwt: %w", err)
	}
	return oldValue.Jwt, nil
}

// ResetJwt resets all changes to the "jwt" field.
func (m *SysJwtBlockMutation) ResetJwt() {
	m.jwt = nil
}

// Where appends a list predicates to the SysJwtBlockMutation builder.
func (m *SysJwtBlockMutation) Where(ps ...predicate.SysJwtBlock) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysJwtBlockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysJwtBlockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysJwtBlock, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysJwtBlockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysJwtBlockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysJwtBlock).
func (m *SysJwtBlockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysJwtBlockMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.is_del != nil {
		fields = append(fields, sysjwtblock.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysjwtblock.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysjwtblock.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysjwtblock.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysjwtblock.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysjwtblock.FieldIsActive)
	}
	if m.jwt != nil {
		fields = append(fields, sysjwtblock.FieldJwt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysJwtBlockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysjwtblock.FieldIsDel:
		return m.IsDel()
	case sysjwtblock.FieldMemo:
		return m.Memo()
	case sysjwtblock.FieldCreatedAt:
		return m.CreatedAt()
	case sysjwtblock.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysjwtblock.FieldDeletedAt:
		return m.DeletedAt()
	case sysjwtblock.FieldIsActive:
		return m.IsActive()
	case sysjwtblock.FieldJwt:
		return m.Jwt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysJwtBlockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysjwtblock.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysjwtblock.FieldMemo:
		return m.OldMemo(ctx)
	case sysjwtblock.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysjwtblock.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysjwtblock.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysjwtblock.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysjwtblock.FieldJwt:
		return m.OldJwt(ctx)
	}
	return nil, fmt.Errorf("unknown SysJwtBlock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJwtBlockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysjwtblock.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysjwtblock.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysjwtblock.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysjwtblock.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysjwtblock.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysjwtblock.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysjwtblock.FieldJwt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJwt(v)
		return nil
	}
	return fmt.Errorf("unknown SysJwtBlock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysJwtBlockMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysJwtBlockMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysJwtBlockMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysJwtBlock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysJwtBlockMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysjwtblock.FieldMemo) {
		fields = append(fields, sysjwtblock.FieldMemo)
	}
	if m.FieldCleared(sysjwtblock.FieldCreatedAt) {
		fields = append(fields, sysjwtblock.FieldCreatedAt)
	}
	if m.FieldCleared(sysjwtblock.FieldUpdatedAt) {
		fields = append(fields, sysjwtblock.FieldUpdatedAt)
	}
	if m.FieldCleared(sysjwtblock.FieldDeletedAt) {
		fields = append(fields, sysjwtblock.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysJwtBlockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysJwtBlockMutation) ClearField(name string) error {
	switch name {
	case sysjwtblock.FieldMemo:
		m.ClearMemo()
		return nil
	case sysjwtblock.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysjwtblock.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysjwtblock.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysJwtBlock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysJwtBlockMutation) ResetField(name string) error {
	switch name {
	case sysjwtblock.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysjwtblock.FieldMemo:
		m.ResetMemo()
		return nil
	case sysjwtblock.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysjwtblock.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysjwtblock.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysjwtblock.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysjwtblock.FieldJwt:
		m.ResetJwt()
		return nil
	}
	return fmt.Errorf("unknown SysJwtBlock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysJwtBlockMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysJwtBlockMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysJwtBlockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysJwtBlockMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysJwtBlockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysJwtBlockMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysJwtBlockMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysJwtBlock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysJwtBlockMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysJwtBlock edge %s", name)
}

// SysLoggingMutation represents an operation that mutates the SysLogging nodes in the graph.
type SysLoggingMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_del        *bool
	memo          *string
	level         *string
	trace_id      *string
	user_id       *string
	tag           *string
	version       *string
	message       *string
	data          *string
	error_stack   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysLogging, error)
	predicates    []predicate.SysLogging
}

var _ ent.Mutation = (*SysLoggingMutation)(nil)

// sysloggingOption allows management of the mutation configuration using functional options.
type sysloggingOption func(*SysLoggingMutation)

// newSysLoggingMutation creates new mutation for the SysLogging entity.
func newSysLoggingMutation(c config, op Op, opts ...sysloggingOption) *SysLoggingMutation {
	m := &SysLoggingMutation{
		config:        c,
		op:            op,
		typ:           TypeSysLogging,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysLoggingID sets the ID field of the mutation.
func withSysLoggingID(id string) sysloggingOption {
	return func(m *SysLoggingMutation) {
		var (
			err   error
			once  sync.Once
			value *SysLogging
		)
		m.oldValue = func(ctx context.Context) (*SysLogging, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysLogging.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysLogging sets the old SysLogging of the mutation.
func withSysLogging(node *SysLogging) sysloggingOption {
	return func(m *SysLoggingMutation) {
		m.oldValue = func(context.Context) (*SysLogging, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysLoggingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysLoggingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysLogging entities.
func (m *SysLoggingMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysLoggingMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysLoggingMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysLogging.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SysLoggingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysLoggingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysLoggingMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[syslogging.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysLoggingMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysLoggingMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, syslogging.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysLoggingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysLoggingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysLoggingMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[syslogging.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysLoggingMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysLoggingMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, syslogging.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysLoggingMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysLoggingMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysLoggingMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[syslogging.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysLoggingMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysLoggingMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, syslogging.FieldDeletedAt)
}

// SetIsDel sets the "is_del" field.
func (m *SysLoggingMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysLoggingMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysLoggingMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysLoggingMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysLoggingMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysLoggingMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[syslogging.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysLoggingMutation) MemoCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysLoggingMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, syslogging.FieldMemo)
}

// SetLevel sets the "level" field.
func (m *SysLoggingMutation) SetLevel(s string) {
	m.level = &s
}

// Level returns the value of the "level" field in the mutation.
func (m *SysLoggingMutation) Level() (r string, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldLevel(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ClearLevel clears the value of the "level" field.
func (m *SysLoggingMutation) ClearLevel() {
	m.level = nil
	m.clearedFields[syslogging.FieldLevel] = struct{}{}
}

// LevelCleared returns if the "level" field was cleared in this mutation.
func (m *SysLoggingMutation) LevelCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldLevel]
	return ok
}

// ResetLevel resets all changes to the "level" field.
func (m *SysLoggingMutation) ResetLevel() {
	m.level = nil
	delete(m.clearedFields, syslogging.FieldLevel)
}

// SetTraceID sets the "trace_id" field.
func (m *SysLoggingMutation) SetTraceID(s string) {
	m.trace_id = &s
}

// TraceID returns the value of the "trace_id" field in the mutation.
func (m *SysLoggingMutation) TraceID() (r string, exists bool) {
	v := m.trace_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTraceID returns the old "trace_id" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldTraceID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTraceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTraceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTraceID: %w", err)
	}
	return oldValue.TraceID, nil
}

// ClearTraceID clears the value of the "trace_id" field.
func (m *SysLoggingMutation) ClearTraceID() {
	m.trace_id = nil
	m.clearedFields[syslogging.FieldTraceID] = struct{}{}
}

// TraceIDCleared returns if the "trace_id" field was cleared in this mutation.
func (m *SysLoggingMutation) TraceIDCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldTraceID]
	return ok
}

// ResetTraceID resets all changes to the "trace_id" field.
func (m *SysLoggingMutation) ResetTraceID() {
	m.trace_id = nil
	delete(m.clearedFields, syslogging.FieldTraceID)
}

// SetUserID sets the "user_id" field.
func (m *SysLoggingMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SysLoggingMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldUserID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *SysLoggingMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[syslogging.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *SysLoggingMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SysLoggingMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, syslogging.FieldUserID)
}

// SetTag sets the "tag" field.
func (m *SysLoggingMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *SysLoggingMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldTag(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ClearTag clears the value of the "tag" field.
func (m *SysLoggingMutation) ClearTag() {
	m.tag = nil
	m.clearedFields[syslogging.FieldTag] = struct{}{}
}

// TagCleared returns if the "tag" field was cleared in this mutation.
func (m *SysLoggingMutation) TagCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldTag]
	return ok
}

// ResetTag resets all changes to the "tag" field.
func (m *SysLoggingMutation) ResetTag() {
	m.tag = nil
	delete(m.clearedFields, syslogging.FieldTag)
}

// SetVersion sets the "version" field.
func (m *SysLoggingMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *SysLoggingMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldVersion(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ClearVersion clears the value of the "version" field.
func (m *SysLoggingMutation) ClearVersion() {
	m.version = nil
	m.clearedFields[syslogging.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *SysLoggingMutation) VersionCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *SysLoggingMutation) ResetVersion() {
	m.version = nil
	delete(m.clearedFields, syslogging.FieldVersion)
}

// SetMessage sets the "message" field.
func (m *SysLoggingMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *SysLoggingMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldMessage(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *SysLoggingMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[syslogging.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *SysLoggingMutation) MessageCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *SysLoggingMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, syslogging.FieldMessage)
}

// SetData sets the "data" field.
func (m *SysLoggingMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *SysLoggingMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldData(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ClearData clears the value of the "data" field.
func (m *SysLoggingMutation) ClearData() {
	m.data = nil
	m.clearedFields[syslogging.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *SysLoggingMutation) DataCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *SysLoggingMutation) ResetData() {
	m.data = nil
	delete(m.clearedFields, syslogging.FieldData)
}

// SetErrorStack sets the "error_stack" field.
func (m *SysLoggingMutation) SetErrorStack(s string) {
	m.error_stack = &s
}

// ErrorStack returns the value of the "error_stack" field in the mutation.
func (m *SysLoggingMutation) ErrorStack() (r string, exists bool) {
	v := m.error_stack
	if v == nil {
		return
	}
	return *v, true
}

// OldErrorStack returns the old "error_stack" field's value of the SysLogging entity.
// If the SysLogging object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysLoggingMutation) OldErrorStack(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldErrorStack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldErrorStack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldErrorStack: %w", err)
	}
	return oldValue.ErrorStack, nil
}

// ClearErrorStack clears the value of the "error_stack" field.
func (m *SysLoggingMutation) ClearErrorStack() {
	m.error_stack = nil
	m.clearedFields[syslogging.FieldErrorStack] = struct{}{}
}

// ErrorStackCleared returns if the "error_stack" field was cleared in this mutation.
func (m *SysLoggingMutation) ErrorStackCleared() bool {
	_, ok := m.clearedFields[syslogging.FieldErrorStack]
	return ok
}

// ResetErrorStack resets all changes to the "error_stack" field.
func (m *SysLoggingMutation) ResetErrorStack() {
	m.error_stack = nil
	delete(m.clearedFields, syslogging.FieldErrorStack)
}

// Where appends a list predicates to the SysLoggingMutation builder.
func (m *SysLoggingMutation) Where(ps ...predicate.SysLogging) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysLoggingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysLoggingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysLogging, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysLoggingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysLoggingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysLogging).
func (m *SysLoggingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysLoggingMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, syslogging.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, syslogging.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, syslogging.FieldDeletedAt)
	}
	if m.is_del != nil {
		fields = append(fields, syslogging.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, syslogging.FieldMemo)
	}
	if m.level != nil {
		fields = append(fields, syslogging.FieldLevel)
	}
	if m.trace_id != nil {
		fields = append(fields, syslogging.FieldTraceID)
	}
	if m.user_id != nil {
		fields = append(fields, syslogging.FieldUserID)
	}
	if m.tag != nil {
		fields = append(fields, syslogging.FieldTag)
	}
	if m.version != nil {
		fields = append(fields, syslogging.FieldVersion)
	}
	if m.message != nil {
		fields = append(fields, syslogging.FieldMessage)
	}
	if m.data != nil {
		fields = append(fields, syslogging.FieldData)
	}
	if m.error_stack != nil {
		fields = append(fields, syslogging.FieldErrorStack)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysLoggingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case syslogging.FieldCreatedAt:
		return m.CreatedAt()
	case syslogging.FieldUpdatedAt:
		return m.UpdatedAt()
	case syslogging.FieldDeletedAt:
		return m.DeletedAt()
	case syslogging.FieldIsDel:
		return m.IsDel()
	case syslogging.FieldMemo:
		return m.Memo()
	case syslogging.FieldLevel:
		return m.Level()
	case syslogging.FieldTraceID:
		return m.TraceID()
	case syslogging.FieldUserID:
		return m.UserID()
	case syslogging.FieldTag:
		return m.Tag()
	case syslogging.FieldVersion:
		return m.Version()
	case syslogging.FieldMessage:
		return m.Message()
	case syslogging.FieldData:
		return m.Data()
	case syslogging.FieldErrorStack:
		return m.ErrorStack()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysLoggingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case syslogging.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case syslogging.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case syslogging.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case syslogging.FieldIsDel:
		return m.OldIsDel(ctx)
	case syslogging.FieldMemo:
		return m.OldMemo(ctx)
	case syslogging.FieldLevel:
		return m.OldLevel(ctx)
	case syslogging.FieldTraceID:
		return m.OldTraceID(ctx)
	case syslogging.FieldUserID:
		return m.OldUserID(ctx)
	case syslogging.FieldTag:
		return m.OldTag(ctx)
	case syslogging.FieldVersion:
		return m.OldVersion(ctx)
	case syslogging.FieldMessage:
		return m.OldMessage(ctx)
	case syslogging.FieldData:
		return m.OldData(ctx)
	case syslogging.FieldErrorStack:
		return m.OldErrorStack(ctx)
	}
	return nil, fmt.Errorf("unknown SysLogging field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLoggingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case syslogging.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case syslogging.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case syslogging.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case syslogging.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case syslogging.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case syslogging.FieldLevel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case syslogging.FieldTraceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTraceID(v)
		return nil
	case syslogging.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case syslogging.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case syslogging.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case syslogging.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case syslogging.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case syslogging.FieldErrorStack:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetErrorStack(v)
		return nil
	}
	return fmt.Errorf("unknown SysLogging field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysLoggingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysLoggingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysLoggingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysLogging numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysLoggingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(syslogging.FieldCreatedAt) {
		fields = append(fields, syslogging.FieldCreatedAt)
	}
	if m.FieldCleared(syslogging.FieldUpdatedAt) {
		fields = append(fields, syslogging.FieldUpdatedAt)
	}
	if m.FieldCleared(syslogging.FieldDeletedAt) {
		fields = append(fields, syslogging.FieldDeletedAt)
	}
	if m.FieldCleared(syslogging.FieldMemo) {
		fields = append(fields, syslogging.FieldMemo)
	}
	if m.FieldCleared(syslogging.FieldLevel) {
		fields = append(fields, syslogging.FieldLevel)
	}
	if m.FieldCleared(syslogging.FieldTraceID) {
		fields = append(fields, syslogging.FieldTraceID)
	}
	if m.FieldCleared(syslogging.FieldUserID) {
		fields = append(fields, syslogging.FieldUserID)
	}
	if m.FieldCleared(syslogging.FieldTag) {
		fields = append(fields, syslogging.FieldTag)
	}
	if m.FieldCleared(syslogging.FieldVersion) {
		fields = append(fields, syslogging.FieldVersion)
	}
	if m.FieldCleared(syslogging.FieldMessage) {
		fields = append(fields, syslogging.FieldMessage)
	}
	if m.FieldCleared(syslogging.FieldData) {
		fields = append(fields, syslogging.FieldData)
	}
	if m.FieldCleared(syslogging.FieldErrorStack) {
		fields = append(fields, syslogging.FieldErrorStack)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysLoggingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysLoggingMutation) ClearField(name string) error {
	switch name {
	case syslogging.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case syslogging.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case syslogging.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case syslogging.FieldMemo:
		m.ClearMemo()
		return nil
	case syslogging.FieldLevel:
		m.ClearLevel()
		return nil
	case syslogging.FieldTraceID:
		m.ClearTraceID()
		return nil
	case syslogging.FieldUserID:
		m.ClearUserID()
		return nil
	case syslogging.FieldTag:
		m.ClearTag()
		return nil
	case syslogging.FieldVersion:
		m.ClearVersion()
		return nil
	case syslogging.FieldMessage:
		m.ClearMessage()
		return nil
	case syslogging.FieldData:
		m.ClearData()
		return nil
	case syslogging.FieldErrorStack:
		m.ClearErrorStack()
		return nil
	}
	return fmt.Errorf("unknown SysLogging nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysLoggingMutation) ResetField(name string) error {
	switch name {
	case syslogging.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case syslogging.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case syslogging.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case syslogging.FieldIsDel:
		m.ResetIsDel()
		return nil
	case syslogging.FieldMemo:
		m.ResetMemo()
		return nil
	case syslogging.FieldLevel:
		m.ResetLevel()
		return nil
	case syslogging.FieldTraceID:
		m.ResetTraceID()
		return nil
	case syslogging.FieldUserID:
		m.ResetUserID()
		return nil
	case syslogging.FieldTag:
		m.ResetTag()
		return nil
	case syslogging.FieldVersion:
		m.ResetVersion()
		return nil
	case syslogging.FieldMessage:
		m.ResetMessage()
		return nil
	case syslogging.FieldData:
		m.ResetData()
		return nil
	case syslogging.FieldErrorStack:
		m.ResetErrorStack()
		return nil
	}
	return fmt.Errorf("unknown SysLogging field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysLoggingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysLoggingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysLoggingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysLoggingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysLoggingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysLoggingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysLoggingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysLogging unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysLoggingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysLogging edge %s", name)
}

// SysMenuMutation represents an operation that mutates the SysMenu nodes in the graph.
type SysMenuMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	name          *string
	icon          *string
	router        *string
	is_show       *bool
	parent_id     *string
	parent_path   *string
	level         *int32
	addlevel      *int32
	is_leaf       *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysMenu, error)
	predicates    []predicate.SysMenu
}

var _ ent.Mutation = (*SysMenuMutation)(nil)

// sysmenuOption allows management of the mutation configuration using functional options.
type sysmenuOption func(*SysMenuMutation)

// newSysMenuMutation creates new mutation for the SysMenu entity.
func newSysMenuMutation(c config, op Op, opts ...sysmenuOption) *SysMenuMutation {
	m := &SysMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuID sets the ID field of the mutation.
func withSysMenuID(id string) sysmenuOption {
	return func(m *SysMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenu
		)
		m.oldValue = func(ctx context.Context) (*SysMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenu sets the old SysMenu of the mutation.
func withSysMenu(node *SysMenu) sysmenuOption {
	return func(m *SysMenuMutation) {
		m.oldValue = func(context.Context) (*SysMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenu entities.
func (m *SysMenuMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysMenuMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysMenuMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysMenuMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *SysMenuMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysMenuMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysMenuMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysmenu.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysMenuMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysMenuMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysmenu.FieldMemo)
}

// SetSort sets the "sort" field.
func (m *SysMenuMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysMenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysMenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysMenuMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysmenu.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysMenuMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysMenuMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysmenu.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysMenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysMenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysMenuMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysmenu.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysMenuMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysMenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysmenu.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysMenuMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysMenuMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysMenuMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysmenu.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysMenuMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysMenuMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysmenu.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysMenuMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysMenuMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysMenuMutation) ResetIsActive() {
	m.is_active = nil
}

// SetName sets the "name" field.
func (m *SysMenuMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysMenuMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysMenuMutation) ResetName() {
	m.name = nil
}

// SetIcon sets the "icon" field.
func (m *SysMenuMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *SysMenuMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *SysMenuMutation) ResetIcon() {
	m.icon = nil
}

// SetRouter sets the "router" field.
func (m *SysMenuMutation) SetRouter(s string) {
	m.router = &s
}

// Router returns the value of the "router" field in the mutation.
func (m *SysMenuMutation) Router() (r string, exists bool) {
	v := m.router
	if v == nil {
		return
	}
	return *v, true
}

// OldRouter returns the old "router" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldRouter(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRouter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRouter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRouter: %w", err)
	}
	return oldValue.Router, nil
}

// ResetRouter resets all changes to the "router" field.
func (m *SysMenuMutation) ResetRouter() {
	m.router = nil
}

// SetIsShow sets the "is_show" field.
func (m *SysMenuMutation) SetIsShow(b bool) {
	m.is_show = &b
}

// IsShow returns the value of the "is_show" field in the mutation.
func (m *SysMenuMutation) IsShow() (r bool, exists bool) {
	v := m.is_show
	if v == nil {
		return
	}
	return *v, true
}

// OldIsShow returns the old "is_show" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsShow(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsShow is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsShow requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsShow: %w", err)
	}
	return oldValue.IsShow, nil
}

// ResetIsShow resets all changes to the "is_show" field.
func (m *SysMenuMutation) ResetIsShow() {
	m.is_show = nil
}

// SetParentID sets the "parent_id" field.
func (m *SysMenuMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *SysMenuMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldParentID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *SysMenuMutation) ClearParentID() {
	m.parent_id = nil
	m.clearedFields[sysmenu.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *SysMenuMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *SysMenuMutation) ResetParentID() {
	m.parent_id = nil
	delete(m.clearedFields, sysmenu.FieldParentID)
}

// SetParentPath sets the "parent_path" field.
func (m *SysMenuMutation) SetParentPath(s string) {
	m.parent_path = &s
}

// ParentPath returns the value of the "parent_path" field in the mutation.
func (m *SysMenuMutation) ParentPath() (r string, exists bool) {
	v := m.parent_path
	if v == nil {
		return
	}
	return *v, true
}

// OldParentPath returns the old "parent_path" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldParentPath(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentPath: %w", err)
	}
	return oldValue.ParentPath, nil
}

// ClearParentPath clears the value of the "parent_path" field.
func (m *SysMenuMutation) ClearParentPath() {
	m.parent_path = nil
	m.clearedFields[sysmenu.FieldParentPath] = struct{}{}
}

// ParentPathCleared returns if the "parent_path" field was cleared in this mutation.
func (m *SysMenuMutation) ParentPathCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldParentPath]
	return ok
}

// ResetParentPath resets all changes to the "parent_path" field.
func (m *SysMenuMutation) ResetParentPath() {
	m.parent_path = nil
	delete(m.clearedFields, sysmenu.FieldParentPath)
}

// SetLevel sets the "level" field.
func (m *SysMenuMutation) SetLevel(i int32) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *SysMenuMutation) Level() (r int32, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldLevel(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *SysMenuMutation) AddLevel(i int32) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *SysMenuMutation) AddedLevel() (r int32, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *SysMenuMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetIsLeaf sets the "is_leaf" field.
func (m *SysMenuMutation) SetIsLeaf(b bool) {
	m.is_leaf = &b
}

// IsLeaf returns the value of the "is_leaf" field in the mutation.
func (m *SysMenuMutation) IsLeaf() (r bool, exists bool) {
	v := m.is_leaf
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeaf returns the old "is_leaf" field's value of the SysMenu entity.
// If the SysMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuMutation) OldIsLeaf(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLeaf is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLeaf requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeaf: %w", err)
	}
	return oldValue.IsLeaf, nil
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (m *SysMenuMutation) ClearIsLeaf() {
	m.is_leaf = nil
	m.clearedFields[sysmenu.FieldIsLeaf] = struct{}{}
}

// IsLeafCleared returns if the "is_leaf" field was cleared in this mutation.
func (m *SysMenuMutation) IsLeafCleared() bool {
	_, ok := m.clearedFields[sysmenu.FieldIsLeaf]
	return ok
}

// ResetIsLeaf resets all changes to the "is_leaf" field.
func (m *SysMenuMutation) ResetIsLeaf() {
	m.is_leaf = nil
	delete(m.clearedFields, sysmenu.FieldIsLeaf)
}

// Where appends a list predicates to the SysMenuMutation builder.
func (m *SysMenuMutation) Where(ps ...predicate.SysMenu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysMenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysMenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysMenu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysMenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysMenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysMenu).
func (m *SysMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.is_del != nil {
		fields = append(fields, sysmenu.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, sysmenu.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysmenu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysmenu.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysmenu.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysmenu.FieldIsActive)
	}
	if m.name != nil {
		fields = append(fields, sysmenu.FieldName)
	}
	if m.icon != nil {
		fields = append(fields, sysmenu.FieldIcon)
	}
	if m.router != nil {
		fields = append(fields, sysmenu.FieldRouter)
	}
	if m.is_show != nil {
		fields = append(fields, sysmenu.FieldIsShow)
	}
	if m.parent_id != nil {
		fields = append(fields, sysmenu.FieldParentID)
	}
	if m.parent_path != nil {
		fields = append(fields, sysmenu.FieldParentPath)
	}
	if m.level != nil {
		fields = append(fields, sysmenu.FieldLevel)
	}
	if m.is_leaf != nil {
		fields = append(fields, sysmenu.FieldIsLeaf)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldIsDel:
		return m.IsDel()
	case sysmenu.FieldMemo:
		return m.Memo()
	case sysmenu.FieldSort:
		return m.Sort()
	case sysmenu.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenu.FieldDeletedAt:
		return m.DeletedAt()
	case sysmenu.FieldIsActive:
		return m.IsActive()
	case sysmenu.FieldName:
		return m.Name()
	case sysmenu.FieldIcon:
		return m.Icon()
	case sysmenu.FieldRouter:
		return m.Router()
	case sysmenu.FieldIsShow:
		return m.IsShow()
	case sysmenu.FieldParentID:
		return m.ParentID()
	case sysmenu.FieldParentPath:
		return m.ParentPath()
	case sysmenu.FieldLevel:
		return m.Level()
	case sysmenu.FieldIsLeaf:
		return m.IsLeaf()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenu.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysmenu.FieldMemo:
		return m.OldMemo(ctx)
	case sysmenu.FieldSort:
		return m.OldSort(ctx)
	case sysmenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenu.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysmenu.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysmenu.FieldName:
		return m.OldName(ctx)
	case sysmenu.FieldIcon:
		return m.OldIcon(ctx)
	case sysmenu.FieldRouter:
		return m.OldRouter(ctx)
	case sysmenu.FieldIsShow:
		return m.OldIsShow(ctx)
	case sysmenu.FieldParentID:
		return m.OldParentID(ctx)
	case sysmenu.FieldParentPath:
		return m.OldParentPath(ctx)
	case sysmenu.FieldLevel:
		return m.OldLevel(ctx)
	case sysmenu.FieldIsLeaf:
		return m.OldIsLeaf(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysmenu.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenu.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysmenu.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysmenu.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case sysmenu.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case sysmenu.FieldRouter:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRouter(v)
		return nil
	case sysmenu.FieldIsShow:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsShow(v)
		return nil
	case sysmenu.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case sysmenu.FieldParentPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentPath(v)
		return nil
	case sysmenu.FieldLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case sysmenu.FieldIsLeaf:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeaf(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysmenu.FieldSort)
	}
	if m.addlevel != nil {
		fields = append(fields, sysmenu.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenu.FieldSort:
		return m.AddedSort()
	case sysmenu.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenu.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	case sysmenu.FieldLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenu.FieldMemo) {
		fields = append(fields, sysmenu.FieldMemo)
	}
	if m.FieldCleared(sysmenu.FieldCreatedAt) {
		fields = append(fields, sysmenu.FieldCreatedAt)
	}
	if m.FieldCleared(sysmenu.FieldUpdatedAt) {
		fields = append(fields, sysmenu.FieldUpdatedAt)
	}
	if m.FieldCleared(sysmenu.FieldDeletedAt) {
		fields = append(fields, sysmenu.FieldDeletedAt)
	}
	if m.FieldCleared(sysmenu.FieldParentID) {
		fields = append(fields, sysmenu.FieldParentID)
	}
	if m.FieldCleared(sysmenu.FieldParentPath) {
		fields = append(fields, sysmenu.FieldParentPath)
	}
	if m.FieldCleared(sysmenu.FieldIsLeaf) {
		fields = append(fields, sysmenu.FieldIsLeaf)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuMutation) ClearField(name string) error {
	switch name {
	case sysmenu.FieldMemo:
		m.ClearMemo()
		return nil
	case sysmenu.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysmenu.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysmenu.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysmenu.FieldParentID:
		m.ClearParentID()
		return nil
	case sysmenu.FieldParentPath:
		m.ClearParentPath()
		return nil
	case sysmenu.FieldIsLeaf:
		m.ClearIsLeaf()
		return nil
	}
	return fmt.Errorf("unknown SysMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuMutation) ResetField(name string) error {
	switch name {
	case sysmenu.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysmenu.FieldMemo:
		m.ResetMemo()
		return nil
	case sysmenu.FieldSort:
		m.ResetSort()
		return nil
	case sysmenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenu.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysmenu.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysmenu.FieldName:
		m.ResetName()
		return nil
	case sysmenu.FieldIcon:
		m.ResetIcon()
		return nil
	case sysmenu.FieldRouter:
		m.ResetRouter()
		return nil
	case sysmenu.FieldIsShow:
		m.ResetIsShow()
		return nil
	case sysmenu.FieldParentID:
		m.ResetParentID()
		return nil
	case sysmenu.FieldParentPath:
		m.ResetParentPath()
		return nil
	case sysmenu.FieldLevel:
		m.ResetLevel()
		return nil
	case sysmenu.FieldIsLeaf:
		m.ResetIsLeaf()
		return nil
	}
	return fmt.Errorf("unknown SysMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenu edge %s", name)
}

// SysMenuActionMutation represents an operation that mutates the SysMenuAction nodes in the graph.
type SysMenuActionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	sort          *int32
	addsort       *int32
	is_active     *bool
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	menu_id       *string
	code          *string
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysMenuAction, error)
	predicates    []predicate.SysMenuAction
}

var _ ent.Mutation = (*SysMenuActionMutation)(nil)

// sysmenuactionOption allows management of the mutation configuration using functional options.
type sysmenuactionOption func(*SysMenuActionMutation)

// newSysMenuActionMutation creates new mutation for the SysMenuAction entity.
func newSysMenuActionMutation(c config, op Op, opts ...sysmenuactionOption) *SysMenuActionMutation {
	m := &SysMenuActionMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenuAction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuActionID sets the ID field of the mutation.
func withSysMenuActionID(id string) sysmenuactionOption {
	return func(m *SysMenuActionMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenuAction
		)
		m.oldValue = func(ctx context.Context) (*SysMenuAction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenuAction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenuAction sets the old SysMenuAction of the mutation.
func withSysMenuAction(node *SysMenuAction) sysmenuactionOption {
	return func(m *SysMenuActionMutation) {
		m.oldValue = func(context.Context) (*SysMenuAction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuActionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuActionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenuAction entities.
func (m *SysMenuActionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuActionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuActionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenuAction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysMenuActionMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysMenuActionMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysMenuActionMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *SysMenuActionMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuActionMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuActionMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuActionMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuActionMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetIsActive sets the "is_active" field.
func (m *SysMenuActionMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysMenuActionMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysMenuActionMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMemo sets the "memo" field.
func (m *SysMenuActionMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysMenuActionMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysMenuActionMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysmenuaction.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysMenuActionMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysmenuaction.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysMenuActionMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysmenuaction.FieldMemo)
}

// SetCreatedAt sets the "created_at" field.
func (m *SysMenuActionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysMenuActionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysMenuActionMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysmenuaction.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysMenuActionMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuaction.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysMenuActionMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysmenuaction.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysMenuActionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysMenuActionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysMenuActionMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysmenuaction.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysMenuActionMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuaction.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysMenuActionMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysmenuaction.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysMenuActionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysMenuActionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysMenuActionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysmenuaction.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysMenuActionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuaction.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysMenuActionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysmenuaction.FieldDeletedAt)
}

// SetMenuID sets the "menu_id" field.
func (m *SysMenuActionMutation) SetMenuID(s string) {
	m.menu_id = &s
}

// MenuID returns the value of the "menu_id" field in the mutation.
func (m *SysMenuActionMutation) MenuID() (r string, exists bool) {
	v := m.menu_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuID returns the old "menu_id" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldMenuID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuID: %w", err)
	}
	return oldValue.MenuID, nil
}

// ResetMenuID resets all changes to the "menu_id" field.
func (m *SysMenuActionMutation) ResetMenuID() {
	m.menu_id = nil
}

// SetCode sets the "code" field.
func (m *SysMenuActionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *SysMenuActionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *SysMenuActionMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *SysMenuActionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysMenuActionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysMenuAction entity.
// If the SysMenuAction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysMenuActionMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the SysMenuActionMutation builder.
func (m *SysMenuActionMutation) Where(ps ...predicate.SysMenuAction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysMenuActionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysMenuActionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysMenuAction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysMenuActionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysMenuActionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysMenuAction).
func (m *SysMenuActionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuActionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.is_del != nil {
		fields = append(fields, sysmenuaction.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, sysmenuaction.FieldSort)
	}
	if m.is_active != nil {
		fields = append(fields, sysmenuaction.FieldIsActive)
	}
	if m.memo != nil {
		fields = append(fields, sysmenuaction.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysmenuaction.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysmenuaction.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysmenuaction.FieldDeletedAt)
	}
	if m.menu_id != nil {
		fields = append(fields, sysmenuaction.FieldMenuID)
	}
	if m.code != nil {
		fields = append(fields, sysmenuaction.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, sysmenuaction.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuActionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenuaction.FieldIsDel:
		return m.IsDel()
	case sysmenuaction.FieldSort:
		return m.Sort()
	case sysmenuaction.FieldIsActive:
		return m.IsActive()
	case sysmenuaction.FieldMemo:
		return m.Memo()
	case sysmenuaction.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenuaction.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenuaction.FieldDeletedAt:
		return m.DeletedAt()
	case sysmenuaction.FieldMenuID:
		return m.MenuID()
	case sysmenuaction.FieldCode:
		return m.Code()
	case sysmenuaction.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuActionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenuaction.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysmenuaction.FieldSort:
		return m.OldSort(ctx)
	case sysmenuaction.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysmenuaction.FieldMemo:
		return m.OldMemo(ctx)
	case sysmenuaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenuaction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenuaction.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysmenuaction.FieldMenuID:
		return m.OldMenuID(ctx)
	case sysmenuaction.FieldCode:
		return m.OldCode(ctx)
	case sysmenuaction.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenuAction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenuaction.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysmenuaction.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenuaction.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysmenuaction.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysmenuaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenuaction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenuaction.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysmenuaction.FieldMenuID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuID(v)
		return nil
	case sysmenuaction.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case sysmenuaction.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuActionMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysmenuaction.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuActionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenuaction.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenuaction.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuActionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenuaction.FieldMemo) {
		fields = append(fields, sysmenuaction.FieldMemo)
	}
	if m.FieldCleared(sysmenuaction.FieldCreatedAt) {
		fields = append(fields, sysmenuaction.FieldCreatedAt)
	}
	if m.FieldCleared(sysmenuaction.FieldUpdatedAt) {
		fields = append(fields, sysmenuaction.FieldUpdatedAt)
	}
	if m.FieldCleared(sysmenuaction.FieldDeletedAt) {
		fields = append(fields, sysmenuaction.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuActionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuActionMutation) ClearField(name string) error {
	switch name {
	case sysmenuaction.FieldMemo:
		m.ClearMemo()
		return nil
	case sysmenuaction.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysmenuaction.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysmenuaction.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuActionMutation) ResetField(name string) error {
	switch name {
	case sysmenuaction.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysmenuaction.FieldSort:
		m.ResetSort()
		return nil
	case sysmenuaction.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysmenuaction.FieldMemo:
		m.ResetMemo()
		return nil
	case sysmenuaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenuaction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenuaction.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysmenuaction.FieldMenuID:
		m.ResetMenuID()
		return nil
	case sysmenuaction.FieldCode:
		m.ResetCode()
		return nil
	case sysmenuaction.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown SysMenuAction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuActionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuActionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuActionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuActionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuActionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuActionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuActionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenuAction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuActionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenuAction edge %s", name)
}

// SysMenuActionResourceMutation represents an operation that mutates the SysMenuActionResource nodes in the graph.
type SysMenuActionResourceMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	sort          *int32
	addsort       *int32
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	method        *string
	_path         *string
	action_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysMenuActionResource, error)
	predicates    []predicate.SysMenuActionResource
}

var _ ent.Mutation = (*SysMenuActionResourceMutation)(nil)

// sysmenuactionresourceOption allows management of the mutation configuration using functional options.
type sysmenuactionresourceOption func(*SysMenuActionResourceMutation)

// newSysMenuActionResourceMutation creates new mutation for the SysMenuActionResource entity.
func newSysMenuActionResourceMutation(c config, op Op, opts ...sysmenuactionresourceOption) *SysMenuActionResourceMutation {
	m := &SysMenuActionResourceMutation{
		config:        c,
		op:            op,
		typ:           TypeSysMenuActionResource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysMenuActionResourceID sets the ID field of the mutation.
func withSysMenuActionResourceID(id string) sysmenuactionresourceOption {
	return func(m *SysMenuActionResourceMutation) {
		var (
			err   error
			once  sync.Once
			value *SysMenuActionResource
		)
		m.oldValue = func(ctx context.Context) (*SysMenuActionResource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysMenuActionResource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysMenuActionResource sets the old SysMenuActionResource of the mutation.
func withSysMenuActionResource(node *SysMenuActionResource) sysmenuactionresourceOption {
	return func(m *SysMenuActionResourceMutation) {
		m.oldValue = func(context.Context) (*SysMenuActionResource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysMenuActionResourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysMenuActionResourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysMenuActionResource entities.
func (m *SysMenuActionResourceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysMenuActionResourceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysMenuActionResourceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysMenuActionResource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysMenuActionResourceMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysMenuActionResourceMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysMenuActionResourceMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *SysMenuActionResourceMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysMenuActionResourceMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysMenuActionResourceMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysMenuActionResourceMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysMenuActionResourceMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetMemo sets the "memo" field.
func (m *SysMenuActionResourceMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysMenuActionResourceMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysMenuActionResourceMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysmenuactionresource.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysMenuActionResourceMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysmenuactionresource.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysMenuActionResourceMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysmenuactionresource.FieldMemo)
}

// SetCreatedAt sets the "created_at" field.
func (m *SysMenuActionResourceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysMenuActionResourceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysMenuActionResourceMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysmenuactionresource.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysMenuActionResourceMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuactionresource.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysMenuActionResourceMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysmenuactionresource.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysMenuActionResourceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysMenuActionResourceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysMenuActionResourceMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysmenuactionresource.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysMenuActionResourceMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuactionresource.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysMenuActionResourceMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysmenuactionresource.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysMenuActionResourceMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysMenuActionResourceMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysMenuActionResourceMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysmenuactionresource.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysMenuActionResourceMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysmenuactionresource.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysMenuActionResourceMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysmenuactionresource.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysMenuActionResourceMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysMenuActionResourceMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysMenuActionResourceMutation) ResetIsActive() {
	m.is_active = nil
}

// SetMethod sets the "method" field.
func (m *SysMenuActionResourceMutation) SetMethod(s string) {
	m.method = &s
}

// Method returns the value of the "method" field in the mutation.
func (m *SysMenuActionResourceMutation) Method() (r string, exists bool) {
	v := m.method
	if v == nil {
		return
	}
	return *v, true
}

// OldMethod returns the old "method" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMethod: %w", err)
	}
	return oldValue.Method, nil
}

// ResetMethod resets all changes to the "method" field.
func (m *SysMenuActionResourceMutation) ResetMethod() {
	m.method = nil
}

// SetPath sets the "path" field.
func (m *SysMenuActionResourceMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *SysMenuActionResourceMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *SysMenuActionResourceMutation) ResetPath() {
	m._path = nil
}

// SetActionID sets the "action_id" field.
func (m *SysMenuActionResourceMutation) SetActionID(s string) {
	m.action_id = &s
}

// ActionID returns the value of the "action_id" field in the mutation.
func (m *SysMenuActionResourceMutation) ActionID() (r string, exists bool) {
	v := m.action_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActionID returns the old "action_id" field's value of the SysMenuActionResource entity.
// If the SysMenuActionResource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysMenuActionResourceMutation) OldActionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionID: %w", err)
	}
	return oldValue.ActionID, nil
}

// ResetActionID resets all changes to the "action_id" field.
func (m *SysMenuActionResourceMutation) ResetActionID() {
	m.action_id = nil
}

// Where appends a list predicates to the SysMenuActionResourceMutation builder.
func (m *SysMenuActionResourceMutation) Where(ps ...predicate.SysMenuActionResource) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysMenuActionResourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysMenuActionResourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysMenuActionResource, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysMenuActionResourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysMenuActionResourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysMenuActionResource).
func (m *SysMenuActionResourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysMenuActionResourceMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.is_del != nil {
		fields = append(fields, sysmenuactionresource.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, sysmenuactionresource.FieldSort)
	}
	if m.memo != nil {
		fields = append(fields, sysmenuactionresource.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysmenuactionresource.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysmenuactionresource.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysmenuactionresource.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysmenuactionresource.FieldIsActive)
	}
	if m.method != nil {
		fields = append(fields, sysmenuactionresource.FieldMethod)
	}
	if m._path != nil {
		fields = append(fields, sysmenuactionresource.FieldPath)
	}
	if m.action_id != nil {
		fields = append(fields, sysmenuactionresource.FieldActionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysMenuActionResourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		return m.IsDel()
	case sysmenuactionresource.FieldSort:
		return m.Sort()
	case sysmenuactionresource.FieldMemo:
		return m.Memo()
	case sysmenuactionresource.FieldCreatedAt:
		return m.CreatedAt()
	case sysmenuactionresource.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysmenuactionresource.FieldDeletedAt:
		return m.DeletedAt()
	case sysmenuactionresource.FieldIsActive:
		return m.IsActive()
	case sysmenuactionresource.FieldMethod:
		return m.Method()
	case sysmenuactionresource.FieldPath:
		return m.Path()
	case sysmenuactionresource.FieldActionID:
		return m.ActionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysMenuActionResourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysmenuactionresource.FieldSort:
		return m.OldSort(ctx)
	case sysmenuactionresource.FieldMemo:
		return m.OldMemo(ctx)
	case sysmenuactionresource.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysmenuactionresource.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysmenuactionresource.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysmenuactionresource.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysmenuactionresource.FieldMethod:
		return m.OldMethod(ctx)
	case sysmenuactionresource.FieldPath:
		return m.OldPath(ctx)
	case sysmenuactionresource.FieldActionID:
		return m.OldActionID(ctx)
	}
	return nil, fmt.Errorf("unknown SysMenuActionResource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionResourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysmenuactionresource.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysmenuactionresource.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysmenuactionresource.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysmenuactionresource.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysmenuactionresource.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysmenuactionresource.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysmenuactionresource.FieldMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMethod(v)
		return nil
	case sysmenuactionresource.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case sysmenuactionresource.FieldActionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionID(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysMenuActionResourceMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysmenuactionresource.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysMenuActionResourceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysmenuactionresource.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysMenuActionResourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysmenuactionresource.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysMenuActionResourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysmenuactionresource.FieldMemo) {
		fields = append(fields, sysmenuactionresource.FieldMemo)
	}
	if m.FieldCleared(sysmenuactionresource.FieldCreatedAt) {
		fields = append(fields, sysmenuactionresource.FieldCreatedAt)
	}
	if m.FieldCleared(sysmenuactionresource.FieldUpdatedAt) {
		fields = append(fields, sysmenuactionresource.FieldUpdatedAt)
	}
	if m.FieldCleared(sysmenuactionresource.FieldDeletedAt) {
		fields = append(fields, sysmenuactionresource.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysMenuActionResourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysMenuActionResourceMutation) ClearField(name string) error {
	switch name {
	case sysmenuactionresource.FieldMemo:
		m.ClearMemo()
		return nil
	case sysmenuactionresource.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysmenuactionresource.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysmenuactionresource.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysMenuActionResourceMutation) ResetField(name string) error {
	switch name {
	case sysmenuactionresource.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysmenuactionresource.FieldSort:
		m.ResetSort()
		return nil
	case sysmenuactionresource.FieldMemo:
		m.ResetMemo()
		return nil
	case sysmenuactionresource.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysmenuactionresource.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysmenuactionresource.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysmenuactionresource.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysmenuactionresource.FieldMethod:
		m.ResetMethod()
		return nil
	case sysmenuactionresource.FieldPath:
		m.ResetPath()
		return nil
	case sysmenuactionresource.FieldActionID:
		m.ResetActionID()
		return nil
	}
	return fmt.Errorf("unknown SysMenuActionResource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysMenuActionResourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysMenuActionResourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysMenuActionResourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysMenuActionResourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysMenuActionResourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysMenuActionResourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysMenuActionResourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysMenuActionResource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysMenuActionResourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysMenuActionResource edge %s", name)
}

// SysRoleMutation represents an operation that mutates the SysRole nodes in the graph.
type SysRoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	is_active     *bool
	sort          *int32
	addsort       *int32
	memo          *string
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysRole, error)
	predicates    []predicate.SysRole
}

var _ ent.Mutation = (*SysRoleMutation)(nil)

// sysroleOption allows management of the mutation configuration using functional options.
type sysroleOption func(*SysRoleMutation)

// newSysRoleMutation creates new mutation for the SysRole entity.
func newSysRoleMutation(c config, op Op, opts ...sysroleOption) *SysRoleMutation {
	m := &SysRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleID sets the ID field of the mutation.
func withSysRoleID(id string) sysroleOption {
	return func(m *SysRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRole
		)
		m.oldValue = func(ctx context.Context) (*SysRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRole sets the old SysRole of the mutation.
func withSysRole(node *SysRole) sysroleOption {
	return func(m *SysRoleMutation) {
		m.oldValue = func(context.Context) (*SysRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRole entities.
func (m *SysRoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysRoleMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysRoleMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysRoleMutation) ResetIsDel() {
	m.is_del = nil
}

// SetIsActive sets the "is_active" field.
func (m *SysRoleMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysRoleMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysRoleMutation) ResetIsActive() {
	m.is_active = nil
}

// SetSort sets the "sort" field.
func (m *SysRoleMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysRoleMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysRoleMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysRoleMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysRoleMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetMemo sets the "memo" field.
func (m *SysRoleMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *SysRoleMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *SysRoleMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[sysrole.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *SysRoleMutation) MemoCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *SysRoleMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, sysrole.FieldMemo)
}

// SetCreatedAt sets the "created_at" field.
func (m *SysRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysRoleMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysrole.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysRoleMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysRoleMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysrole.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysRoleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysrole.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysRoleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysrole.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysRoleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysRoleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysRoleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysrole.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysRoleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysrole.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysRoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysrole.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *SysRoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SysRoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SysRole entity.
// If the SysRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SysRoleMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the SysRoleMutation builder.
func (m *SysRoleMutation) Where(ps ...predicate.SysRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysRole).
func (m *SysRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.is_del != nil {
		fields = append(fields, sysrole.FieldIsDel)
	}
	if m.is_active != nil {
		fields = append(fields, sysrole.FieldIsActive)
	}
	if m.sort != nil {
		fields = append(fields, sysrole.FieldSort)
	}
	if m.memo != nil {
		fields = append(fields, sysrole.FieldMemo)
	}
	if m.created_at != nil {
		fields = append(fields, sysrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysrole.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysrole.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, sysrole.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldIsDel:
		return m.IsDel()
	case sysrole.FieldIsActive:
		return m.IsActive()
	case sysrole.FieldSort:
		return m.Sort()
	case sysrole.FieldMemo:
		return m.Memo()
	case sysrole.FieldCreatedAt:
		return m.CreatedAt()
	case sysrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysrole.FieldDeletedAt:
		return m.DeletedAt()
	case sysrole.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrole.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysrole.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysrole.FieldSort:
		return m.OldSort(ctx)
	case sysrole.FieldMemo:
		return m.OldMemo(ctx)
	case sysrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysrole.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysrole.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown SysRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysrole.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysrole.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysrole.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case sysrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysrole.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysrole.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysrole.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysrole.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysrole.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysrole.FieldMemo) {
		fields = append(fields, sysrole.FieldMemo)
	}
	if m.FieldCleared(sysrole.FieldCreatedAt) {
		fields = append(fields, sysrole.FieldCreatedAt)
	}
	if m.FieldCleared(sysrole.FieldUpdatedAt) {
		fields = append(fields, sysrole.FieldUpdatedAt)
	}
	if m.FieldCleared(sysrole.FieldDeletedAt) {
		fields = append(fields, sysrole.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleMutation) ClearField(name string) error {
	switch name {
	case sysrole.FieldMemo:
		m.ClearMemo()
		return nil
	case sysrole.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysrole.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysrole.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleMutation) ResetField(name string) error {
	switch name {
	case sysrole.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysrole.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysrole.FieldSort:
		m.ResetSort()
		return nil
	case sysrole.FieldMemo:
		m.ResetMemo()
		return nil
	case sysrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysrole.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysrole.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown SysRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRole edge %s", name)
}

// SysRoleMenuMutation represents an operation that mutates the SysRoleMenu nodes in the graph.
type SysRoleMenuMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	role_id       *string
	menu_id       *string
	action_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysRoleMenu, error)
	predicates    []predicate.SysRoleMenu
}

var _ ent.Mutation = (*SysRoleMenuMutation)(nil)

// sysrolemenuOption allows management of the mutation configuration using functional options.
type sysrolemenuOption func(*SysRoleMenuMutation)

// newSysRoleMenuMutation creates new mutation for the SysRoleMenu entity.
func newSysRoleMenuMutation(c config, op Op, opts ...sysrolemenuOption) *SysRoleMenuMutation {
	m := &SysRoleMenuMutation{
		config:        c,
		op:            op,
		typ:           TypeSysRoleMenu,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysRoleMenuID sets the ID field of the mutation.
func withSysRoleMenuID(id string) sysrolemenuOption {
	return func(m *SysRoleMenuMutation) {
		var (
			err   error
			once  sync.Once
			value *SysRoleMenu
		)
		m.oldValue = func(ctx context.Context) (*SysRoleMenu, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysRoleMenu.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysRoleMenu sets the old SysRoleMenu of the mutation.
func withSysRoleMenu(node *SysRoleMenu) sysrolemenuOption {
	return func(m *SysRoleMenuMutation) {
		m.oldValue = func(context.Context) (*SysRoleMenu, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysRoleMenuMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysRoleMenuMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysRoleMenu entities.
func (m *SysRoleMenuMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysRoleMenuMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysRoleMenuMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysRoleMenu.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysRoleMenuMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysRoleMenuMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysRoleMenuMutation) ResetIsDel() {
	m.is_del = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysRoleMenuMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysRoleMenuMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysRoleMenuMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysrolemenu.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysRoleMenuMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysrolemenu.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysRoleMenuMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysrolemenu.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysRoleMenuMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysRoleMenuMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysRoleMenuMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysrolemenu.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysRoleMenuMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysrolemenu.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysRoleMenuMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysrolemenu.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysRoleMenuMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysRoleMenuMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysRoleMenuMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysrolemenu.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysRoleMenuMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysrolemenu.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysRoleMenuMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysrolemenu.FieldDeletedAt)
}

// SetRoleID sets the "role_id" field.
func (m *SysRoleMenuMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *SysRoleMenuMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *SysRoleMenuMutation) ResetRoleID() {
	m.role_id = nil
}

// SetMenuID sets the "menu_id" field.
func (m *SysRoleMenuMutation) SetMenuID(s string) {
	m.menu_id = &s
}

// MenuID returns the value of the "menu_id" field in the mutation.
func (m *SysRoleMenuMutation) MenuID() (r string, exists bool) {
	v := m.menu_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMenuID returns the old "menu_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldMenuID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenuID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenuID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenuID: %w", err)
	}
	return oldValue.MenuID, nil
}

// ResetMenuID resets all changes to the "menu_id" field.
func (m *SysRoleMenuMutation) ResetMenuID() {
	m.menu_id = nil
}

// SetActionID sets the "action_id" field.
func (m *SysRoleMenuMutation) SetActionID(s string) {
	m.action_id = &s
}

// ActionID returns the value of the "action_id" field in the mutation.
func (m *SysRoleMenuMutation) ActionID() (r string, exists bool) {
	v := m.action_id
	if v == nil {
		return
	}
	return *v, true
}

// OldActionID returns the old "action_id" field's value of the SysRoleMenu entity.
// If the SysRoleMenu object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysRoleMenuMutation) OldActionID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActionID: %w", err)
	}
	return oldValue.ActionID, nil
}

// ClearActionID clears the value of the "action_id" field.
func (m *SysRoleMenuMutation) ClearActionID() {
	m.action_id = nil
	m.clearedFields[sysrolemenu.FieldActionID] = struct{}{}
}

// ActionIDCleared returns if the "action_id" field was cleared in this mutation.
func (m *SysRoleMenuMutation) ActionIDCleared() bool {
	_, ok := m.clearedFields[sysrolemenu.FieldActionID]
	return ok
}

// ResetActionID resets all changes to the "action_id" field.
func (m *SysRoleMenuMutation) ResetActionID() {
	m.action_id = nil
	delete(m.clearedFields, sysrolemenu.FieldActionID)
}

// Where appends a list predicates to the SysRoleMenuMutation builder.
func (m *SysRoleMenuMutation) Where(ps ...predicate.SysRoleMenu) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysRoleMenuMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysRoleMenuMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysRoleMenu, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysRoleMenuMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysRoleMenuMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysRoleMenu).
func (m *SysRoleMenuMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysRoleMenuMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.is_del != nil {
		fields = append(fields, sysrolemenu.FieldIsDel)
	}
	if m.created_at != nil {
		fields = append(fields, sysrolemenu.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysrolemenu.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysrolemenu.FieldDeletedAt)
	}
	if m.role_id != nil {
		fields = append(fields, sysrolemenu.FieldRoleID)
	}
	if m.menu_id != nil {
		fields = append(fields, sysrolemenu.FieldMenuID)
	}
	if m.action_id != nil {
		fields = append(fields, sysrolemenu.FieldActionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysRoleMenuMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysrolemenu.FieldIsDel:
		return m.IsDel()
	case sysrolemenu.FieldCreatedAt:
		return m.CreatedAt()
	case sysrolemenu.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysrolemenu.FieldDeletedAt:
		return m.DeletedAt()
	case sysrolemenu.FieldRoleID:
		return m.RoleID()
	case sysrolemenu.FieldMenuID:
		return m.MenuID()
	case sysrolemenu.FieldActionID:
		return m.ActionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysRoleMenuMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysrolemenu.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysrolemenu.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysrolemenu.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysrolemenu.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysrolemenu.FieldRoleID:
		return m.OldRoleID(ctx)
	case sysrolemenu.FieldMenuID:
		return m.OldMenuID(ctx)
	case sysrolemenu.FieldActionID:
		return m.OldActionID(ctx)
	}
	return nil, fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMenuMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysrolemenu.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysrolemenu.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysrolemenu.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysrolemenu.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysrolemenu.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case sysrolemenu.FieldMenuID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenuID(v)
		return nil
	case sysrolemenu.FieldActionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActionID(v)
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysRoleMenuMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysRoleMenuMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysRoleMenuMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysRoleMenu numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysRoleMenuMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysrolemenu.FieldCreatedAt) {
		fields = append(fields, sysrolemenu.FieldCreatedAt)
	}
	if m.FieldCleared(sysrolemenu.FieldUpdatedAt) {
		fields = append(fields, sysrolemenu.FieldUpdatedAt)
	}
	if m.FieldCleared(sysrolemenu.FieldDeletedAt) {
		fields = append(fields, sysrolemenu.FieldDeletedAt)
	}
	if m.FieldCleared(sysrolemenu.FieldActionID) {
		fields = append(fields, sysrolemenu.FieldActionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysRoleMenuMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysRoleMenuMutation) ClearField(name string) error {
	switch name {
	case sysrolemenu.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysrolemenu.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysrolemenu.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysrolemenu.FieldActionID:
		m.ClearActionID()
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysRoleMenuMutation) ResetField(name string) error {
	switch name {
	case sysrolemenu.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysrolemenu.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysrolemenu.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysrolemenu.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysrolemenu.FieldRoleID:
		m.ResetRoleID()
		return nil
	case sysrolemenu.FieldMenuID:
		m.ResetMenuID()
		return nil
	case sysrolemenu.FieldActionID:
		m.ResetActionID()
		return nil
	}
	return fmt.Errorf("unknown SysRoleMenu field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysRoleMenuMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysRoleMenuMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysRoleMenuMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysRoleMenuMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysRoleMenuMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysRoleMenuMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysRoleMenuMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysRoleMenu unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysRoleMenuMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysRoleMenu edge %s", name)
}

// SysUserMutation represents an operation that mutates the SysUser nodes in the graph.
type SysUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	user_name     *string
	real_name     *string
	first_name    *string
	last_name     *string
	password      *string
	email         *string
	mobile        *string
	salt          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysUser, error)
	predicates    []predicate.SysUser
}

var _ ent.Mutation = (*SysUserMutation)(nil)

// sysuserOption allows management of the mutation configuration using functional options.
type sysuserOption func(*SysUserMutation)

// newSysUserMutation creates new mutation for the SysUser entity.
func newSysUserMutation(c config, op Op, opts ...sysuserOption) *SysUserMutation {
	m := &SysUserMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysUserID sets the ID field of the mutation.
func withSysUserID(id string) sysuserOption {
	return func(m *SysUserMutation) {
		var (
			err   error
			once  sync.Once
			value *SysUser
		)
		m.oldValue = func(ctx context.Context) (*SysUser, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysUser sets the old SysUser of the mutation.
func withSysUser(node *SysUser) sysuserOption {
	return func(m *SysUserMutation) {
		m.oldValue = func(context.Context) (*SysUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysUser entities.
func (m *SysUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysUserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysUser.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysUserMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysUserMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysUserMutation) ResetIsDel() {
	m.is_del = nil
}

// SetSort sets the "sort" field.
func (m *SysUserMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *SysUserMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *SysUserMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *SysUserMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *SysUserMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysUserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysUserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysUserMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysuser.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysUserMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysUserMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysuser.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysUserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysUserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysUserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysuser.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysUserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysUserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysuser.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysUserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysUserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysUserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysuser.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysUserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysUserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysuser.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *SysUserMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SysUserMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SysUserMutation) ResetIsActive() {
	m.is_active = nil
}

// SetUserName sets the "user_name" field.
func (m *SysUserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *SysUserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *SysUserMutation) ResetUserName() {
	m.user_name = nil
}

// SetRealName sets the "real_name" field.
func (m *SysUserMutation) SetRealName(s string) {
	m.real_name = &s
}

// RealName returns the value of the "real_name" field in the mutation.
func (m *SysUserMutation) RealName() (r string, exists bool) {
	v := m.real_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRealName returns the old "real_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldRealName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRealName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRealName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRealName: %w", err)
	}
	return oldValue.RealName, nil
}

// ClearRealName clears the value of the "real_name" field.
func (m *SysUserMutation) ClearRealName() {
	m.real_name = nil
	m.clearedFields[sysuser.FieldRealName] = struct{}{}
}

// RealNameCleared returns if the "real_name" field was cleared in this mutation.
func (m *SysUserMutation) RealNameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldRealName]
	return ok
}

// ResetRealName resets all changes to the "real_name" field.
func (m *SysUserMutation) ResetRealName() {
	m.real_name = nil
	delete(m.clearedFields, sysuser.FieldRealName)
}

// SetFirstName sets the "first_name" field.
func (m *SysUserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *SysUserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldFirstName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *SysUserMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[sysuser.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *SysUserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *SysUserMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, sysuser.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *SysUserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *SysUserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldLastName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *SysUserMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[sysuser.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *SysUserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[sysuser.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *SysUserMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, sysuser.FieldLastName)
}

// SetPassword sets the "password" field.
func (m *SysUserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *SysUserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *SysUserMutation) ResetPassword() {
	m.password = nil
}

// SetEmail sets the "email" field.
func (m *SysUserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *SysUserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *SysUserMutation) ResetEmail() {
	m.email = nil
}

// SetMobile sets the "mobile" field.
func (m *SysUserMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *SysUserMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *SysUserMutation) ResetMobile() {
	m.mobile = nil
}

// SetSalt sets the "salt" field.
func (m *SysUserMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *SysUserMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the SysUser entity.
// If the SysUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *SysUserMutation) ResetSalt() {
	m.salt = nil
}

// Where appends a list predicates to the SysUserMutation builder.
func (m *SysUserMutation) Where(ps ...predicate.SysUser) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysUserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysUserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysUser, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysUserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysUserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysUser).
func (m *SysUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.is_del != nil {
		fields = append(fields, sysuser.FieldIsDel)
	}
	if m.sort != nil {
		fields = append(fields, sysuser.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, sysuser.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysuser.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysuser.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, sysuser.FieldIsActive)
	}
	if m.user_name != nil {
		fields = append(fields, sysuser.FieldUserName)
	}
	if m.real_name != nil {
		fields = append(fields, sysuser.FieldRealName)
	}
	if m.first_name != nil {
		fields = append(fields, sysuser.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, sysuser.FieldLastName)
	}
	if m.password != nil {
		fields = append(fields, sysuser.FieldPassword)
	}
	if m.email != nil {
		fields = append(fields, sysuser.FieldEmail)
	}
	if m.mobile != nil {
		fields = append(fields, sysuser.FieldMobile)
	}
	if m.salt != nil {
		fields = append(fields, sysuser.FieldSalt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldIsDel:
		return m.IsDel()
	case sysuser.FieldSort:
		return m.Sort()
	case sysuser.FieldCreatedAt:
		return m.CreatedAt()
	case sysuser.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysuser.FieldDeletedAt:
		return m.DeletedAt()
	case sysuser.FieldIsActive:
		return m.IsActive()
	case sysuser.FieldUserName:
		return m.UserName()
	case sysuser.FieldRealName:
		return m.RealName()
	case sysuser.FieldFirstName:
		return m.FirstName()
	case sysuser.FieldLastName:
		return m.LastName()
	case sysuser.FieldPassword:
		return m.Password()
	case sysuser.FieldEmail:
		return m.Email()
	case sysuser.FieldMobile:
		return m.Mobile()
	case sysuser.FieldSalt:
		return m.Salt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysuser.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysuser.FieldSort:
		return m.OldSort(ctx)
	case sysuser.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysuser.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysuser.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysuser.FieldIsActive:
		return m.OldIsActive(ctx)
	case sysuser.FieldUserName:
		return m.OldUserName(ctx)
	case sysuser.FieldRealName:
		return m.OldRealName(ctx)
	case sysuser.FieldFirstName:
		return m.OldFirstName(ctx)
	case sysuser.FieldLastName:
		return m.OldLastName(ctx)
	case sysuser.FieldPassword:
		return m.OldPassword(ctx)
	case sysuser.FieldEmail:
		return m.OldEmail(ctx)
	case sysuser.FieldMobile:
		return m.OldMobile(ctx)
	case sysuser.FieldSalt:
		return m.OldSalt(ctx)
	}
	return nil, fmt.Errorf("unknown SysUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysuser.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case sysuser.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysuser.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysuser.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysuser.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case sysuser.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case sysuser.FieldRealName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRealName(v)
		return nil
	case sysuser.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case sysuser.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case sysuser.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case sysuser.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case sysuser.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case sysuser.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, sysuser.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sysuser.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sysuser.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown SysUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysuser.FieldCreatedAt) {
		fields = append(fields, sysuser.FieldCreatedAt)
	}
	if m.FieldCleared(sysuser.FieldUpdatedAt) {
		fields = append(fields, sysuser.FieldUpdatedAt)
	}
	if m.FieldCleared(sysuser.FieldDeletedAt) {
		fields = append(fields, sysuser.FieldDeletedAt)
	}
	if m.FieldCleared(sysuser.FieldRealName) {
		fields = append(fields, sysuser.FieldRealName)
	}
	if m.FieldCleared(sysuser.FieldFirstName) {
		fields = append(fields, sysuser.FieldFirstName)
	}
	if m.FieldCleared(sysuser.FieldLastName) {
		fields = append(fields, sysuser.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserMutation) ClearField(name string) error {
	switch name {
	case sysuser.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysuser.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysuser.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case sysuser.FieldRealName:
		m.ClearRealName()
		return nil
	case sysuser.FieldFirstName:
		m.ClearFirstName()
		return nil
	case sysuser.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown SysUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserMutation) ResetField(name string) error {
	switch name {
	case sysuser.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysuser.FieldSort:
		m.ResetSort()
		return nil
	case sysuser.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysuser.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysuser.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysuser.FieldIsActive:
		m.ResetIsActive()
		return nil
	case sysuser.FieldUserName:
		m.ResetUserName()
		return nil
	case sysuser.FieldRealName:
		m.ResetRealName()
		return nil
	case sysuser.FieldFirstName:
		m.ResetFirstName()
		return nil
	case sysuser.FieldLastName:
		m.ResetLastName()
		return nil
	case sysuser.FieldPassword:
		m.ResetPassword()
		return nil
	case sysuser.FieldEmail:
		m.ResetEmail()
		return nil
	case sysuser.FieldMobile:
		m.ResetMobile()
		return nil
	case sysuser.FieldSalt:
		m.ResetSalt()
		return nil
	}
	return fmt.Errorf("unknown SysUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysUser edge %s", name)
}

// SysUserRoleMutation represents an operation that mutates the SysUserRole nodes in the graph.
type SysUserRoleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	user_id       *string
	role_id       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SysUserRole, error)
	predicates    []predicate.SysUserRole
}

var _ ent.Mutation = (*SysUserRoleMutation)(nil)

// sysuserroleOption allows management of the mutation configuration using functional options.
type sysuserroleOption func(*SysUserRoleMutation)

// newSysUserRoleMutation creates new mutation for the SysUserRole entity.
func newSysUserRoleMutation(c config, op Op, opts ...sysuserroleOption) *SysUserRoleMutation {
	m := &SysUserRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeSysUserRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSysUserRoleID sets the ID field of the mutation.
func withSysUserRoleID(id string) sysuserroleOption {
	return func(m *SysUserRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *SysUserRole
		)
		m.oldValue = func(ctx context.Context) (*SysUserRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SysUserRole.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSysUserRole sets the old SysUserRole of the mutation.
func withSysUserRole(node *SysUserRole) sysuserroleOption {
	return func(m *SysUserRoleMutation) {
		m.oldValue = func(context.Context) (*SysUserRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SysUserRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SysUserRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SysUserRole entities.
func (m *SysUserRoleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SysUserRoleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SysUserRoleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SysUserRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *SysUserRoleMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *SysUserRoleMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *SysUserRoleMutation) ResetIsDel() {
	m.is_del = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SysUserRoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SysUserRoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *SysUserRoleMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[sysuserrole.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *SysUserRoleMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[sysuserrole.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SysUserRoleMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, sysuserrole.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SysUserRoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SysUserRoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *SysUserRoleMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[sysuserrole.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *SysUserRoleMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[sysuserrole.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SysUserRoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, sysuserrole.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SysUserRoleMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SysUserRoleMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SysUserRoleMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[sysuserrole.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SysUserRoleMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[sysuserrole.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SysUserRoleMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, sysuserrole.FieldDeletedAt)
}

// SetUserID sets the "user_id" field.
func (m *SysUserRoleMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SysUserRoleMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SysUserRoleMutation) ResetUserID() {
	m.user_id = nil
}

// SetRoleID sets the "role_id" field.
func (m *SysUserRoleMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *SysUserRoleMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the SysUserRole entity.
// If the SysUserRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SysUserRoleMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *SysUserRoleMutation) ResetRoleID() {
	m.role_id = nil
}

// Where appends a list predicates to the SysUserRoleMutation builder.
func (m *SysUserRoleMutation) Where(ps ...predicate.SysUserRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SysUserRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SysUserRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SysUserRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SysUserRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SysUserRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SysUserRole).
func (m *SysUserRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SysUserRoleMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.is_del != nil {
		fields = append(fields, sysuserrole.FieldIsDel)
	}
	if m.created_at != nil {
		fields = append(fields, sysuserrole.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sysuserrole.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sysuserrole.FieldDeletedAt)
	}
	if m.user_id != nil {
		fields = append(fields, sysuserrole.FieldUserID)
	}
	if m.role_id != nil {
		fields = append(fields, sysuserrole.FieldRoleID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SysUserRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sysuserrole.FieldIsDel:
		return m.IsDel()
	case sysuserrole.FieldCreatedAt:
		return m.CreatedAt()
	case sysuserrole.FieldUpdatedAt:
		return m.UpdatedAt()
	case sysuserrole.FieldDeletedAt:
		return m.DeletedAt()
	case sysuserrole.FieldUserID:
		return m.UserID()
	case sysuserrole.FieldRoleID:
		return m.RoleID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SysUserRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sysuserrole.FieldIsDel:
		return m.OldIsDel(ctx)
	case sysuserrole.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sysuserrole.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sysuserrole.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sysuserrole.FieldUserID:
		return m.OldUserID(ctx)
	case sysuserrole.FieldRoleID:
		return m.OldRoleID(ctx)
	}
	return nil, fmt.Errorf("unknown SysUserRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sysuserrole.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case sysuserrole.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sysuserrole.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sysuserrole.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sysuserrole.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sysuserrole.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	}
	return fmt.Errorf("unknown SysUserRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SysUserRoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SysUserRoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SysUserRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SysUserRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SysUserRoleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sysuserrole.FieldCreatedAt) {
		fields = append(fields, sysuserrole.FieldCreatedAt)
	}
	if m.FieldCleared(sysuserrole.FieldUpdatedAt) {
		fields = append(fields, sysuserrole.FieldUpdatedAt)
	}
	if m.FieldCleared(sysuserrole.FieldDeletedAt) {
		fields = append(fields, sysuserrole.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SysUserRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SysUserRoleMutation) ClearField(name string) error {
	switch name {
	case sysuserrole.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case sysuserrole.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case sysuserrole.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown SysUserRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SysUserRoleMutation) ResetField(name string) error {
	switch name {
	case sysuserrole.FieldIsDel:
		m.ResetIsDel()
		return nil
	case sysuserrole.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sysuserrole.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sysuserrole.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sysuserrole.FieldUserID:
		m.ResetUserID()
		return nil
	case sysuserrole.FieldRoleID:
		m.ResetRoleID()
		return nil
	}
	return fmt.Errorf("unknown SysUserRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SysUserRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SysUserRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SysUserRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SysUserRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SysUserRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SysUserRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SysUserRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SysUserRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SysUserRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SysUserRole edge %s", name)
}

// XxxDemoMutation represents an operation that mutates the XxxDemo nodes in the graph.
type XxxDemoMutation struct {
	config
	op            Op
	typ           string
	id            *string
	is_del        *bool
	memo          *string
	sort          *int32
	addsort       *int32
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	is_active     *bool
	code          *string
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*XxxDemo, error)
	predicates    []predicate.XxxDemo
}

var _ ent.Mutation = (*XxxDemoMutation)(nil)

// xxxdemoOption allows management of the mutation configuration using functional options.
type xxxdemoOption func(*XxxDemoMutation)

// newXxxDemoMutation creates new mutation for the XxxDemo entity.
func newXxxDemoMutation(c config, op Op, opts ...xxxdemoOption) *XxxDemoMutation {
	m := &XxxDemoMutation{
		config:        c,
		op:            op,
		typ:           TypeXxxDemo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withXxxDemoID sets the ID field of the mutation.
func withXxxDemoID(id string) xxxdemoOption {
	return func(m *XxxDemoMutation) {
		var (
			err   error
			once  sync.Once
			value *XxxDemo
		)
		m.oldValue = func(ctx context.Context) (*XxxDemo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().XxxDemo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withXxxDemo sets the old XxxDemo of the mutation.
func withXxxDemo(node *XxxDemo) xxxdemoOption {
	return func(m *XxxDemoMutation) {
		m.oldValue = func(context.Context) (*XxxDemo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m XxxDemoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m XxxDemoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of XxxDemo entities.
func (m *XxxDemoMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *XxxDemoMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *XxxDemoMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().XxxDemo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsDel sets the "is_del" field.
func (m *XxxDemoMutation) SetIsDel(b bool) {
	m.is_del = &b
}

// IsDel returns the value of the "is_del" field in the mutation.
func (m *XxxDemoMutation) IsDel() (r bool, exists bool) {
	v := m.is_del
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDel returns the old "is_del" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldIsDel(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDel: %w", err)
	}
	return oldValue.IsDel, nil
}

// ResetIsDel resets all changes to the "is_del" field.
func (m *XxxDemoMutation) ResetIsDel() {
	m.is_del = nil
}

// SetMemo sets the "memo" field.
func (m *XxxDemoMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *XxxDemoMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldMemo(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ClearMemo clears the value of the "memo" field.
func (m *XxxDemoMutation) ClearMemo() {
	m.memo = nil
	m.clearedFields[xxxdemo.FieldMemo] = struct{}{}
}

// MemoCleared returns if the "memo" field was cleared in this mutation.
func (m *XxxDemoMutation) MemoCleared() bool {
	_, ok := m.clearedFields[xxxdemo.FieldMemo]
	return ok
}

// ResetMemo resets all changes to the "memo" field.
func (m *XxxDemoMutation) ResetMemo() {
	m.memo = nil
	delete(m.clearedFields, xxxdemo.FieldMemo)
}

// SetSort sets the "sort" field.
func (m *XxxDemoMutation) SetSort(i int32) {
	m.sort = &i
	m.addsort = nil
}

// Sort returns the value of the "sort" field in the mutation.
func (m *XxxDemoMutation) Sort() (r int32, exists bool) {
	v := m.sort
	if v == nil {
		return
	}
	return *v, true
}

// OldSort returns the old "sort" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldSort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSort: %w", err)
	}
	return oldValue.Sort, nil
}

// AddSort adds i to the "sort" field.
func (m *XxxDemoMutation) AddSort(i int32) {
	if m.addsort != nil {
		*m.addsort += i
	} else {
		m.addsort = &i
	}
}

// AddedSort returns the value that was added to the "sort" field in this mutation.
func (m *XxxDemoMutation) AddedSort() (r int32, exists bool) {
	v := m.addsort
	if v == nil {
		return
	}
	return *v, true
}

// ResetSort resets all changes to the "sort" field.
func (m *XxxDemoMutation) ResetSort() {
	m.sort = nil
	m.addsort = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *XxxDemoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *XxxDemoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ClearCreatedAt clears the value of the "created_at" field.
func (m *XxxDemoMutation) ClearCreatedAt() {
	m.created_at = nil
	m.clearedFields[xxxdemo.FieldCreatedAt] = struct{}{}
}

// CreatedAtCleared returns if the "created_at" field was cleared in this mutation.
func (m *XxxDemoMutation) CreatedAtCleared() bool {
	_, ok := m.clearedFields[xxxdemo.FieldCreatedAt]
	return ok
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *XxxDemoMutation) ResetCreatedAt() {
	m.created_at = nil
	delete(m.clearedFields, xxxdemo.FieldCreatedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *XxxDemoMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *XxxDemoMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *XxxDemoMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[xxxdemo.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *XxxDemoMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[xxxdemo.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *XxxDemoMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, xxxdemo.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *XxxDemoMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *XxxDemoMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *XxxDemoMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[xxxdemo.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *XxxDemoMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[xxxdemo.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *XxxDemoMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, xxxdemo.FieldDeletedAt)
}

// SetIsActive sets the "is_active" field.
func (m *XxxDemoMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *XxxDemoMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *XxxDemoMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCode sets the "code" field.
func (m *XxxDemoMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *XxxDemoMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *XxxDemoMutation) ResetCode() {
	m.code = nil
}

// SetName sets the "name" field.
func (m *XxxDemoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *XxxDemoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the XxxDemo entity.
// If the XxxDemo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *XxxDemoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *XxxDemoMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the XxxDemoMutation builder.
func (m *XxxDemoMutation) Where(ps ...predicate.XxxDemo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the XxxDemoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *XxxDemoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.XxxDemo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *XxxDemoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *XxxDemoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (XxxDemo).
func (m *XxxDemoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *XxxDemoMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.is_del != nil {
		fields = append(fields, xxxdemo.FieldIsDel)
	}
	if m.memo != nil {
		fields = append(fields, xxxdemo.FieldMemo)
	}
	if m.sort != nil {
		fields = append(fields, xxxdemo.FieldSort)
	}
	if m.created_at != nil {
		fields = append(fields, xxxdemo.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, xxxdemo.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, xxxdemo.FieldDeletedAt)
	}
	if m.is_active != nil {
		fields = append(fields, xxxdemo.FieldIsActive)
	}
	if m.code != nil {
		fields = append(fields, xxxdemo.FieldCode)
	}
	if m.name != nil {
		fields = append(fields, xxxdemo.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *XxxDemoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case xxxdemo.FieldIsDel:
		return m.IsDel()
	case xxxdemo.FieldMemo:
		return m.Memo()
	case xxxdemo.FieldSort:
		return m.Sort()
	case xxxdemo.FieldCreatedAt:
		return m.CreatedAt()
	case xxxdemo.FieldUpdatedAt:
		return m.UpdatedAt()
	case xxxdemo.FieldDeletedAt:
		return m.DeletedAt()
	case xxxdemo.FieldIsActive:
		return m.IsActive()
	case xxxdemo.FieldCode:
		return m.Code()
	case xxxdemo.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *XxxDemoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case xxxdemo.FieldIsDel:
		return m.OldIsDel(ctx)
	case xxxdemo.FieldMemo:
		return m.OldMemo(ctx)
	case xxxdemo.FieldSort:
		return m.OldSort(ctx)
	case xxxdemo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case xxxdemo.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case xxxdemo.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case xxxdemo.FieldIsActive:
		return m.OldIsActive(ctx)
	case xxxdemo.FieldCode:
		return m.OldCode(ctx)
	case xxxdemo.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown XxxDemo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XxxDemoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case xxxdemo.FieldIsDel:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDel(v)
		return nil
	case xxxdemo.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case xxxdemo.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSort(v)
		return nil
	case xxxdemo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case xxxdemo.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case xxxdemo.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case xxxdemo.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case xxxdemo.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case xxxdemo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown XxxDemo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *XxxDemoMutation) AddedFields() []string {
	var fields []string
	if m.addsort != nil {
		fields = append(fields, xxxdemo.FieldSort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *XxxDemoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case xxxdemo.FieldSort:
		return m.AddedSort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *XxxDemoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case xxxdemo.FieldSort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSort(v)
		return nil
	}
	return fmt.Errorf("unknown XxxDemo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *XxxDemoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(xxxdemo.FieldMemo) {
		fields = append(fields, xxxdemo.FieldMemo)
	}
	if m.FieldCleared(xxxdemo.FieldCreatedAt) {
		fields = append(fields, xxxdemo.FieldCreatedAt)
	}
	if m.FieldCleared(xxxdemo.FieldUpdatedAt) {
		fields = append(fields, xxxdemo.FieldUpdatedAt)
	}
	if m.FieldCleared(xxxdemo.FieldDeletedAt) {
		fields = append(fields, xxxdemo.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *XxxDemoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *XxxDemoMutation) ClearField(name string) error {
	switch name {
	case xxxdemo.FieldMemo:
		m.ClearMemo()
		return nil
	case xxxdemo.FieldCreatedAt:
		m.ClearCreatedAt()
		return nil
	case xxxdemo.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case xxxdemo.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown XxxDemo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *XxxDemoMutation) ResetField(name string) error {
	switch name {
	case xxxdemo.FieldIsDel:
		m.ResetIsDel()
		return nil
	case xxxdemo.FieldMemo:
		m.ResetMemo()
		return nil
	case xxxdemo.FieldSort:
		m.ResetSort()
		return nil
	case xxxdemo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case xxxdemo.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case xxxdemo.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case xxxdemo.FieldIsActive:
		m.ResetIsActive()
		return nil
	case xxxdemo.FieldCode:
		m.ResetCode()
		return nil
	case xxxdemo.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown XxxDemo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *XxxDemoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *XxxDemoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *XxxDemoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *XxxDemoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *XxxDemoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *XxxDemoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *XxxDemoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown XxxDemo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *XxxDemoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown XxxDemo edge %s", name)
}
