// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/syslogging"
)

// SysLoggingCreate is the builder for creating a SysLogging entity.
type SysLoggingCreate struct {
	config
	mutation *SysLoggingMutation
	hooks    []Hook
}

// SetIsDel sets the "is_del" field.
func (slc *SysLoggingCreate) SetIsDel(b bool) *SysLoggingCreate {
	slc.mutation.SetIsDel(b)
	return slc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableIsDel(b *bool) *SysLoggingCreate {
	if b != nil {
		slc.SetIsDel(*b)
	}
	return slc
}

// SetMemo sets the "memo" field.
func (slc *SysLoggingCreate) SetMemo(s string) *SysLoggingCreate {
	slc.mutation.SetMemo(s)
	return slc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableMemo(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetMemo(*s)
	}
	return slc
}

// SetLevel sets the "level" field.
func (slc *SysLoggingCreate) SetLevel(s string) *SysLoggingCreate {
	slc.mutation.SetLevel(s)
	return slc
}

// SetTraceID sets the "trace_id" field.
func (slc *SysLoggingCreate) SetTraceID(s string) *SysLoggingCreate {
	slc.mutation.SetTraceID(s)
	return slc
}

// SetUserID sets the "user_id" field.
func (slc *SysLoggingCreate) SetUserID(s string) *SysLoggingCreate {
	slc.mutation.SetUserID(s)
	return slc
}

// SetTag sets the "tag" field.
func (slc *SysLoggingCreate) SetTag(s string) *SysLoggingCreate {
	slc.mutation.SetTag(s)
	return slc
}

// SetVersion sets the "version" field.
func (slc *SysLoggingCreate) SetVersion(s string) *SysLoggingCreate {
	slc.mutation.SetVersion(s)
	return slc
}

// SetMessage sets the "message" field.
func (slc *SysLoggingCreate) SetMessage(s string) *SysLoggingCreate {
	slc.mutation.SetMessage(s)
	return slc
}

// SetData sets the "data" field.
func (slc *SysLoggingCreate) SetData(s string) *SysLoggingCreate {
	slc.mutation.SetData(s)
	return slc
}

// SetNillableData sets the "data" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableData(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetData(*s)
	}
	return slc
}

// SetErrorStack sets the "error_stack" field.
func (slc *SysLoggingCreate) SetErrorStack(s string) *SysLoggingCreate {
	slc.mutation.SetErrorStack(s)
	return slc
}

// SetCreatedAt sets the "created_at" field.
func (slc *SysLoggingCreate) SetCreatedAt(t time.Time) *SysLoggingCreate {
	slc.mutation.SetCreatedAt(t)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableCreatedAt(t *time.Time) *SysLoggingCreate {
	if t != nil {
		slc.SetCreatedAt(*t)
	}
	return slc
}

// SetID sets the "id" field.
func (slc *SysLoggingCreate) SetID(s string) *SysLoggingCreate {
	slc.mutation.SetID(s)
	return slc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableID(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetID(*s)
	}
	return slc
}

// Mutation returns the SysLoggingMutation object of the builder.
func (slc *SysLoggingCreate) Mutation() *SysLoggingMutation {
	return slc.mutation
}

// Save creates the SysLogging in the database.
func (slc *SysLoggingCreate) Save(ctx context.Context) (*SysLogging, error) {
	var (
		err  error
		node *SysLogging
	)
	slc.defaults()
	if len(slc.hooks) == 0 {
		if err = slc.check(); err != nil {
			return nil, err
		}
		node, err = slc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysLoggingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = slc.check(); err != nil {
				return nil, err
			}
			slc.mutation = mutation
			node, err = slc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(slc.hooks) - 1; i >= 0; i-- {
			mut = slc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, slc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (slc *SysLoggingCreate) SaveX(ctx context.Context) *SysLogging {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (slc *SysLoggingCreate) defaults() {
	if _, ok := slc.mutation.IsDel(); !ok {
		v := syslogging.DefaultIsDel
		slc.mutation.SetIsDel(v)
	}
	if _, ok := slc.mutation.Memo(); !ok {
		v := syslogging.DefaultMemo
		slc.mutation.SetMemo(v)
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		v := syslogging.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
	if _, ok := slc.mutation.ID(); !ok {
		v := syslogging.DefaultID()
		slc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *SysLoggingCreate) check() error {
	if _, ok := slc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New("ent: missing required field \"is_del\"")}
	}
	if _, ok := slc.mutation.Memo(); !ok {
		return &ValidationError{Name: "memo", err: errors.New("ent: missing required field \"memo\"")}
	}
	if v, ok := slc.mutation.Memo(); ok {
		if err := syslogging.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf("ent: validator failed for field \"memo\": %w", err)}
		}
	}
	if _, ok := slc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New("ent: missing required field \"level\"")}
	}
	if v, ok := slc.mutation.Level(); ok {
		if err := syslogging.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf("ent: validator failed for field \"level\": %w", err)}
		}
	}
	if _, ok := slc.mutation.TraceID(); !ok {
		return &ValidationError{Name: "trace_id", err: errors.New("ent: missing required field \"trace_id\"")}
	}
	if v, ok := slc.mutation.TraceID(); ok {
		if err := syslogging.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf("ent: validator failed for field \"trace_id\": %w", err)}
		}
	}
	if _, ok := slc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if v, ok := slc.mutation.UserID(); ok {
		if err := syslogging.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf("ent: validator failed for field \"user_id\": %w", err)}
		}
	}
	if _, ok := slc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New("ent: missing required field \"tag\"")}
	}
	if v, ok := slc.mutation.Tag(); ok {
		if err := syslogging.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf("ent: validator failed for field \"tag\": %w", err)}
		}
	}
	if _, ok := slc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New("ent: missing required field \"version\"")}
	}
	if v, ok := slc.mutation.Version(); ok {
		if err := syslogging.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf("ent: validator failed for field \"version\": %w", err)}
		}
	}
	if _, ok := slc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New("ent: missing required field \"message\"")}
	}
	if _, ok := slc.mutation.ErrorStack(); !ok {
		return &ValidationError{Name: "error_stack", err: errors.New("ent: missing required field \"error_stack\"")}
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if v, ok := slc.mutation.ID(); ok {
		if err := syslogging.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (slc *SysLoggingCreate) sqlSave(ctx context.Context) (*SysLogging, error) {
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (slc *SysLoggingCreate) createSpec() (*SysLogging, *sqlgraph.CreateSpec) {
	var (
		_node = &SysLogging{config: slc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: syslogging.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: syslogging.FieldID,
			},
		}
	)
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := slc.mutation.IsDel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: syslogging.FieldIsDel,
		})
		_node.IsDel = value
	}
	if value, ok := slc.mutation.Memo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldMemo,
		})
		_node.Memo = value
	}
	if value, ok := slc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldLevel,
		})
		_node.Level = value
	}
	if value, ok := slc.mutation.TraceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldTraceID,
		})
		_node.TraceID = value
	}
	if value, ok := slc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := slc.mutation.Tag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldTag,
		})
		_node.Tag = value
	}
	if value, ok := slc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := slc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := slc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldData,
		})
		_node.Data = &value
	}
	if value, ok := slc.mutation.ErrorStack(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: syslogging.FieldErrorStack,
		})
		_node.ErrorStack = value
	}
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: syslogging.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// SysLoggingCreateBulk is the builder for creating many SysLogging entities in bulk.
type SysLoggingCreateBulk struct {
	config
	builders []*SysLoggingCreate
}

// Save creates the SysLogging entities in the database.
func (slcb *SysLoggingCreateBulk) Save(ctx context.Context) ([]*SysLogging, error) {
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*SysLogging, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysLoggingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *SysLoggingCreateBulk) SaveX(ctx context.Context) []*SysLogging {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
