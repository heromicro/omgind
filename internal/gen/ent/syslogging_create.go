// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/syslogging"
)

// SysLoggingCreate is the builder for creating a SysLogging entity.
type SysLoggingCreate struct {
	config
	mutation *SysLoggingMutation
	hooks    []Hook
}

// SetIsDel sets the "is_del" field.
func (slc *SysLoggingCreate) SetIsDel(b bool) *SysLoggingCreate {
	slc.mutation.SetIsDel(b)
	return slc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableIsDel(b *bool) *SysLoggingCreate {
	if b != nil {
		slc.SetIsDel(*b)
	}
	return slc
}

// SetMemo sets the "memo" field.
func (slc *SysLoggingCreate) SetMemo(s string) *SysLoggingCreate {
	slc.mutation.SetMemo(s)
	return slc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableMemo(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetMemo(*s)
	}
	return slc
}

// SetLevel sets the "level" field.
func (slc *SysLoggingCreate) SetLevel(s string) *SysLoggingCreate {
	slc.mutation.SetLevel(s)
	return slc
}

// SetTraceID sets the "trace_id" field.
func (slc *SysLoggingCreate) SetTraceID(s string) *SysLoggingCreate {
	slc.mutation.SetTraceID(s)
	return slc
}

// SetNillableTraceID sets the "trace_id" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableTraceID(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetTraceID(*s)
	}
	return slc
}

// SetUserID sets the "user_id" field.
func (slc *SysLoggingCreate) SetUserID(s string) *SysLoggingCreate {
	slc.mutation.SetUserID(s)
	return slc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableUserID(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetUserID(*s)
	}
	return slc
}

// SetTag sets the "tag" field.
func (slc *SysLoggingCreate) SetTag(s string) *SysLoggingCreate {
	slc.mutation.SetTag(s)
	return slc
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableTag(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetTag(*s)
	}
	return slc
}

// SetVersion sets the "version" field.
func (slc *SysLoggingCreate) SetVersion(s string) *SysLoggingCreate {
	slc.mutation.SetVersion(s)
	return slc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableVersion(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetVersion(*s)
	}
	return slc
}

// SetMessage sets the "message" field.
func (slc *SysLoggingCreate) SetMessage(s string) *SysLoggingCreate {
	slc.mutation.SetMessage(s)
	return slc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableMessage(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetMessage(*s)
	}
	return slc
}

// SetData sets the "data" field.
func (slc *SysLoggingCreate) SetData(s string) *SysLoggingCreate {
	slc.mutation.SetData(s)
	return slc
}

// SetNillableData sets the "data" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableData(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetData(*s)
	}
	return slc
}

// SetErrorStack sets the "error_stack" field.
func (slc *SysLoggingCreate) SetErrorStack(s string) *SysLoggingCreate {
	slc.mutation.SetErrorStack(s)
	return slc
}

// SetNillableErrorStack sets the "error_stack" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableErrorStack(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetErrorStack(*s)
	}
	return slc
}

// SetCreatedAt sets the "created_at" field.
func (slc *SysLoggingCreate) SetCreatedAt(t time.Time) *SysLoggingCreate {
	slc.mutation.SetCreatedAt(t)
	return slc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableCreatedAt(t *time.Time) *SysLoggingCreate {
	if t != nil {
		slc.SetCreatedAt(*t)
	}
	return slc
}

// SetID sets the "id" field.
func (slc *SysLoggingCreate) SetID(s string) *SysLoggingCreate {
	slc.mutation.SetID(s)
	return slc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (slc *SysLoggingCreate) SetNillableID(s *string) *SysLoggingCreate {
	if s != nil {
		slc.SetID(*s)
	}
	return slc
}

// Mutation returns the SysLoggingMutation object of the builder.
func (slc *SysLoggingCreate) Mutation() *SysLoggingMutation {
	return slc.mutation
}

// Save creates the SysLogging in the database.
func (slc *SysLoggingCreate) Save(ctx context.Context) (*SysLogging, error) {
	slc.defaults()
	return withHooks[*SysLogging, SysLoggingMutation](ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *SysLoggingCreate) SaveX(ctx context.Context) *SysLogging {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *SysLoggingCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *SysLoggingCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *SysLoggingCreate) defaults() {
	if _, ok := slc.mutation.IsDel(); !ok {
		v := syslogging.DefaultIsDel
		slc.mutation.SetIsDel(v)
	}
	if _, ok := slc.mutation.Memo(); !ok {
		v := syslogging.DefaultMemo
		slc.mutation.SetMemo(v)
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		v := syslogging.DefaultCreatedAt()
		slc.mutation.SetCreatedAt(v)
	}
	if _, ok := slc.mutation.ID(); !ok {
		v := syslogging.DefaultID()
		slc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *SysLoggingCreate) check() error {
	if _, ok := slc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "SysLogging.is_del"`)}
	}
	if v, ok := slc.mutation.Memo(); ok {
		if err := syslogging.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysLogging.memo": %w`, err)}
		}
	}
	if _, ok := slc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "SysLogging.level"`)}
	}
	if v, ok := slc.mutation.Level(); ok {
		if err := syslogging.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SysLogging.level": %w`, err)}
		}
	}
	if v, ok := slc.mutation.TraceID(); ok {
		if err := syslogging.TraceIDValidator(v); err != nil {
			return &ValidationError{Name: "trace_id", err: fmt.Errorf(`ent: validator failed for field "SysLogging.trace_id": %w`, err)}
		}
	}
	if v, ok := slc.mutation.UserID(); ok {
		if err := syslogging.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "SysLogging.user_id": %w`, err)}
		}
	}
	if v, ok := slc.mutation.Tag(); ok {
		if err := syslogging.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`ent: validator failed for field "SysLogging.tag": %w`, err)}
		}
	}
	if v, ok := slc.mutation.Version(); ok {
		if err := syslogging.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "SysLogging.version": %w`, err)}
		}
	}
	if v, ok := slc.mutation.Message(); ok {
		if err := syslogging.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "SysLogging.message": %w`, err)}
		}
	}
	if _, ok := slc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysLogging.created_at"`)}
	}
	if v, ok := slc.mutation.ID(); ok {
		if err := syslogging.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SysLogging.id": %w`, err)}
		}
	}
	return nil
}

func (slc *SysLoggingCreate) sqlSave(ctx context.Context) (*SysLogging, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysLogging.ID type: %T", _spec.ID.Value)
		}
	}
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *SysLoggingCreate) createSpec() (*SysLogging, *sqlgraph.CreateSpec) {
	var (
		_node = &SysLogging{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(syslogging.Table, sqlgraph.NewFieldSpec(syslogging.FieldID, field.TypeString))
	)
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := slc.mutation.IsDel(); ok {
		_spec.SetField(syslogging.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := slc.mutation.Memo(); ok {
		_spec.SetField(syslogging.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := slc.mutation.Level(); ok {
		_spec.SetField(syslogging.FieldLevel, field.TypeString, value)
		_node.Level = value
	}
	if value, ok := slc.mutation.TraceID(); ok {
		_spec.SetField(syslogging.FieldTraceID, field.TypeString, value)
		_node.TraceID = &value
	}
	if value, ok := slc.mutation.UserID(); ok {
		_spec.SetField(syslogging.FieldUserID, field.TypeString, value)
		_node.UserID = &value
	}
	if value, ok := slc.mutation.Tag(); ok {
		_spec.SetField(syslogging.FieldTag, field.TypeString, value)
		_node.Tag = &value
	}
	if value, ok := slc.mutation.Version(); ok {
		_spec.SetField(syslogging.FieldVersion, field.TypeString, value)
		_node.Version = &value
	}
	if value, ok := slc.mutation.Message(); ok {
		_spec.SetField(syslogging.FieldMessage, field.TypeString, value)
		_node.Message = &value
	}
	if value, ok := slc.mutation.Data(); ok {
		_spec.SetField(syslogging.FieldData, field.TypeString, value)
		_node.Data = &value
	}
	if value, ok := slc.mutation.ErrorStack(); ok {
		_spec.SetField(syslogging.FieldErrorStack, field.TypeString, value)
		_node.ErrorStack = &value
	}
	if value, ok := slc.mutation.CreatedAt(); ok {
		_spec.SetField(syslogging.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// SysLoggingCreateBulk is the builder for creating many SysLogging entities in bulk.
type SysLoggingCreateBulk struct {
	config
	builders []*SysLoggingCreate
}

// Save creates the SysLogging entities in the database.
func (slcb *SysLoggingCreateBulk) Save(ctx context.Context) ([]*SysLogging, error) {
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*SysLogging, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysLoggingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *SysLoggingCreateBulk) SaveX(ctx context.Context) []*SysLogging {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *SysLoggingCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *SysLoggingCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}
