// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/sysdistrict"
)

// SysDistrict is the model entity for the SysDistrict schema.
type SysDistrict struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// sort
	Sort int32 `json:"sort,omitempty" sql:"sort"`
	// create time
	CreatedAt time.Time `json:"created_at,omitempty"`
	// update time
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// delete time,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 是否活跃
	IsActive bool `json:"is_active,omitempty"`
	// tree id
	TreeID *int64 `json:"tree_id"`
	// level in tree, toppest level is 1
	TreeLevel *int32 `json:"level"`
	// mptt's left
	TreeLeft *int64 `json:"tree_left"`
	// mptt's right
	TreeRight *int64 `json:"tree_right"`
	// is leaf node
	IsLeaf *bool `json:"isLeaf"`
	// tree path,topest is null or zero length string, subber has fathers ids join by slash(/), eg: pid1/pid2
	TreePath *string `json:"tree_path"`
	// 名称
	Name *string `json:"name,omitempty"`
	// 短名称
	Sname *string `json:"sname,omitempty"`
	// 简称Abbreviation
	Abbr *string `json:"abbr,omitempty"`
	// 统计局区域编码
	StCode *string `json:"st_code,omitempty"`
	// 简拼
	Initials *string `json:"initials,omitempty"`
	// 简拼
	Pinyin *string `json:"pinyin,omitempty"`
	// 父级id
	ParentID *string `json:"parent_id,omitempty"`
	// 经度
	Longitude *float64 `json:"longitude,omitempty"`
	// 经度
	Latitude *float64 `json:"latitude,omitempty"`
	// 电话区号码
	AreaCode *string `json:"area_code,omitempty"`
	// 邮政编码
	ZipCode *string `json:"zip_code,omitempty"`
	// 带前缀全名称
	MergeName *string `json:"merge_name,omitempty"`
	// 带前缀简名称
	MergeSname *string `json:"merge_sname,omitempty"`
	// 附加信息
	Extra *string `json:"extra,omitempty"`
	// 后缀, 如 省, 自治区, 旗, 盟
	Suffix *string `json:"suffix,omitempty"`
	// 热门城市
	IsHot *bool `json:"is_hot,omitempty"`
	// 是否虚拟区域
	IsReal *bool `json:"is_real,omitempty"`
	// 是否虚拟区域
	IsMain *bool `json:"is_main,omitempty"`
	// 是否是直辖
	IsDirect *bool `json:"is_direct,omitempty"`
	// 创建者
	Creator string `json:"creator,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysDistrictQuery when eager-loading is set.
	Edges SysDistrictEdges `json:"edges"`
}

// SysDistrictEdges holds the relations/edges for other nodes in the graph.
type SysDistrictEdges struct {
	// Parent holds the value of the parent edge.
	Parent *SysDistrict `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*SysDistrict `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysDistrictEdges) ParentOrErr() (*SysDistrict, error) {
	if e.loadedTypes[0] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sysdistrict.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e SysDistrictEdges) ChildrenOrErr() ([]*SysDistrict, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysDistrict) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysdistrict.FieldIsActive, sysdistrict.FieldIsLeaf, sysdistrict.FieldIsHot, sysdistrict.FieldIsReal, sysdistrict.FieldIsMain, sysdistrict.FieldIsDirect:
			values[i] = new(sql.NullBool)
		case sysdistrict.FieldLongitude, sysdistrict.FieldLatitude:
			values[i] = new(sql.NullFloat64)
		case sysdistrict.FieldSort, sysdistrict.FieldTreeID, sysdistrict.FieldTreeLevel, sysdistrict.FieldTreeLeft, sysdistrict.FieldTreeRight:
			values[i] = new(sql.NullInt64)
		case sysdistrict.FieldID, sysdistrict.FieldTreePath, sysdistrict.FieldName, sysdistrict.FieldSname, sysdistrict.FieldAbbr, sysdistrict.FieldStCode, sysdistrict.FieldInitials, sysdistrict.FieldPinyin, sysdistrict.FieldParentID, sysdistrict.FieldAreaCode, sysdistrict.FieldZipCode, sysdistrict.FieldMergeName, sysdistrict.FieldMergeSname, sysdistrict.FieldExtra, sysdistrict.FieldSuffix, sysdistrict.FieldCreator:
			values[i] = new(sql.NullString)
		case sysdistrict.FieldCreatedAt, sysdistrict.FieldUpdatedAt, sysdistrict.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysDistrict", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysDistrict fields.
func (sd *SysDistrict) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysdistrict.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sd.ID = value.String
			}
		case sysdistrict.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sd.Sort = int32(value.Int64)
			}
		case sysdistrict.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sd.CreatedAt = value.Time
			}
		case sysdistrict.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sd.UpdatedAt = value.Time
			}
		case sysdistrict.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sd.DeletedAt = new(time.Time)
				*sd.DeletedAt = value.Time
			}
		case sysdistrict.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				sd.IsActive = value.Bool
			}
		case sysdistrict.FieldTreeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tree_id", values[i])
			} else if value.Valid {
				sd.TreeID = new(int64)
				*sd.TreeID = value.Int64
			}
		case sysdistrict.FieldTreeLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tree_level", values[i])
			} else if value.Valid {
				sd.TreeLevel = new(int32)
				*sd.TreeLevel = int32(value.Int64)
			}
		case sysdistrict.FieldTreeLeft:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tree_left", values[i])
			} else if value.Valid {
				sd.TreeLeft = new(int64)
				*sd.TreeLeft = value.Int64
			}
		case sysdistrict.FieldTreeRight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tree_right", values[i])
			} else if value.Valid {
				sd.TreeRight = new(int64)
				*sd.TreeRight = value.Int64
			}
		case sysdistrict.FieldIsLeaf:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_leaf", values[i])
			} else if value.Valid {
				sd.IsLeaf = new(bool)
				*sd.IsLeaf = value.Bool
			}
		case sysdistrict.FieldTreePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tree_path", values[i])
			} else if value.Valid {
				sd.TreePath = new(string)
				*sd.TreePath = value.String
			}
		case sysdistrict.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sd.Name = new(string)
				*sd.Name = value.String
			}
		case sysdistrict.FieldSname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sname", values[i])
			} else if value.Valid {
				sd.Sname = new(string)
				*sd.Sname = value.String
			}
		case sysdistrict.FieldAbbr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field abbr", values[i])
			} else if value.Valid {
				sd.Abbr = new(string)
				*sd.Abbr = value.String
			}
		case sysdistrict.FieldStCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field st_code", values[i])
			} else if value.Valid {
				sd.StCode = new(string)
				*sd.StCode = value.String
			}
		case sysdistrict.FieldInitials:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field initials", values[i])
			} else if value.Valid {
				sd.Initials = new(string)
				*sd.Initials = value.String
			}
		case sysdistrict.FieldPinyin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pinyin", values[i])
			} else if value.Valid {
				sd.Pinyin = new(string)
				*sd.Pinyin = value.String
			}
		case sysdistrict.FieldParentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				sd.ParentID = new(string)
				*sd.ParentID = value.String
			}
		case sysdistrict.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				sd.Longitude = new(float64)
				*sd.Longitude = value.Float64
			}
		case sysdistrict.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				sd.Latitude = new(float64)
				*sd.Latitude = value.Float64
			}
		case sysdistrict.FieldAreaCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area_code", values[i])
			} else if value.Valid {
				sd.AreaCode = new(string)
				*sd.AreaCode = value.String
			}
		case sysdistrict.FieldZipCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zip_code", values[i])
			} else if value.Valid {
				sd.ZipCode = new(string)
				*sd.ZipCode = value.String
			}
		case sysdistrict.FieldMergeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merge_name", values[i])
			} else if value.Valid {
				sd.MergeName = new(string)
				*sd.MergeName = value.String
			}
		case sysdistrict.FieldMergeSname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merge_sname", values[i])
			} else if value.Valid {
				sd.MergeSname = new(string)
				*sd.MergeSname = value.String
			}
		case sysdistrict.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				sd.Extra = new(string)
				*sd.Extra = value.String
			}
		case sysdistrict.FieldSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[i])
			} else if value.Valid {
				sd.Suffix = new(string)
				*sd.Suffix = value.String
			}
		case sysdistrict.FieldIsHot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_hot", values[i])
			} else if value.Valid {
				sd.IsHot = new(bool)
				*sd.IsHot = value.Bool
			}
		case sysdistrict.FieldIsReal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_real", values[i])
			} else if value.Valid {
				sd.IsReal = new(bool)
				*sd.IsReal = value.Bool
			}
		case sysdistrict.FieldIsMain:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_main", values[i])
			} else if value.Valid {
				sd.IsMain = new(bool)
				*sd.IsMain = value.Bool
			}
		case sysdistrict.FieldIsDirect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_direct", values[i])
			} else if value.Valid {
				sd.IsDirect = new(bool)
				*sd.IsDirect = value.Bool
			}
		case sysdistrict.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				sd.Creator = value.String
			}
		}
	}
	return nil
}

// QueryParent queries the "parent" edge of the SysDistrict entity.
func (sd *SysDistrict) QueryParent() *SysDistrictQuery {
	return NewSysDistrictClient(sd.config).QueryParent(sd)
}

// QueryChildren queries the "children" edge of the SysDistrict entity.
func (sd *SysDistrict) QueryChildren() *SysDistrictQuery {
	return NewSysDistrictClient(sd.config).QueryChildren(sd)
}

// Update returns a builder for updating this SysDistrict.
// Note that you need to call SysDistrict.Unwrap() before calling this method if this SysDistrict
// was returned from a transaction, and the transaction was committed or rolled back.
func (sd *SysDistrict) Update() *SysDistrictUpdateOne {
	return NewSysDistrictClient(sd.config).UpdateOne(sd)
}

// Unwrap unwraps the SysDistrict entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sd *SysDistrict) Unwrap() *SysDistrict {
	_tx, ok := sd.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysDistrict is not a transactional entity")
	}
	sd.config.driver = _tx.drv
	return sd
}

// String implements the fmt.Stringer.
func (sd *SysDistrict) String() string {
	var builder strings.Builder
	builder.WriteString("SysDistrict(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sd.ID))
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", sd.Sort))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sd.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", sd.IsActive))
	builder.WriteString(", ")
	if v := sd.TreeID; v != nil {
		builder.WriteString("tree_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.TreeLevel; v != nil {
		builder.WriteString("tree_level=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.TreeLeft; v != nil {
		builder.WriteString("tree_left=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.TreeRight; v != nil {
		builder.WriteString("tree_right=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.IsLeaf; v != nil {
		builder.WriteString("is_leaf=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.TreePath; v != nil {
		builder.WriteString("tree_path=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Sname; v != nil {
		builder.WriteString("sname=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Abbr; v != nil {
		builder.WriteString("abbr=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.StCode; v != nil {
		builder.WriteString("st_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Initials; v != nil {
		builder.WriteString("initials=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Pinyin; v != nil {
		builder.WriteString("pinyin=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Longitude; v != nil {
		builder.WriteString("longitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.Latitude; v != nil {
		builder.WriteString("latitude=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.AreaCode; v != nil {
		builder.WriteString("area_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.ZipCode; v != nil {
		builder.WriteString("zip_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.MergeName; v != nil {
		builder.WriteString("merge_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.MergeSname; v != nil {
		builder.WriteString("merge_sname=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Extra; v != nil {
		builder.WriteString("extra=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.Suffix; v != nil {
		builder.WriteString("suffix=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sd.IsHot; v != nil {
		builder.WriteString("is_hot=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.IsReal; v != nil {
		builder.WriteString("is_real=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.IsMain; v != nil {
		builder.WriteString("is_main=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sd.IsDirect; v != nil {
		builder.WriteString("is_direct=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(sd.Creator)
	builder.WriteByte(')')
	return builder.String()
}

// SysDistricts is a parsable slice of SysDistrict.
type SysDistricts []*SysDistrict
