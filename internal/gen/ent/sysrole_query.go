// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysrole"
)

// SysRoleQuery is the builder for querying SysRole entities.
type SysRoleQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.SysRole
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysRoleQuery builder.
func (srq *SysRoleQuery) Where(ps ...predicate.SysRole) *SysRoleQuery {
	srq.predicates = append(srq.predicates, ps...)
	return srq
}

// Limit the number of records to be returned by this query.
func (srq *SysRoleQuery) Limit(limit int) *SysRoleQuery {
	srq.ctx.Limit = &limit
	return srq
}

// Offset to start from.
func (srq *SysRoleQuery) Offset(offset int) *SysRoleQuery {
	srq.ctx.Offset = &offset
	return srq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (srq *SysRoleQuery) Unique(unique bool) *SysRoleQuery {
	srq.ctx.Unique = &unique
	return srq
}

// Order specifies how the records should be ordered.
func (srq *SysRoleQuery) Order(o ...OrderFunc) *SysRoleQuery {
	srq.order = append(srq.order, o...)
	return srq
}

// First returns the first SysRole entity from the query.
// Returns a *NotFoundError when no SysRole was found.
func (srq *SysRoleQuery) First(ctx context.Context) (*SysRole, error) {
	nodes, err := srq.Limit(1).All(setContextOp(ctx, srq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysrole.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (srq *SysRoleQuery) FirstX(ctx context.Context) *SysRole {
	node, err := srq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysRole ID from the query.
// Returns a *NotFoundError when no SysRole ID was found.
func (srq *SysRoleQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = srq.Limit(1).IDs(setContextOp(ctx, srq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysrole.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (srq *SysRoleQuery) FirstIDX(ctx context.Context) string {
	id, err := srq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SysRole entity is found.
// Returns a *NotFoundError when no SysRole entities are found.
func (srq *SysRoleQuery) Only(ctx context.Context) (*SysRole, error) {
	nodes, err := srq.Limit(2).All(setContextOp(ctx, srq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysrole.Label}
	default:
		return nil, &NotSingularError{sysrole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (srq *SysRoleQuery) OnlyX(ctx context.Context) *SysRole {
	node, err := srq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysRole ID in the query.
// Returns a *NotSingularError when more than one SysRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (srq *SysRoleQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = srq.Limit(2).IDs(setContextOp(ctx, srq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysrole.Label}
	default:
		err = &NotSingularError{sysrole.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (srq *SysRoleQuery) OnlyIDX(ctx context.Context) string {
	id, err := srq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysRoles.
func (srq *SysRoleQuery) All(ctx context.Context) ([]*SysRole, error) {
	ctx = setContextOp(ctx, srq.ctx, "All")
	if err := srq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SysRole, *SysRoleQuery]()
	return withInterceptors[[]*SysRole](ctx, srq, qr, srq.inters)
}

// AllX is like All, but panics if an error occurs.
func (srq *SysRoleQuery) AllX(ctx context.Context) []*SysRole {
	nodes, err := srq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysRole IDs.
func (srq *SysRoleQuery) IDs(ctx context.Context) (ids []string, err error) {
	if srq.ctx.Unique == nil && srq.path != nil {
		srq.Unique(true)
	}
	ctx = setContextOp(ctx, srq.ctx, "IDs")
	if err = srq.Select(sysrole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (srq *SysRoleQuery) IDsX(ctx context.Context) []string {
	ids, err := srq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (srq *SysRoleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, srq.ctx, "Count")
	if err := srq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, srq, querierCount[*SysRoleQuery](), srq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (srq *SysRoleQuery) CountX(ctx context.Context) int {
	count, err := srq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (srq *SysRoleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, srq.ctx, "Exist")
	switch _, err := srq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (srq *SysRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := srq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (srq *SysRoleQuery) Clone() *SysRoleQuery {
	if srq == nil {
		return nil
	}
	return &SysRoleQuery{
		config:     srq.config,
		ctx:        srq.ctx.Clone(),
		order:      append([]OrderFunc{}, srq.order...),
		inters:     append([]Interceptor{}, srq.inters...),
		predicates: append([]predicate.SysRole{}, srq.predicates...),
		// clone intermediate query.
		sql:  srq.sql.Clone(),
		path: srq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IsDel bool `json:"is_del,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysRole.Query().
//		GroupBy(sysrole.FieldIsDel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (srq *SysRoleQuery) GroupBy(field string, fields ...string) *SysRoleGroupBy {
	srq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SysRoleGroupBy{build: srq}
	grbuild.flds = &srq.ctx.Fields
	grbuild.label = sysrole.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IsDel bool `json:"is_del,omitempty"`
//	}
//
//	client.SysRole.Query().
//		Select(sysrole.FieldIsDel).
//		Scan(ctx, &v)
func (srq *SysRoleQuery) Select(fields ...string) *SysRoleSelect {
	srq.ctx.Fields = append(srq.ctx.Fields, fields...)
	sbuild := &SysRoleSelect{SysRoleQuery: srq}
	sbuild.label = sysrole.Label
	sbuild.flds, sbuild.scan = &srq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SysRoleSelect configured with the given aggregations.
func (srq *SysRoleQuery) Aggregate(fns ...AggregateFunc) *SysRoleSelect {
	return srq.Select().Aggregate(fns...)
}

func (srq *SysRoleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range srq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, srq); err != nil {
				return err
			}
		}
	}
	for _, f := range srq.ctx.Fields {
		if !sysrole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if srq.path != nil {
		prev, err := srq.path(ctx)
		if err != nil {
			return err
		}
		srq.sql = prev
	}
	return nil
}

func (srq *SysRoleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SysRole, error) {
	var (
		nodes = []*SysRole{}
		_spec = srq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SysRole).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SysRole{config: srq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(srq.modifiers) > 0 {
		_spec.Modifiers = srq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, srq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (srq *SysRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := srq.querySpec()
	if len(srq.modifiers) > 0 {
		_spec.Modifiers = srq.modifiers
	}
	_spec.Node.Columns = srq.ctx.Fields
	if len(srq.ctx.Fields) > 0 {
		_spec.Unique = srq.ctx.Unique != nil && *srq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, srq.driver, _spec)
}

func (srq *SysRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(sysrole.Table, sysrole.Columns, sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeString))
	_spec.From = srq.sql
	if unique := srq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if srq.path != nil {
		_spec.Unique = true
	}
	if fields := srq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysrole.FieldID)
		for i := range fields {
			if fields[i] != sysrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := srq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := srq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := srq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := srq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (srq *SysRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(srq.driver.Dialect())
	t1 := builder.Table(sysrole.Table)
	columns := srq.ctx.Fields
	if len(columns) == 0 {
		columns = sysrole.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if srq.sql != nil {
		selector = srq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if srq.ctx.Unique != nil && *srq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range srq.modifiers {
		m(selector)
	}
	for _, p := range srq.predicates {
		p(selector)
	}
	for _, p := range srq.order {
		p(selector)
	}
	if offset := srq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := srq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (srq *SysRoleQuery) ForUpdate(opts ...sql.LockOption) *SysRoleQuery {
	if srq.driver.Dialect() == dialect.Postgres {
		srq.Unique(false)
	}
	srq.modifiers = append(srq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return srq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (srq *SysRoleQuery) ForShare(opts ...sql.LockOption) *SysRoleQuery {
	if srq.driver.Dialect() == dialect.Postgres {
		srq.Unique(false)
	}
	srq.modifiers = append(srq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return srq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srq *SysRoleQuery) Modify(modifiers ...func(s *sql.Selector)) *SysRoleSelect {
	srq.modifiers = append(srq.modifiers, modifiers...)
	return srq.Select()
}

// SysRoleGroupBy is the group-by builder for SysRole entities.
type SysRoleGroupBy struct {
	selector
	build *SysRoleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (srgb *SysRoleGroupBy) Aggregate(fns ...AggregateFunc) *SysRoleGroupBy {
	srgb.fns = append(srgb.fns, fns...)
	return srgb
}

// Scan applies the selector query and scans the result into the given value.
func (srgb *SysRoleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srgb.build.ctx, "GroupBy")
	if err := srgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysRoleQuery, *SysRoleGroupBy](ctx, srgb.build, srgb, srgb.build.inters, v)
}

func (srgb *SysRoleGroupBy) sqlScan(ctx context.Context, root *SysRoleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(srgb.fns))
	for _, fn := range srgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*srgb.flds)+len(srgb.fns))
		for _, f := range *srgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*srgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SysRoleSelect is the builder for selecting fields of SysRole entities.
type SysRoleSelect struct {
	*SysRoleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (srs *SysRoleSelect) Aggregate(fns ...AggregateFunc) *SysRoleSelect {
	srs.fns = append(srs.fns, fns...)
	return srs
}

// Scan applies the selector query and scans the result into the given value.
func (srs *SysRoleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, srs.ctx, "Select")
	if err := srs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysRoleQuery, *SysRoleSelect](ctx, srs.SysRoleQuery, srs, srs.inters, v)
}

func (srs *SysRoleSelect) sqlScan(ctx context.Context, root *SysRoleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(srs.fns))
	for _, fn := range srs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*srs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := srs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (srs *SysRoleSelect) Modify(modifiers ...func(s *sql.Selector)) *SysRoleSelect {
	srs.modifiers = append(srs.modifiers, modifiers...)
	return srs
}
