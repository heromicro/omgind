// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/sysdistrict"
)

// SysDistrictCreate is the builder for creating a SysDistrict entity.
type SysDistrictCreate struct {
	config
	mutation *SysDistrictMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (sdc *SysDistrictCreate) SetIsDel(b bool) *SysDistrictCreate {
	sdc.mutation.SetIsDel(b)
	return sdc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableIsDel(b *bool) *SysDistrictCreate {
	if b != nil {
		sdc.SetIsDel(*b)
	}
	return sdc
}

// SetSort sets the "sort" field.
func (sdc *SysDistrictCreate) SetSort(i int32) *SysDistrictCreate {
	sdc.mutation.SetSort(i)
	return sdc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableSort(i *int32) *SysDistrictCreate {
	if i != nil {
		sdc.SetSort(*i)
	}
	return sdc
}

// SetCreatedAt sets the "created_at" field.
func (sdc *SysDistrictCreate) SetCreatedAt(t time.Time) *SysDistrictCreate {
	sdc.mutation.SetCreatedAt(t)
	return sdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableCreatedAt(t *time.Time) *SysDistrictCreate {
	if t != nil {
		sdc.SetCreatedAt(*t)
	}
	return sdc
}

// SetUpdatedAt sets the "updated_at" field.
func (sdc *SysDistrictCreate) SetUpdatedAt(t time.Time) *SysDistrictCreate {
	sdc.mutation.SetUpdatedAt(t)
	return sdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableUpdatedAt(t *time.Time) *SysDistrictCreate {
	if t != nil {
		sdc.SetUpdatedAt(*t)
	}
	return sdc
}

// SetDeletedAt sets the "deleted_at" field.
func (sdc *SysDistrictCreate) SetDeletedAt(t time.Time) *SysDistrictCreate {
	sdc.mutation.SetDeletedAt(t)
	return sdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableDeletedAt(t *time.Time) *SysDistrictCreate {
	if t != nil {
		sdc.SetDeletedAt(*t)
	}
	return sdc
}

// SetIsActive sets the "is_active" field.
func (sdc *SysDistrictCreate) SetIsActive(b bool) *SysDistrictCreate {
	sdc.mutation.SetIsActive(b)
	return sdc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableIsActive(b *bool) *SysDistrictCreate {
	if b != nil {
		sdc.SetIsActive(*b)
	}
	return sdc
}

// SetTreeID sets the "tree_id" field.
func (sdc *SysDistrictCreate) SetTreeID(i int64) *SysDistrictCreate {
	sdc.mutation.SetTreeID(i)
	return sdc
}

// SetNillableTreeID sets the "tree_id" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableTreeID(i *int64) *SysDistrictCreate {
	if i != nil {
		sdc.SetTreeID(*i)
	}
	return sdc
}

// SetTreeLevel sets the "tree_level" field.
func (sdc *SysDistrictCreate) SetTreeLevel(i int32) *SysDistrictCreate {
	sdc.mutation.SetTreeLevel(i)
	return sdc
}

// SetNillableTreeLevel sets the "tree_level" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableTreeLevel(i *int32) *SysDistrictCreate {
	if i != nil {
		sdc.SetTreeLevel(*i)
	}
	return sdc
}

// SetTreeLeft sets the "tree_left" field.
func (sdc *SysDistrictCreate) SetTreeLeft(i int64) *SysDistrictCreate {
	sdc.mutation.SetTreeLeft(i)
	return sdc
}

// SetNillableTreeLeft sets the "tree_left" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableTreeLeft(i *int64) *SysDistrictCreate {
	if i != nil {
		sdc.SetTreeLeft(*i)
	}
	return sdc
}

// SetTreeRight sets the "tree_right" field.
func (sdc *SysDistrictCreate) SetTreeRight(i int64) *SysDistrictCreate {
	sdc.mutation.SetTreeRight(i)
	return sdc
}

// SetNillableTreeRight sets the "tree_right" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableTreeRight(i *int64) *SysDistrictCreate {
	if i != nil {
		sdc.SetTreeRight(*i)
	}
	return sdc
}

// SetIsLeaf sets the "is_leaf" field.
func (sdc *SysDistrictCreate) SetIsLeaf(b bool) *SysDistrictCreate {
	sdc.mutation.SetIsLeaf(b)
	return sdc
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableIsLeaf(b *bool) *SysDistrictCreate {
	if b != nil {
		sdc.SetIsLeaf(*b)
	}
	return sdc
}

// SetTreePath sets the "tree_path" field.
func (sdc *SysDistrictCreate) SetTreePath(s string) *SysDistrictCreate {
	sdc.mutation.SetTreePath(s)
	return sdc
}

// SetNillableTreePath sets the "tree_path" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableTreePath(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetTreePath(*s)
	}
	return sdc
}

// SetName sets the "name" field.
func (sdc *SysDistrictCreate) SetName(s string) *SysDistrictCreate {
	sdc.mutation.SetName(s)
	return sdc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableName(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetName(*s)
	}
	return sdc
}

// SetNameEn sets the "name_en" field.
func (sdc *SysDistrictCreate) SetNameEn(s string) *SysDistrictCreate {
	sdc.mutation.SetNameEn(s)
	return sdc
}

// SetNillableNameEn sets the "name_en" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableNameEn(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetNameEn(*s)
	}
	return sdc
}

// SetSname sets the "sname" field.
func (sdc *SysDistrictCreate) SetSname(s string) *SysDistrictCreate {
	sdc.mutation.SetSname(s)
	return sdc
}

// SetNillableSname sets the "sname" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableSname(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetSname(*s)
	}
	return sdc
}

// SetSnameEn sets the "sname_en" field.
func (sdc *SysDistrictCreate) SetSnameEn(s string) *SysDistrictCreate {
	sdc.mutation.SetSnameEn(s)
	return sdc
}

// SetNillableSnameEn sets the "sname_en" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableSnameEn(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetSnameEn(*s)
	}
	return sdc
}

// SetAbbr sets the "abbr" field.
func (sdc *SysDistrictCreate) SetAbbr(s string) *SysDistrictCreate {
	sdc.mutation.SetAbbr(s)
	return sdc
}

// SetNillableAbbr sets the "abbr" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableAbbr(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetAbbr(*s)
	}
	return sdc
}

// SetStCode sets the "st_code" field.
func (sdc *SysDistrictCreate) SetStCode(s string) *SysDistrictCreate {
	sdc.mutation.SetStCode(s)
	return sdc
}

// SetNillableStCode sets the "st_code" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableStCode(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetStCode(*s)
	}
	return sdc
}

// SetInitials sets the "initials" field.
func (sdc *SysDistrictCreate) SetInitials(s string) *SysDistrictCreate {
	sdc.mutation.SetInitials(s)
	return sdc
}

// SetNillableInitials sets the "initials" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableInitials(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetInitials(*s)
	}
	return sdc
}

// SetPinyin sets the "pinyin" field.
func (sdc *SysDistrictCreate) SetPinyin(s string) *SysDistrictCreate {
	sdc.mutation.SetPinyin(s)
	return sdc
}

// SetNillablePinyin sets the "pinyin" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillablePinyin(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetPinyin(*s)
	}
	return sdc
}

// SetParentID sets the "parent_id" field.
func (sdc *SysDistrictCreate) SetParentID(s string) *SysDistrictCreate {
	sdc.mutation.SetParentID(s)
	return sdc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableParentID(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetParentID(*s)
	}
	return sdc
}

// SetLongitude sets the "longitude" field.
func (sdc *SysDistrictCreate) SetLongitude(f float64) *SysDistrictCreate {
	sdc.mutation.SetLongitude(f)
	return sdc
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableLongitude(f *float64) *SysDistrictCreate {
	if f != nil {
		sdc.SetLongitude(*f)
	}
	return sdc
}

// SetLatitude sets the "latitude" field.
func (sdc *SysDistrictCreate) SetLatitude(f float64) *SysDistrictCreate {
	sdc.mutation.SetLatitude(f)
	return sdc
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableLatitude(f *float64) *SysDistrictCreate {
	if f != nil {
		sdc.SetLatitude(*f)
	}
	return sdc
}

// SetAreaCode sets the "area_code" field.
func (sdc *SysDistrictCreate) SetAreaCode(s string) *SysDistrictCreate {
	sdc.mutation.SetAreaCode(s)
	return sdc
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableAreaCode(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetAreaCode(*s)
	}
	return sdc
}

// SetZipCode sets the "zip_code" field.
func (sdc *SysDistrictCreate) SetZipCode(s string) *SysDistrictCreate {
	sdc.mutation.SetZipCode(s)
	return sdc
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableZipCode(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetZipCode(*s)
	}
	return sdc
}

// SetMergeName sets the "merge_name" field.
func (sdc *SysDistrictCreate) SetMergeName(s string) *SysDistrictCreate {
	sdc.mutation.SetMergeName(s)
	return sdc
}

// SetNillableMergeName sets the "merge_name" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableMergeName(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetMergeName(*s)
	}
	return sdc
}

// SetMergeSname sets the "merge_sname" field.
func (sdc *SysDistrictCreate) SetMergeSname(s string) *SysDistrictCreate {
	sdc.mutation.SetMergeSname(s)
	return sdc
}

// SetNillableMergeSname sets the "merge_sname" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableMergeSname(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetMergeSname(*s)
	}
	return sdc
}

// SetExtra sets the "extra" field.
func (sdc *SysDistrictCreate) SetExtra(s string) *SysDistrictCreate {
	sdc.mutation.SetExtra(s)
	return sdc
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableExtra(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetExtra(*s)
	}
	return sdc
}

// SetSuffix sets the "suffix" field.
func (sdc *SysDistrictCreate) SetSuffix(s string) *SysDistrictCreate {
	sdc.mutation.SetSuffix(s)
	return sdc
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableSuffix(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetSuffix(*s)
	}
	return sdc
}

// SetIsHot sets the "is_hot" field.
func (sdc *SysDistrictCreate) SetIsHot(b bool) *SysDistrictCreate {
	sdc.mutation.SetIsHot(b)
	return sdc
}

// SetNillableIsHot sets the "is_hot" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableIsHot(b *bool) *SysDistrictCreate {
	if b != nil {
		sdc.SetIsHot(*b)
	}
	return sdc
}

// SetIsReal sets the "is_real" field.
func (sdc *SysDistrictCreate) SetIsReal(b bool) *SysDistrictCreate {
	sdc.mutation.SetIsReal(b)
	return sdc
}

// SetNillableIsReal sets the "is_real" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableIsReal(b *bool) *SysDistrictCreate {
	if b != nil {
		sdc.SetIsReal(*b)
	}
	return sdc
}

// SetIsMain sets the "is_main" field.
func (sdc *SysDistrictCreate) SetIsMain(b bool) *SysDistrictCreate {
	sdc.mutation.SetIsMain(b)
	return sdc
}

// SetNillableIsMain sets the "is_main" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableIsMain(b *bool) *SysDistrictCreate {
	if b != nil {
		sdc.SetIsMain(*b)
	}
	return sdc
}

// SetIsDirect sets the "is_direct" field.
func (sdc *SysDistrictCreate) SetIsDirect(b bool) *SysDistrictCreate {
	sdc.mutation.SetIsDirect(b)
	return sdc
}

// SetNillableIsDirect sets the "is_direct" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableIsDirect(b *bool) *SysDistrictCreate {
	if b != nil {
		sdc.SetIsDirect(*b)
	}
	return sdc
}

// SetCreator sets the "creator" field.
func (sdc *SysDistrictCreate) SetCreator(s string) *SysDistrictCreate {
	sdc.mutation.SetCreator(s)
	return sdc
}

// SetID sets the "id" field.
func (sdc *SysDistrictCreate) SetID(s string) *SysDistrictCreate {
	sdc.mutation.SetID(s)
	return sdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sdc *SysDistrictCreate) SetNillableID(s *string) *SysDistrictCreate {
	if s != nil {
		sdc.SetID(*s)
	}
	return sdc
}

// SetParent sets the "parent" edge to the SysDistrict entity.
func (sdc *SysDistrictCreate) SetParent(s *SysDistrict) *SysDistrictCreate {
	return sdc.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysDistrict entity by IDs.
func (sdc *SysDistrictCreate) AddChildIDs(ids ...string) *SysDistrictCreate {
	sdc.mutation.AddChildIDs(ids...)
	return sdc
}

// AddChildren adds the "children" edges to the SysDistrict entity.
func (sdc *SysDistrictCreate) AddChildren(s ...*SysDistrict) *SysDistrictCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdc.AddChildIDs(ids...)
}

// Mutation returns the SysDistrictMutation object of the builder.
func (sdc *SysDistrictCreate) Mutation() *SysDistrictMutation {
	return sdc.mutation
}

// Save creates the SysDistrict in the database.
func (sdc *SysDistrictCreate) Save(ctx context.Context) (*SysDistrict, error) {
	sdc.defaults()
	return withHooks[*SysDistrict, SysDistrictMutation](ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *SysDistrictCreate) SaveX(ctx context.Context) *SysDistrict {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *SysDistrictCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *SysDistrictCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *SysDistrictCreate) defaults() {
	if _, ok := sdc.mutation.IsDel(); !ok {
		v := sysdistrict.DefaultIsDel
		sdc.mutation.SetIsDel(v)
	}
	if _, ok := sdc.mutation.Sort(); !ok {
		v := sysdistrict.DefaultSort
		sdc.mutation.SetSort(v)
	}
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		v := sysdistrict.DefaultCreatedAt()
		sdc.mutation.SetCreatedAt(v)
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		v := sysdistrict.DefaultUpdatedAt()
		sdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sdc.mutation.IsActive(); !ok {
		v := sysdistrict.DefaultIsActive
		sdc.mutation.SetIsActive(v)
	}
	if _, ok := sdc.mutation.IsLeaf(); !ok {
		v := sysdistrict.DefaultIsLeaf
		sdc.mutation.SetIsLeaf(v)
	}
	if _, ok := sdc.mutation.IsHot(); !ok {
		v := sysdistrict.DefaultIsHot
		sdc.mutation.SetIsHot(v)
	}
	if _, ok := sdc.mutation.IsReal(); !ok {
		v := sysdistrict.DefaultIsReal
		sdc.mutation.SetIsReal(v)
	}
	if _, ok := sdc.mutation.IsMain(); !ok {
		v := sysdistrict.DefaultIsMain
		sdc.mutation.SetIsMain(v)
	}
	if _, ok := sdc.mutation.IsDirect(); !ok {
		v := sysdistrict.DefaultIsDirect
		sdc.mutation.SetIsDirect(v)
	}
	if _, ok := sdc.mutation.ID(); !ok {
		v := sysdistrict.DefaultID()
		sdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *SysDistrictCreate) check() error {
	if _, ok := sdc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "SysDistrict.is_del"`)}
	}
	if _, ok := sdc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "SysDistrict.sort"`)}
	}
	if _, ok := sdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysDistrict.created_at"`)}
	}
	if _, ok := sdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysDistrict.updated_at"`)}
	}
	if _, ok := sdc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "SysDistrict.is_active"`)}
	}
	if v, ok := sdc.mutation.Name(); ok {
		if err := sysdistrict.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.name": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.NameEn(); ok {
		if err := sysdistrict.NameEnValidator(v); err != nil {
			return &ValidationError{Name: "name_en", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.name_en": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.Sname(); ok {
		if err := sysdistrict.SnameValidator(v); err != nil {
			return &ValidationError{Name: "sname", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.sname": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.SnameEn(); ok {
		if err := sysdistrict.SnameEnValidator(v); err != nil {
			return &ValidationError{Name: "sname_en", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.sname_en": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.Abbr(); ok {
		if err := sysdistrict.AbbrValidator(v); err != nil {
			return &ValidationError{Name: "abbr", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.abbr": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.StCode(); ok {
		if err := sysdistrict.StCodeValidator(v); err != nil {
			return &ValidationError{Name: "st_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.st_code": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.Initials(); ok {
		if err := sysdistrict.InitialsValidator(v); err != nil {
			return &ValidationError{Name: "initials", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.initials": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.Pinyin(); ok {
		if err := sysdistrict.PinyinValidator(v); err != nil {
			return &ValidationError{Name: "pinyin", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.pinyin": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.ParentID(); ok {
		if err := sysdistrict.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.parent_id": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.AreaCode(); ok {
		if err := sysdistrict.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.area_code": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.ZipCode(); ok {
		if err := sysdistrict.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.zip_code": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.MergeName(); ok {
		if err := sysdistrict.MergeNameValidator(v); err != nil {
			return &ValidationError{Name: "merge_name", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.merge_name": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.MergeSname(); ok {
		if err := sysdistrict.MergeSnameValidator(v); err != nil {
			return &ValidationError{Name: "merge_sname", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.merge_sname": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.Extra(); ok {
		if err := sysdistrict.ExtraValidator(v); err != nil {
			return &ValidationError{Name: "extra", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.extra": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.Suffix(); ok {
		if err := sysdistrict.SuffixValidator(v); err != nil {
			return &ValidationError{Name: "suffix", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.suffix": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required field "SysDistrict.creator"`)}
	}
	if v, ok := sdc.mutation.Creator(); ok {
		if err := sysdistrict.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.creator": %w`, err)}
		}
	}
	if v, ok := sdc.mutation.ID(); ok {
		if err := sysdistrict.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.id": %w`, err)}
		}
	}
	return nil
}

func (sdc *SysDistrictCreate) sqlSave(ctx context.Context) (*SysDistrict, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysDistrict.ID type: %T", _spec.ID.Value)
		}
	}
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *SysDistrictCreate) createSpec() (*SysDistrict, *sqlgraph.CreateSpec) {
	var (
		_node = &SysDistrict{config: sdc.config}
		_spec = sqlgraph.NewCreateSpec(sysdistrict.Table, sqlgraph.NewFieldSpec(sysdistrict.FieldID, field.TypeString))
	)
	_spec.Schema = sdc.schemaConfig.SysDistrict
	_spec.OnConflict = sdc.conflict
	if id, ok := sdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sdc.mutation.IsDel(); ok {
		_spec.SetField(sysdistrict.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := sdc.mutation.Sort(); ok {
		_spec.SetField(sysdistrict.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := sdc.mutation.CreatedAt(); ok {
		_spec.SetField(sysdistrict.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sdc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdistrict.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sdc.mutation.DeletedAt(); ok {
		_spec.SetField(sysdistrict.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sdc.mutation.IsActive(); ok {
		_spec.SetField(sysdistrict.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := sdc.mutation.TreeID(); ok {
		_spec.SetField(sysdistrict.FieldTreeID, field.TypeInt64, value)
		_node.TreeID = &value
	}
	if value, ok := sdc.mutation.TreeLevel(); ok {
		_spec.SetField(sysdistrict.FieldTreeLevel, field.TypeInt32, value)
		_node.TreeLevel = &value
	}
	if value, ok := sdc.mutation.TreeLeft(); ok {
		_spec.SetField(sysdistrict.FieldTreeLeft, field.TypeInt64, value)
		_node.TreeLeft = &value
	}
	if value, ok := sdc.mutation.TreeRight(); ok {
		_spec.SetField(sysdistrict.FieldTreeRight, field.TypeInt64, value)
		_node.TreeRight = &value
	}
	if value, ok := sdc.mutation.IsLeaf(); ok {
		_spec.SetField(sysdistrict.FieldIsLeaf, field.TypeBool, value)
		_node.IsLeaf = &value
	}
	if value, ok := sdc.mutation.TreePath(); ok {
		_spec.SetField(sysdistrict.FieldTreePath, field.TypeString, value)
		_node.TreePath = &value
	}
	if value, ok := sdc.mutation.Name(); ok {
		_spec.SetField(sysdistrict.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := sdc.mutation.NameEn(); ok {
		_spec.SetField(sysdistrict.FieldNameEn, field.TypeString, value)
		_node.NameEn = &value
	}
	if value, ok := sdc.mutation.Sname(); ok {
		_spec.SetField(sysdistrict.FieldSname, field.TypeString, value)
		_node.Sname = &value
	}
	if value, ok := sdc.mutation.SnameEn(); ok {
		_spec.SetField(sysdistrict.FieldSnameEn, field.TypeString, value)
		_node.SnameEn = &value
	}
	if value, ok := sdc.mutation.Abbr(); ok {
		_spec.SetField(sysdistrict.FieldAbbr, field.TypeString, value)
		_node.Abbr = &value
	}
	if value, ok := sdc.mutation.StCode(); ok {
		_spec.SetField(sysdistrict.FieldStCode, field.TypeString, value)
		_node.StCode = &value
	}
	if value, ok := sdc.mutation.Initials(); ok {
		_spec.SetField(sysdistrict.FieldInitials, field.TypeString, value)
		_node.Initials = &value
	}
	if value, ok := sdc.mutation.Pinyin(); ok {
		_spec.SetField(sysdistrict.FieldPinyin, field.TypeString, value)
		_node.Pinyin = &value
	}
	if value, ok := sdc.mutation.Longitude(); ok {
		_spec.SetField(sysdistrict.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = &value
	}
	if value, ok := sdc.mutation.Latitude(); ok {
		_spec.SetField(sysdistrict.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = &value
	}
	if value, ok := sdc.mutation.AreaCode(); ok {
		_spec.SetField(sysdistrict.FieldAreaCode, field.TypeString, value)
		_node.AreaCode = &value
	}
	if value, ok := sdc.mutation.ZipCode(); ok {
		_spec.SetField(sysdistrict.FieldZipCode, field.TypeString, value)
		_node.ZipCode = &value
	}
	if value, ok := sdc.mutation.MergeName(); ok {
		_spec.SetField(sysdistrict.FieldMergeName, field.TypeString, value)
		_node.MergeName = &value
	}
	if value, ok := sdc.mutation.MergeSname(); ok {
		_spec.SetField(sysdistrict.FieldMergeSname, field.TypeString, value)
		_node.MergeSname = &value
	}
	if value, ok := sdc.mutation.Extra(); ok {
		_spec.SetField(sysdistrict.FieldExtra, field.TypeString, value)
		_node.Extra = &value
	}
	if value, ok := sdc.mutation.Suffix(); ok {
		_spec.SetField(sysdistrict.FieldSuffix, field.TypeString, value)
		_node.Suffix = &value
	}
	if value, ok := sdc.mutation.IsHot(); ok {
		_spec.SetField(sysdistrict.FieldIsHot, field.TypeBool, value)
		_node.IsHot = &value
	}
	if value, ok := sdc.mutation.IsReal(); ok {
		_spec.SetField(sysdistrict.FieldIsReal, field.TypeBool, value)
		_node.IsReal = &value
	}
	if value, ok := sdc.mutation.IsMain(); ok {
		_spec.SetField(sysdistrict.FieldIsMain, field.TypeBool, value)
		_node.IsMain = &value
	}
	if value, ok := sdc.mutation.IsDirect(); ok {
		_spec.SetField(sysdistrict.FieldIsDirect, field.TypeBool, value)
		_node.IsDirect = &value
	}
	if value, ok := sdc.mutation.Creator(); ok {
		_spec.SetField(sysdistrict.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if nodes := sdc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdistrict.ParentTable,
			Columns: []string{sysdistrict.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sdc.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sdc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdistrict.ChildrenTable,
			Columns: []string{sysdistrict.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sdc.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysDistrict.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysDistrictUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (sdc *SysDistrictCreate) OnConflict(opts ...sql.ConflictOption) *SysDistrictUpsertOne {
	sdc.conflict = opts
	return &SysDistrictUpsertOne{
		create: sdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysDistrict.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdc *SysDistrictCreate) OnConflictColumns(columns ...string) *SysDistrictUpsertOne {
	sdc.conflict = append(sdc.conflict, sql.ConflictColumns(columns...))
	return &SysDistrictUpsertOne{
		create: sdc,
	}
}

type (
	// SysDistrictUpsertOne is the builder for "upsert"-ing
	//  one SysDistrict node.
	SysDistrictUpsertOne struct {
		create *SysDistrictCreate
	}

	// SysDistrictUpsert is the "OnConflict" setter.
	SysDistrictUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *SysDistrictUpsert) SetIsDel(v bool) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateIsDel() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldIsDel)
	return u
}

// SetSort sets the "sort" field.
func (u *SysDistrictUpsert) SetSort(v int32) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateSort() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *SysDistrictUpsert) AddSort(v int32) *SysDistrictUpsert {
	u.Add(sysdistrict.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysDistrictUpsert) SetUpdatedAt(v time.Time) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateUpdatedAt() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysDistrictUpsert) SetDeletedAt(v time.Time) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateDeletedAt() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysDistrictUpsert) ClearDeletedAt() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SysDistrictUpsert) SetIsActive(v bool) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateIsActive() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldIsActive)
	return u
}

// SetTreeID sets the "tree_id" field.
func (u *SysDistrictUpsert) SetTreeID(v int64) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldTreeID, v)
	return u
}

// UpdateTreeID sets the "tree_id" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateTreeID() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldTreeID)
	return u
}

// AddTreeID adds v to the "tree_id" field.
func (u *SysDistrictUpsert) AddTreeID(v int64) *SysDistrictUpsert {
	u.Add(sysdistrict.FieldTreeID, v)
	return u
}

// ClearTreeID clears the value of the "tree_id" field.
func (u *SysDistrictUpsert) ClearTreeID() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldTreeID)
	return u
}

// SetTreeLevel sets the "tree_level" field.
func (u *SysDistrictUpsert) SetTreeLevel(v int32) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldTreeLevel, v)
	return u
}

// UpdateTreeLevel sets the "tree_level" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateTreeLevel() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldTreeLevel)
	return u
}

// AddTreeLevel adds v to the "tree_level" field.
func (u *SysDistrictUpsert) AddTreeLevel(v int32) *SysDistrictUpsert {
	u.Add(sysdistrict.FieldTreeLevel, v)
	return u
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (u *SysDistrictUpsert) ClearTreeLevel() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldTreeLevel)
	return u
}

// SetTreeLeft sets the "tree_left" field.
func (u *SysDistrictUpsert) SetTreeLeft(v int64) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldTreeLeft, v)
	return u
}

// UpdateTreeLeft sets the "tree_left" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateTreeLeft() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldTreeLeft)
	return u
}

// AddTreeLeft adds v to the "tree_left" field.
func (u *SysDistrictUpsert) AddTreeLeft(v int64) *SysDistrictUpsert {
	u.Add(sysdistrict.FieldTreeLeft, v)
	return u
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (u *SysDistrictUpsert) ClearTreeLeft() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldTreeLeft)
	return u
}

// SetTreeRight sets the "tree_right" field.
func (u *SysDistrictUpsert) SetTreeRight(v int64) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldTreeRight, v)
	return u
}

// UpdateTreeRight sets the "tree_right" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateTreeRight() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldTreeRight)
	return u
}

// AddTreeRight adds v to the "tree_right" field.
func (u *SysDistrictUpsert) AddTreeRight(v int64) *SysDistrictUpsert {
	u.Add(sysdistrict.FieldTreeRight, v)
	return u
}

// ClearTreeRight clears the value of the "tree_right" field.
func (u *SysDistrictUpsert) ClearTreeRight() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldTreeRight)
	return u
}

// SetIsLeaf sets the "is_leaf" field.
func (u *SysDistrictUpsert) SetIsLeaf(v bool) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldIsLeaf, v)
	return u
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateIsLeaf() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldIsLeaf)
	return u
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *SysDistrictUpsert) ClearIsLeaf() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldIsLeaf)
	return u
}

// SetTreePath sets the "tree_path" field.
func (u *SysDistrictUpsert) SetTreePath(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldTreePath, v)
	return u
}

// UpdateTreePath sets the "tree_path" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateTreePath() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldTreePath)
	return u
}

// ClearTreePath clears the value of the "tree_path" field.
func (u *SysDistrictUpsert) ClearTreePath() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldTreePath)
	return u
}

// SetName sets the "name" field.
func (u *SysDistrictUpsert) SetName(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateName() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *SysDistrictUpsert) ClearName() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldName)
	return u
}

// SetNameEn sets the "name_en" field.
func (u *SysDistrictUpsert) SetNameEn(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldNameEn, v)
	return u
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateNameEn() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldNameEn)
	return u
}

// ClearNameEn clears the value of the "name_en" field.
func (u *SysDistrictUpsert) ClearNameEn() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldNameEn)
	return u
}

// SetSname sets the "sname" field.
func (u *SysDistrictUpsert) SetSname(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldSname, v)
	return u
}

// UpdateSname sets the "sname" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateSname() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldSname)
	return u
}

// ClearSname clears the value of the "sname" field.
func (u *SysDistrictUpsert) ClearSname() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldSname)
	return u
}

// SetSnameEn sets the "sname_en" field.
func (u *SysDistrictUpsert) SetSnameEn(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldSnameEn, v)
	return u
}

// UpdateSnameEn sets the "sname_en" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateSnameEn() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldSnameEn)
	return u
}

// ClearSnameEn clears the value of the "sname_en" field.
func (u *SysDistrictUpsert) ClearSnameEn() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldSnameEn)
	return u
}

// SetAbbr sets the "abbr" field.
func (u *SysDistrictUpsert) SetAbbr(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldAbbr, v)
	return u
}

// UpdateAbbr sets the "abbr" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateAbbr() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldAbbr)
	return u
}

// ClearAbbr clears the value of the "abbr" field.
func (u *SysDistrictUpsert) ClearAbbr() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldAbbr)
	return u
}

// SetStCode sets the "st_code" field.
func (u *SysDistrictUpsert) SetStCode(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldStCode, v)
	return u
}

// UpdateStCode sets the "st_code" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateStCode() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldStCode)
	return u
}

// ClearStCode clears the value of the "st_code" field.
func (u *SysDistrictUpsert) ClearStCode() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldStCode)
	return u
}

// SetInitials sets the "initials" field.
func (u *SysDistrictUpsert) SetInitials(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldInitials, v)
	return u
}

// UpdateInitials sets the "initials" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateInitials() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldInitials)
	return u
}

// ClearInitials clears the value of the "initials" field.
func (u *SysDistrictUpsert) ClearInitials() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldInitials)
	return u
}

// SetPinyin sets the "pinyin" field.
func (u *SysDistrictUpsert) SetPinyin(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldPinyin, v)
	return u
}

// UpdatePinyin sets the "pinyin" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdatePinyin() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldPinyin)
	return u
}

// ClearPinyin clears the value of the "pinyin" field.
func (u *SysDistrictUpsert) ClearPinyin() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldPinyin)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *SysDistrictUpsert) SetParentID(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateParentID() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *SysDistrictUpsert) ClearParentID() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldParentID)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *SysDistrictUpsert) SetLongitude(v float64) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateLongitude() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *SysDistrictUpsert) AddLongitude(v float64) *SysDistrictUpsert {
	u.Add(sysdistrict.FieldLongitude, v)
	return u
}

// ClearLongitude clears the value of the "longitude" field.
func (u *SysDistrictUpsert) ClearLongitude() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldLongitude)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *SysDistrictUpsert) SetLatitude(v float64) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateLatitude() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *SysDistrictUpsert) AddLatitude(v float64) *SysDistrictUpsert {
	u.Add(sysdistrict.FieldLatitude, v)
	return u
}

// ClearLatitude clears the value of the "latitude" field.
func (u *SysDistrictUpsert) ClearLatitude() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldLatitude)
	return u
}

// SetAreaCode sets the "area_code" field.
func (u *SysDistrictUpsert) SetAreaCode(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldAreaCode, v)
	return u
}

// UpdateAreaCode sets the "area_code" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateAreaCode() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldAreaCode)
	return u
}

// ClearAreaCode clears the value of the "area_code" field.
func (u *SysDistrictUpsert) ClearAreaCode() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldAreaCode)
	return u
}

// SetZipCode sets the "zip_code" field.
func (u *SysDistrictUpsert) SetZipCode(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldZipCode, v)
	return u
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateZipCode() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldZipCode)
	return u
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *SysDistrictUpsert) ClearZipCode() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldZipCode)
	return u
}

// SetMergeName sets the "merge_name" field.
func (u *SysDistrictUpsert) SetMergeName(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldMergeName, v)
	return u
}

// UpdateMergeName sets the "merge_name" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateMergeName() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldMergeName)
	return u
}

// ClearMergeName clears the value of the "merge_name" field.
func (u *SysDistrictUpsert) ClearMergeName() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldMergeName)
	return u
}

// SetMergeSname sets the "merge_sname" field.
func (u *SysDistrictUpsert) SetMergeSname(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldMergeSname, v)
	return u
}

// UpdateMergeSname sets the "merge_sname" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateMergeSname() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldMergeSname)
	return u
}

// ClearMergeSname clears the value of the "merge_sname" field.
func (u *SysDistrictUpsert) ClearMergeSname() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldMergeSname)
	return u
}

// SetExtra sets the "extra" field.
func (u *SysDistrictUpsert) SetExtra(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldExtra, v)
	return u
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateExtra() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldExtra)
	return u
}

// ClearExtra clears the value of the "extra" field.
func (u *SysDistrictUpsert) ClearExtra() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldExtra)
	return u
}

// SetSuffix sets the "suffix" field.
func (u *SysDistrictUpsert) SetSuffix(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldSuffix, v)
	return u
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateSuffix() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldSuffix)
	return u
}

// ClearSuffix clears the value of the "suffix" field.
func (u *SysDistrictUpsert) ClearSuffix() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldSuffix)
	return u
}

// SetIsHot sets the "is_hot" field.
func (u *SysDistrictUpsert) SetIsHot(v bool) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldIsHot, v)
	return u
}

// UpdateIsHot sets the "is_hot" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateIsHot() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldIsHot)
	return u
}

// ClearIsHot clears the value of the "is_hot" field.
func (u *SysDistrictUpsert) ClearIsHot() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldIsHot)
	return u
}

// SetIsReal sets the "is_real" field.
func (u *SysDistrictUpsert) SetIsReal(v bool) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldIsReal, v)
	return u
}

// UpdateIsReal sets the "is_real" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateIsReal() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldIsReal)
	return u
}

// ClearIsReal clears the value of the "is_real" field.
func (u *SysDistrictUpsert) ClearIsReal() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldIsReal)
	return u
}

// SetIsMain sets the "is_main" field.
func (u *SysDistrictUpsert) SetIsMain(v bool) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldIsMain, v)
	return u
}

// UpdateIsMain sets the "is_main" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateIsMain() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldIsMain)
	return u
}

// ClearIsMain clears the value of the "is_main" field.
func (u *SysDistrictUpsert) ClearIsMain() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldIsMain)
	return u
}

// SetIsDirect sets the "is_direct" field.
func (u *SysDistrictUpsert) SetIsDirect(v bool) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldIsDirect, v)
	return u
}

// UpdateIsDirect sets the "is_direct" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateIsDirect() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldIsDirect)
	return u
}

// ClearIsDirect clears the value of the "is_direct" field.
func (u *SysDistrictUpsert) ClearIsDirect() *SysDistrictUpsert {
	u.SetNull(sysdistrict.FieldIsDirect)
	return u
}

// SetCreator sets the "creator" field.
func (u *SysDistrictUpsert) SetCreator(v string) *SysDistrictUpsert {
	u.Set(sysdistrict.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SysDistrictUpsert) UpdateCreator() *SysDistrictUpsert {
	u.SetExcluded(sysdistrict.FieldCreator)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysDistrict.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysdistrict.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysDistrictUpsertOne) UpdateNewValues() *SysDistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysdistrict.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(sysdistrict.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysDistrict.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysDistrictUpsertOne) Ignore() *SysDistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysDistrictUpsertOne) DoNothing() *SysDistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysDistrictCreate.OnConflict
// documentation for more info.
func (u *SysDistrictUpsertOne) Update(set func(*SysDistrictUpsert)) *SysDistrictUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysDistrictUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysDistrictUpsertOne) SetIsDel(v bool) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateIsDel() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *SysDistrictUpsertOne) SetSort(v int32) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysDistrictUpsertOne) AddSort(v int32) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateSort() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysDistrictUpsertOne) SetUpdatedAt(v time.Time) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateUpdatedAt() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysDistrictUpsertOne) SetDeletedAt(v time.Time) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateDeletedAt() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysDistrictUpsertOne) ClearDeletedAt() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysDistrictUpsertOne) SetIsActive(v bool) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateIsActive() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsActive()
	})
}

// SetTreeID sets the "tree_id" field.
func (u *SysDistrictUpsertOne) SetTreeID(v int64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeID(v)
	})
}

// AddTreeID adds v to the "tree_id" field.
func (u *SysDistrictUpsertOne) AddTreeID(v int64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeID(v)
	})
}

// UpdateTreeID sets the "tree_id" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateTreeID() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeID()
	})
}

// ClearTreeID clears the value of the "tree_id" field.
func (u *SysDistrictUpsertOne) ClearTreeID() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeID()
	})
}

// SetTreeLevel sets the "tree_level" field.
func (u *SysDistrictUpsertOne) SetTreeLevel(v int32) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeLevel(v)
	})
}

// AddTreeLevel adds v to the "tree_level" field.
func (u *SysDistrictUpsertOne) AddTreeLevel(v int32) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeLevel(v)
	})
}

// UpdateTreeLevel sets the "tree_level" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateTreeLevel() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeLevel()
	})
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (u *SysDistrictUpsertOne) ClearTreeLevel() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeLevel()
	})
}

// SetTreeLeft sets the "tree_left" field.
func (u *SysDistrictUpsertOne) SetTreeLeft(v int64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeLeft(v)
	})
}

// AddTreeLeft adds v to the "tree_left" field.
func (u *SysDistrictUpsertOne) AddTreeLeft(v int64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeLeft(v)
	})
}

// UpdateTreeLeft sets the "tree_left" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateTreeLeft() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeLeft()
	})
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (u *SysDistrictUpsertOne) ClearTreeLeft() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeLeft()
	})
}

// SetTreeRight sets the "tree_right" field.
func (u *SysDistrictUpsertOne) SetTreeRight(v int64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeRight(v)
	})
}

// AddTreeRight adds v to the "tree_right" field.
func (u *SysDistrictUpsertOne) AddTreeRight(v int64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeRight(v)
	})
}

// UpdateTreeRight sets the "tree_right" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateTreeRight() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeRight()
	})
}

// ClearTreeRight clears the value of the "tree_right" field.
func (u *SysDistrictUpsertOne) ClearTreeRight() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeRight()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *SysDistrictUpsertOne) SetIsLeaf(v bool) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateIsLeaf() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsLeaf()
	})
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *SysDistrictUpsertOne) ClearIsLeaf() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsLeaf()
	})
}

// SetTreePath sets the "tree_path" field.
func (u *SysDistrictUpsertOne) SetTreePath(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreePath(v)
	})
}

// UpdateTreePath sets the "tree_path" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateTreePath() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreePath()
	})
}

// ClearTreePath clears the value of the "tree_path" field.
func (u *SysDistrictUpsertOne) ClearTreePath() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreePath()
	})
}

// SetName sets the "name" field.
func (u *SysDistrictUpsertOne) SetName(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateName() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SysDistrictUpsertOne) ClearName() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearName()
	})
}

// SetNameEn sets the "name_en" field.
func (u *SysDistrictUpsertOne) SetNameEn(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateNameEn() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *SysDistrictUpsertOne) ClearNameEn() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearNameEn()
	})
}

// SetSname sets the "sname" field.
func (u *SysDistrictUpsertOne) SetSname(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSname(v)
	})
}

// UpdateSname sets the "sname" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateSname() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSname()
	})
}

// ClearSname clears the value of the "sname" field.
func (u *SysDistrictUpsertOne) ClearSname() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearSname()
	})
}

// SetSnameEn sets the "sname_en" field.
func (u *SysDistrictUpsertOne) SetSnameEn(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSnameEn(v)
	})
}

// UpdateSnameEn sets the "sname_en" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateSnameEn() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSnameEn()
	})
}

// ClearSnameEn clears the value of the "sname_en" field.
func (u *SysDistrictUpsertOne) ClearSnameEn() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearSnameEn()
	})
}

// SetAbbr sets the "abbr" field.
func (u *SysDistrictUpsertOne) SetAbbr(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetAbbr(v)
	})
}

// UpdateAbbr sets the "abbr" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateAbbr() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateAbbr()
	})
}

// ClearAbbr clears the value of the "abbr" field.
func (u *SysDistrictUpsertOne) ClearAbbr() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearAbbr()
	})
}

// SetStCode sets the "st_code" field.
func (u *SysDistrictUpsertOne) SetStCode(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetStCode(v)
	})
}

// UpdateStCode sets the "st_code" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateStCode() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateStCode()
	})
}

// ClearStCode clears the value of the "st_code" field.
func (u *SysDistrictUpsertOne) ClearStCode() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearStCode()
	})
}

// SetInitials sets the "initials" field.
func (u *SysDistrictUpsertOne) SetInitials(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetInitials(v)
	})
}

// UpdateInitials sets the "initials" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateInitials() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateInitials()
	})
}

// ClearInitials clears the value of the "initials" field.
func (u *SysDistrictUpsertOne) ClearInitials() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearInitials()
	})
}

// SetPinyin sets the "pinyin" field.
func (u *SysDistrictUpsertOne) SetPinyin(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetPinyin(v)
	})
}

// UpdatePinyin sets the "pinyin" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdatePinyin() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdatePinyin()
	})
}

// ClearPinyin clears the value of the "pinyin" field.
func (u *SysDistrictUpsertOne) ClearPinyin() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearPinyin()
	})
}

// SetParentID sets the "parent_id" field.
func (u *SysDistrictUpsertOne) SetParentID(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateParentID() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *SysDistrictUpsertOne) ClearParentID() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearParentID()
	})
}

// SetLongitude sets the "longitude" field.
func (u *SysDistrictUpsertOne) SetLongitude(v float64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *SysDistrictUpsertOne) AddLongitude(v float64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateLongitude() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *SysDistrictUpsertOne) ClearLongitude() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearLongitude()
	})
}

// SetLatitude sets the "latitude" field.
func (u *SysDistrictUpsertOne) SetLatitude(v float64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *SysDistrictUpsertOne) AddLatitude(v float64) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateLatitude() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *SysDistrictUpsertOne) ClearLatitude() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearLatitude()
	})
}

// SetAreaCode sets the "area_code" field.
func (u *SysDistrictUpsertOne) SetAreaCode(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetAreaCode(v)
	})
}

// UpdateAreaCode sets the "area_code" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateAreaCode() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateAreaCode()
	})
}

// ClearAreaCode clears the value of the "area_code" field.
func (u *SysDistrictUpsertOne) ClearAreaCode() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearAreaCode()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *SysDistrictUpsertOne) SetZipCode(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateZipCode() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *SysDistrictUpsertOne) ClearZipCode() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearZipCode()
	})
}

// SetMergeName sets the "merge_name" field.
func (u *SysDistrictUpsertOne) SetMergeName(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetMergeName(v)
	})
}

// UpdateMergeName sets the "merge_name" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateMergeName() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateMergeName()
	})
}

// ClearMergeName clears the value of the "merge_name" field.
func (u *SysDistrictUpsertOne) ClearMergeName() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearMergeName()
	})
}

// SetMergeSname sets the "merge_sname" field.
func (u *SysDistrictUpsertOne) SetMergeSname(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetMergeSname(v)
	})
}

// UpdateMergeSname sets the "merge_sname" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateMergeSname() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateMergeSname()
	})
}

// ClearMergeSname clears the value of the "merge_sname" field.
func (u *SysDistrictUpsertOne) ClearMergeSname() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearMergeSname()
	})
}

// SetExtra sets the "extra" field.
func (u *SysDistrictUpsertOne) SetExtra(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateExtra() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *SysDistrictUpsertOne) ClearExtra() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearExtra()
	})
}

// SetSuffix sets the "suffix" field.
func (u *SysDistrictUpsertOne) SetSuffix(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateSuffix() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *SysDistrictUpsertOne) ClearSuffix() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearSuffix()
	})
}

// SetIsHot sets the "is_hot" field.
func (u *SysDistrictUpsertOne) SetIsHot(v bool) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsHot(v)
	})
}

// UpdateIsHot sets the "is_hot" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateIsHot() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsHot()
	})
}

// ClearIsHot clears the value of the "is_hot" field.
func (u *SysDistrictUpsertOne) ClearIsHot() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsHot()
	})
}

// SetIsReal sets the "is_real" field.
func (u *SysDistrictUpsertOne) SetIsReal(v bool) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsReal(v)
	})
}

// UpdateIsReal sets the "is_real" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateIsReal() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsReal()
	})
}

// ClearIsReal clears the value of the "is_real" field.
func (u *SysDistrictUpsertOne) ClearIsReal() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsReal()
	})
}

// SetIsMain sets the "is_main" field.
func (u *SysDistrictUpsertOne) SetIsMain(v bool) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsMain(v)
	})
}

// UpdateIsMain sets the "is_main" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateIsMain() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsMain()
	})
}

// ClearIsMain clears the value of the "is_main" field.
func (u *SysDistrictUpsertOne) ClearIsMain() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsMain()
	})
}

// SetIsDirect sets the "is_direct" field.
func (u *SysDistrictUpsertOne) SetIsDirect(v bool) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsDirect(v)
	})
}

// UpdateIsDirect sets the "is_direct" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateIsDirect() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsDirect()
	})
}

// ClearIsDirect clears the value of the "is_direct" field.
func (u *SysDistrictUpsertOne) ClearIsDirect() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsDirect()
	})
}

// SetCreator sets the "creator" field.
func (u *SysDistrictUpsertOne) SetCreator(v string) *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SysDistrictUpsertOne) UpdateCreator() *SysDistrictUpsertOne {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateCreator()
	})
}

// Exec executes the query.
func (u *SysDistrictUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysDistrictCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysDistrictUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysDistrictUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SysDistrictUpsertOne.ID is not supported by MySQL driver. Use SysDistrictUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysDistrictUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysDistrictCreateBulk is the builder for creating many SysDistrict entities in bulk.
type SysDistrictCreateBulk struct {
	config
	builders []*SysDistrictCreate
	conflict []sql.ConflictOption
}

// Save creates the SysDistrict entities in the database.
func (sdcb *SysDistrictCreateBulk) Save(ctx context.Context) ([]*SysDistrict, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*SysDistrict, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysDistrictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *SysDistrictCreateBulk) SaveX(ctx context.Context) []*SysDistrict {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *SysDistrictCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *SysDistrictCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysDistrict.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysDistrictUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (sdcb *SysDistrictCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysDistrictUpsertBulk {
	sdcb.conflict = opts
	return &SysDistrictUpsertBulk{
		create: sdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysDistrict.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdcb *SysDistrictCreateBulk) OnConflictColumns(columns ...string) *SysDistrictUpsertBulk {
	sdcb.conflict = append(sdcb.conflict, sql.ConflictColumns(columns...))
	return &SysDistrictUpsertBulk{
		create: sdcb,
	}
}

// SysDistrictUpsertBulk is the builder for "upsert"-ing
// a bulk of SysDistrict nodes.
type SysDistrictUpsertBulk struct {
	create *SysDistrictCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysDistrict.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysdistrict.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysDistrictUpsertBulk) UpdateNewValues() *SysDistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysdistrict.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(sysdistrict.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysDistrict.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysDistrictUpsertBulk) Ignore() *SysDistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysDistrictUpsertBulk) DoNothing() *SysDistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysDistrictCreateBulk.OnConflict
// documentation for more info.
func (u *SysDistrictUpsertBulk) Update(set func(*SysDistrictUpsert)) *SysDistrictUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysDistrictUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysDistrictUpsertBulk) SetIsDel(v bool) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateIsDel() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *SysDistrictUpsertBulk) SetSort(v int32) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysDistrictUpsertBulk) AddSort(v int32) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateSort() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysDistrictUpsertBulk) SetUpdatedAt(v time.Time) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateUpdatedAt() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysDistrictUpsertBulk) SetDeletedAt(v time.Time) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateDeletedAt() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysDistrictUpsertBulk) ClearDeletedAt() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysDistrictUpsertBulk) SetIsActive(v bool) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateIsActive() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsActive()
	})
}

// SetTreeID sets the "tree_id" field.
func (u *SysDistrictUpsertBulk) SetTreeID(v int64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeID(v)
	})
}

// AddTreeID adds v to the "tree_id" field.
func (u *SysDistrictUpsertBulk) AddTreeID(v int64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeID(v)
	})
}

// UpdateTreeID sets the "tree_id" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateTreeID() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeID()
	})
}

// ClearTreeID clears the value of the "tree_id" field.
func (u *SysDistrictUpsertBulk) ClearTreeID() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeID()
	})
}

// SetTreeLevel sets the "tree_level" field.
func (u *SysDistrictUpsertBulk) SetTreeLevel(v int32) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeLevel(v)
	})
}

// AddTreeLevel adds v to the "tree_level" field.
func (u *SysDistrictUpsertBulk) AddTreeLevel(v int32) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeLevel(v)
	})
}

// UpdateTreeLevel sets the "tree_level" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateTreeLevel() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeLevel()
	})
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (u *SysDistrictUpsertBulk) ClearTreeLevel() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeLevel()
	})
}

// SetTreeLeft sets the "tree_left" field.
func (u *SysDistrictUpsertBulk) SetTreeLeft(v int64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeLeft(v)
	})
}

// AddTreeLeft adds v to the "tree_left" field.
func (u *SysDistrictUpsertBulk) AddTreeLeft(v int64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeLeft(v)
	})
}

// UpdateTreeLeft sets the "tree_left" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateTreeLeft() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeLeft()
	})
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (u *SysDistrictUpsertBulk) ClearTreeLeft() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeLeft()
	})
}

// SetTreeRight sets the "tree_right" field.
func (u *SysDistrictUpsertBulk) SetTreeRight(v int64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreeRight(v)
	})
}

// AddTreeRight adds v to the "tree_right" field.
func (u *SysDistrictUpsertBulk) AddTreeRight(v int64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddTreeRight(v)
	})
}

// UpdateTreeRight sets the "tree_right" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateTreeRight() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreeRight()
	})
}

// ClearTreeRight clears the value of the "tree_right" field.
func (u *SysDistrictUpsertBulk) ClearTreeRight() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreeRight()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *SysDistrictUpsertBulk) SetIsLeaf(v bool) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateIsLeaf() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsLeaf()
	})
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *SysDistrictUpsertBulk) ClearIsLeaf() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsLeaf()
	})
}

// SetTreePath sets the "tree_path" field.
func (u *SysDistrictUpsertBulk) SetTreePath(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetTreePath(v)
	})
}

// UpdateTreePath sets the "tree_path" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateTreePath() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateTreePath()
	})
}

// ClearTreePath clears the value of the "tree_path" field.
func (u *SysDistrictUpsertBulk) ClearTreePath() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearTreePath()
	})
}

// SetName sets the "name" field.
func (u *SysDistrictUpsertBulk) SetName(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateName() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SysDistrictUpsertBulk) ClearName() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearName()
	})
}

// SetNameEn sets the "name_en" field.
func (u *SysDistrictUpsertBulk) SetNameEn(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetNameEn(v)
	})
}

// UpdateNameEn sets the "name_en" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateNameEn() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateNameEn()
	})
}

// ClearNameEn clears the value of the "name_en" field.
func (u *SysDistrictUpsertBulk) ClearNameEn() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearNameEn()
	})
}

// SetSname sets the "sname" field.
func (u *SysDistrictUpsertBulk) SetSname(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSname(v)
	})
}

// UpdateSname sets the "sname" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateSname() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSname()
	})
}

// ClearSname clears the value of the "sname" field.
func (u *SysDistrictUpsertBulk) ClearSname() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearSname()
	})
}

// SetSnameEn sets the "sname_en" field.
func (u *SysDistrictUpsertBulk) SetSnameEn(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSnameEn(v)
	})
}

// UpdateSnameEn sets the "sname_en" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateSnameEn() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSnameEn()
	})
}

// ClearSnameEn clears the value of the "sname_en" field.
func (u *SysDistrictUpsertBulk) ClearSnameEn() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearSnameEn()
	})
}

// SetAbbr sets the "abbr" field.
func (u *SysDistrictUpsertBulk) SetAbbr(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetAbbr(v)
	})
}

// UpdateAbbr sets the "abbr" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateAbbr() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateAbbr()
	})
}

// ClearAbbr clears the value of the "abbr" field.
func (u *SysDistrictUpsertBulk) ClearAbbr() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearAbbr()
	})
}

// SetStCode sets the "st_code" field.
func (u *SysDistrictUpsertBulk) SetStCode(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetStCode(v)
	})
}

// UpdateStCode sets the "st_code" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateStCode() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateStCode()
	})
}

// ClearStCode clears the value of the "st_code" field.
func (u *SysDistrictUpsertBulk) ClearStCode() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearStCode()
	})
}

// SetInitials sets the "initials" field.
func (u *SysDistrictUpsertBulk) SetInitials(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetInitials(v)
	})
}

// UpdateInitials sets the "initials" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateInitials() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateInitials()
	})
}

// ClearInitials clears the value of the "initials" field.
func (u *SysDistrictUpsertBulk) ClearInitials() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearInitials()
	})
}

// SetPinyin sets the "pinyin" field.
func (u *SysDistrictUpsertBulk) SetPinyin(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetPinyin(v)
	})
}

// UpdatePinyin sets the "pinyin" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdatePinyin() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdatePinyin()
	})
}

// ClearPinyin clears the value of the "pinyin" field.
func (u *SysDistrictUpsertBulk) ClearPinyin() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearPinyin()
	})
}

// SetParentID sets the "parent_id" field.
func (u *SysDistrictUpsertBulk) SetParentID(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateParentID() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *SysDistrictUpsertBulk) ClearParentID() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearParentID()
	})
}

// SetLongitude sets the "longitude" field.
func (u *SysDistrictUpsertBulk) SetLongitude(v float64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *SysDistrictUpsertBulk) AddLongitude(v float64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateLongitude() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateLongitude()
	})
}

// ClearLongitude clears the value of the "longitude" field.
func (u *SysDistrictUpsertBulk) ClearLongitude() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearLongitude()
	})
}

// SetLatitude sets the "latitude" field.
func (u *SysDistrictUpsertBulk) SetLatitude(v float64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *SysDistrictUpsertBulk) AddLatitude(v float64) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateLatitude() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateLatitude()
	})
}

// ClearLatitude clears the value of the "latitude" field.
func (u *SysDistrictUpsertBulk) ClearLatitude() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearLatitude()
	})
}

// SetAreaCode sets the "area_code" field.
func (u *SysDistrictUpsertBulk) SetAreaCode(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetAreaCode(v)
	})
}

// UpdateAreaCode sets the "area_code" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateAreaCode() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateAreaCode()
	})
}

// ClearAreaCode clears the value of the "area_code" field.
func (u *SysDistrictUpsertBulk) ClearAreaCode() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearAreaCode()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *SysDistrictUpsertBulk) SetZipCode(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateZipCode() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *SysDistrictUpsertBulk) ClearZipCode() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearZipCode()
	})
}

// SetMergeName sets the "merge_name" field.
func (u *SysDistrictUpsertBulk) SetMergeName(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetMergeName(v)
	})
}

// UpdateMergeName sets the "merge_name" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateMergeName() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateMergeName()
	})
}

// ClearMergeName clears the value of the "merge_name" field.
func (u *SysDistrictUpsertBulk) ClearMergeName() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearMergeName()
	})
}

// SetMergeSname sets the "merge_sname" field.
func (u *SysDistrictUpsertBulk) SetMergeSname(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetMergeSname(v)
	})
}

// UpdateMergeSname sets the "merge_sname" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateMergeSname() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateMergeSname()
	})
}

// ClearMergeSname clears the value of the "merge_sname" field.
func (u *SysDistrictUpsertBulk) ClearMergeSname() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearMergeSname()
	})
}

// SetExtra sets the "extra" field.
func (u *SysDistrictUpsertBulk) SetExtra(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateExtra() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *SysDistrictUpsertBulk) ClearExtra() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearExtra()
	})
}

// SetSuffix sets the "suffix" field.
func (u *SysDistrictUpsertBulk) SetSuffix(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetSuffix(v)
	})
}

// UpdateSuffix sets the "suffix" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateSuffix() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateSuffix()
	})
}

// ClearSuffix clears the value of the "suffix" field.
func (u *SysDistrictUpsertBulk) ClearSuffix() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearSuffix()
	})
}

// SetIsHot sets the "is_hot" field.
func (u *SysDistrictUpsertBulk) SetIsHot(v bool) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsHot(v)
	})
}

// UpdateIsHot sets the "is_hot" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateIsHot() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsHot()
	})
}

// ClearIsHot clears the value of the "is_hot" field.
func (u *SysDistrictUpsertBulk) ClearIsHot() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsHot()
	})
}

// SetIsReal sets the "is_real" field.
func (u *SysDistrictUpsertBulk) SetIsReal(v bool) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsReal(v)
	})
}

// UpdateIsReal sets the "is_real" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateIsReal() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsReal()
	})
}

// ClearIsReal clears the value of the "is_real" field.
func (u *SysDistrictUpsertBulk) ClearIsReal() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsReal()
	})
}

// SetIsMain sets the "is_main" field.
func (u *SysDistrictUpsertBulk) SetIsMain(v bool) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsMain(v)
	})
}

// UpdateIsMain sets the "is_main" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateIsMain() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsMain()
	})
}

// ClearIsMain clears the value of the "is_main" field.
func (u *SysDistrictUpsertBulk) ClearIsMain() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsMain()
	})
}

// SetIsDirect sets the "is_direct" field.
func (u *SysDistrictUpsertBulk) SetIsDirect(v bool) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetIsDirect(v)
	})
}

// UpdateIsDirect sets the "is_direct" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateIsDirect() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateIsDirect()
	})
}

// ClearIsDirect clears the value of the "is_direct" field.
func (u *SysDistrictUpsertBulk) ClearIsDirect() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.ClearIsDirect()
	})
}

// SetCreator sets the "creator" field.
func (u *SysDistrictUpsertBulk) SetCreator(v string) *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SysDistrictUpsertBulk) UpdateCreator() *SysDistrictUpsertBulk {
	return u.Update(func(s *SysDistrictUpsert) {
		s.UpdateCreator()
	})
}

// Exec executes the query.
func (u *SysDistrictUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysDistrictCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysDistrictCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysDistrictUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
