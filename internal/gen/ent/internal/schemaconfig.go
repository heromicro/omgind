// Code generated by ent, DO NOT EDIT.

package internal

import "context"

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig struct {
	SysAddress            string // SysAddress table.
	SysDict               string // SysDict table.
	SysDictItem           string // SysDictItem table.
	SysDistrict           string // SysDistrict table.
	SysJwtBlock           string // SysJwtBlock table.
	SysLogging            string // SysLogging table.
	SysMenu               string // SysMenu table.
	SysMenuAction         string // SysMenuAction table.
	SysMenuActionResource string // SysMenuActionResource table.
	SysRole               string // SysRole table.
	SysRoleMenu           string // SysRoleMenu table.
	SysUser               string // SysUser table.
	SysUserRole           string // SysUserRole table.
	XxxDemo               string // XxxDemo table.
}

type schemaCtxKey struct{}

// SchemaConfigFromContext returns a SchemaConfig stored inside a context, or empty if there isn't one.
func SchemaConfigFromContext(ctx context.Context) SchemaConfig {
	config, _ := ctx.Value(schemaCtxKey{}).(SchemaConfig)
	return config
}

// NewSchemaConfigContext returns a new context with the given SchemaConfig attached.
func NewSchemaConfigContext(parent context.Context, config SchemaConfig) context.Context {
	return context.WithValue(parent, schemaCtxKey{}, config)
}
