// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/sysaddress"
)

// SysAddressCreate is the builder for creating a SysAddress entity.
type SysAddressCreate struct {
	config
	mutation *SysAddressMutation
	hooks    []Hook
}

// SetIsDel sets the "is_del" field.
func (sac *SysAddressCreate) SetIsDel(b bool) *SysAddressCreate {
	sac.mutation.SetIsDel(b)
	return sac
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableIsDel(b *bool) *SysAddressCreate {
	if b != nil {
		sac.SetIsDel(*b)
	}
	return sac
}

// SetOwnerID sets the "owner_id" field.
func (sac *SysAddressCreate) SetOwnerID(s string) *SysAddressCreate {
	sac.mutation.SetOwnerID(s)
	return sac
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableOwnerID(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetOwnerID(*s)
	}
	return sac
}

// SetSort sets the "sort" field.
func (sac *SysAddressCreate) SetSort(i int32) *SysAddressCreate {
	sac.mutation.SetSort(i)
	return sac
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableSort(i *int32) *SysAddressCreate {
	if i != nil {
		sac.SetSort(*i)
	}
	return sac
}

// SetCreatedAt sets the "created_at" field.
func (sac *SysAddressCreate) SetCreatedAt(t time.Time) *SysAddressCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCreatedAt(t *time.Time) *SysAddressCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *SysAddressCreate) SetUpdatedAt(t time.Time) *SysAddressCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableUpdatedAt(t *time.Time) *SysAddressCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetDeletedAt sets the "deleted_at" field.
func (sac *SysAddressCreate) SetDeletedAt(t time.Time) *SysAddressCreate {
	sac.mutation.SetDeletedAt(t)
	return sac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableDeletedAt(t *time.Time) *SysAddressCreate {
	if t != nil {
		sac.SetDeletedAt(*t)
	}
	return sac
}

// SetIsActive sets the "is_active" field.
func (sac *SysAddressCreate) SetIsActive(b bool) *SysAddressCreate {
	sac.mutation.SetIsActive(b)
	return sac
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableIsActive(b *bool) *SysAddressCreate {
	if b != nil {
		sac.SetIsActive(*b)
	}
	return sac
}

// SetMemo sets the "memo" field.
func (sac *SysAddressCreate) SetMemo(s string) *SysAddressCreate {
	sac.mutation.SetMemo(s)
	return sac
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableMemo(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetMemo(*s)
	}
	return sac
}

// SetCountry sets the "country" field.
func (sac *SysAddressCreate) SetCountry(s string) *SysAddressCreate {
	sac.mutation.SetCountry(s)
	return sac
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCountry(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetCountry(*s)
	}
	return sac
}

// SetProvice sets the "provice" field.
func (sac *SysAddressCreate) SetProvice(s string) *SysAddressCreate {
	sac.mutation.SetProvice(s)
	return sac
}

// SetNillableProvice sets the "provice" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableProvice(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetProvice(*s)
	}
	return sac
}

// SetCity sets the "city" field.
func (sac *SysAddressCreate) SetCity(s string) *SysAddressCreate {
	sac.mutation.SetCity(s)
	return sac
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCity(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetCity(*s)
	}
	return sac
}

// SetCounty sets the "county" field.
func (sac *SysAddressCreate) SetCounty(s string) *SysAddressCreate {
	sac.mutation.SetCounty(s)
	return sac
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCounty(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetCounty(*s)
	}
	return sac
}

// SetCountryID sets the "country_id" field.
func (sac *SysAddressCreate) SetCountryID(s string) *SysAddressCreate {
	sac.mutation.SetCountryID(s)
	return sac
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCountryID(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetCountryID(*s)
	}
	return sac
}

// SetProviceID sets the "provice_id" field.
func (sac *SysAddressCreate) SetProviceID(s string) *SysAddressCreate {
	sac.mutation.SetProviceID(s)
	return sac
}

// SetNillableProviceID sets the "provice_id" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableProviceID(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetProviceID(*s)
	}
	return sac
}

// SetCityID sets the "city_id" field.
func (sac *SysAddressCreate) SetCityID(s string) *SysAddressCreate {
	sac.mutation.SetCityID(s)
	return sac
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCityID(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetCityID(*s)
	}
	return sac
}

// SetCountyID sets the "county_id" field.
func (sac *SysAddressCreate) SetCountyID(s string) *SysAddressCreate {
	sac.mutation.SetCountyID(s)
	return sac
}

// SetNillableCountyID sets the "county_id" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCountyID(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetCountyID(*s)
	}
	return sac
}

// SetZipCode sets the "zip_code" field.
func (sac *SysAddressCreate) SetZipCode(s string) *SysAddressCreate {
	sac.mutation.SetZipCode(s)
	return sac
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableZipCode(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetZipCode(*s)
	}
	return sac
}

// SetDaddr sets the "daddr" field.
func (sac *SysAddressCreate) SetDaddr(s string) *SysAddressCreate {
	sac.mutation.SetDaddr(s)
	return sac
}

// SetNillableDaddr sets the "daddr" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableDaddr(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetDaddr(*s)
	}
	return sac
}

// SetName sets the "name" field.
func (sac *SysAddressCreate) SetName(s string) *SysAddressCreate {
	sac.mutation.SetName(s)
	return sac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableName(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetName(*s)
	}
	return sac
}

// SetMobile sets the "mobile" field.
func (sac *SysAddressCreate) SetMobile(s string) *SysAddressCreate {
	sac.mutation.SetMobile(s)
	return sac
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableMobile(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetMobile(*s)
	}
	return sac
}

// SetCreator sets the "creator" field.
func (sac *SysAddressCreate) SetCreator(s string) *SysAddressCreate {
	sac.mutation.SetCreator(s)
	return sac
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableCreator(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetCreator(*s)
	}
	return sac
}

// SetID sets the "id" field.
func (sac *SysAddressCreate) SetID(s string) *SysAddressCreate {
	sac.mutation.SetID(s)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *SysAddressCreate) SetNillableID(s *string) *SysAddressCreate {
	if s != nil {
		sac.SetID(*s)
	}
	return sac
}

// Mutation returns the SysAddressMutation object of the builder.
func (sac *SysAddressCreate) Mutation() *SysAddressMutation {
	return sac.mutation
}

// Save creates the SysAddress in the database.
func (sac *SysAddressCreate) Save(ctx context.Context) (*SysAddress, error) {
	sac.defaults()
	return withHooks[*SysAddress, SysAddressMutation](ctx, sac.sqlSave, sac.mutation, sac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SysAddressCreate) SaveX(ctx context.Context) *SysAddress {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SysAddressCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SysAddressCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SysAddressCreate) defaults() {
	if _, ok := sac.mutation.IsDel(); !ok {
		v := sysaddress.DefaultIsDel
		sac.mutation.SetIsDel(v)
	}
	if _, ok := sac.mutation.Sort(); !ok {
		v := sysaddress.DefaultSort
		sac.mutation.SetSort(v)
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		v := sysaddress.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		v := sysaddress.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	if _, ok := sac.mutation.IsActive(); !ok {
		v := sysaddress.DefaultIsActive
		sac.mutation.SetIsActive(v)
	}
	if _, ok := sac.mutation.Memo(); !ok {
		v := sysaddress.DefaultMemo
		sac.mutation.SetMemo(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		v := sysaddress.DefaultID()
		sac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *SysAddressCreate) check() error {
	if _, ok := sac.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "SysAddress.is_del"`)}
	}
	if v, ok := sac.mutation.OwnerID(); ok {
		if err := sysaddress.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.owner_id": %w`, err)}
		}
	}
	if _, ok := sac.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "SysAddress.sort"`)}
	}
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SysAddress.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SysAddress.updated_at"`)}
	}
	if _, ok := sac.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "SysAddress.is_active"`)}
	}
	if v, ok := sac.mutation.Memo(); ok {
		if err := sysaddress.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysAddress.memo": %w`, err)}
		}
	}
	if v, ok := sac.mutation.CountryID(); ok {
		if err := sysaddress.CountryIDValidator(v); err != nil {
			return &ValidationError{Name: "country_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.country_id": %w`, err)}
		}
	}
	if v, ok := sac.mutation.ProviceID(); ok {
		if err := sysaddress.ProviceIDValidator(v); err != nil {
			return &ValidationError{Name: "provice_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.provice_id": %w`, err)}
		}
	}
	if v, ok := sac.mutation.CityID(); ok {
		if err := sysaddress.CityIDValidator(v); err != nil {
			return &ValidationError{Name: "city_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.city_id": %w`, err)}
		}
	}
	if v, ok := sac.mutation.CountyID(); ok {
		if err := sysaddress.CountyIDValidator(v); err != nil {
			return &ValidationError{Name: "county_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.county_id": %w`, err)}
		}
	}
	if v, ok := sac.mutation.ZipCode(); ok {
		if err := sysaddress.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "SysAddress.zip_code": %w`, err)}
		}
	}
	if v, ok := sac.mutation.Daddr(); ok {
		if err := sysaddress.DaddrValidator(v); err != nil {
			return &ValidationError{Name: "daddr", err: fmt.Errorf(`ent: validator failed for field "SysAddress.daddr": %w`, err)}
		}
	}
	if v, ok := sac.mutation.Name(); ok {
		if err := sysaddress.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysAddress.name": %w`, err)}
		}
	}
	if v, ok := sac.mutation.Mobile(); ok {
		if err := sysaddress.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "SysAddress.mobile": %w`, err)}
		}
	}
	if v, ok := sac.mutation.Creator(); ok {
		if err := sysaddress.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "SysAddress.creator": %w`, err)}
		}
	}
	if v, ok := sac.mutation.ID(); ok {
		if err := sysaddress.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.id": %w`, err)}
		}
	}
	return nil
}

func (sac *SysAddressCreate) sqlSave(ctx context.Context) (*SysAddress, error) {
	if err := sac.check(); err != nil {
		return nil, err
	}
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysAddress.ID type: %T", _spec.ID.Value)
		}
	}
	sac.mutation.id = &_node.ID
	sac.mutation.done = true
	return _node, nil
}

func (sac *SysAddressCreate) createSpec() (*SysAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &SysAddress{config: sac.config}
		_spec = sqlgraph.NewCreateSpec(sysaddress.Table, sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString))
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sac.mutation.IsDel(); ok {
		_spec.SetField(sysaddress.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := sac.mutation.OwnerID(); ok {
		_spec.SetField(sysaddress.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = &value
	}
	if value, ok := sac.mutation.Sort(); ok {
		_spec.SetField(sysaddress.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.SetField(sysaddress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.SetField(sysaddress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.DeletedAt(); ok {
		_spec.SetField(sysaddress.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sac.mutation.IsActive(); ok {
		_spec.SetField(sysaddress.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := sac.mutation.Memo(); ok {
		_spec.SetField(sysaddress.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := sac.mutation.Country(); ok {
		_spec.SetField(sysaddress.FieldCountry, field.TypeString, value)
		_node.Country = &value
	}
	if value, ok := sac.mutation.Provice(); ok {
		_spec.SetField(sysaddress.FieldProvice, field.TypeString, value)
		_node.Provice = &value
	}
	if value, ok := sac.mutation.City(); ok {
		_spec.SetField(sysaddress.FieldCity, field.TypeString, value)
		_node.City = &value
	}
	if value, ok := sac.mutation.County(); ok {
		_spec.SetField(sysaddress.FieldCounty, field.TypeString, value)
		_node.County = &value
	}
	if value, ok := sac.mutation.CountryID(); ok {
		_spec.SetField(sysaddress.FieldCountryID, field.TypeString, value)
		_node.CountryID = &value
	}
	if value, ok := sac.mutation.ProviceID(); ok {
		_spec.SetField(sysaddress.FieldProviceID, field.TypeString, value)
		_node.ProviceID = &value
	}
	if value, ok := sac.mutation.CityID(); ok {
		_spec.SetField(sysaddress.FieldCityID, field.TypeString, value)
		_node.CityID = &value
	}
	if value, ok := sac.mutation.CountyID(); ok {
		_spec.SetField(sysaddress.FieldCountyID, field.TypeString, value)
		_node.CountyID = &value
	}
	if value, ok := sac.mutation.ZipCode(); ok {
		_spec.SetField(sysaddress.FieldZipCode, field.TypeString, value)
		_node.ZipCode = &value
	}
	if value, ok := sac.mutation.Daddr(); ok {
		_spec.SetField(sysaddress.FieldDaddr, field.TypeString, value)
		_node.Daddr = &value
	}
	if value, ok := sac.mutation.Name(); ok {
		_spec.SetField(sysaddress.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := sac.mutation.Mobile(); ok {
		_spec.SetField(sysaddress.FieldMobile, field.TypeString, value)
		_node.Mobile = &value
	}
	if value, ok := sac.mutation.Creator(); ok {
		_spec.SetField(sysaddress.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	return _node, _spec
}

// SysAddressCreateBulk is the builder for creating many SysAddress entities in bulk.
type SysAddressCreateBulk struct {
	config
	builders []*SysAddressCreate
}

// Save creates the SysAddress entities in the database.
func (sacb *SysAddressCreateBulk) Save(ctx context.Context) ([]*SysAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SysAddress, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SysAddressCreateBulk) SaveX(ctx context.Context) []*SysAddress {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SysAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SysAddressCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
