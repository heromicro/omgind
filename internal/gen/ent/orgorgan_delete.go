// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/orgorgan"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
)

// OrgOrganDelete is the builder for deleting a OrgOrgan entity.
type OrgOrganDelete struct {
	config
	hooks    []Hook
	mutation *OrgOrganMutation
}

// Where appends a list predicates to the OrgOrganDelete builder.
func (ood *OrgOrganDelete) Where(ps ...predicate.OrgOrgan) *OrgOrganDelete {
	ood.mutation.Where(ps...)
	return ood
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ood *OrgOrganDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, OrgOrganMutation](ctx, ood.sqlExec, ood.mutation, ood.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ood *OrgOrganDelete) ExecX(ctx context.Context) int {
	n, err := ood.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ood *OrgOrganDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orgorgan.Table, sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString))
	if ps := ood.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ood.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ood.mutation.done = true
	return affected, err
}

// OrgOrganDeleteOne is the builder for deleting a single OrgOrgan entity.
type OrgOrganDeleteOne struct {
	ood *OrgOrganDelete
}

// Where appends a list predicates to the OrgOrganDelete builder.
func (oodo *OrgOrganDeleteOne) Where(ps ...predicate.OrgOrgan) *OrgOrganDeleteOne {
	oodo.ood.mutation.Where(ps...)
	return oodo
}

// Exec executes the deletion query.
func (oodo *OrgOrganDeleteOne) Exec(ctx context.Context) error {
	n, err := oodo.ood.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orgorgan.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (oodo *OrgOrganDeleteOne) ExecX(ctx context.Context) {
	if err := oodo.Exec(ctx); err != nil {
		panic(err)
	}
}
