// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/syslogging"
)

// SysLogging is the model entity for the SysLogging schema.
type SysLogging struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// 备注
	Memo string `json:"memo,omitempty"`
	// 日志级别
	Level string `json:"level,omitempty"`
	// 跟踪ID
	TraceID string `json:"trace_id,omitempty"`
	// 用户ID
	UserID string `json:"user_id,omitempty"`
	// Tag
	Tag string `json:"tag,omitempty"`
	// 版本号
	Version string `json:"version,omitempty"`
	// 消息
	Message string `json:"message,omitempty"`
	// 日志数据(json string)
	Data *string `json:"data,omitempty"`
	// 日志数据(json string)
	ErrorStack string `json:"error_stack,omitempty"`
	// 创建时间,由程序自动生成
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysLogging) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case syslogging.FieldIsDel:
			values[i] = new(sql.NullBool)
		case syslogging.FieldID, syslogging.FieldMemo, syslogging.FieldLevel, syslogging.FieldTraceID, syslogging.FieldUserID, syslogging.FieldTag, syslogging.FieldVersion, syslogging.FieldMessage, syslogging.FieldData, syslogging.FieldErrorStack:
			values[i] = new(sql.NullString)
		case syslogging.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SysLogging", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysLogging fields.
func (sl *SysLogging) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syslogging.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sl.ID = value.String
			}
		case syslogging.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				sl.IsDel = value.Bool
			}
		case syslogging.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				sl.Memo = value.String
			}
		case syslogging.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				sl.Level = value.String
			}
		case syslogging.FieldTraceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trace_id", values[i])
			} else if value.Valid {
				sl.TraceID = value.String
			}
		case syslogging.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sl.UserID = value.String
			}
		case syslogging.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				sl.Tag = value.String
			}
		case syslogging.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sl.Version = value.String
			}
		case syslogging.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				sl.Message = value.String
			}
		case syslogging.FieldData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value.Valid {
				sl.Data = new(string)
				*sl.Data = value.String
			}
		case syslogging.FieldErrorStack:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_stack", values[i])
			} else if value.Valid {
				sl.ErrorStack = value.String
			}
		case syslogging.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SysLogging.
// Note that you need to call SysLogging.Unwrap() before calling this method if this SysLogging
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SysLogging) Update() *SysLoggingUpdateOne {
	return (&SysLoggingClient{config: sl.config}).UpdateOne(sl)
}

// Unwrap unwraps the SysLogging entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SysLogging) Unwrap() *SysLogging {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SysLogging is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SysLogging) String() string {
	var builder strings.Builder
	builder.WriteString("SysLogging(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", sl.IsDel))
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(sl.Memo)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(sl.Level)
	builder.WriteString(", ")
	builder.WriteString("trace_id=")
	builder.WriteString(sl.TraceID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(sl.UserID)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(sl.Tag)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(sl.Version)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(sl.Message)
	builder.WriteString(", ")
	if v := sl.Data; v != nil {
		builder.WriteString("data=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("error_stack=")
	builder.WriteString(sl.ErrorStack)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SysLoggings is a parsable slice of SysLogging.
type SysLoggings []*SysLogging

func (sl SysLoggings) config(cfg config) {
	for _i := range sl {
		sl[_i].config = cfg
	}
}
