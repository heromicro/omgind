// Code generated by ent, DO NOT EDIT.

package sysdistrict

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Sname applies equality check predicate on the "sname" field. It's identical to SnameEQ.
func Sname(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSname), v))
	})
}

// Abbr applies equality check predicate on the "abbr" field. It's identical to AbbrEQ.
func Abbr(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbbr), v))
	})
}

// Stcode applies equality check predicate on the "stcode" field. It's identical to StcodeEQ.
func Stcode(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStcode), v))
	})
}

// Initials applies equality check predicate on the "initials" field. It's identical to InitialsEQ.
func Initials(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitials), v))
	})
}

// Pinyin applies equality check predicate on the "pinyin" field. It's identical to PinyinEQ.
func Pinyin(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPinyin), v))
	})
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// AreaCode applies equality check predicate on the "area_code" field. It's identical to AreaCodeEQ.
func AreaCode(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAreaCode), v))
	})
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// MergeName applies equality check predicate on the "merge_name" field. It's identical to MergeNameEQ.
func MergeName(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMergeName), v))
	})
}

// MergeSname applies equality check predicate on the "merge_sname" field. It's identical to MergeSnameEQ.
func MergeSname(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMergeSname), v))
	})
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtra), v))
	})
}

// Suffix applies equality check predicate on the "suffix" field. It's identical to SuffixEQ.
func Suffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// IsHot applies equality check predicate on the "is_hot" field. It's identical to IsHotEQ.
func IsHot(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// IsReal applies equality check predicate on the "is_real" field. It's identical to IsRealEQ.
func IsReal(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsReal), v))
	})
}

// IsDirect applies equality check predicate on the "is_direct" field. It's identical to IsDirectEQ.
func IsDirect(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDirect), v))
	})
}

// TreeID applies equality check predicate on the "tree_id" field. It's identical to TreeIDEQ.
func TreeID(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeID), v))
	})
}

// TreeLevel applies equality check predicate on the "tree_level" field. It's identical to TreeLevelEQ.
func TreeLevel(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeLevel), v))
	})
}

// TreeLeft applies equality check predicate on the "tree_left" field. It's identical to TreeLeftEQ.
func TreeLeft(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeLeft), v))
	})
}

// TreeRight applies equality check predicate on the "tree_right" field. It's identical to TreeRightEQ.
func TreeRight(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeRight), v))
	})
}

// IsLeaf applies equality check predicate on the "is_leaf" field. It's identical to IsLeafEQ.
func IsLeaf(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLeaf), v))
	})
}

// TreePath applies equality check predicate on the "tree_path" field. It's identical to TreePathEQ.
func TreePath(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreePath), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDel), v))
	})
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSort), v))
	})
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSort), v))
	})
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSort), v...))
	})
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSort), v...))
	})
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSort), v))
	})
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSort), v))
	})
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSort), v))
	})
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSort), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsActive), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SnameEQ applies the EQ predicate on the "sname" field.
func SnameEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSname), v))
	})
}

// SnameNEQ applies the NEQ predicate on the "sname" field.
func SnameNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSname), v))
	})
}

// SnameIn applies the In predicate on the "sname" field.
func SnameIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSname), v...))
	})
}

// SnameNotIn applies the NotIn predicate on the "sname" field.
func SnameNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSname), v...))
	})
}

// SnameGT applies the GT predicate on the "sname" field.
func SnameGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSname), v))
	})
}

// SnameGTE applies the GTE predicate on the "sname" field.
func SnameGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSname), v))
	})
}

// SnameLT applies the LT predicate on the "sname" field.
func SnameLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSname), v))
	})
}

// SnameLTE applies the LTE predicate on the "sname" field.
func SnameLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSname), v))
	})
}

// SnameContains applies the Contains predicate on the "sname" field.
func SnameContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSname), v))
	})
}

// SnameHasPrefix applies the HasPrefix predicate on the "sname" field.
func SnameHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSname), v))
	})
}

// SnameHasSuffix applies the HasSuffix predicate on the "sname" field.
func SnameHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSname), v))
	})
}

// SnameIsNil applies the IsNil predicate on the "sname" field.
func SnameIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSname)))
	})
}

// SnameNotNil applies the NotNil predicate on the "sname" field.
func SnameNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSname)))
	})
}

// SnameEqualFold applies the EqualFold predicate on the "sname" field.
func SnameEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSname), v))
	})
}

// SnameContainsFold applies the ContainsFold predicate on the "sname" field.
func SnameContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSname), v))
	})
}

// AbbrEQ applies the EQ predicate on the "abbr" field.
func AbbrEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAbbr), v))
	})
}

// AbbrNEQ applies the NEQ predicate on the "abbr" field.
func AbbrNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAbbr), v))
	})
}

// AbbrIn applies the In predicate on the "abbr" field.
func AbbrIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAbbr), v...))
	})
}

// AbbrNotIn applies the NotIn predicate on the "abbr" field.
func AbbrNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAbbr), v...))
	})
}

// AbbrGT applies the GT predicate on the "abbr" field.
func AbbrGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAbbr), v))
	})
}

// AbbrGTE applies the GTE predicate on the "abbr" field.
func AbbrGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAbbr), v))
	})
}

// AbbrLT applies the LT predicate on the "abbr" field.
func AbbrLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAbbr), v))
	})
}

// AbbrLTE applies the LTE predicate on the "abbr" field.
func AbbrLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAbbr), v))
	})
}

// AbbrContains applies the Contains predicate on the "abbr" field.
func AbbrContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAbbr), v))
	})
}

// AbbrHasPrefix applies the HasPrefix predicate on the "abbr" field.
func AbbrHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAbbr), v))
	})
}

// AbbrHasSuffix applies the HasSuffix predicate on the "abbr" field.
func AbbrHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAbbr), v))
	})
}

// AbbrIsNil applies the IsNil predicate on the "abbr" field.
func AbbrIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAbbr)))
	})
}

// AbbrNotNil applies the NotNil predicate on the "abbr" field.
func AbbrNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAbbr)))
	})
}

// AbbrEqualFold applies the EqualFold predicate on the "abbr" field.
func AbbrEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAbbr), v))
	})
}

// AbbrContainsFold applies the ContainsFold predicate on the "abbr" field.
func AbbrContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAbbr), v))
	})
}

// StcodeEQ applies the EQ predicate on the "stcode" field.
func StcodeEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStcode), v))
	})
}

// StcodeNEQ applies the NEQ predicate on the "stcode" field.
func StcodeNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStcode), v))
	})
}

// StcodeIn applies the In predicate on the "stcode" field.
func StcodeIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStcode), v...))
	})
}

// StcodeNotIn applies the NotIn predicate on the "stcode" field.
func StcodeNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStcode), v...))
	})
}

// StcodeGT applies the GT predicate on the "stcode" field.
func StcodeGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStcode), v))
	})
}

// StcodeGTE applies the GTE predicate on the "stcode" field.
func StcodeGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStcode), v))
	})
}

// StcodeLT applies the LT predicate on the "stcode" field.
func StcodeLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStcode), v))
	})
}

// StcodeLTE applies the LTE predicate on the "stcode" field.
func StcodeLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStcode), v))
	})
}

// StcodeContains applies the Contains predicate on the "stcode" field.
func StcodeContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStcode), v))
	})
}

// StcodeHasPrefix applies the HasPrefix predicate on the "stcode" field.
func StcodeHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStcode), v))
	})
}

// StcodeHasSuffix applies the HasSuffix predicate on the "stcode" field.
func StcodeHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStcode), v))
	})
}

// StcodeIsNil applies the IsNil predicate on the "stcode" field.
func StcodeIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStcode)))
	})
}

// StcodeNotNil applies the NotNil predicate on the "stcode" field.
func StcodeNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStcode)))
	})
}

// StcodeEqualFold applies the EqualFold predicate on the "stcode" field.
func StcodeEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStcode), v))
	})
}

// StcodeContainsFold applies the ContainsFold predicate on the "stcode" field.
func StcodeContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStcode), v))
	})
}

// InitialsEQ applies the EQ predicate on the "initials" field.
func InitialsEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInitials), v))
	})
}

// InitialsNEQ applies the NEQ predicate on the "initials" field.
func InitialsNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInitials), v))
	})
}

// InitialsIn applies the In predicate on the "initials" field.
func InitialsIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInitials), v...))
	})
}

// InitialsNotIn applies the NotIn predicate on the "initials" field.
func InitialsNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInitials), v...))
	})
}

// InitialsGT applies the GT predicate on the "initials" field.
func InitialsGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInitials), v))
	})
}

// InitialsGTE applies the GTE predicate on the "initials" field.
func InitialsGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInitials), v))
	})
}

// InitialsLT applies the LT predicate on the "initials" field.
func InitialsLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInitials), v))
	})
}

// InitialsLTE applies the LTE predicate on the "initials" field.
func InitialsLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInitials), v))
	})
}

// InitialsContains applies the Contains predicate on the "initials" field.
func InitialsContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInitials), v))
	})
}

// InitialsHasPrefix applies the HasPrefix predicate on the "initials" field.
func InitialsHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInitials), v))
	})
}

// InitialsHasSuffix applies the HasSuffix predicate on the "initials" field.
func InitialsHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInitials), v))
	})
}

// InitialsIsNil applies the IsNil predicate on the "initials" field.
func InitialsIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInitials)))
	})
}

// InitialsNotNil applies the NotNil predicate on the "initials" field.
func InitialsNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInitials)))
	})
}

// InitialsEqualFold applies the EqualFold predicate on the "initials" field.
func InitialsEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInitials), v))
	})
}

// InitialsContainsFold applies the ContainsFold predicate on the "initials" field.
func InitialsContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInitials), v))
	})
}

// PinyinEQ applies the EQ predicate on the "pinyin" field.
func PinyinEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPinyin), v))
	})
}

// PinyinNEQ applies the NEQ predicate on the "pinyin" field.
func PinyinNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPinyin), v))
	})
}

// PinyinIn applies the In predicate on the "pinyin" field.
func PinyinIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPinyin), v...))
	})
}

// PinyinNotIn applies the NotIn predicate on the "pinyin" field.
func PinyinNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPinyin), v...))
	})
}

// PinyinGT applies the GT predicate on the "pinyin" field.
func PinyinGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPinyin), v))
	})
}

// PinyinGTE applies the GTE predicate on the "pinyin" field.
func PinyinGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPinyin), v))
	})
}

// PinyinLT applies the LT predicate on the "pinyin" field.
func PinyinLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPinyin), v))
	})
}

// PinyinLTE applies the LTE predicate on the "pinyin" field.
func PinyinLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPinyin), v))
	})
}

// PinyinContains applies the Contains predicate on the "pinyin" field.
func PinyinContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPinyin), v))
	})
}

// PinyinHasPrefix applies the HasPrefix predicate on the "pinyin" field.
func PinyinHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPinyin), v))
	})
}

// PinyinHasSuffix applies the HasSuffix predicate on the "pinyin" field.
func PinyinHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPinyin), v))
	})
}

// PinyinIsNil applies the IsNil predicate on the "pinyin" field.
func PinyinIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPinyin)))
	})
}

// PinyinNotNil applies the NotNil predicate on the "pinyin" field.
func PinyinNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPinyin)))
	})
}

// PinyinEqualFold applies the EqualFold predicate on the "pinyin" field.
func PinyinEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPinyin), v))
	})
}

// PinyinContainsFold applies the ContainsFold predicate on the "pinyin" field.
func PinyinContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPinyin), v))
	})
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentID), v))
	})
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldParentID), v...))
	})
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldParentID), v...))
	})
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldParentID), v))
	})
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldParentID), v))
	})
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldParentID), v))
	})
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldParentID), v))
	})
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldParentID), v))
	})
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldParentID), v))
	})
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldParentID), v))
	})
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParentID)))
	})
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParentID)))
	})
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldParentID), v))
	})
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldParentID), v))
	})
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongitude), v))
	})
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...float64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLongitude), v...))
	})
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...float64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLongitude), v...))
	})
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongitude), v))
	})
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongitude), v))
	})
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongitude), v))
	})
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongitude), v))
	})
}

// LongitudeIsNil applies the IsNil predicate on the "longitude" field.
func LongitudeIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLongitude)))
	})
}

// LongitudeNotNil applies the NotNil predicate on the "longitude" field.
func LongitudeNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLongitude)))
	})
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatitude), v))
	})
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...float64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLatitude), v...))
	})
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...float64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLatitude), v...))
	})
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatitude), v))
	})
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatitude), v))
	})
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatitude), v))
	})
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v float64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatitude), v))
	})
}

// LatitudeIsNil applies the IsNil predicate on the "latitude" field.
func LatitudeIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLatitude)))
	})
}

// LatitudeNotNil applies the NotNil predicate on the "latitude" field.
func LatitudeNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLatitude)))
	})
}

// AreaCodeEQ applies the EQ predicate on the "area_code" field.
func AreaCodeEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAreaCode), v))
	})
}

// AreaCodeNEQ applies the NEQ predicate on the "area_code" field.
func AreaCodeNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAreaCode), v))
	})
}

// AreaCodeIn applies the In predicate on the "area_code" field.
func AreaCodeIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAreaCode), v...))
	})
}

// AreaCodeNotIn applies the NotIn predicate on the "area_code" field.
func AreaCodeNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAreaCode), v...))
	})
}

// AreaCodeGT applies the GT predicate on the "area_code" field.
func AreaCodeGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAreaCode), v))
	})
}

// AreaCodeGTE applies the GTE predicate on the "area_code" field.
func AreaCodeGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAreaCode), v))
	})
}

// AreaCodeLT applies the LT predicate on the "area_code" field.
func AreaCodeLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAreaCode), v))
	})
}

// AreaCodeLTE applies the LTE predicate on the "area_code" field.
func AreaCodeLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAreaCode), v))
	})
}

// AreaCodeContains applies the Contains predicate on the "area_code" field.
func AreaCodeContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAreaCode), v))
	})
}

// AreaCodeHasPrefix applies the HasPrefix predicate on the "area_code" field.
func AreaCodeHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAreaCode), v))
	})
}

// AreaCodeHasSuffix applies the HasSuffix predicate on the "area_code" field.
func AreaCodeHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAreaCode), v))
	})
}

// AreaCodeIsNil applies the IsNil predicate on the "area_code" field.
func AreaCodeIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAreaCode)))
	})
}

// AreaCodeNotNil applies the NotNil predicate on the "area_code" field.
func AreaCodeNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAreaCode)))
	})
}

// AreaCodeEqualFold applies the EqualFold predicate on the "area_code" field.
func AreaCodeEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAreaCode), v))
	})
}

// AreaCodeContainsFold applies the ContainsFold predicate on the "area_code" field.
func AreaCodeContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAreaCode), v))
	})
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldZipCode), v))
	})
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldZipCode), v...))
	})
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldZipCode), v...))
	})
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldZipCode), v))
	})
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldZipCode), v))
	})
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldZipCode), v))
	})
}

// ZipCodeContains applies the Contains predicate on the "zip_code" field.
func ZipCodeContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zip_code" field.
func ZipCodeHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldZipCode), v))
	})
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zip_code" field.
func ZipCodeHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldZipCode), v))
	})
}

// ZipCodeIsNil applies the IsNil predicate on the "zip_code" field.
func ZipCodeIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldZipCode)))
	})
}

// ZipCodeNotNil applies the NotNil predicate on the "zip_code" field.
func ZipCodeNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldZipCode)))
	})
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zip_code" field.
func ZipCodeEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldZipCode), v))
	})
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zip_code" field.
func ZipCodeContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldZipCode), v))
	})
}

// MergeNameEQ applies the EQ predicate on the "merge_name" field.
func MergeNameEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMergeName), v))
	})
}

// MergeNameNEQ applies the NEQ predicate on the "merge_name" field.
func MergeNameNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMergeName), v))
	})
}

// MergeNameIn applies the In predicate on the "merge_name" field.
func MergeNameIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMergeName), v...))
	})
}

// MergeNameNotIn applies the NotIn predicate on the "merge_name" field.
func MergeNameNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMergeName), v...))
	})
}

// MergeNameGT applies the GT predicate on the "merge_name" field.
func MergeNameGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMergeName), v))
	})
}

// MergeNameGTE applies the GTE predicate on the "merge_name" field.
func MergeNameGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMergeName), v))
	})
}

// MergeNameLT applies the LT predicate on the "merge_name" field.
func MergeNameLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMergeName), v))
	})
}

// MergeNameLTE applies the LTE predicate on the "merge_name" field.
func MergeNameLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMergeName), v))
	})
}

// MergeNameContains applies the Contains predicate on the "merge_name" field.
func MergeNameContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMergeName), v))
	})
}

// MergeNameHasPrefix applies the HasPrefix predicate on the "merge_name" field.
func MergeNameHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMergeName), v))
	})
}

// MergeNameHasSuffix applies the HasSuffix predicate on the "merge_name" field.
func MergeNameHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMergeName), v))
	})
}

// MergeNameIsNil applies the IsNil predicate on the "merge_name" field.
func MergeNameIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMergeName)))
	})
}

// MergeNameNotNil applies the NotNil predicate on the "merge_name" field.
func MergeNameNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMergeName)))
	})
}

// MergeNameEqualFold applies the EqualFold predicate on the "merge_name" field.
func MergeNameEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMergeName), v))
	})
}

// MergeNameContainsFold applies the ContainsFold predicate on the "merge_name" field.
func MergeNameContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMergeName), v))
	})
}

// MergeSnameEQ applies the EQ predicate on the "merge_sname" field.
func MergeSnameEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMergeSname), v))
	})
}

// MergeSnameNEQ applies the NEQ predicate on the "merge_sname" field.
func MergeSnameNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMergeSname), v))
	})
}

// MergeSnameIn applies the In predicate on the "merge_sname" field.
func MergeSnameIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMergeSname), v...))
	})
}

// MergeSnameNotIn applies the NotIn predicate on the "merge_sname" field.
func MergeSnameNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMergeSname), v...))
	})
}

// MergeSnameGT applies the GT predicate on the "merge_sname" field.
func MergeSnameGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMergeSname), v))
	})
}

// MergeSnameGTE applies the GTE predicate on the "merge_sname" field.
func MergeSnameGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMergeSname), v))
	})
}

// MergeSnameLT applies the LT predicate on the "merge_sname" field.
func MergeSnameLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMergeSname), v))
	})
}

// MergeSnameLTE applies the LTE predicate on the "merge_sname" field.
func MergeSnameLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMergeSname), v))
	})
}

// MergeSnameContains applies the Contains predicate on the "merge_sname" field.
func MergeSnameContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMergeSname), v))
	})
}

// MergeSnameHasPrefix applies the HasPrefix predicate on the "merge_sname" field.
func MergeSnameHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMergeSname), v))
	})
}

// MergeSnameHasSuffix applies the HasSuffix predicate on the "merge_sname" field.
func MergeSnameHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMergeSname), v))
	})
}

// MergeSnameIsNil applies the IsNil predicate on the "merge_sname" field.
func MergeSnameIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMergeSname)))
	})
}

// MergeSnameNotNil applies the NotNil predicate on the "merge_sname" field.
func MergeSnameNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMergeSname)))
	})
}

// MergeSnameEqualFold applies the EqualFold predicate on the "merge_sname" field.
func MergeSnameEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMergeSname), v))
	})
}

// MergeSnameContainsFold applies the ContainsFold predicate on the "merge_sname" field.
func MergeSnameContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMergeSname), v))
	})
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExtra), v))
	})
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExtra), v))
	})
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExtra), v...))
	})
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExtra), v...))
	})
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExtra), v))
	})
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExtra), v))
	})
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExtra), v))
	})
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExtra), v))
	})
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExtra), v))
	})
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExtra), v))
	})
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExtra), v))
	})
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExtra)))
	})
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExtra)))
	})
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExtra), v))
	})
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExtra), v))
	})
}

// SuffixEQ applies the EQ predicate on the "suffix" field.
func SuffixEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuffix), v))
	})
}

// SuffixNEQ applies the NEQ predicate on the "suffix" field.
func SuffixNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuffix), v))
	})
}

// SuffixIn applies the In predicate on the "suffix" field.
func SuffixIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuffix), v...))
	})
}

// SuffixNotIn applies the NotIn predicate on the "suffix" field.
func SuffixNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuffix), v...))
	})
}

// SuffixGT applies the GT predicate on the "suffix" field.
func SuffixGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuffix), v))
	})
}

// SuffixGTE applies the GTE predicate on the "suffix" field.
func SuffixGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuffix), v))
	})
}

// SuffixLT applies the LT predicate on the "suffix" field.
func SuffixLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuffix), v))
	})
}

// SuffixLTE applies the LTE predicate on the "suffix" field.
func SuffixLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuffix), v))
	})
}

// SuffixContains applies the Contains predicate on the "suffix" field.
func SuffixContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSuffix), v))
	})
}

// SuffixHasPrefix applies the HasPrefix predicate on the "suffix" field.
func SuffixHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSuffix), v))
	})
}

// SuffixHasSuffix applies the HasSuffix predicate on the "suffix" field.
func SuffixHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSuffix), v))
	})
}

// SuffixIsNil applies the IsNil predicate on the "suffix" field.
func SuffixIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuffix)))
	})
}

// SuffixNotNil applies the NotNil predicate on the "suffix" field.
func SuffixNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuffix)))
	})
}

// SuffixEqualFold applies the EqualFold predicate on the "suffix" field.
func SuffixEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSuffix), v))
	})
}

// SuffixContainsFold applies the ContainsFold predicate on the "suffix" field.
func SuffixContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSuffix), v))
	})
}

// IsHotEQ applies the EQ predicate on the "is_hot" field.
func IsHotEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsHot), v))
	})
}

// IsHotNEQ applies the NEQ predicate on the "is_hot" field.
func IsHotNEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsHot), v))
	})
}

// IsHotIsNil applies the IsNil predicate on the "is_hot" field.
func IsHotIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsHot)))
	})
}

// IsHotNotNil applies the NotNil predicate on the "is_hot" field.
func IsHotNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsHot)))
	})
}

// IsRealEQ applies the EQ predicate on the "is_real" field.
func IsRealEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsReal), v))
	})
}

// IsRealNEQ applies the NEQ predicate on the "is_real" field.
func IsRealNEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsReal), v))
	})
}

// IsRealIsNil applies the IsNil predicate on the "is_real" field.
func IsRealIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsReal)))
	})
}

// IsRealNotNil applies the NotNil predicate on the "is_real" field.
func IsRealNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsReal)))
	})
}

// IsDirectEQ applies the EQ predicate on the "is_direct" field.
func IsDirectEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDirect), v))
	})
}

// IsDirectNEQ applies the NEQ predicate on the "is_direct" field.
func IsDirectNEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDirect), v))
	})
}

// IsDirectIsNil applies the IsNil predicate on the "is_direct" field.
func IsDirectIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDirect)))
	})
}

// IsDirectNotNil applies the NotNil predicate on the "is_direct" field.
func IsDirectNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDirect)))
	})
}

// TreeIDEQ applies the EQ predicate on the "tree_id" field.
func TreeIDEQ(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeID), v))
	})
}

// TreeIDNEQ applies the NEQ predicate on the "tree_id" field.
func TreeIDNEQ(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreeID), v))
	})
}

// TreeIDIn applies the In predicate on the "tree_id" field.
func TreeIDIn(vs ...int32) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreeID), v...))
	})
}

// TreeIDNotIn applies the NotIn predicate on the "tree_id" field.
func TreeIDNotIn(vs ...int32) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreeID), v...))
	})
}

// TreeIDGT applies the GT predicate on the "tree_id" field.
func TreeIDGT(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreeID), v))
	})
}

// TreeIDGTE applies the GTE predicate on the "tree_id" field.
func TreeIDGTE(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreeID), v))
	})
}

// TreeIDLT applies the LT predicate on the "tree_id" field.
func TreeIDLT(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreeID), v))
	})
}

// TreeIDLTE applies the LTE predicate on the "tree_id" field.
func TreeIDLTE(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreeID), v))
	})
}

// TreeIDIsNil applies the IsNil predicate on the "tree_id" field.
func TreeIDIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreeID)))
	})
}

// TreeIDNotNil applies the NotNil predicate on the "tree_id" field.
func TreeIDNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreeID)))
	})
}

// TreeLevelEQ applies the EQ predicate on the "tree_level" field.
func TreeLevelEQ(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeLevel), v))
	})
}

// TreeLevelNEQ applies the NEQ predicate on the "tree_level" field.
func TreeLevelNEQ(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreeLevel), v))
	})
}

// TreeLevelIn applies the In predicate on the "tree_level" field.
func TreeLevelIn(vs ...int32) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreeLevel), v...))
	})
}

// TreeLevelNotIn applies the NotIn predicate on the "tree_level" field.
func TreeLevelNotIn(vs ...int32) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreeLevel), v...))
	})
}

// TreeLevelGT applies the GT predicate on the "tree_level" field.
func TreeLevelGT(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreeLevel), v))
	})
}

// TreeLevelGTE applies the GTE predicate on the "tree_level" field.
func TreeLevelGTE(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreeLevel), v))
	})
}

// TreeLevelLT applies the LT predicate on the "tree_level" field.
func TreeLevelLT(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreeLevel), v))
	})
}

// TreeLevelLTE applies the LTE predicate on the "tree_level" field.
func TreeLevelLTE(v int32) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreeLevel), v))
	})
}

// TreeLevelIsNil applies the IsNil predicate on the "tree_level" field.
func TreeLevelIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreeLevel)))
	})
}

// TreeLevelNotNil applies the NotNil predicate on the "tree_level" field.
func TreeLevelNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreeLevel)))
	})
}

// TreeLeftEQ applies the EQ predicate on the "tree_left" field.
func TreeLeftEQ(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeLeft), v))
	})
}

// TreeLeftNEQ applies the NEQ predicate on the "tree_left" field.
func TreeLeftNEQ(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreeLeft), v))
	})
}

// TreeLeftIn applies the In predicate on the "tree_left" field.
func TreeLeftIn(vs ...int64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreeLeft), v...))
	})
}

// TreeLeftNotIn applies the NotIn predicate on the "tree_left" field.
func TreeLeftNotIn(vs ...int64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreeLeft), v...))
	})
}

// TreeLeftGT applies the GT predicate on the "tree_left" field.
func TreeLeftGT(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreeLeft), v))
	})
}

// TreeLeftGTE applies the GTE predicate on the "tree_left" field.
func TreeLeftGTE(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreeLeft), v))
	})
}

// TreeLeftLT applies the LT predicate on the "tree_left" field.
func TreeLeftLT(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreeLeft), v))
	})
}

// TreeLeftLTE applies the LTE predicate on the "tree_left" field.
func TreeLeftLTE(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreeLeft), v))
	})
}

// TreeLeftIsNil applies the IsNil predicate on the "tree_left" field.
func TreeLeftIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreeLeft)))
	})
}

// TreeLeftNotNil applies the NotNil predicate on the "tree_left" field.
func TreeLeftNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreeLeft)))
	})
}

// TreeRightEQ applies the EQ predicate on the "tree_right" field.
func TreeRightEQ(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreeRight), v))
	})
}

// TreeRightNEQ applies the NEQ predicate on the "tree_right" field.
func TreeRightNEQ(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreeRight), v))
	})
}

// TreeRightIn applies the In predicate on the "tree_right" field.
func TreeRightIn(vs ...int64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreeRight), v...))
	})
}

// TreeRightNotIn applies the NotIn predicate on the "tree_right" field.
func TreeRightNotIn(vs ...int64) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreeRight), v...))
	})
}

// TreeRightGT applies the GT predicate on the "tree_right" field.
func TreeRightGT(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreeRight), v))
	})
}

// TreeRightGTE applies the GTE predicate on the "tree_right" field.
func TreeRightGTE(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreeRight), v))
	})
}

// TreeRightLT applies the LT predicate on the "tree_right" field.
func TreeRightLT(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreeRight), v))
	})
}

// TreeRightLTE applies the LTE predicate on the "tree_right" field.
func TreeRightLTE(v int64) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreeRight), v))
	})
}

// TreeRightIsNil applies the IsNil predicate on the "tree_right" field.
func TreeRightIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreeRight)))
	})
}

// TreeRightNotNil applies the NotNil predicate on the "tree_right" field.
func TreeRightNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreeRight)))
	})
}

// IsLeafEQ applies the EQ predicate on the "is_leaf" field.
func IsLeafEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLeaf), v))
	})
}

// IsLeafNEQ applies the NEQ predicate on the "is_leaf" field.
func IsLeafNEQ(v bool) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLeaf), v))
	})
}

// IsLeafIsNil applies the IsNil predicate on the "is_leaf" field.
func IsLeafIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsLeaf)))
	})
}

// IsLeafNotNil applies the NotNil predicate on the "is_leaf" field.
func IsLeafNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsLeaf)))
	})
}

// TreePathEQ applies the EQ predicate on the "tree_path" field.
func TreePathEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTreePath), v))
	})
}

// TreePathNEQ applies the NEQ predicate on the "tree_path" field.
func TreePathNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTreePath), v))
	})
}

// TreePathIn applies the In predicate on the "tree_path" field.
func TreePathIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTreePath), v...))
	})
}

// TreePathNotIn applies the NotIn predicate on the "tree_path" field.
func TreePathNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTreePath), v...))
	})
}

// TreePathGT applies the GT predicate on the "tree_path" field.
func TreePathGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTreePath), v))
	})
}

// TreePathGTE applies the GTE predicate on the "tree_path" field.
func TreePathGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTreePath), v))
	})
}

// TreePathLT applies the LT predicate on the "tree_path" field.
func TreePathLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTreePath), v))
	})
}

// TreePathLTE applies the LTE predicate on the "tree_path" field.
func TreePathLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTreePath), v))
	})
}

// TreePathContains applies the Contains predicate on the "tree_path" field.
func TreePathContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTreePath), v))
	})
}

// TreePathHasPrefix applies the HasPrefix predicate on the "tree_path" field.
func TreePathHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTreePath), v))
	})
}

// TreePathHasSuffix applies the HasSuffix predicate on the "tree_path" field.
func TreePathHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTreePath), v))
	})
}

// TreePathIsNil applies the IsNil predicate on the "tree_path" field.
func TreePathIsNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTreePath)))
	})
}

// TreePathNotNil applies the NotNil predicate on the "tree_path" field.
func TreePathNotNil() predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTreePath)))
	})
}

// TreePathEqualFold applies the EqualFold predicate on the "tree_path" field.
func TreePathEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTreePath), v))
	})
}

// TreePathContainsFold applies the ContainsFold predicate on the "tree_path" field.
func TreePathContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTreePath), v))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.SysDistrict {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SysDistrict(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreator), v))
	})
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreator), v))
	})
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreator), v))
	})
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreator), v))
	})
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreator), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysDistrict) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysDistrict) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysDistrict) predicate.SysDistrict {
	return predicate.SysDistrict(func(s *sql.Selector) {
		p(s.Not())
	})
}
