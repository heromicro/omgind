// Code generated by ent, DO NOT EDIT.

package orgstaff

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the orgstaff type in the database.
	Label = "org_staff"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "crtd_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "uptd_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "dltd_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldGenderDictID holds the string denoting the gender_dict_id field in the database.
	FieldGenderDictID = "gender_dict_id"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldIdenNo holds the string denoting the iden_no field in the database.
	FieldIdenNo = "iden_no"
	// FieldIdenAddrID holds the string denoting the iden_addr_id field in the database.
	FieldIdenAddrID = "idaddr_id"
	// FieldResiAddrID holds the string denoting the resi_addr_id field in the database.
	FieldResiAddrID = "rsaddr_id"
	// FieldWorkerNo holds the string denoting the worker_no field in the database.
	FieldWorkerNo = "worker_no"
	// FieldCubicle holds the string denoting the cubicle field in the database.
	FieldCubicle = "cubicle"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldEntryDate holds the string denoting the entry_date field in the database.
	FieldEntryDate = "entry_date"
	// FieldRegularDate holds the string denoting the regular_date field in the database.
	FieldRegularDate = "regu_date"
	// FieldResignDate holds the string denoting the resign_date field in the database.
	FieldResignDate = "resign_date"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldEmpyStat holds the string denoting the empy_stat field in the database.
	FieldEmpyStat = "empy_stat"
	// FieldEmpystDictID holds the string denoting the empyst_dict_id field in the database.
	FieldEmpystDictID = "empyst_dict_id"
	// FieldDeptID holds the string denoting the dept_id field in the database.
	FieldDeptID = "dept_id"
	// FieldPosiID holds the string denoting the posi_id field in the database.
	FieldPosiID = "posi_id"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// EdgeOrgan holds the string denoting the organ edge name in mutations.
	EdgeOrgan = "organ"
	// EdgeIdenAddr holds the string denoting the iden_addr edge name in mutations.
	EdgeIdenAddr = "iden_addr"
	// EdgeResiAddr holds the string denoting the resi_addr edge name in mutations.
	EdgeResiAddr = "resi_addr"
	// EdgeDept holds the string denoting the dept edge name in mutations.
	EdgeDept = "dept"
	// EdgePosi holds the string denoting the posi edge name in mutations.
	EdgePosi = "posi"
	// Table holds the table name of the orgstaff in the database.
	Table = "org_staffs"
	// OrganTable is the table that holds the organ relation/edge.
	OrganTable = "org_staffs"
	// OrganInverseTable is the table name for the OrgOrgan entity.
	// It exists in this package in order to avoid circular dependency with the "orgorgan" package.
	OrganInverseTable = "org_organs"
	// OrganColumn is the table column denoting the organ relation/edge.
	OrganColumn = "org_id"
	// IdenAddrTable is the table that holds the iden_addr relation/edge.
	IdenAddrTable = "org_staffs"
	// IdenAddrInverseTable is the table name for the SysAddress entity.
	// It exists in this package in order to avoid circular dependency with the "sysaddress" package.
	IdenAddrInverseTable = "sys_addresses"
	// IdenAddrColumn is the table column denoting the iden_addr relation/edge.
	IdenAddrColumn = "idaddr_id"
	// ResiAddrTable is the table that holds the resi_addr relation/edge.
	ResiAddrTable = "org_staffs"
	// ResiAddrInverseTable is the table name for the SysAddress entity.
	// It exists in this package in order to avoid circular dependency with the "sysaddress" package.
	ResiAddrInverseTable = "sys_addresses"
	// ResiAddrColumn is the table column denoting the resi_addr relation/edge.
	ResiAddrColumn = "rsaddr_id"
	// DeptTable is the table that holds the dept relation/edge.
	DeptTable = "org_staffs"
	// DeptInverseTable is the table name for the OrgDept entity.
	// It exists in this package in order to avoid circular dependency with the "orgdept" package.
	DeptInverseTable = "org_depts"
	// DeptColumn is the table column denoting the dept relation/edge.
	DeptColumn = "dept_id"
	// PosiTable is the table that holds the posi relation/edge.
	PosiTable = "org_staffs"
	// PosiInverseTable is the table name for the OrgPosition entity.
	// It exists in this package in order to avoid circular dependency with the "orgposition" package.
	PosiInverseTable = "org_positions"
	// PosiColumn is the table column denoting the posi relation/edge.
	PosiColumn = "posi_id"
)

// Columns holds all SQL columns for orgstaff fields.
var Columns = []string{
	FieldID,
	FieldIsDel,
	FieldSort,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldIsActive,
	FieldMemo,
	FieldFirstName,
	FieldLastName,
	FieldMobile,
	FieldGender,
	FieldGenderDictID,
	FieldBirthDate,
	FieldIdenNo,
	FieldIdenAddrID,
	FieldResiAddrID,
	FieldWorkerNo,
	FieldCubicle,
	FieldRank,
	FieldEntryDate,
	FieldRegularDate,
	FieldResignDate,
	FieldOrgID,
	FieldEmpyStat,
	FieldEmpystDictID,
	FieldDeptID,
	FieldPosiID,
	FieldCreator,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDel holds the default value on creation for the "is_del" field.
	DefaultIsDel bool
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort int32
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultMemo holds the default value on creation for the "memo" field.
	DefaultMemo string
	// MemoValidator is a validator for the "memo" field. It is called by the builders before save.
	MemoValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// MobileValidator is a validator for the "mobile" field. It is called by the builders before save.
	MobileValidator func(string) error
	// GenderDictIDValidator is a validator for the "gender_dict_id" field. It is called by the builders before save.
	GenderDictIDValidator func(string) error
	// IdenAddrIDValidator is a validator for the "iden_addr_id" field. It is called by the builders before save.
	IdenAddrIDValidator func(string) error
	// ResiAddrIDValidator is a validator for the "resi_addr_id" field. It is called by the builders before save.
	ResiAddrIDValidator func(string) error
	// WorkerNoValidator is a validator for the "worker_no" field. It is called by the builders before save.
	WorkerNoValidator func(string) error
	// CubicleValidator is a validator for the "cubicle" field. It is called by the builders before save.
	CubicleValidator func(string) error
	// RankValidator is a validator for the "rank" field. It is called by the builders before save.
	RankValidator func(string) error
	// OrgIDValidator is a validator for the "org_id" field. It is called by the builders before save.
	OrgIDValidator func(string) error
	// DefaultEmpyStat holds the default value on creation for the "empy_stat" field.
	DefaultEmpyStat int32
	// EmpystDictIDValidator is a validator for the "empyst_dict_id" field. It is called by the builders before save.
	EmpystDictIDValidator func(string) error
	// DeptIDValidator is a validator for the "dept_id" field. It is called by the builders before save.
	DeptIDValidator func(string) error
	// PosiIDValidator is a validator for the "posi_id" field. It is called by the builders before save.
	PosiIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the OrgStaff queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsDel orders the results by the is_del field.
func ByIsDel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDel, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByGenderDictID orders the results by the gender_dict_id field.
func ByGenderDictID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenderDictID, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByIdenNo orders the results by the iden_no field.
func ByIdenNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdenNo, opts...).ToFunc()
}

// ByIdenAddrID orders the results by the iden_addr_id field.
func ByIdenAddrID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdenAddrID, opts...).ToFunc()
}

// ByResiAddrID orders the results by the resi_addr_id field.
func ByResiAddrID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResiAddrID, opts...).ToFunc()
}

// ByWorkerNo orders the results by the worker_no field.
func ByWorkerNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkerNo, opts...).ToFunc()
}

// ByCubicle orders the results by the cubicle field.
func ByCubicle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCubicle, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByEntryDate orders the results by the entry_date field.
func ByEntryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEntryDate, opts...).ToFunc()
}

// ByRegularDate orders the results by the regular_date field.
func ByRegularDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegularDate, opts...).ToFunc()
}

// ByResignDate orders the results by the resign_date field.
func ByResignDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResignDate, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// ByEmpyStat orders the results by the empy_stat field.
func ByEmpyStat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmpyStat, opts...).ToFunc()
}

// ByEmpystDictID orders the results by the empyst_dict_id field.
func ByEmpystDictID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmpystDictID, opts...).ToFunc()
}

// ByDeptID orders the results by the dept_id field.
func ByDeptID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeptID, opts...).ToFunc()
}

// ByPosiID orders the results by the posi_id field.
func ByPosiID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosiID, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByOrganField orders the results by organ field.
func ByOrganField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganStep(), sql.OrderByField(field, opts...))
	}
}

// ByIdenAddrField orders the results by iden_addr field.
func ByIdenAddrField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIdenAddrStep(), sql.OrderByField(field, opts...))
	}
}

// ByResiAddrField orders the results by resi_addr field.
func ByResiAddrField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newResiAddrStep(), sql.OrderByField(field, opts...))
	}
}

// ByDeptField orders the results by dept field.
func ByDeptField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeptStep(), sql.OrderByField(field, opts...))
	}
}

// ByPosiField orders the results by posi field.
func ByPosiField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPosiStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganTable, OrganColumn),
	)
}
func newIdenAddrStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IdenAddrInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, IdenAddrTable, IdenAddrColumn),
	)
}
func newResiAddrStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ResiAddrInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ResiAddrTable, ResiAddrColumn),
	)
}
func newDeptStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeptInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeptTable, DeptColumn),
	)
}
func newPosiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PosiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PosiTable, PosiColumn),
	)
}
