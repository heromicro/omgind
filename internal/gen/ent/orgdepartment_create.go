// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/orgdepartment"
	"github.com/heromicro/omgind/internal/gen/ent/orgorgan"
)

// OrgDepartmentCreate is the builder for creating a OrgDepartment entity.
type OrgDepartmentCreate struct {
	config
	mutation *OrgDepartmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (odc *OrgDepartmentCreate) SetIsDel(b bool) *OrgDepartmentCreate {
	odc.mutation.SetIsDel(b)
	return odc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableIsDel(b *bool) *OrgDepartmentCreate {
	if b != nil {
		odc.SetIsDel(*b)
	}
	return odc
}

// SetSort sets the "sort" field.
func (odc *OrgDepartmentCreate) SetSort(i int32) *OrgDepartmentCreate {
	odc.mutation.SetSort(i)
	return odc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableSort(i *int32) *OrgDepartmentCreate {
	if i != nil {
		odc.SetSort(*i)
	}
	return odc
}

// SetCreatedAt sets the "created_at" field.
func (odc *OrgDepartmentCreate) SetCreatedAt(t time.Time) *OrgDepartmentCreate {
	odc.mutation.SetCreatedAt(t)
	return odc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableCreatedAt(t *time.Time) *OrgDepartmentCreate {
	if t != nil {
		odc.SetCreatedAt(*t)
	}
	return odc
}

// SetUpdatedAt sets the "updated_at" field.
func (odc *OrgDepartmentCreate) SetUpdatedAt(t time.Time) *OrgDepartmentCreate {
	odc.mutation.SetUpdatedAt(t)
	return odc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableUpdatedAt(t *time.Time) *OrgDepartmentCreate {
	if t != nil {
		odc.SetUpdatedAt(*t)
	}
	return odc
}

// SetDeletedAt sets the "deleted_at" field.
func (odc *OrgDepartmentCreate) SetDeletedAt(t time.Time) *OrgDepartmentCreate {
	odc.mutation.SetDeletedAt(t)
	return odc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableDeletedAt(t *time.Time) *OrgDepartmentCreate {
	if t != nil {
		odc.SetDeletedAt(*t)
	}
	return odc
}

// SetIsActive sets the "is_active" field.
func (odc *OrgDepartmentCreate) SetIsActive(b bool) *OrgDepartmentCreate {
	odc.mutation.SetIsActive(b)
	return odc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableIsActive(b *bool) *OrgDepartmentCreate {
	if b != nil {
		odc.SetIsActive(*b)
	}
	return odc
}

// SetMemo sets the "memo" field.
func (odc *OrgDepartmentCreate) SetMemo(s string) *OrgDepartmentCreate {
	odc.mutation.SetMemo(s)
	return odc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableMemo(s *string) *OrgDepartmentCreate {
	if s != nil {
		odc.SetMemo(*s)
	}
	return odc
}

// SetName sets the "name" field.
func (odc *OrgDepartmentCreate) SetName(s string) *OrgDepartmentCreate {
	odc.mutation.SetName(s)
	return odc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableName(s *string) *OrgDepartmentCreate {
	if s != nil {
		odc.SetName(*s)
	}
	return odc
}

// SetCode sets the "code" field.
func (odc *OrgDepartmentCreate) SetCode(s string) *OrgDepartmentCreate {
	odc.mutation.SetCode(s)
	return odc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableCode(s *string) *OrgDepartmentCreate {
	if s != nil {
		odc.SetCode(*s)
	}
	return odc
}

// SetOrgID sets the "org_id" field.
func (odc *OrgDepartmentCreate) SetOrgID(s string) *OrgDepartmentCreate {
	odc.mutation.SetOrgID(s)
	return odc
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableOrgID(s *string) *OrgDepartmentCreate {
	if s != nil {
		odc.SetOrgID(*s)
	}
	return odc
}

// SetCreator sets the "creator" field.
func (odc *OrgDepartmentCreate) SetCreator(s string) *OrgDepartmentCreate {
	odc.mutation.SetCreator(s)
	return odc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableCreator(s *string) *OrgDepartmentCreate {
	if s != nil {
		odc.SetCreator(*s)
	}
	return odc
}

// SetID sets the "id" field.
func (odc *OrgDepartmentCreate) SetID(s string) *OrgDepartmentCreate {
	odc.mutation.SetID(s)
	return odc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableID(s *string) *OrgDepartmentCreate {
	if s != nil {
		odc.SetID(*s)
	}
	return odc
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by ID.
func (odc *OrgDepartmentCreate) SetOrganID(id string) *OrgDepartmentCreate {
	odc.mutation.SetOrganID(id)
	return odc
}

// SetNillableOrganID sets the "organ" edge to the OrgOrgan entity by ID if the given value is not nil.
func (odc *OrgDepartmentCreate) SetNillableOrganID(id *string) *OrgDepartmentCreate {
	if id != nil {
		odc = odc.SetOrganID(*id)
	}
	return odc
}

// SetOrgan sets the "organ" edge to the OrgOrgan entity.
func (odc *OrgDepartmentCreate) SetOrgan(o *OrgOrgan) *OrgDepartmentCreate {
	return odc.SetOrganID(o.ID)
}

// Mutation returns the OrgDepartmentMutation object of the builder.
func (odc *OrgDepartmentCreate) Mutation() *OrgDepartmentMutation {
	return odc.mutation
}

// Save creates the OrgDepartment in the database.
func (odc *OrgDepartmentCreate) Save(ctx context.Context) (*OrgDepartment, error) {
	odc.defaults()
	return withHooks[*OrgDepartment, OrgDepartmentMutation](ctx, odc.sqlSave, odc.mutation, odc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (odc *OrgDepartmentCreate) SaveX(ctx context.Context) *OrgDepartment {
	v, err := odc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odc *OrgDepartmentCreate) Exec(ctx context.Context) error {
	_, err := odc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odc *OrgDepartmentCreate) ExecX(ctx context.Context) {
	if err := odc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (odc *OrgDepartmentCreate) defaults() {
	if _, ok := odc.mutation.IsDel(); !ok {
		v := orgdepartment.DefaultIsDel
		odc.mutation.SetIsDel(v)
	}
	if _, ok := odc.mutation.Sort(); !ok {
		v := orgdepartment.DefaultSort
		odc.mutation.SetSort(v)
	}
	if _, ok := odc.mutation.CreatedAt(); !ok {
		v := orgdepartment.DefaultCreatedAt()
		odc.mutation.SetCreatedAt(v)
	}
	if _, ok := odc.mutation.UpdatedAt(); !ok {
		v := orgdepartment.DefaultUpdatedAt()
		odc.mutation.SetUpdatedAt(v)
	}
	if _, ok := odc.mutation.IsActive(); !ok {
		v := orgdepartment.DefaultIsActive
		odc.mutation.SetIsActive(v)
	}
	if _, ok := odc.mutation.Memo(); !ok {
		v := orgdepartment.DefaultMemo
		odc.mutation.SetMemo(v)
	}
	if _, ok := odc.mutation.ID(); !ok {
		v := orgdepartment.DefaultID()
		odc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (odc *OrgDepartmentCreate) check() error {
	if _, ok := odc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "OrgDepartment.is_del"`)}
	}
	if _, ok := odc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "OrgDepartment.sort"`)}
	}
	if _, ok := odc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "OrgDepartment.is_active"`)}
	}
	if v, ok := odc.mutation.Memo(); ok {
		if err := orgdepartment.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "OrgDepartment.memo": %w`, err)}
		}
	}
	if v, ok := odc.mutation.Name(); ok {
		if err := orgdepartment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrgDepartment.name": %w`, err)}
		}
	}
	if v, ok := odc.mutation.Code(); ok {
		if err := orgdepartment.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "OrgDepartment.code": %w`, err)}
		}
	}
	if v, ok := odc.mutation.OrgID(); ok {
		if err := orgdepartment.OrgIDValidator(v); err != nil {
			return &ValidationError{Name: "org_id", err: fmt.Errorf(`ent: validator failed for field "OrgDepartment.org_id": %w`, err)}
		}
	}
	if v, ok := odc.mutation.ID(); ok {
		if err := orgdepartment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OrgDepartment.id": %w`, err)}
		}
	}
	return nil
}

func (odc *OrgDepartmentCreate) sqlSave(ctx context.Context) (*OrgDepartment, error) {
	if err := odc.check(); err != nil {
		return nil, err
	}
	_node, _spec := odc.createSpec()
	if err := sqlgraph.CreateNode(ctx, odc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgDepartment.ID type: %T", _spec.ID.Value)
		}
	}
	odc.mutation.id = &_node.ID
	odc.mutation.done = true
	return _node, nil
}

func (odc *OrgDepartmentCreate) createSpec() (*OrgDepartment, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgDepartment{config: odc.config}
		_spec = sqlgraph.NewCreateSpec(orgdepartment.Table, sqlgraph.NewFieldSpec(orgdepartment.FieldID, field.TypeString))
	)
	_spec.Schema = odc.schemaConfig.OrgDepartment
	_spec.OnConflict = odc.conflict
	if id, ok := odc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := odc.mutation.IsDel(); ok {
		_spec.SetField(orgdepartment.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := odc.mutation.Sort(); ok {
		_spec.SetField(orgdepartment.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := odc.mutation.CreatedAt(); ok {
		_spec.SetField(orgdepartment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := odc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgdepartment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := odc.mutation.DeletedAt(); ok {
		_spec.SetField(orgdepartment.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := odc.mutation.IsActive(); ok {
		_spec.SetField(orgdepartment.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := odc.mutation.Memo(); ok {
		_spec.SetField(orgdepartment.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := odc.mutation.Name(); ok {
		_spec.SetField(orgdepartment.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := odc.mutation.Code(); ok {
		_spec.SetField(orgdepartment.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := odc.mutation.Creator(); ok {
		_spec.SetField(orgdepartment.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if nodes := odc.mutation.OrganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgdepartment.OrganTable,
			Columns: []string{orgdepartment.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		edge.Schema = odc.schemaConfig.OrgDepartment
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgDepartment.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgDepartmentUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (odc *OrgDepartmentCreate) OnConflict(opts ...sql.ConflictOption) *OrgDepartmentUpsertOne {
	odc.conflict = opts
	return &OrgDepartmentUpsertOne{
		create: odc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgDepartment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (odc *OrgDepartmentCreate) OnConflictColumns(columns ...string) *OrgDepartmentUpsertOne {
	odc.conflict = append(odc.conflict, sql.ConflictColumns(columns...))
	return &OrgDepartmentUpsertOne{
		create: odc,
	}
}

type (
	// OrgDepartmentUpsertOne is the builder for "upsert"-ing
	//  one OrgDepartment node.
	OrgDepartmentUpsertOne struct {
		create *OrgDepartmentCreate
	}

	// OrgDepartmentUpsert is the "OnConflict" setter.
	OrgDepartmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *OrgDepartmentUpsert) SetIsDel(v bool) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateIsDel() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldIsDel)
	return u
}

// SetSort sets the "sort" field.
func (u *OrgDepartmentUpsert) SetSort(v int32) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateSort() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *OrgDepartmentUpsert) AddSort(v int32) *OrgDepartmentUpsert {
	u.Add(orgdepartment.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgDepartmentUpsert) SetUpdatedAt(v time.Time) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateUpdatedAt() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgDepartmentUpsert) ClearUpdatedAt() *OrgDepartmentUpsert {
	u.SetNull(orgdepartment.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgDepartmentUpsert) SetDeletedAt(v time.Time) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateDeletedAt() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgDepartmentUpsert) ClearDeletedAt() *OrgDepartmentUpsert {
	u.SetNull(orgdepartment.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *OrgDepartmentUpsert) SetIsActive(v bool) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateIsActive() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldIsActive)
	return u
}

// SetMemo sets the "memo" field.
func (u *OrgDepartmentUpsert) SetMemo(v string) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateMemo() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgDepartmentUpsert) ClearMemo() *OrgDepartmentUpsert {
	u.SetNull(orgdepartment.FieldMemo)
	return u
}

// SetName sets the "name" field.
func (u *OrgDepartmentUpsert) SetName(v string) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateName() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *OrgDepartmentUpsert) ClearName() *OrgDepartmentUpsert {
	u.SetNull(orgdepartment.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *OrgDepartmentUpsert) SetCode(v string) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateCode() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *OrgDepartmentUpsert) ClearCode() *OrgDepartmentUpsert {
	u.SetNull(orgdepartment.FieldCode)
	return u
}

// SetOrgID sets the "org_id" field.
func (u *OrgDepartmentUpsert) SetOrgID(v string) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldOrgID, v)
	return u
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateOrgID() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldOrgID)
	return u
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgDepartmentUpsert) ClearOrgID() *OrgDepartmentUpsert {
	u.SetNull(orgdepartment.FieldOrgID)
	return u
}

// SetCreator sets the "creator" field.
func (u *OrgDepartmentUpsert) SetCreator(v string) *OrgDepartmentUpsert {
	u.Set(orgdepartment.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgDepartmentUpsert) UpdateCreator() *OrgDepartmentUpsert {
	u.SetExcluded(orgdepartment.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgDepartmentUpsert) ClearCreator() *OrgDepartmentUpsert {
	u.SetNull(orgdepartment.FieldCreator)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrgDepartment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgdepartment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgDepartmentUpsertOne) UpdateNewValues() *OrgDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orgdepartment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orgdepartment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgDepartment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgDepartmentUpsertOne) Ignore() *OrgDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgDepartmentUpsertOne) DoNothing() *OrgDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgDepartmentCreate.OnConflict
// documentation for more info.
func (u *OrgDepartmentUpsertOne) Update(set func(*OrgDepartmentUpsert)) *OrgDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgDepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgDepartmentUpsertOne) SetIsDel(v bool) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateIsDel() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgDepartmentUpsertOne) SetSort(v int32) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgDepartmentUpsertOne) AddSort(v int32) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateSort() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgDepartmentUpsertOne) SetUpdatedAt(v time.Time) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateUpdatedAt() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgDepartmentUpsertOne) ClearUpdatedAt() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgDepartmentUpsertOne) SetDeletedAt(v time.Time) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateDeletedAt() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgDepartmentUpsertOne) ClearDeletedAt() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgDepartmentUpsertOne) SetIsActive(v bool) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateIsActive() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgDepartmentUpsertOne) SetMemo(v string) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateMemo() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgDepartmentUpsertOne) ClearMemo() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearMemo()
	})
}

// SetName sets the "name" field.
func (u *OrgDepartmentUpsertOne) SetName(v string) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateName() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrgDepartmentUpsertOne) ClearName() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *OrgDepartmentUpsertOne) SetCode(v string) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateCode() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgDepartmentUpsertOne) ClearCode() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearCode()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgDepartmentUpsertOne) SetOrgID(v string) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateOrgID() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgDepartmentUpsertOne) ClearOrgID() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearOrgID()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgDepartmentUpsertOne) SetCreator(v string) *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgDepartmentUpsertOne) UpdateCreator() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgDepartmentUpsertOne) ClearCreator() *OrgDepartmentUpsertOne {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgDepartmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgDepartmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgDepartmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgDepartmentUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrgDepartmentUpsertOne.ID is not supported by MySQL driver. Use OrgDepartmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgDepartmentUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgDepartmentCreateBulk is the builder for creating many OrgDepartment entities in bulk.
type OrgDepartmentCreateBulk struct {
	config
	builders []*OrgDepartmentCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgDepartment entities in the database.
func (odcb *OrgDepartmentCreateBulk) Save(ctx context.Context) ([]*OrgDepartment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(odcb.builders))
	nodes := make([]*OrgDepartment, len(odcb.builders))
	mutators := make([]Mutator, len(odcb.builders))
	for i := range odcb.builders {
		func(i int, root context.Context) {
			builder := odcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgDepartmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, odcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = odcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, odcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, odcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (odcb *OrgDepartmentCreateBulk) SaveX(ctx context.Context) []*OrgDepartment {
	v, err := odcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odcb *OrgDepartmentCreateBulk) Exec(ctx context.Context) error {
	_, err := odcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odcb *OrgDepartmentCreateBulk) ExecX(ctx context.Context) {
	if err := odcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgDepartment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgDepartmentUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (odcb *OrgDepartmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgDepartmentUpsertBulk {
	odcb.conflict = opts
	return &OrgDepartmentUpsertBulk{
		create: odcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgDepartment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (odcb *OrgDepartmentCreateBulk) OnConflictColumns(columns ...string) *OrgDepartmentUpsertBulk {
	odcb.conflict = append(odcb.conflict, sql.ConflictColumns(columns...))
	return &OrgDepartmentUpsertBulk{
		create: odcb,
	}
}

// OrgDepartmentUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgDepartment nodes.
type OrgDepartmentUpsertBulk struct {
	create *OrgDepartmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgDepartment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgdepartment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgDepartmentUpsertBulk) UpdateNewValues() *OrgDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orgdepartment.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orgdepartment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgDepartment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgDepartmentUpsertBulk) Ignore() *OrgDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgDepartmentUpsertBulk) DoNothing() *OrgDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgDepartmentCreateBulk.OnConflict
// documentation for more info.
func (u *OrgDepartmentUpsertBulk) Update(set func(*OrgDepartmentUpsert)) *OrgDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgDepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgDepartmentUpsertBulk) SetIsDel(v bool) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateIsDel() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgDepartmentUpsertBulk) SetSort(v int32) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgDepartmentUpsertBulk) AddSort(v int32) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateSort() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgDepartmentUpsertBulk) SetUpdatedAt(v time.Time) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateUpdatedAt() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgDepartmentUpsertBulk) ClearUpdatedAt() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgDepartmentUpsertBulk) SetDeletedAt(v time.Time) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateDeletedAt() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgDepartmentUpsertBulk) ClearDeletedAt() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgDepartmentUpsertBulk) SetIsActive(v bool) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateIsActive() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgDepartmentUpsertBulk) SetMemo(v string) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateMemo() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgDepartmentUpsertBulk) ClearMemo() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearMemo()
	})
}

// SetName sets the "name" field.
func (u *OrgDepartmentUpsertBulk) SetName(v string) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateName() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrgDepartmentUpsertBulk) ClearName() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *OrgDepartmentUpsertBulk) SetCode(v string) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateCode() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgDepartmentUpsertBulk) ClearCode() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearCode()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgDepartmentUpsertBulk) SetOrgID(v string) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateOrgID() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgDepartmentUpsertBulk) ClearOrgID() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearOrgID()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgDepartmentUpsertBulk) SetCreator(v string) *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgDepartmentUpsertBulk) UpdateCreator() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgDepartmentUpsertBulk) ClearCreator() *OrgDepartmentUpsertBulk {
	return u.Update(func(s *OrgDepartmentUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgDepartmentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgDepartmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgDepartmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgDepartmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
