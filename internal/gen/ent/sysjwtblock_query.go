// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysjwtblock"
)

// SysJwtBlockQuery is the builder for querying SysJwtBlock entities.
type SysJwtBlockQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SysJwtBlock
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysJwtBlockQuery builder.
func (sjbq *SysJwtBlockQuery) Where(ps ...predicate.SysJwtBlock) *SysJwtBlockQuery {
	sjbq.predicates = append(sjbq.predicates, ps...)
	return sjbq
}

// Limit adds a limit step to the query.
func (sjbq *SysJwtBlockQuery) Limit(limit int) *SysJwtBlockQuery {
	sjbq.limit = &limit
	return sjbq
}

// Offset adds an offset step to the query.
func (sjbq *SysJwtBlockQuery) Offset(offset int) *SysJwtBlockQuery {
	sjbq.offset = &offset
	return sjbq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sjbq *SysJwtBlockQuery) Unique(unique bool) *SysJwtBlockQuery {
	sjbq.unique = &unique
	return sjbq
}

// Order adds an order step to the query.
func (sjbq *SysJwtBlockQuery) Order(o ...OrderFunc) *SysJwtBlockQuery {
	sjbq.order = append(sjbq.order, o...)
	return sjbq
}

// First returns the first SysJwtBlock entity from the query.
// Returns a *NotFoundError when no SysJwtBlock was found.
func (sjbq *SysJwtBlockQuery) First(ctx context.Context) (*SysJwtBlock, error) {
	nodes, err := sjbq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sysjwtblock.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) FirstX(ctx context.Context) *SysJwtBlock {
	node, err := sjbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysJwtBlock ID from the query.
// Returns a *NotFoundError when no SysJwtBlock ID was found.
func (sjbq *SysJwtBlockQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sjbq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sysjwtblock.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) FirstIDX(ctx context.Context) string {
	id, err := sjbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysJwtBlock entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SysJwtBlock entity is not found.
// Returns a *NotFoundError when no SysJwtBlock entities are found.
func (sjbq *SysJwtBlockQuery) Only(ctx context.Context) (*SysJwtBlock, error) {
	nodes, err := sjbq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sysjwtblock.Label}
	default:
		return nil, &NotSingularError{sysjwtblock.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) OnlyX(ctx context.Context) *SysJwtBlock {
	node, err := sjbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysJwtBlock ID in the query.
// Returns a *NotSingularError when exactly one SysJwtBlock ID is not found.
// Returns a *NotFoundError when no entities are found.
func (sjbq *SysJwtBlockQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sjbq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = &NotSingularError{sysjwtblock.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) OnlyIDX(ctx context.Context) string {
	id, err := sjbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysJwtBlocks.
func (sjbq *SysJwtBlockQuery) All(ctx context.Context) ([]*SysJwtBlock, error) {
	if err := sjbq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sjbq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) AllX(ctx context.Context) []*SysJwtBlock {
	nodes, err := sjbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysJwtBlock IDs.
func (sjbq *SysJwtBlockQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := sjbq.Select(sysjwtblock.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) IDsX(ctx context.Context) []string {
	ids, err := sjbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sjbq *SysJwtBlockQuery) Count(ctx context.Context) (int, error) {
	if err := sjbq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sjbq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) CountX(ctx context.Context) int {
	count, err := sjbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sjbq *SysJwtBlockQuery) Exist(ctx context.Context) (bool, error) {
	if err := sjbq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sjbq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sjbq *SysJwtBlockQuery) ExistX(ctx context.Context) bool {
	exist, err := sjbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysJwtBlockQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sjbq *SysJwtBlockQuery) Clone() *SysJwtBlockQuery {
	if sjbq == nil {
		return nil
	}
	return &SysJwtBlockQuery{
		config:     sjbq.config,
		limit:      sjbq.limit,
		offset:     sjbq.offset,
		order:      append([]OrderFunc{}, sjbq.order...),
		predicates: append([]predicate.SysJwtBlock{}, sjbq.predicates...),
		// clone intermediate query.
		sql:  sjbq.sql.Clone(),
		path: sjbq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IsDel bool `json:"is_del,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysJwtBlock.Query().
//		GroupBy(sysjwtblock.FieldIsDel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sjbq *SysJwtBlockQuery) GroupBy(field string, fields ...string) *SysJwtBlockGroupBy {
	group := &SysJwtBlockGroupBy{config: sjbq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sjbq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sjbq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IsDel bool `json:"is_del,omitempty"`
//	}
//
//	client.SysJwtBlock.Query().
//		Select(sysjwtblock.FieldIsDel).
//		Scan(ctx, &v)
//
func (sjbq *SysJwtBlockQuery) Select(field string, fields ...string) *SysJwtBlockSelect {
	sjbq.fields = append([]string{field}, fields...)
	return &SysJwtBlockSelect{SysJwtBlockQuery: sjbq}
}

func (sjbq *SysJwtBlockQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sjbq.fields {
		if !sysjwtblock.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sjbq.path != nil {
		prev, err := sjbq.path(ctx)
		if err != nil {
			return err
		}
		sjbq.sql = prev
	}
	return nil
}

func (sjbq *SysJwtBlockQuery) sqlAll(ctx context.Context) ([]*SysJwtBlock, error) {
	var (
		nodes = []*SysJwtBlock{}
		_spec = sjbq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SysJwtBlock{config: sjbq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sjbq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sjbq *SysJwtBlockQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sjbq.querySpec()
	return sqlgraph.CountNodes(ctx, sjbq.driver, _spec)
}

func (sjbq *SysJwtBlockQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sjbq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sjbq *SysJwtBlockQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysjwtblock.Table,
			Columns: sysjwtblock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sysjwtblock.FieldID,
			},
		},
		From:   sjbq.sql,
		Unique: true,
	}
	if unique := sjbq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sjbq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysjwtblock.FieldID)
		for i := range fields {
			if fields[i] != sysjwtblock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sjbq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sjbq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sjbq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sjbq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sjbq *SysJwtBlockQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sjbq.driver.Dialect())
	t1 := builder.Table(sysjwtblock.Table)
	selector := builder.Select(t1.Columns(sysjwtblock.Columns...)...).From(t1)
	if sjbq.sql != nil {
		selector = sjbq.sql
		selector.Select(selector.Columns(sysjwtblock.Columns...)...)
	}
	for _, p := range sjbq.predicates {
		p(selector)
	}
	for _, p := range sjbq.order {
		p(selector)
	}
	if offset := sjbq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sjbq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SysJwtBlockGroupBy is the group-by builder for SysJwtBlock entities.
type SysJwtBlockGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sjbgb *SysJwtBlockGroupBy) Aggregate(fns ...AggregateFunc) *SysJwtBlockGroupBy {
	sjbgb.fns = append(sjbgb.fns, fns...)
	return sjbgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sjbgb *SysJwtBlockGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sjbgb.path(ctx)
	if err != nil {
		return err
	}
	sjbgb.sql = query
	return sjbgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sjbgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sjbgb.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sjbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) StringsX(ctx context.Context) []string {
	v, err := sjbgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sjbgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) StringX(ctx context.Context) string {
	v, err := sjbgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sjbgb.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sjbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) IntsX(ctx context.Context) []int {
	v, err := sjbgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sjbgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) IntX(ctx context.Context) int {
	v, err := sjbgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sjbgb.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sjbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sjbgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sjbgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sjbgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sjbgb.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sjbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sjbgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sjbgb *SysJwtBlockGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sjbgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sjbgb *SysJwtBlockGroupBy) BoolX(ctx context.Context) bool {
	v, err := sjbgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sjbgb *SysJwtBlockGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sjbgb.fields {
		if !sysjwtblock.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sjbgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sjbgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sjbgb *SysJwtBlockGroupBy) sqlQuery() *sql.Selector {
	selector := sjbgb.sql
	columns := make([]string, 0, len(sjbgb.fields)+len(sjbgb.fns))
	columns = append(columns, sjbgb.fields...)
	for _, fn := range sjbgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(sjbgb.fields...)
}

// SysJwtBlockSelect is the builder for selecting fields of SysJwtBlock entities.
type SysJwtBlockSelect struct {
	*SysJwtBlockQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sjbs *SysJwtBlockSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sjbs.prepareQuery(ctx); err != nil {
		return err
	}
	sjbs.sql = sjbs.SysJwtBlockQuery.sqlQuery(ctx)
	return sjbs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sjbs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sjbs.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sjbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) StringsX(ctx context.Context) []string {
	v, err := sjbs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sjbs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) StringX(ctx context.Context) string {
	v, err := sjbs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sjbs.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sjbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) IntsX(ctx context.Context) []int {
	v, err := sjbs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sjbs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) IntX(ctx context.Context) int {
	v, err := sjbs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sjbs.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sjbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sjbs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sjbs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) Float64X(ctx context.Context) float64 {
	v, err := sjbs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sjbs.fields) > 1 {
		return nil, errors.New("ent: SysJwtBlockSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sjbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) BoolsX(ctx context.Context) []bool {
	v, err := sjbs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sjbs *SysJwtBlockSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sjbs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sysjwtblock.Label}
	default:
		err = fmt.Errorf("ent: SysJwtBlockSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sjbs *SysJwtBlockSelect) BoolX(ctx context.Context) bool {
	v, err := sjbs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sjbs *SysJwtBlockSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sjbs.sqlQuery().Query()
	if err := sjbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sjbs *SysJwtBlockSelect) sqlQuery() sql.Querier {
	selector := sjbs.sql
	selector.Select(selector.Columns(sjbs.fields...)...)
	return selector
}
