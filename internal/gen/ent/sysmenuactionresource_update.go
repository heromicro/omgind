// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenuactionresource"
)

// SysMenuActionResourceUpdate is the builder for updating SysMenuActionResource entities.
type SysMenuActionResourceUpdate struct {
	config
	hooks    []Hook
	mutation *SysMenuActionResourceMutation
}

// Where appends a list predicates to the SysMenuActionResourceUpdate builder.
func (smaru *SysMenuActionResourceUpdate) Where(ps ...predicate.SysMenuActionResource) *SysMenuActionResourceUpdate {
	smaru.mutation.Where(ps...)
	return smaru
}

// SetIsDel sets the "is_del" field.
func (smaru *SysMenuActionResourceUpdate) SetIsDel(b bool) *SysMenuActionResourceUpdate {
	smaru.mutation.SetIsDel(b)
	return smaru
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (smaru *SysMenuActionResourceUpdate) SetNillableIsDel(b *bool) *SysMenuActionResourceUpdate {
	if b != nil {
		smaru.SetIsDel(*b)
	}
	return smaru
}

// SetSort sets the "sort" field.
func (smaru *SysMenuActionResourceUpdate) SetSort(i int32) *SysMenuActionResourceUpdate {
	smaru.mutation.ResetSort()
	smaru.mutation.SetSort(i)
	return smaru
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smaru *SysMenuActionResourceUpdate) SetNillableSort(i *int32) *SysMenuActionResourceUpdate {
	if i != nil {
		smaru.SetSort(*i)
	}
	return smaru
}

// AddSort adds i to the "sort" field.
func (smaru *SysMenuActionResourceUpdate) AddSort(i int32) *SysMenuActionResourceUpdate {
	smaru.mutation.AddSort(i)
	return smaru
}

// SetMemo sets the "memo" field.
func (smaru *SysMenuActionResourceUpdate) SetMemo(s string) *SysMenuActionResourceUpdate {
	smaru.mutation.SetMemo(s)
	return smaru
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (smaru *SysMenuActionResourceUpdate) SetNillableMemo(s *string) *SysMenuActionResourceUpdate {
	if s != nil {
		smaru.SetMemo(*s)
	}
	return smaru
}

// ClearMemo clears the value of the "memo" field.
func (smaru *SysMenuActionResourceUpdate) ClearMemo() *SysMenuActionResourceUpdate {
	smaru.mutation.ClearMemo()
	return smaru
}

// SetUpdatedAt sets the "updated_at" field.
func (smaru *SysMenuActionResourceUpdate) SetUpdatedAt(t time.Time) *SysMenuActionResourceUpdate {
	smaru.mutation.SetUpdatedAt(t)
	return smaru
}

// SetDeletedAt sets the "deleted_at" field.
func (smaru *SysMenuActionResourceUpdate) SetDeletedAt(t time.Time) *SysMenuActionResourceUpdate {
	smaru.mutation.SetDeletedAt(t)
	return smaru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smaru *SysMenuActionResourceUpdate) SetNillableDeletedAt(t *time.Time) *SysMenuActionResourceUpdate {
	if t != nil {
		smaru.SetDeletedAt(*t)
	}
	return smaru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (smaru *SysMenuActionResourceUpdate) ClearDeletedAt() *SysMenuActionResourceUpdate {
	smaru.mutation.ClearDeletedAt()
	return smaru
}

// SetIsActive sets the "is_active" field.
func (smaru *SysMenuActionResourceUpdate) SetIsActive(b bool) *SysMenuActionResourceUpdate {
	smaru.mutation.SetIsActive(b)
	return smaru
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (smaru *SysMenuActionResourceUpdate) SetNillableIsActive(b *bool) *SysMenuActionResourceUpdate {
	if b != nil {
		smaru.SetIsActive(*b)
	}
	return smaru
}

// SetMethod sets the "method" field.
func (smaru *SysMenuActionResourceUpdate) SetMethod(s string) *SysMenuActionResourceUpdate {
	smaru.mutation.SetMethod(s)
	return smaru
}

// SetPath sets the "path" field.
func (smaru *SysMenuActionResourceUpdate) SetPath(s string) *SysMenuActionResourceUpdate {
	smaru.mutation.SetPath(s)
	return smaru
}

// SetActionID sets the "action_id" field.
func (smaru *SysMenuActionResourceUpdate) SetActionID(s string) *SysMenuActionResourceUpdate {
	smaru.mutation.SetActionID(s)
	return smaru
}

// Mutation returns the SysMenuActionResourceMutation object of the builder.
func (smaru *SysMenuActionResourceUpdate) Mutation() *SysMenuActionResourceMutation {
	return smaru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smaru *SysMenuActionResourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	smaru.defaults()
	if len(smaru.hooks) == 0 {
		if err = smaru.check(); err != nil {
			return 0, err
		}
		affected, err = smaru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuActionResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smaru.check(); err != nil {
				return 0, err
			}
			smaru.mutation = mutation
			affected, err = smaru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smaru.hooks) - 1; i >= 0; i-- {
			if smaru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smaru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smaru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smaru *SysMenuActionResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := smaru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smaru *SysMenuActionResourceUpdate) Exec(ctx context.Context) error {
	_, err := smaru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smaru *SysMenuActionResourceUpdate) ExecX(ctx context.Context) {
	if err := smaru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smaru *SysMenuActionResourceUpdate) defaults() {
	if _, ok := smaru.mutation.UpdatedAt(); !ok {
		v := sysmenuactionresource.UpdateDefaultUpdatedAt()
		smaru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smaru *SysMenuActionResourceUpdate) check() error {
	if v, ok := smaru.mutation.Memo(); ok {
		if err := sysmenuactionresource.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.memo": %w`, err)}
		}
	}
	if v, ok := smaru.mutation.Method(); ok {
		if err := sysmenuactionresource.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.method": %w`, err)}
		}
	}
	if v, ok := smaru.mutation.Path(); ok {
		if err := sysmenuactionresource.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.path": %w`, err)}
		}
	}
	if v, ok := smaru.mutation.ActionID(); ok {
		if err := sysmenuactionresource.ActionIDValidator(v); err != nil {
			return &ValidationError{Name: "action_id", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.action_id": %w`, err)}
		}
	}
	return nil
}

func (smaru *SysMenuActionResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenuactionresource.Table,
			Columns: sysmenuactionresource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sysmenuactionresource.FieldID,
			},
		},
	}
	if ps := smaru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smaru.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenuactionresource.FieldIsDel,
		})
	}
	if value, ok := smaru.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenuactionresource.FieldSort,
		})
	}
	if value, ok := smaru.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenuactionresource.FieldSort,
		})
	}
	if value, ok := smaru.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldMemo,
		})
	}
	if smaru.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenuactionresource.FieldMemo,
		})
	}
	if value, ok := smaru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuactionresource.FieldUpdatedAt,
		})
	}
	if value, ok := smaru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuactionresource.FieldDeletedAt,
		})
	}
	if smaru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysmenuactionresource.FieldDeletedAt,
		})
	}
	if value, ok := smaru.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenuactionresource.FieldIsActive,
		})
	}
	if value, ok := smaru.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldMethod,
		})
	}
	if value, ok := smaru.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldPath,
		})
	}
	if value, ok := smaru.mutation.ActionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldActionID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smaru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenuactionresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SysMenuActionResourceUpdateOne is the builder for updating a single SysMenuActionResource entity.
type SysMenuActionResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysMenuActionResourceMutation
}

// SetIsDel sets the "is_del" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetIsDel(b bool) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetIsDel(b)
	return smaruo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (smaruo *SysMenuActionResourceUpdateOne) SetNillableIsDel(b *bool) *SysMenuActionResourceUpdateOne {
	if b != nil {
		smaruo.SetIsDel(*b)
	}
	return smaruo
}

// SetSort sets the "sort" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetSort(i int32) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.ResetSort()
	smaruo.mutation.SetSort(i)
	return smaruo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smaruo *SysMenuActionResourceUpdateOne) SetNillableSort(i *int32) *SysMenuActionResourceUpdateOne {
	if i != nil {
		smaruo.SetSort(*i)
	}
	return smaruo
}

// AddSort adds i to the "sort" field.
func (smaruo *SysMenuActionResourceUpdateOne) AddSort(i int32) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.AddSort(i)
	return smaruo
}

// SetMemo sets the "memo" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetMemo(s string) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetMemo(s)
	return smaruo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (smaruo *SysMenuActionResourceUpdateOne) SetNillableMemo(s *string) *SysMenuActionResourceUpdateOne {
	if s != nil {
		smaruo.SetMemo(*s)
	}
	return smaruo
}

// ClearMemo clears the value of the "memo" field.
func (smaruo *SysMenuActionResourceUpdateOne) ClearMemo() *SysMenuActionResourceUpdateOne {
	smaruo.mutation.ClearMemo()
	return smaruo
}

// SetUpdatedAt sets the "updated_at" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetUpdatedAt(t time.Time) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetUpdatedAt(t)
	return smaruo
}

// SetDeletedAt sets the "deleted_at" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetDeletedAt(t time.Time) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetDeletedAt(t)
	return smaruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smaruo *SysMenuActionResourceUpdateOne) SetNillableDeletedAt(t *time.Time) *SysMenuActionResourceUpdateOne {
	if t != nil {
		smaruo.SetDeletedAt(*t)
	}
	return smaruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (smaruo *SysMenuActionResourceUpdateOne) ClearDeletedAt() *SysMenuActionResourceUpdateOne {
	smaruo.mutation.ClearDeletedAt()
	return smaruo
}

// SetIsActive sets the "is_active" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetIsActive(b bool) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetIsActive(b)
	return smaruo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (smaruo *SysMenuActionResourceUpdateOne) SetNillableIsActive(b *bool) *SysMenuActionResourceUpdateOne {
	if b != nil {
		smaruo.SetIsActive(*b)
	}
	return smaruo
}

// SetMethod sets the "method" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetMethod(s string) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetMethod(s)
	return smaruo
}

// SetPath sets the "path" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetPath(s string) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetPath(s)
	return smaruo
}

// SetActionID sets the "action_id" field.
func (smaruo *SysMenuActionResourceUpdateOne) SetActionID(s string) *SysMenuActionResourceUpdateOne {
	smaruo.mutation.SetActionID(s)
	return smaruo
}

// Mutation returns the SysMenuActionResourceMutation object of the builder.
func (smaruo *SysMenuActionResourceUpdateOne) Mutation() *SysMenuActionResourceMutation {
	return smaruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smaruo *SysMenuActionResourceUpdateOne) Select(field string, fields ...string) *SysMenuActionResourceUpdateOne {
	smaruo.fields = append([]string{field}, fields...)
	return smaruo
}

// Save executes the query and returns the updated SysMenuActionResource entity.
func (smaruo *SysMenuActionResourceUpdateOne) Save(ctx context.Context) (*SysMenuActionResource, error) {
	var (
		err  error
		node *SysMenuActionResource
	)
	smaruo.defaults()
	if len(smaruo.hooks) == 0 {
		if err = smaruo.check(); err != nil {
			return nil, err
		}
		node, err = smaruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SysMenuActionResourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smaruo.check(); err != nil {
				return nil, err
			}
			smaruo.mutation = mutation
			node, err = smaruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smaruo.hooks) - 1; i >= 0; i-- {
			if smaruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smaruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, smaruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SysMenuActionResource)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SysMenuActionResourceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smaruo *SysMenuActionResourceUpdateOne) SaveX(ctx context.Context) *SysMenuActionResource {
	node, err := smaruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smaruo *SysMenuActionResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := smaruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smaruo *SysMenuActionResourceUpdateOne) ExecX(ctx context.Context) {
	if err := smaruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smaruo *SysMenuActionResourceUpdateOne) defaults() {
	if _, ok := smaruo.mutation.UpdatedAt(); !ok {
		v := sysmenuactionresource.UpdateDefaultUpdatedAt()
		smaruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smaruo *SysMenuActionResourceUpdateOne) check() error {
	if v, ok := smaruo.mutation.Memo(); ok {
		if err := sysmenuactionresource.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.memo": %w`, err)}
		}
	}
	if v, ok := smaruo.mutation.Method(); ok {
		if err := sysmenuactionresource.MethodValidator(v); err != nil {
			return &ValidationError{Name: "method", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.method": %w`, err)}
		}
	}
	if v, ok := smaruo.mutation.Path(); ok {
		if err := sysmenuactionresource.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.path": %w`, err)}
		}
	}
	if v, ok := smaruo.mutation.ActionID(); ok {
		if err := sysmenuactionresource.ActionIDValidator(v); err != nil {
			return &ValidationError{Name: "action_id", err: fmt.Errorf(`ent: validator failed for field "SysMenuActionResource.action_id": %w`, err)}
		}
	}
	return nil
}

func (smaruo *SysMenuActionResourceUpdateOne) sqlSave(ctx context.Context) (_node *SysMenuActionResource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sysmenuactionresource.Table,
			Columns: sysmenuactionresource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: sysmenuactionresource.FieldID,
			},
		},
	}
	id, ok := smaruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysMenuActionResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smaruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenuactionresource.FieldID)
		for _, f := range fields {
			if !sysmenuactionresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysmenuactionresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smaruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smaruo.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenuactionresource.FieldIsDel,
		})
	}
	if value, ok := smaruo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenuactionresource.FieldSort,
		})
	}
	if value, ok := smaruo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: sysmenuactionresource.FieldSort,
		})
	}
	if value, ok := smaruo.mutation.Memo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldMemo,
		})
	}
	if smaruo.mutation.MemoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sysmenuactionresource.FieldMemo,
		})
	}
	if value, ok := smaruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuactionresource.FieldUpdatedAt,
		})
	}
	if value, ok := smaruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sysmenuactionresource.FieldDeletedAt,
		})
	}
	if smaruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sysmenuactionresource.FieldDeletedAt,
		})
	}
	if value, ok := smaruo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sysmenuactionresource.FieldIsActive,
		})
	}
	if value, ok := smaruo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldMethod,
		})
	}
	if value, ok := smaruo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldPath,
		})
	}
	if value, ok := smaruo.mutation.ActionID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sysmenuactionresource.FieldActionID,
		})
	}
	_node = &SysMenuActionResource{config: smaruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smaruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenuactionresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
