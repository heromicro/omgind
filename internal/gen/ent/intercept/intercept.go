// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...ent.OrderFunc)
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The OrgDeptFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgDeptFunc func(context.Context, *ent.OrgDeptQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrgDeptFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrgDeptQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrgDeptQuery", q)
}

// The TraverseOrgDept type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgDept func(context.Context, *ent.OrgDeptQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgDept) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgDept) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgDeptQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrgDeptQuery", q)
}

// The OrgOrganFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgOrganFunc func(context.Context, *ent.OrgOrganQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrgOrganFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrgOrganQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrgOrganQuery", q)
}

// The TraverseOrgOrgan type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgOrgan func(context.Context, *ent.OrgOrganQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgOrgan) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgOrgan) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgOrganQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrgOrganQuery", q)
}

// The OrgPositionFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgPositionFunc func(context.Context, *ent.OrgPositionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrgPositionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrgPositionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrgPositionQuery", q)
}

// The TraverseOrgPosition type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgPosition func(context.Context, *ent.OrgPositionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgPosition) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgPosition) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgPositionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrgPositionQuery", q)
}

// The OrgStaffFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgStaffFunc func(context.Context, *ent.OrgStaffQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OrgStaffFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OrgStaffQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OrgStaffQuery", q)
}

// The TraverseOrgStaff type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgStaff func(context.Context, *ent.OrgStaffQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgStaff) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgStaff) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrgStaffQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OrgStaffQuery", q)
}

// The SysAddressFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysAddressFunc func(context.Context, *ent.SysAddressQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysAddressFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysAddressQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysAddressQuery", q)
}

// The TraverseSysAddress type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysAddress func(context.Context, *ent.SysAddressQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysAddress) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysAddress) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysAddressQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysAddressQuery", q)
}

// The SysDictFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDictFunc func(context.Context, *ent.SysDictQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysDictFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysDictQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysDictQuery", q)
}

// The TraverseSysDict type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDict func(context.Context, *ent.SysDictQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDict) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDict) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysDictQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysDictQuery", q)
}

// The SysDictItemFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDictItemFunc func(context.Context, *ent.SysDictItemQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysDictItemFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysDictItemQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysDictItemQuery", q)
}

// The TraverseSysDictItem type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDictItem func(context.Context, *ent.SysDictItemQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDictItem) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDictItem) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysDictItemQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysDictItemQuery", q)
}

// The SysDistrictFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDistrictFunc func(context.Context, *ent.SysDistrictQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysDistrictFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysDistrictQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysDistrictQuery", q)
}

// The TraverseSysDistrict type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDistrict func(context.Context, *ent.SysDistrictQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDistrict) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDistrict) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysDistrictQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysDistrictQuery", q)
}

// The SysJwtBlockFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysJwtBlockFunc func(context.Context, *ent.SysJwtBlockQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysJwtBlockFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysJwtBlockQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysJwtBlockQuery", q)
}

// The TraverseSysJwtBlock type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysJwtBlock func(context.Context, *ent.SysJwtBlockQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysJwtBlock) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysJwtBlock) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysJwtBlockQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysJwtBlockQuery", q)
}

// The SysLoggingFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysLoggingFunc func(context.Context, *ent.SysLoggingQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysLoggingFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysLoggingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysLoggingQuery", q)
}

// The TraverseSysLogging type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysLogging func(context.Context, *ent.SysLoggingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysLogging) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysLogging) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysLoggingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysLoggingQuery", q)
}

// The SysMenuFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysMenuFunc func(context.Context, *ent.SysMenuQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysMenuFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysMenuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysMenuQuery", q)
}

// The TraverseSysMenu type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysMenu func(context.Context, *ent.SysMenuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysMenu) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysMenu) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysMenuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysMenuQuery", q)
}

// The SysMenuActionFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysMenuActionFunc func(context.Context, *ent.SysMenuActionQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysMenuActionFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysMenuActionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysMenuActionQuery", q)
}

// The TraverseSysMenuAction type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysMenuAction func(context.Context, *ent.SysMenuActionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysMenuAction) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysMenuAction) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysMenuActionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysMenuActionQuery", q)
}

// The SysMenuActionResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysMenuActionResourceFunc func(context.Context, *ent.SysMenuActionResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysMenuActionResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysMenuActionResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysMenuActionResourceQuery", q)
}

// The TraverseSysMenuActionResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysMenuActionResource func(context.Context, *ent.SysMenuActionResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysMenuActionResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysMenuActionResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysMenuActionResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysMenuActionResourceQuery", q)
}

// The SysRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysRoleFunc func(context.Context, *ent.SysRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysRoleQuery", q)
}

// The TraverseSysRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysRole func(context.Context, *ent.SysRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysRoleQuery", q)
}

// The SysRoleMenuFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysRoleMenuFunc func(context.Context, *ent.SysRoleMenuQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysRoleMenuFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysRoleMenuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysRoleMenuQuery", q)
}

// The TraverseSysRoleMenu type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysRoleMenu func(context.Context, *ent.SysRoleMenuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysRoleMenu) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysRoleMenu) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysRoleMenuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysRoleMenuQuery", q)
}

// The SysUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysUserFunc func(context.Context, *ent.SysUserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysUserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysUserQuery", q)
}

// The TraverseSysUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysUser func(context.Context, *ent.SysUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysUserQuery", q)
}

// The SysUserRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysUserRoleFunc func(context.Context, *ent.SysUserRoleQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SysUserRoleFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SysUserRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SysUserRoleQuery", q)
}

// The TraverseSysUserRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysUserRole func(context.Context, *ent.SysUserRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysUserRole) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysUserRole) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SysUserRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SysUserRoleQuery", q)
}

// The XxxDemoFunc type is an adapter to allow the use of ordinary function as a Querier.
type XxxDemoFunc func(context.Context, *ent.XxxDemoQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f XxxDemoFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.XxxDemoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.XxxDemoQuery", q)
}

// The TraverseXxxDemo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseXxxDemo func(context.Context, *ent.XxxDemoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseXxxDemo) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseXxxDemo) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.XxxDemoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.XxxDemoQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.OrgDeptQuery:
		return &query[*ent.OrgDeptQuery, predicate.OrgDept]{typ: ent.TypeOrgDept, tq: q}, nil
	case *ent.OrgOrganQuery:
		return &query[*ent.OrgOrganQuery, predicate.OrgOrgan]{typ: ent.TypeOrgOrgan, tq: q}, nil
	case *ent.OrgPositionQuery:
		return &query[*ent.OrgPositionQuery, predicate.OrgPosition]{typ: ent.TypeOrgPosition, tq: q}, nil
	case *ent.OrgStaffQuery:
		return &query[*ent.OrgStaffQuery, predicate.OrgStaff]{typ: ent.TypeOrgStaff, tq: q}, nil
	case *ent.SysAddressQuery:
		return &query[*ent.SysAddressQuery, predicate.SysAddress]{typ: ent.TypeSysAddress, tq: q}, nil
	case *ent.SysDictQuery:
		return &query[*ent.SysDictQuery, predicate.SysDict]{typ: ent.TypeSysDict, tq: q}, nil
	case *ent.SysDictItemQuery:
		return &query[*ent.SysDictItemQuery, predicate.SysDictItem]{typ: ent.TypeSysDictItem, tq: q}, nil
	case *ent.SysDistrictQuery:
		return &query[*ent.SysDistrictQuery, predicate.SysDistrict]{typ: ent.TypeSysDistrict, tq: q}, nil
	case *ent.SysJwtBlockQuery:
		return &query[*ent.SysJwtBlockQuery, predicate.SysJwtBlock]{typ: ent.TypeSysJwtBlock, tq: q}, nil
	case *ent.SysLoggingQuery:
		return &query[*ent.SysLoggingQuery, predicate.SysLogging]{typ: ent.TypeSysLogging, tq: q}, nil
	case *ent.SysMenuQuery:
		return &query[*ent.SysMenuQuery, predicate.SysMenu]{typ: ent.TypeSysMenu, tq: q}, nil
	case *ent.SysMenuActionQuery:
		return &query[*ent.SysMenuActionQuery, predicate.SysMenuAction]{typ: ent.TypeSysMenuAction, tq: q}, nil
	case *ent.SysMenuActionResourceQuery:
		return &query[*ent.SysMenuActionResourceQuery, predicate.SysMenuActionResource]{typ: ent.TypeSysMenuActionResource, tq: q}, nil
	case *ent.SysRoleQuery:
		return &query[*ent.SysRoleQuery, predicate.SysRole]{typ: ent.TypeSysRole, tq: q}, nil
	case *ent.SysRoleMenuQuery:
		return &query[*ent.SysRoleMenuQuery, predicate.SysRoleMenu]{typ: ent.TypeSysRoleMenu, tq: q}, nil
	case *ent.SysUserQuery:
		return &query[*ent.SysUserQuery, predicate.SysUser]{typ: ent.TypeSysUser, tq: q}, nil
	case *ent.SysUserRoleQuery:
		return &query[*ent.SysUserRoleQuery, predicate.SysUserRole]{typ: ent.TypeSysUserRole, tq: q}, nil
	case *ent.XxxDemoQuery:
		return &query[*ent.XxxDemoQuery, predicate.XxxDemo]{typ: ent.TypeXxxDemo, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...ent.OrderFunc) T
		Where(...P) T
	}
}

func (q query[T, P]) Type() string {
	return q.typ
}

func (q query[T, P]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P]) Order(orders ...ent.OrderFunc) {
	q.tq.Order(orders...)
}

func (q query[T, P]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
