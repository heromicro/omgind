// Code generated by ent, DO NOT EDIT.

package orgdepartment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/heromicro/omgind/internal/gen/ent/internal"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldID, id))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsDel, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldSort, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldDeletedAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsActive, v))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldMemo, v))
}

// TreeID applies equality check predicate on the "tree_id" field. It's identical to TreeIDEQ.
func TreeID(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeID, v))
}

// TreeLevel applies equality check predicate on the "tree_level" field. It's identical to TreeLevelEQ.
func TreeLevel(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeLevel, v))
}

// TreeLeft applies equality check predicate on the "tree_left" field. It's identical to TreeLeftEQ.
func TreeLeft(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeLeft, v))
}

// TreeRight applies equality check predicate on the "tree_right" field. It's identical to TreeRightEQ.
func TreeRight(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeRight, v))
}

// IsLeaf applies equality check predicate on the "is_leaf" field. It's identical to IsLeafEQ.
func IsLeaf(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsLeaf, v))
}

// TreePath applies equality check predicate on the "tree_path" field. It's identical to TreePathEQ.
func TreePath(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreePath, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldName, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldCode, v))
}

// OrgID applies equality check predicate on the "org_id" field. It's identical to OrgIDEQ.
func OrgID(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldOrgID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldParentID, v))
}

// IsReal applies equality check predicate on the "is_real" field. It's identical to IsRealEQ.
func IsReal(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsReal, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldCreator, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldIsDel, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldSort, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldDeletedAt))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldIsActive, v))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldMemo))
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldMemo))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldMemo, v))
}

// TreeIDEQ applies the EQ predicate on the "tree_id" field.
func TreeIDEQ(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeID, v))
}

// TreeIDNEQ applies the NEQ predicate on the "tree_id" field.
func TreeIDNEQ(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldTreeID, v))
}

// TreeIDIn applies the In predicate on the "tree_id" field.
func TreeIDIn(vs ...int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldTreeID, vs...))
}

// TreeIDNotIn applies the NotIn predicate on the "tree_id" field.
func TreeIDNotIn(vs ...int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldTreeID, vs...))
}

// TreeIDGT applies the GT predicate on the "tree_id" field.
func TreeIDGT(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldTreeID, v))
}

// TreeIDGTE applies the GTE predicate on the "tree_id" field.
func TreeIDGTE(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldTreeID, v))
}

// TreeIDLT applies the LT predicate on the "tree_id" field.
func TreeIDLT(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldTreeID, v))
}

// TreeIDLTE applies the LTE predicate on the "tree_id" field.
func TreeIDLTE(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldTreeID, v))
}

// TreeIDIsNil applies the IsNil predicate on the "tree_id" field.
func TreeIDIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldTreeID))
}

// TreeIDNotNil applies the NotNil predicate on the "tree_id" field.
func TreeIDNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldTreeID))
}

// TreeLevelEQ applies the EQ predicate on the "tree_level" field.
func TreeLevelEQ(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeLevel, v))
}

// TreeLevelNEQ applies the NEQ predicate on the "tree_level" field.
func TreeLevelNEQ(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldTreeLevel, v))
}

// TreeLevelIn applies the In predicate on the "tree_level" field.
func TreeLevelIn(vs ...int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldTreeLevel, vs...))
}

// TreeLevelNotIn applies the NotIn predicate on the "tree_level" field.
func TreeLevelNotIn(vs ...int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldTreeLevel, vs...))
}

// TreeLevelGT applies the GT predicate on the "tree_level" field.
func TreeLevelGT(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldTreeLevel, v))
}

// TreeLevelGTE applies the GTE predicate on the "tree_level" field.
func TreeLevelGTE(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldTreeLevel, v))
}

// TreeLevelLT applies the LT predicate on the "tree_level" field.
func TreeLevelLT(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldTreeLevel, v))
}

// TreeLevelLTE applies the LTE predicate on the "tree_level" field.
func TreeLevelLTE(v int32) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldTreeLevel, v))
}

// TreeLevelIsNil applies the IsNil predicate on the "tree_level" field.
func TreeLevelIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldTreeLevel))
}

// TreeLevelNotNil applies the NotNil predicate on the "tree_level" field.
func TreeLevelNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldTreeLevel))
}

// TreeLeftEQ applies the EQ predicate on the "tree_left" field.
func TreeLeftEQ(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeLeft, v))
}

// TreeLeftNEQ applies the NEQ predicate on the "tree_left" field.
func TreeLeftNEQ(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldTreeLeft, v))
}

// TreeLeftIn applies the In predicate on the "tree_left" field.
func TreeLeftIn(vs ...int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldTreeLeft, vs...))
}

// TreeLeftNotIn applies the NotIn predicate on the "tree_left" field.
func TreeLeftNotIn(vs ...int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldTreeLeft, vs...))
}

// TreeLeftGT applies the GT predicate on the "tree_left" field.
func TreeLeftGT(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldTreeLeft, v))
}

// TreeLeftGTE applies the GTE predicate on the "tree_left" field.
func TreeLeftGTE(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldTreeLeft, v))
}

// TreeLeftLT applies the LT predicate on the "tree_left" field.
func TreeLeftLT(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldTreeLeft, v))
}

// TreeLeftLTE applies the LTE predicate on the "tree_left" field.
func TreeLeftLTE(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldTreeLeft, v))
}

// TreeLeftIsNil applies the IsNil predicate on the "tree_left" field.
func TreeLeftIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldTreeLeft))
}

// TreeLeftNotNil applies the NotNil predicate on the "tree_left" field.
func TreeLeftNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldTreeLeft))
}

// TreeRightEQ applies the EQ predicate on the "tree_right" field.
func TreeRightEQ(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreeRight, v))
}

// TreeRightNEQ applies the NEQ predicate on the "tree_right" field.
func TreeRightNEQ(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldTreeRight, v))
}

// TreeRightIn applies the In predicate on the "tree_right" field.
func TreeRightIn(vs ...int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldTreeRight, vs...))
}

// TreeRightNotIn applies the NotIn predicate on the "tree_right" field.
func TreeRightNotIn(vs ...int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldTreeRight, vs...))
}

// TreeRightGT applies the GT predicate on the "tree_right" field.
func TreeRightGT(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldTreeRight, v))
}

// TreeRightGTE applies the GTE predicate on the "tree_right" field.
func TreeRightGTE(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldTreeRight, v))
}

// TreeRightLT applies the LT predicate on the "tree_right" field.
func TreeRightLT(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldTreeRight, v))
}

// TreeRightLTE applies the LTE predicate on the "tree_right" field.
func TreeRightLTE(v int64) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldTreeRight, v))
}

// TreeRightIsNil applies the IsNil predicate on the "tree_right" field.
func TreeRightIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldTreeRight))
}

// TreeRightNotNil applies the NotNil predicate on the "tree_right" field.
func TreeRightNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldTreeRight))
}

// IsLeafEQ applies the EQ predicate on the "is_leaf" field.
func IsLeafEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsLeaf, v))
}

// IsLeafNEQ applies the NEQ predicate on the "is_leaf" field.
func IsLeafNEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldIsLeaf, v))
}

// IsLeafIsNil applies the IsNil predicate on the "is_leaf" field.
func IsLeafIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldIsLeaf))
}

// IsLeafNotNil applies the NotNil predicate on the "is_leaf" field.
func IsLeafNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldIsLeaf))
}

// TreePathEQ applies the EQ predicate on the "tree_path" field.
func TreePathEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldTreePath, v))
}

// TreePathNEQ applies the NEQ predicate on the "tree_path" field.
func TreePathNEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldTreePath, v))
}

// TreePathIn applies the In predicate on the "tree_path" field.
func TreePathIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldTreePath, vs...))
}

// TreePathNotIn applies the NotIn predicate on the "tree_path" field.
func TreePathNotIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldTreePath, vs...))
}

// TreePathGT applies the GT predicate on the "tree_path" field.
func TreePathGT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldTreePath, v))
}

// TreePathGTE applies the GTE predicate on the "tree_path" field.
func TreePathGTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldTreePath, v))
}

// TreePathLT applies the LT predicate on the "tree_path" field.
func TreePathLT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldTreePath, v))
}

// TreePathLTE applies the LTE predicate on the "tree_path" field.
func TreePathLTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldTreePath, v))
}

// TreePathContains applies the Contains predicate on the "tree_path" field.
func TreePathContains(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContains(FieldTreePath, v))
}

// TreePathHasPrefix applies the HasPrefix predicate on the "tree_path" field.
func TreePathHasPrefix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasPrefix(FieldTreePath, v))
}

// TreePathHasSuffix applies the HasSuffix predicate on the "tree_path" field.
func TreePathHasSuffix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasSuffix(FieldTreePath, v))
}

// TreePathIsNil applies the IsNil predicate on the "tree_path" field.
func TreePathIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldTreePath))
}

// TreePathNotNil applies the NotNil predicate on the "tree_path" field.
func TreePathNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldTreePath))
}

// TreePathEqualFold applies the EqualFold predicate on the "tree_path" field.
func TreePathEqualFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldTreePath, v))
}

// TreePathContainsFold applies the ContainsFold predicate on the "tree_path" field.
func TreePathContainsFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldTreePath, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldName, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldCode, v))
}

// OrgIDEQ applies the EQ predicate on the "org_id" field.
func OrgIDEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldOrgID, v))
}

// OrgIDNEQ applies the NEQ predicate on the "org_id" field.
func OrgIDNEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldOrgID, v))
}

// OrgIDIn applies the In predicate on the "org_id" field.
func OrgIDIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldOrgID, vs...))
}

// OrgIDNotIn applies the NotIn predicate on the "org_id" field.
func OrgIDNotIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldOrgID, vs...))
}

// OrgIDGT applies the GT predicate on the "org_id" field.
func OrgIDGT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldOrgID, v))
}

// OrgIDGTE applies the GTE predicate on the "org_id" field.
func OrgIDGTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldOrgID, v))
}

// OrgIDLT applies the LT predicate on the "org_id" field.
func OrgIDLT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldOrgID, v))
}

// OrgIDLTE applies the LTE predicate on the "org_id" field.
func OrgIDLTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldOrgID, v))
}

// OrgIDContains applies the Contains predicate on the "org_id" field.
func OrgIDContains(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContains(FieldOrgID, v))
}

// OrgIDHasPrefix applies the HasPrefix predicate on the "org_id" field.
func OrgIDHasPrefix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasPrefix(FieldOrgID, v))
}

// OrgIDHasSuffix applies the HasSuffix predicate on the "org_id" field.
func OrgIDHasSuffix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasSuffix(FieldOrgID, v))
}

// OrgIDIsNil applies the IsNil predicate on the "org_id" field.
func OrgIDIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldOrgID))
}

// OrgIDNotNil applies the NotNil predicate on the "org_id" field.
func OrgIDNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldOrgID))
}

// OrgIDEqualFold applies the EqualFold predicate on the "org_id" field.
func OrgIDEqualFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldOrgID, v))
}

// OrgIDContainsFold applies the ContainsFold predicate on the "org_id" field.
func OrgIDContainsFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldOrgID, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldParentID))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldParentID, v))
}

// IsRealEQ applies the EQ predicate on the "is_real" field.
func IsRealEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldIsReal, v))
}

// IsRealNEQ applies the NEQ predicate on the "is_real" field.
func IsRealNEQ(v bool) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldIsReal, v))
}

// IsRealIsNil applies the IsNil predicate on the "is_real" field.
func IsRealIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldIsReal))
}

// IsRealNotNil applies the NotNil predicate on the "is_real" field.
func IsRealNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldIsReal))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldNotNull(FieldCreator))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.OrgDepartment {
	return predicate.OrgDepartment(sql.FieldContainsFold(FieldCreator, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgDepartment
		step.Edge.Schema = schemaConfig.OrgDepartment
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.OrgDepartment) predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgDepartment
		step.Edge.Schema = schemaConfig.OrgDepartment
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgDepartment
		step.Edge.Schema = schemaConfig.OrgDepartment
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.OrgDepartment) predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgDepartment
		step.Edge.Schema = schemaConfig.OrgDepartment
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgan applies the HasEdge predicate on the "organ" edge.
func HasOrgan() predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganTable, OrganColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgOrgan
		step.Edge.Schema = schemaConfig.OrgDepartment
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganWith applies the HasEdge predicate on the "organ" edge with a given conditions (other predicates).
func HasOrganWith(preds ...predicate.OrgOrgan) predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganTable, OrganColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgOrgan
		step.Edge.Schema = schemaConfig.OrgDepartment
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrgDepartment) predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrgDepartment) predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrgDepartment) predicate.OrgDepartment {
	return predicate.OrgDepartment(func(s *sql.Selector) {
		p(s.Not())
	})
}
