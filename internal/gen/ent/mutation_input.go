// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/heromicro/omgind/internal/gen/ent/sysdict"
)

// CreateOrgDeptInput represents a mutation input for creating orgdepts.
type CreateOrgDeptInput struct {
	IsDel     *bool
	Sort      *int32
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	Memo      *string
	TreeID    *int64
	TreeLevel *int32
	TreeLeft  *int64
	TreeRight *int64
	IsLeaf    *bool
	TreePath  *string
	Name      *string
	Code      *string
	MergeName *string
	OrgID     *string
	ParentID  *string
	IsReal    *bool
	IsShow    *bool
	Creator   *string
	Parent    *string
	Children  []string
	Organ     *string
	Staffs    []string
}

// Mutate applies the CreateOrgDeptInput on the OrgDeptCreate builder.
func (i *CreateOrgDeptInput) Mutate(m *OrgDeptCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.TreeID; v != nil {
		m.SetTreeID(*v)
	}
	if v := i.TreeLevel; v != nil {
		m.SetTreeLevel(*v)
	}
	if v := i.TreeLeft; v != nil {
		m.SetTreeLeft(*v)
	}
	if v := i.TreeRight; v != nil {
		m.SetTreeRight(*v)
	}
	if v := i.IsLeaf; v != nil {
		m.SetIsLeaf(*v)
	}
	if v := i.TreePath; v != nil {
		m.SetTreePath(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.MergeName; v != nil {
		m.SetMergeName(*v)
	}
	if v := i.OrgID; v != nil {
		m.SetOrgID(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.IsReal; v != nil {
		m.SetIsReal(*v)
	}
	if v := i.IsShow; v != nil {
		m.SetIsShow(*v)
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if v := i.Parent; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.Children; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
	if ids := i.Staffs; len(ids) > 0 {
		m.AddStaffIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateOrgDeptInput on the create builder.
func (c *OrgDeptCreate) SetInput(i CreateOrgDeptInput) *OrgDeptCreate {
	i.Mutate(c)
	return c
}

// UpdateOrgDeptInput represents a mutation input for updating orgdepts.
type UpdateOrgDeptInput struct {
	IsDel          *bool
	Sort           *int32
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	Memo           *string
	ClearMemo      bool
	TreeID         *int64
	ClearTreeID    bool
	TreeLevel      *int32
	ClearTreeLevel bool
	TreeLeft       *int64
	ClearTreeLeft  bool
	TreeRight      *int64
	ClearTreeRight bool
	IsLeaf         *bool
	ClearIsLeaf    bool
	TreePath       *string
	ClearTreePath  bool
	Name           *string
	ClearName      bool
	Code           *string
	ClearCode      bool
	MergeName      *string
	ClearMergeName bool
	OrgID          *string
	ClearOrgID     bool
	ParentID       *string
	ClearParentID  bool
	IsReal         *bool
	ClearIsReal    bool
	IsShow         *bool
	ClearIsShow    bool
	Creator        *string
	ClearCreator   bool
	Parent         *string
	ClearParent    bool
	AddChildIDs    []string
	RemoveChildIDs []string
	Organ          *string
	ClearOrgan     bool
	AddStaffIDs    []string
	RemoveStaffIDs []string
}

// Mutate applies the UpdateOrgDeptInput on the OrgDeptMutation.
func (i *UpdateOrgDeptInput) Mutate(m *OrgDeptMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearTreeID {
		m.ClearTreeID()
	}
	if v := i.TreeID; v != nil {
		m.SetTreeID(*v)
	}
	if i.ClearTreeLevel {
		m.ClearTreeLevel()
	}
	if v := i.TreeLevel; v != nil {
		m.SetTreeLevel(*v)
	}
	if i.ClearTreeLeft {
		m.ClearTreeLeft()
	}
	if v := i.TreeLeft; v != nil {
		m.SetTreeLeft(*v)
	}
	if i.ClearTreeRight {
		m.ClearTreeRight()
	}
	if v := i.TreeRight; v != nil {
		m.SetTreeRight(*v)
	}
	if i.ClearIsLeaf {
		m.ClearIsLeaf()
	}
	if v := i.IsLeaf; v != nil {
		m.SetIsLeaf(*v)
	}
	if i.ClearTreePath {
		m.ClearTreePath()
	}
	if v := i.TreePath; v != nil {
		m.SetTreePath(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCode {
		m.ClearCode()
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearMergeName {
		m.ClearMergeName()
	}
	if v := i.MergeName; v != nil {
		m.SetMergeName(*v)
	}
	if i.ClearOrgID {
		m.ClearOrgID()
	}
	if v := i.OrgID; v != nil {
		m.SetOrgID(*v)
	}
	if i.ClearParentID {
		m.ClearParentID()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearIsReal {
		m.ClearIsReal()
	}
	if v := i.IsReal; v != nil {
		m.SetIsReal(*v)
	}
	if i.ClearIsShow {
		m.ClearIsShow()
	}
	if v := i.IsShow; v != nil {
		m.SetIsShow(*v)
	}
	if i.ClearCreator {
		m.ClearCreator()
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.Parent; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
	if i.ClearOrgan {
		m.ClearOrgan()
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
	if ids := i.AddStaffIDs; len(ids) > 0 {
		m.AddStaffIDs(ids...)
	}
	if ids := i.RemoveStaffIDs; len(ids) > 0 {
		m.RemoveStaffIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateOrgDeptInput on the update builder.
func (u *OrgDeptUpdate) SetInput(i UpdateOrgDeptInput) *OrgDeptUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrgDeptInput on the update-one builder.
func (u *OrgDeptUpdateOne) SetInput(i UpdateOrgDeptInput) *OrgDeptUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrgOrganInput represents a mutation input for creating orgorgans.
type CreateOrgOrganInput struct {
	IsDel     *bool
	Sort      *int32
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	Memo      *string
	Name      *string
	Sname     *string
	Code      *string
	IdenNo    *string
	OwnerID   *string
	HaddrID   *string
	Creator   *string
	Haddr     *string
	Depts     []string
	Staffs    []string
	Positions []string
}

// Mutate applies the CreateOrgOrganInput on the OrgOrganCreate builder.
func (i *CreateOrgOrganInput) Mutate(m *OrgOrganCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Sname; v != nil {
		m.SetSname(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.IdenNo; v != nil {
		m.SetIdenNo(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.HaddrID; v != nil {
		m.SetHaddrID(*v)
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if v := i.Haddr; v != nil {
		m.SetHaddrID(*v)
	}
	if ids := i.Depts; len(ids) > 0 {
		m.AddDeptIDs(ids...)
	}
	if ids := i.Staffs; len(ids) > 0 {
		m.AddStaffIDs(ids...)
	}
	if ids := i.Positions; len(ids) > 0 {
		m.AddPositionIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateOrgOrganInput on the create builder.
func (c *OrgOrganCreate) SetInput(i CreateOrgOrganInput) *OrgOrganCreate {
	i.Mutate(c)
	return c
}

// UpdateOrgOrganInput represents a mutation input for updating orgorgans.
type UpdateOrgOrganInput struct {
	IsDel             *bool
	Sort              *int32
	UpdatedAt         *time.Time
	ClearUpdatedAt    bool
	DeletedAt         *time.Time
	ClearDeletedAt    bool
	IsActive          *bool
	Memo              *string
	ClearMemo         bool
	Name              *string
	ClearName         bool
	Sname             *string
	ClearSname        bool
	Code              *string
	ClearCode         bool
	IdenNo            *string
	ClearIdenNo       bool
	OwnerID           *string
	ClearOwnerID      bool
	HaddrID           *string
	ClearHaddrID      bool
	Creator           *string
	ClearCreator      bool
	Haddr             *string
	ClearHaddr        bool
	AddDeptIDs        []string
	RemoveDeptIDs     []string
	AddStaffIDs       []string
	RemoveStaffIDs    []string
	AddPositionIDs    []string
	RemovePositionIDs []string
}

// Mutate applies the UpdateOrgOrganInput on the OrgOrganMutation.
func (i *UpdateOrgOrganInput) Mutate(m *OrgOrganMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSname {
		m.ClearSname()
	}
	if v := i.Sname; v != nil {
		m.SetSname(*v)
	}
	if i.ClearCode {
		m.ClearCode()
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearIdenNo {
		m.ClearIdenNo()
	}
	if v := i.IdenNo; v != nil {
		m.SetIdenNo(*v)
	}
	if i.ClearOwnerID {
		m.ClearOwnerID()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearHaddrID {
		m.ClearHaddrID()
	}
	if v := i.HaddrID; v != nil {
		m.SetHaddrID(*v)
	}
	if i.ClearCreator {
		m.ClearCreator()
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if i.ClearHaddr {
		m.ClearHaddr()
	}
	if v := i.Haddr; v != nil {
		m.SetHaddrID(*v)
	}
	if ids := i.AddDeptIDs; len(ids) > 0 {
		m.AddDeptIDs(ids...)
	}
	if ids := i.RemoveDeptIDs; len(ids) > 0 {
		m.RemoveDeptIDs(ids...)
	}
	if ids := i.AddStaffIDs; len(ids) > 0 {
		m.AddStaffIDs(ids...)
	}
	if ids := i.RemoveStaffIDs; len(ids) > 0 {
		m.RemoveStaffIDs(ids...)
	}
	if ids := i.AddPositionIDs; len(ids) > 0 {
		m.AddPositionIDs(ids...)
	}
	if ids := i.RemovePositionIDs; len(ids) > 0 {
		m.RemovePositionIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateOrgOrganInput on the update builder.
func (u *OrgOrganUpdate) SetInput(i UpdateOrgOrganInput) *OrgOrganUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrgOrganInput on the update-one builder.
func (u *OrgOrganUpdateOne) SetInput(i UpdateOrgOrganInput) *OrgOrganUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrgPositionInput represents a mutation input for creating orgpositions.
type CreateOrgPositionInput struct {
	IsDel     *bool
	Sort      *int32
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	Memo      *string
	Name      *string
	Code      *string
	OrgID     *string
	Creator   *string
	Organ     *string
}

// Mutate applies the CreateOrgPositionInput on the OrgPositionCreate builder.
func (i *CreateOrgPositionInput) Mutate(m *OrgPositionCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.OrgID; v != nil {
		m.SetOrgID(*v)
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
}

// SetInput applies the change-set in the CreateOrgPositionInput on the create builder.
func (c *OrgPositionCreate) SetInput(i CreateOrgPositionInput) *OrgPositionCreate {
	i.Mutate(c)
	return c
}

// UpdateOrgPositionInput represents a mutation input for updating orgpositions.
type UpdateOrgPositionInput struct {
	IsDel          *bool
	Sort           *int32
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	Memo           *string
	ClearMemo      bool
	Name           *string
	ClearName      bool
	Code           *string
	ClearCode      bool
	OrgID          *string
	ClearOrgID     bool
	Creator        *string
	ClearCreator   bool
	Organ          *string
	ClearOrgan     bool
}

// Mutate applies the UpdateOrgPositionInput on the OrgPositionMutation.
func (i *UpdateOrgPositionInput) Mutate(m *OrgPositionMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCode {
		m.ClearCode()
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearOrgID {
		m.ClearOrgID()
	}
	if v := i.OrgID; v != nil {
		m.SetOrgID(*v)
	}
	if i.ClearCreator {
		m.ClearCreator()
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if i.ClearOrgan {
		m.ClearOrgan()
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrgPositionInput on the update builder.
func (u *OrgPositionUpdate) SetInput(i UpdateOrgPositionInput) *OrgPositionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrgPositionInput on the update-one builder.
func (u *OrgPositionUpdateOne) SetInput(i UpdateOrgPositionInput) *OrgPositionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateOrgStaffInput represents a mutation input for creating orgstaffs.
type CreateOrgStaffInput struct {
	IsDel        *bool
	Sort         *int32
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	DeletedAt    *time.Time
	IsActive     *bool
	Memo         *string
	FirstName    *string
	LastName     *string
	Mobile       *string
	Gender       *int32
	GenderDictID *string
	BirthDate    *time.Time
	IdenNo       *string
	IdenAddrID   *string
	ResiAddrID   *string
	WorkerNo     *string
	Cubicle      *string
	EntryDate    *time.Time
	RegularDate  *time.Time
	ResignDate   *time.Time
	OrgID        *string
	EmpyStat     *int32
	EmpystDictID *string
	DeptID       *string
	Creator      *string
	Organ        *string
	IdenAddr     *string
	ResiAddr     *string
	Dept         *string
}

// Mutate applies the CreateOrgStaffInput on the OrgStaffCreate builder.
func (i *CreateOrgStaffInput) Mutate(m *OrgStaffCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Mobile; v != nil {
		m.SetMobile(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.GenderDictID; v != nil {
		m.SetGenderDictID(*v)
	}
	if v := i.BirthDate; v != nil {
		m.SetBirthDate(*v)
	}
	if v := i.IdenNo; v != nil {
		m.SetIdenNo(*v)
	}
	if v := i.IdenAddrID; v != nil {
		m.SetIdenAddrID(*v)
	}
	if v := i.ResiAddrID; v != nil {
		m.SetResiAddrID(*v)
	}
	if v := i.WorkerNo; v != nil {
		m.SetWorkerNo(*v)
	}
	if v := i.Cubicle; v != nil {
		m.SetCubicle(*v)
	}
	if v := i.EntryDate; v != nil {
		m.SetEntryDate(*v)
	}
	if v := i.RegularDate; v != nil {
		m.SetRegularDate(*v)
	}
	if v := i.ResignDate; v != nil {
		m.SetResignDate(*v)
	}
	if v := i.OrgID; v != nil {
		m.SetOrgID(*v)
	}
	if v := i.EmpyStat; v != nil {
		m.SetEmpyStat(*v)
	}
	if v := i.EmpystDictID; v != nil {
		m.SetEmpystDictID(*v)
	}
	if v := i.DeptID; v != nil {
		m.SetDeptID(*v)
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
	if v := i.IdenAddr; v != nil {
		m.SetIdenAddrID(*v)
	}
	if v := i.ResiAddr; v != nil {
		m.SetResiAddrID(*v)
	}
	if v := i.Dept; v != nil {
		m.SetDeptID(*v)
	}
}

// SetInput applies the change-set in the CreateOrgStaffInput on the create builder.
func (c *OrgStaffCreate) SetInput(i CreateOrgStaffInput) *OrgStaffCreate {
	i.Mutate(c)
	return c
}

// UpdateOrgStaffInput represents a mutation input for updating orgstaffs.
type UpdateOrgStaffInput struct {
	IsDel             *bool
	Sort              *int32
	UpdatedAt         *time.Time
	ClearUpdatedAt    bool
	DeletedAt         *time.Time
	ClearDeletedAt    bool
	IsActive          *bool
	Memo              *string
	ClearMemo         bool
	FirstName         *string
	ClearFirstName    bool
	LastName          *string
	ClearLastName     bool
	Mobile            *string
	ClearMobile       bool
	Gender            *int32
	ClearGender       bool
	GenderDictID      *string
	ClearGenderDictID bool
	BirthDate         *time.Time
	ClearBirthDate    bool
	IdenNo            *string
	ClearIdenNo       bool
	IdenAddrID        *string
	ClearIdenAddrID   bool
	ResiAddrID        *string
	ClearResiAddrID   bool
	WorkerNo          *string
	ClearWorkerNo     bool
	Cubicle           *string
	ClearCubicle      bool
	EntryDate         *time.Time
	ClearEntryDate    bool
	RegularDate       *time.Time
	ClearRegularDate  bool
	ResignDate        *time.Time
	ClearResignDate   bool
	OrgID             *string
	ClearOrgID        bool
	EmpyStat          *int32
	EmpystDictID      *string
	ClearEmpystDictID bool
	DeptID            *string
	ClearDeptID       bool
	Creator           *string
	ClearCreator      bool
	Organ             *string
	ClearOrgan        bool
	IdenAddr          *string
	ClearIdenAddr     bool
	ResiAddr          *string
	ClearResiAddr     bool
	Dept              *string
	ClearDept         bool
}

// Mutate applies the UpdateOrgStaffInput on the OrgStaffMutation.
func (i *UpdateOrgStaffInput) Mutate(m *OrgStaffMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearMobile {
		m.ClearMobile()
	}
	if v := i.Mobile; v != nil {
		m.SetMobile(*v)
	}
	if i.ClearGender {
		m.ClearGender()
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if i.ClearGenderDictID {
		m.ClearGenderDictID()
	}
	if v := i.GenderDictID; v != nil {
		m.SetGenderDictID(*v)
	}
	if i.ClearBirthDate {
		m.ClearBirthDate()
	}
	if v := i.BirthDate; v != nil {
		m.SetBirthDate(*v)
	}
	if i.ClearIdenNo {
		m.ClearIdenNo()
	}
	if v := i.IdenNo; v != nil {
		m.SetIdenNo(*v)
	}
	if i.ClearIdenAddrID {
		m.ClearIdenAddrID()
	}
	if v := i.IdenAddrID; v != nil {
		m.SetIdenAddrID(*v)
	}
	if i.ClearResiAddrID {
		m.ClearResiAddrID()
	}
	if v := i.ResiAddrID; v != nil {
		m.SetResiAddrID(*v)
	}
	if i.ClearWorkerNo {
		m.ClearWorkerNo()
	}
	if v := i.WorkerNo; v != nil {
		m.SetWorkerNo(*v)
	}
	if i.ClearCubicle {
		m.ClearCubicle()
	}
	if v := i.Cubicle; v != nil {
		m.SetCubicle(*v)
	}
	if i.ClearEntryDate {
		m.ClearEntryDate()
	}
	if v := i.EntryDate; v != nil {
		m.SetEntryDate(*v)
	}
	if i.ClearRegularDate {
		m.ClearRegularDate()
	}
	if v := i.RegularDate; v != nil {
		m.SetRegularDate(*v)
	}
	if i.ClearResignDate {
		m.ClearResignDate()
	}
	if v := i.ResignDate; v != nil {
		m.SetResignDate(*v)
	}
	if i.ClearOrgID {
		m.ClearOrgID()
	}
	if v := i.OrgID; v != nil {
		m.SetOrgID(*v)
	}
	if v := i.EmpyStat; v != nil {
		m.SetEmpyStat(*v)
	}
	if i.ClearEmpystDictID {
		m.ClearEmpystDictID()
	}
	if v := i.EmpystDictID; v != nil {
		m.SetEmpystDictID(*v)
	}
	if i.ClearDeptID {
		m.ClearDeptID()
	}
	if v := i.DeptID; v != nil {
		m.SetDeptID(*v)
	}
	if i.ClearCreator {
		m.ClearCreator()
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if i.ClearOrgan {
		m.ClearOrgan()
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
	if i.ClearIdenAddr {
		m.ClearIdenAddr()
	}
	if v := i.IdenAddr; v != nil {
		m.SetIdenAddrID(*v)
	}
	if i.ClearResiAddr {
		m.ClearResiAddr()
	}
	if v := i.ResiAddr; v != nil {
		m.SetResiAddrID(*v)
	}
	if i.ClearDept {
		m.ClearDept()
	}
	if v := i.Dept; v != nil {
		m.SetDeptID(*v)
	}
}

// SetInput applies the change-set in the UpdateOrgStaffInput on the update builder.
func (u *OrgStaffUpdate) SetInput(i UpdateOrgStaffInput) *OrgStaffUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateOrgStaffInput on the update-one builder.
func (u *OrgStaffUpdateOne) SetInput(i UpdateOrgStaffInput) *OrgStaffUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysAddressInput represents a mutation input for creating sysaddresses.
type CreateSysAddressInput struct {
	IsDel      *bool
	UserID     *string
	OrgID      *string
	Sort       *int32
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	DeletedAt  *time.Time
	IsActive   *bool
	Memo       *string
	Country    *string
	Province   *string
	City       *string
	County     *string
	CountryID  *string
	ProvinceID *string
	CityID     *string
	CountyID   *string
	ZipCode    *string
	Daddr      *string
	FirstName  *string
	LastName   *string
	AreaCode   *string
	Mobile     *string
	Creator    *string
	Organ      *string
	StaffResi  *string
	StaffIden  *string
}

// Mutate applies the CreateSysAddressInput on the SysAddressCreate builder.
func (i *CreateSysAddressInput) Mutate(m *SysAddressCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.OrgID; v != nil {
		m.SetOrgID(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if v := i.Province; v != nil {
		m.SetProvince(*v)
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if v := i.County; v != nil {
		m.SetCounty(*v)
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if v := i.CountyID; v != nil {
		m.SetCountyID(*v)
	}
	if v := i.ZipCode; v != nil {
		m.SetZipCode(*v)
	}
	if v := i.Daddr; v != nil {
		m.SetDaddr(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.AreaCode; v != nil {
		m.SetAreaCode(*v)
	}
	if v := i.Mobile; v != nil {
		m.SetMobile(*v)
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
	if v := i.StaffResi; v != nil {
		m.SetStaffResiID(*v)
	}
	if v := i.StaffIden; v != nil {
		m.SetStaffIdenID(*v)
	}
}

// SetInput applies the change-set in the CreateSysAddressInput on the create builder.
func (c *SysAddressCreate) SetInput(i CreateSysAddressInput) *SysAddressCreate {
	i.Mutate(c)
	return c
}

// UpdateSysAddressInput represents a mutation input for updating sysaddresses.
type UpdateSysAddressInput struct {
	IsDel           *bool
	UserID          *string
	ClearUserID     bool
	Sort            *int32
	UpdatedAt       *time.Time
	ClearUpdatedAt  bool
	DeletedAt       *time.Time
	ClearDeletedAt  bool
	IsActive        *bool
	Memo            *string
	ClearMemo       bool
	Country         *string
	ClearCountry    bool
	Province        *string
	ClearProvince   bool
	City            *string
	ClearCity       bool
	County          *string
	ClearCounty     bool
	CountryID       *string
	ClearCountryID  bool
	ProvinceID      *string
	ClearProvinceID bool
	CityID          *string
	ClearCityID     bool
	CountyID        *string
	ClearCountyID   bool
	ZipCode         *string
	ClearZipCode    bool
	Daddr           *string
	ClearDaddr      bool
	FirstName       *string
	ClearFirstName  bool
	LastName        *string
	ClearLastName   bool
	AreaCode        *string
	ClearAreaCode   bool
	Mobile          *string
	ClearMobile     bool
	Creator         *string
	ClearCreator    bool
	Organ           *string
	ClearOrgan      bool
	StaffResi       *string
	ClearStaffResi  bool
	StaffIden       *string
	ClearStaffIden  bool
}

// Mutate applies the UpdateSysAddressInput on the SysAddressMutation.
func (i *UpdateSysAddressInput) Mutate(m *SysAddressMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearUserID {
		m.ClearUserID()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearCountry {
		m.ClearCountry()
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if i.ClearProvince {
		m.ClearProvince()
	}
	if v := i.Province; v != nil {
		m.SetProvince(*v)
	}
	if i.ClearCity {
		m.ClearCity()
	}
	if v := i.City; v != nil {
		m.SetCity(*v)
	}
	if i.ClearCounty {
		m.ClearCounty()
	}
	if v := i.County; v != nil {
		m.SetCounty(*v)
	}
	if i.ClearCountryID {
		m.ClearCountryID()
	}
	if v := i.CountryID; v != nil {
		m.SetCountryID(*v)
	}
	if i.ClearProvinceID {
		m.ClearProvinceID()
	}
	if v := i.ProvinceID; v != nil {
		m.SetProvinceID(*v)
	}
	if i.ClearCityID {
		m.ClearCityID()
	}
	if v := i.CityID; v != nil {
		m.SetCityID(*v)
	}
	if i.ClearCountyID {
		m.ClearCountyID()
	}
	if v := i.CountyID; v != nil {
		m.SetCountyID(*v)
	}
	if i.ClearZipCode {
		m.ClearZipCode()
	}
	if v := i.ZipCode; v != nil {
		m.SetZipCode(*v)
	}
	if i.ClearDaddr {
		m.ClearDaddr()
	}
	if v := i.Daddr; v != nil {
		m.SetDaddr(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearAreaCode {
		m.ClearAreaCode()
	}
	if v := i.AreaCode; v != nil {
		m.SetAreaCode(*v)
	}
	if i.ClearMobile {
		m.ClearMobile()
	}
	if v := i.Mobile; v != nil {
		m.SetMobile(*v)
	}
	if i.ClearCreator {
		m.ClearCreator()
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if i.ClearOrgan {
		m.ClearOrgan()
	}
	if v := i.Organ; v != nil {
		m.SetOrganID(*v)
	}
	if i.ClearStaffResi {
		m.ClearStaffResi()
	}
	if v := i.StaffResi; v != nil {
		m.SetStaffResiID(*v)
	}
	if i.ClearStaffIden {
		m.ClearStaffIden()
	}
	if v := i.StaffIden; v != nil {
		m.SetStaffIdenID(*v)
	}
}

// SetInput applies the change-set in the UpdateSysAddressInput on the update builder.
func (u *SysAddressUpdate) SetInput(i UpdateSysAddressInput) *SysAddressUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysAddressInput on the update-one builder.
func (u *SysAddressUpdateOne) SetInput(i UpdateSysAddressInput) *SysAddressUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysDictInput represents a mutation input for creating sysdicts.
type CreateSysDictInput struct {
	IsDel     *bool
	Memo      *string
	Sort      *int32
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	NameCn    string
	NameEn    string
	Tipe      *sysdict.Tipe
	Items     []string
}

// Mutate applies the CreateSysDictInput on the SysDictCreate builder.
func (i *CreateSysDictInput) Mutate(m *SysDictCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetNameCn(i.NameCn)
	m.SetNameEn(i.NameEn)
	if v := i.Tipe; v != nil {
		m.SetTipe(*v)
	}
	if ids := i.Items; len(ids) > 0 {
		m.AddItemIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateSysDictInput on the create builder.
func (c *SysDictCreate) SetInput(i CreateSysDictInput) *SysDictCreate {
	i.Mutate(c)
	return c
}

// UpdateSysDictInput represents a mutation input for updating sysdicts.
type UpdateSysDictInput struct {
	IsDel          *bool
	Memo           *string
	ClearMemo      bool
	Sort           *int32
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	NameCn         *string
	NameEn         *string
	Tipe           *sysdict.Tipe
	AddItemIDs     []string
	RemoveItemIDs  []string
}

// Mutate applies the UpdateSysDictInput on the SysDictMutation.
func (i *UpdateSysDictInput) Mutate(m *SysDictMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.NameCn; v != nil {
		m.SetNameCn(*v)
	}
	if v := i.NameEn; v != nil {
		m.SetNameEn(*v)
	}
	if v := i.Tipe; v != nil {
		m.SetTipe(*v)
	}
	if ids := i.AddItemIDs; len(ids) > 0 {
		m.AddItemIDs(ids...)
	}
	if ids := i.RemoveItemIDs; len(ids) > 0 {
		m.RemoveItemIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateSysDictInput on the update builder.
func (u *SysDictUpdate) SetInput(i UpdateSysDictInput) *SysDictUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysDictInput on the update-one builder.
func (u *SysDictUpdateOne) SetInput(i UpdateSysDictInput) *SysDictUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysDictItemInput represents a mutation input for creating sysdictitems.
type CreateSysDictItemInput struct {
	IsDel     *bool
	Memo      *string
	Sort      *int32
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	Label     string
	Value     int
	DictID    *string
	Dict      *string
}

// Mutate applies the CreateSysDictItemInput on the SysDictItemCreate builder.
func (i *CreateSysDictItemInput) Mutate(m *SysDictItemCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetLabel(i.Label)
	m.SetValue(i.Value)
	if v := i.DictID; v != nil {
		m.SetDictID(*v)
	}
	if v := i.Dict; v != nil {
		m.SetDictID(*v)
	}
}

// SetInput applies the change-set in the CreateSysDictItemInput on the create builder.
func (c *SysDictItemCreate) SetInput(i CreateSysDictItemInput) *SysDictItemCreate {
	i.Mutate(c)
	return c
}

// UpdateSysDictItemInput represents a mutation input for updating sysdictitems.
type UpdateSysDictItemInput struct {
	IsDel          *bool
	Memo           *string
	ClearMemo      bool
	Sort           *int32
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	Label          *string
	Value          *int
	DictID         *string
	ClearDictID    bool
	Dict           *string
	ClearDict      bool
}

// Mutate applies the UpdateSysDictItemInput on the SysDictItemMutation.
func (i *UpdateSysDictItemInput) Mutate(m *SysDictItemMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if i.ClearDictID {
		m.ClearDictID()
	}
	if v := i.DictID; v != nil {
		m.SetDictID(*v)
	}
	if i.ClearDict {
		m.ClearDict()
	}
	if v := i.Dict; v != nil {
		m.SetDictID(*v)
	}
}

// SetInput applies the change-set in the UpdateSysDictItemInput on the update builder.
func (u *SysDictItemUpdate) SetInput(i UpdateSysDictItemInput) *SysDictItemUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysDictItemInput on the update-one builder.
func (u *SysDictItemUpdateOne) SetInput(i UpdateSysDictItemInput) *SysDictItemUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysDistrictInput represents a mutation input for creating sysdistricts.
type CreateSysDistrictInput struct {
	IsDel      *bool
	Sort       *int32
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	DeletedAt  *time.Time
	IsActive   *bool
	TreeID     *int64
	TreeLevel  *int32
	TreeLeft   *int64
	TreeRight  *int64
	IsLeaf     *bool
	TreePath   *string
	Name       *string
	NameEn     *string
	Sname      *string
	SnameEn    *string
	Abbr       *string
	StCode     *string
	Initials   *string
	Pinyin     *string
	ParentID   *string
	Longitude  *float64
	Latitude   *float64
	AreaCode   *string
	ZipCode    *string
	MergeName  *string
	MergeSname *string
	Extra      *string
	Suffix     *string
	IsHot      *bool
	IsReal     *bool
	IsMain     *bool
	IsDirect   *bool
	Creator    string
	Parent     *string
	Children   []string
}

// Mutate applies the CreateSysDistrictInput on the SysDistrictCreate builder.
func (i *CreateSysDistrictInput) Mutate(m *SysDistrictCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.TreeID; v != nil {
		m.SetTreeID(*v)
	}
	if v := i.TreeLevel; v != nil {
		m.SetTreeLevel(*v)
	}
	if v := i.TreeLeft; v != nil {
		m.SetTreeLeft(*v)
	}
	if v := i.TreeRight; v != nil {
		m.SetTreeRight(*v)
	}
	if v := i.IsLeaf; v != nil {
		m.SetIsLeaf(*v)
	}
	if v := i.TreePath; v != nil {
		m.SetTreePath(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.NameEn; v != nil {
		m.SetNameEn(*v)
	}
	if v := i.Sname; v != nil {
		m.SetSname(*v)
	}
	if v := i.SnameEn; v != nil {
		m.SetSnameEn(*v)
	}
	if v := i.Abbr; v != nil {
		m.SetAbbr(*v)
	}
	if v := i.StCode; v != nil {
		m.SetStCode(*v)
	}
	if v := i.Initials; v != nil {
		m.SetInitials(*v)
	}
	if v := i.Pinyin; v != nil {
		m.SetPinyin(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.Longitude; v != nil {
		m.SetLongitude(*v)
	}
	if v := i.Latitude; v != nil {
		m.SetLatitude(*v)
	}
	if v := i.AreaCode; v != nil {
		m.SetAreaCode(*v)
	}
	if v := i.ZipCode; v != nil {
		m.SetZipCode(*v)
	}
	if v := i.MergeName; v != nil {
		m.SetMergeName(*v)
	}
	if v := i.MergeSname; v != nil {
		m.SetMergeSname(*v)
	}
	if v := i.Extra; v != nil {
		m.SetExtra(*v)
	}
	if v := i.Suffix; v != nil {
		m.SetSuffix(*v)
	}
	if v := i.IsHot; v != nil {
		m.SetIsHot(*v)
	}
	if v := i.IsReal; v != nil {
		m.SetIsReal(*v)
	}
	if v := i.IsMain; v != nil {
		m.SetIsMain(*v)
	}
	if v := i.IsDirect; v != nil {
		m.SetIsDirect(*v)
	}
	m.SetCreator(i.Creator)
	if v := i.Parent; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.Children; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateSysDistrictInput on the create builder.
func (c *SysDistrictCreate) SetInput(i CreateSysDistrictInput) *SysDistrictCreate {
	i.Mutate(c)
	return c
}

// UpdateSysDistrictInput represents a mutation input for updating sysdistricts.
type UpdateSysDistrictInput struct {
	IsDel           *bool
	Sort            *int32
	UpdatedAt       *time.Time
	ClearUpdatedAt  bool
	DeletedAt       *time.Time
	ClearDeletedAt  bool
	IsActive        *bool
	TreeID          *int64
	ClearTreeID     bool
	TreeLevel       *int32
	ClearTreeLevel  bool
	TreeLeft        *int64
	ClearTreeLeft   bool
	TreeRight       *int64
	ClearTreeRight  bool
	IsLeaf          *bool
	ClearIsLeaf     bool
	TreePath        *string
	ClearTreePath   bool
	Name            *string
	ClearName       bool
	NameEn          *string
	ClearNameEn     bool
	Sname           *string
	ClearSname      bool
	SnameEn         *string
	ClearSnameEn    bool
	Abbr            *string
	ClearAbbr       bool
	StCode          *string
	ClearStCode     bool
	Initials        *string
	ClearInitials   bool
	Pinyin          *string
	ClearPinyin     bool
	ParentID        *string
	ClearParentID   bool
	Longitude       *float64
	ClearLongitude  bool
	Latitude        *float64
	ClearLatitude   bool
	AreaCode        *string
	ClearAreaCode   bool
	ZipCode         *string
	ClearZipCode    bool
	MergeName       *string
	ClearMergeName  bool
	MergeSname      *string
	ClearMergeSname bool
	Extra           *string
	ClearExtra      bool
	Suffix          *string
	ClearSuffix     bool
	IsHot           *bool
	ClearIsHot      bool
	IsReal          *bool
	ClearIsReal     bool
	IsMain          *bool
	ClearIsMain     bool
	IsDirect        *bool
	ClearIsDirect   bool
	Creator         *string
	Parent          *string
	ClearParent     bool
	AddChildIDs     []string
	RemoveChildIDs  []string
}

// Mutate applies the UpdateSysDistrictInput on the SysDistrictMutation.
func (i *UpdateSysDistrictInput) Mutate(m *SysDistrictMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearTreeID {
		m.ClearTreeID()
	}
	if v := i.TreeID; v != nil {
		m.SetTreeID(*v)
	}
	if i.ClearTreeLevel {
		m.ClearTreeLevel()
	}
	if v := i.TreeLevel; v != nil {
		m.SetTreeLevel(*v)
	}
	if i.ClearTreeLeft {
		m.ClearTreeLeft()
	}
	if v := i.TreeLeft; v != nil {
		m.SetTreeLeft(*v)
	}
	if i.ClearTreeRight {
		m.ClearTreeRight()
	}
	if v := i.TreeRight; v != nil {
		m.SetTreeRight(*v)
	}
	if i.ClearIsLeaf {
		m.ClearIsLeaf()
	}
	if v := i.IsLeaf; v != nil {
		m.SetIsLeaf(*v)
	}
	if i.ClearTreePath {
		m.ClearTreePath()
	}
	if v := i.TreePath; v != nil {
		m.SetTreePath(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearNameEn {
		m.ClearNameEn()
	}
	if v := i.NameEn; v != nil {
		m.SetNameEn(*v)
	}
	if i.ClearSname {
		m.ClearSname()
	}
	if v := i.Sname; v != nil {
		m.SetSname(*v)
	}
	if i.ClearSnameEn {
		m.ClearSnameEn()
	}
	if v := i.SnameEn; v != nil {
		m.SetSnameEn(*v)
	}
	if i.ClearAbbr {
		m.ClearAbbr()
	}
	if v := i.Abbr; v != nil {
		m.SetAbbr(*v)
	}
	if i.ClearStCode {
		m.ClearStCode()
	}
	if v := i.StCode; v != nil {
		m.SetStCode(*v)
	}
	if i.ClearInitials {
		m.ClearInitials()
	}
	if v := i.Initials; v != nil {
		m.SetInitials(*v)
	}
	if i.ClearPinyin {
		m.ClearPinyin()
	}
	if v := i.Pinyin; v != nil {
		m.SetPinyin(*v)
	}
	if i.ClearParentID {
		m.ClearParentID()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearLongitude {
		m.ClearLongitude()
	}
	if v := i.Longitude; v != nil {
		m.SetLongitude(*v)
	}
	if i.ClearLatitude {
		m.ClearLatitude()
	}
	if v := i.Latitude; v != nil {
		m.SetLatitude(*v)
	}
	if i.ClearAreaCode {
		m.ClearAreaCode()
	}
	if v := i.AreaCode; v != nil {
		m.SetAreaCode(*v)
	}
	if i.ClearZipCode {
		m.ClearZipCode()
	}
	if v := i.ZipCode; v != nil {
		m.SetZipCode(*v)
	}
	if i.ClearMergeName {
		m.ClearMergeName()
	}
	if v := i.MergeName; v != nil {
		m.SetMergeName(*v)
	}
	if i.ClearMergeSname {
		m.ClearMergeSname()
	}
	if v := i.MergeSname; v != nil {
		m.SetMergeSname(*v)
	}
	if i.ClearExtra {
		m.ClearExtra()
	}
	if v := i.Extra; v != nil {
		m.SetExtra(*v)
	}
	if i.ClearSuffix {
		m.ClearSuffix()
	}
	if v := i.Suffix; v != nil {
		m.SetSuffix(*v)
	}
	if i.ClearIsHot {
		m.ClearIsHot()
	}
	if v := i.IsHot; v != nil {
		m.SetIsHot(*v)
	}
	if i.ClearIsReal {
		m.ClearIsReal()
	}
	if v := i.IsReal; v != nil {
		m.SetIsReal(*v)
	}
	if i.ClearIsMain {
		m.ClearIsMain()
	}
	if v := i.IsMain; v != nil {
		m.SetIsMain(*v)
	}
	if i.ClearIsDirect {
		m.ClearIsDirect()
	}
	if v := i.IsDirect; v != nil {
		m.SetIsDirect(*v)
	}
	if v := i.Creator; v != nil {
		m.SetCreator(*v)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.Parent; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateSysDistrictInput on the update builder.
func (u *SysDistrictUpdate) SetInput(i UpdateSysDistrictInput) *SysDistrictUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysDistrictInput on the update-one builder.
func (u *SysDistrictUpdateOne) SetInput(i UpdateSysDistrictInput) *SysDistrictUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysJwtBlockInput represents a mutation input for creating sysjwtblocks.
type CreateSysJwtBlockInput struct {
	IsDel     *bool
	Memo      *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	Jwt       string
}

// Mutate applies the CreateSysJwtBlockInput on the SysJwtBlockCreate builder.
func (i *CreateSysJwtBlockInput) Mutate(m *SysJwtBlockCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetJwt(i.Jwt)
}

// SetInput applies the change-set in the CreateSysJwtBlockInput on the create builder.
func (c *SysJwtBlockCreate) SetInput(i CreateSysJwtBlockInput) *SysJwtBlockCreate {
	i.Mutate(c)
	return c
}

// UpdateSysJwtBlockInput represents a mutation input for updating sysjwtblocks.
type UpdateSysJwtBlockInput struct {
	IsDel          *bool
	Memo           *string
	ClearMemo      bool
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	Jwt            *string
}

// Mutate applies the UpdateSysJwtBlockInput on the SysJwtBlockMutation.
func (i *UpdateSysJwtBlockInput) Mutate(m *SysJwtBlockMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Jwt; v != nil {
		m.SetJwt(*v)
	}
}

// SetInput applies the change-set in the UpdateSysJwtBlockInput on the update builder.
func (u *SysJwtBlockUpdate) SetInput(i UpdateSysJwtBlockInput) *SysJwtBlockUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysJwtBlockInput on the update-one builder.
func (u *SysJwtBlockUpdateOne) SetInput(i UpdateSysJwtBlockInput) *SysJwtBlockUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysLoggingInput represents a mutation input for creating sysloggings.
type CreateSysLoggingInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	DeletedAt  *time.Time
	IsDel      *bool
	Memo       *string
	Level      *string
	TraceID    *string
	UserID     *string
	Tag        *string
	Version    *string
	Message    *string
	Data       *string
	ErrorStack *string
}

// Mutate applies the CreateSysLoggingInput on the SysLoggingCreate builder.
func (i *CreateSysLoggingInput) Mutate(m *SysLoggingCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if v := i.TraceID; v != nil {
		m.SetTraceID(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.Tag; v != nil {
		m.SetTag(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.Message; v != nil {
		m.SetMessage(*v)
	}
	if v := i.Data; v != nil {
		m.SetData(*v)
	}
	if v := i.ErrorStack; v != nil {
		m.SetErrorStack(*v)
	}
}

// SetInput applies the change-set in the CreateSysLoggingInput on the create builder.
func (c *SysLoggingCreate) SetInput(i CreateSysLoggingInput) *SysLoggingCreate {
	i.Mutate(c)
	return c
}

// UpdateSysLoggingInput represents a mutation input for updating sysloggings.
type UpdateSysLoggingInput struct {
	UpdatedAt       *time.Time
	ClearUpdatedAt  bool
	DeletedAt       *time.Time
	ClearDeletedAt  bool
	IsDel           *bool
	Memo            *string
	ClearMemo       bool
	Level           *string
	ClearLevel      bool
	TraceID         *string
	ClearTraceID    bool
	UserID          *string
	ClearUserID     bool
	Tag             *string
	ClearTag        bool
	Version         *string
	ClearVersion    bool
	Message         *string
	ClearMessage    bool
	ErrorStack      *string
	ClearErrorStack bool
}

// Mutate applies the UpdateSysLoggingInput on the SysLoggingMutation.
func (i *UpdateSysLoggingInput) Mutate(m *SysLoggingMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearLevel {
		m.ClearLevel()
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if i.ClearTraceID {
		m.ClearTraceID()
	}
	if v := i.TraceID; v != nil {
		m.SetTraceID(*v)
	}
	if i.ClearUserID {
		m.ClearUserID()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearTag {
		m.ClearTag()
	}
	if v := i.Tag; v != nil {
		m.SetTag(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearMessage {
		m.ClearMessage()
	}
	if v := i.Message; v != nil {
		m.SetMessage(*v)
	}
	if i.ClearErrorStack {
		m.ClearErrorStack()
	}
	if v := i.ErrorStack; v != nil {
		m.SetErrorStack(*v)
	}
}

// SetInput applies the change-set in the UpdateSysLoggingInput on the update builder.
func (u *SysLoggingUpdate) SetInput(i UpdateSysLoggingInput) *SysLoggingUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysLoggingInput on the update-one builder.
func (u *SysLoggingUpdateOne) SetInput(i UpdateSysLoggingInput) *SysLoggingUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysMenuInput represents a mutation input for creating sysmenus.
type CreateSysMenuInput struct {
	IsDel      *bool
	Memo       *string
	Sort       *int32
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	DeletedAt  *time.Time
	IsActive   *bool
	Name       string
	Icon       string
	Router     string
	IsShow     *bool
	ParentID   *string
	ParentPath *string
	Level      int32
	IsLeaf     *bool
}

// Mutate applies the CreateSysMenuInput on the SysMenuCreate builder.
func (i *CreateSysMenuInput) Mutate(m *SysMenuCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetName(i.Name)
	m.SetIcon(i.Icon)
	m.SetRouter(i.Router)
	if v := i.IsShow; v != nil {
		m.SetIsShow(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.ParentPath; v != nil {
		m.SetParentPath(*v)
	}
	m.SetLevel(i.Level)
	if v := i.IsLeaf; v != nil {
		m.SetIsLeaf(*v)
	}
}

// SetInput applies the change-set in the CreateSysMenuInput on the create builder.
func (c *SysMenuCreate) SetInput(i CreateSysMenuInput) *SysMenuCreate {
	i.Mutate(c)
	return c
}

// UpdateSysMenuInput represents a mutation input for updating sysmenus.
type UpdateSysMenuInput struct {
	IsDel           *bool
	Memo            *string
	ClearMemo       bool
	Sort            *int32
	UpdatedAt       *time.Time
	ClearUpdatedAt  bool
	DeletedAt       *time.Time
	ClearDeletedAt  bool
	IsActive        *bool
	Name            *string
	Icon            *string
	Router          *string
	IsShow          *bool
	ParentID        *string
	ClearParentID   bool
	ParentPath      *string
	ClearParentPath bool
	Level           *int32
	IsLeaf          *bool
	ClearIsLeaf     bool
}

// Mutate applies the UpdateSysMenuInput on the SysMenuMutation.
func (i *UpdateSysMenuInput) Mutate(m *SysMenuMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Icon; v != nil {
		m.SetIcon(*v)
	}
	if v := i.Router; v != nil {
		m.SetRouter(*v)
	}
	if v := i.IsShow; v != nil {
		m.SetIsShow(*v)
	}
	if i.ClearParentID {
		m.ClearParentID()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearParentPath {
		m.ClearParentPath()
	}
	if v := i.ParentPath; v != nil {
		m.SetParentPath(*v)
	}
	if v := i.Level; v != nil {
		m.SetLevel(*v)
	}
	if i.ClearIsLeaf {
		m.ClearIsLeaf()
	}
	if v := i.IsLeaf; v != nil {
		m.SetIsLeaf(*v)
	}
}

// SetInput applies the change-set in the UpdateSysMenuInput on the update builder.
func (u *SysMenuUpdate) SetInput(i UpdateSysMenuInput) *SysMenuUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysMenuInput on the update-one builder.
func (u *SysMenuUpdateOne) SetInput(i UpdateSysMenuInput) *SysMenuUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysMenuActionInput represents a mutation input for creating sysmenuactions.
type CreateSysMenuActionInput struct {
	IsDel     *bool
	Sort      *int32
	IsActive  *bool
	Memo      *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	MenuID    string
	Code      string
	Name      string
}

// Mutate applies the CreateSysMenuActionInput on the SysMenuActionCreate builder.
func (i *CreateSysMenuActionInput) Mutate(m *SysMenuActionCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetMenuID(i.MenuID)
	m.SetCode(i.Code)
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateSysMenuActionInput on the create builder.
func (c *SysMenuActionCreate) SetInput(i CreateSysMenuActionInput) *SysMenuActionCreate {
	i.Mutate(c)
	return c
}

// UpdateSysMenuActionInput represents a mutation input for updating sysmenuactions.
type UpdateSysMenuActionInput struct {
	IsDel          *bool
	Sort           *int32
	IsActive       *bool
	Memo           *string
	ClearMemo      bool
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	MenuID         *string
	Code           *string
	Name           *string
}

// Mutate applies the UpdateSysMenuActionInput on the SysMenuActionMutation.
func (i *UpdateSysMenuActionInput) Mutate(m *SysMenuActionMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.MenuID; v != nil {
		m.SetMenuID(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateSysMenuActionInput on the update builder.
func (u *SysMenuActionUpdate) SetInput(i UpdateSysMenuActionInput) *SysMenuActionUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysMenuActionInput on the update-one builder.
func (u *SysMenuActionUpdateOne) SetInput(i UpdateSysMenuActionInput) *SysMenuActionUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysMenuActionResourceInput represents a mutation input for creating sysmenuactionresources.
type CreateSysMenuActionResourceInput struct {
	IsDel     *bool
	Sort      *int32
	Memo      *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	Method    string
	Path      string
	ActionID  string
}

// Mutate applies the CreateSysMenuActionResourceInput on the SysMenuActionResourceCreate builder.
func (i *CreateSysMenuActionResourceInput) Mutate(m *SysMenuActionResourceCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetMethod(i.Method)
	m.SetPath(i.Path)
	m.SetActionID(i.ActionID)
}

// SetInput applies the change-set in the CreateSysMenuActionResourceInput on the create builder.
func (c *SysMenuActionResourceCreate) SetInput(i CreateSysMenuActionResourceInput) *SysMenuActionResourceCreate {
	i.Mutate(c)
	return c
}

// UpdateSysMenuActionResourceInput represents a mutation input for updating sysmenuactionresources.
type UpdateSysMenuActionResourceInput struct {
	IsDel          *bool
	Sort           *int32
	Memo           *string
	ClearMemo      bool
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	Method         *string
	Path           *string
	ActionID       *string
}

// Mutate applies the UpdateSysMenuActionResourceInput on the SysMenuActionResourceMutation.
func (i *UpdateSysMenuActionResourceInput) Mutate(m *SysMenuActionResourceMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Method; v != nil {
		m.SetMethod(*v)
	}
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if v := i.ActionID; v != nil {
		m.SetActionID(*v)
	}
}

// SetInput applies the change-set in the UpdateSysMenuActionResourceInput on the update builder.
func (u *SysMenuActionResourceUpdate) SetInput(i UpdateSysMenuActionResourceInput) *SysMenuActionResourceUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysMenuActionResourceInput on the update-one builder.
func (u *SysMenuActionResourceUpdateOne) SetInput(i UpdateSysMenuActionResourceInput) *SysMenuActionResourceUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysRoleInput represents a mutation input for creating sysroles.
type CreateSysRoleInput struct {
	IsDel     *bool
	IsActive  *bool
	Sort      *int32
	Memo      *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	Name      string
}

// Mutate applies the CreateSysRoleInput on the SysRoleCreate builder.
func (i *CreateSysRoleInput) Mutate(m *SysRoleCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateSysRoleInput on the create builder.
func (c *SysRoleCreate) SetInput(i CreateSysRoleInput) *SysRoleCreate {
	i.Mutate(c)
	return c
}

// UpdateSysRoleInput represents a mutation input for updating sysroles.
type UpdateSysRoleInput struct {
	IsDel          *bool
	IsActive       *bool
	Sort           *int32
	Memo           *string
	ClearMemo      bool
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	Name           *string
}

// Mutate applies the UpdateSysRoleInput on the SysRoleMutation.
func (i *UpdateSysRoleInput) Mutate(m *SysRoleMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateSysRoleInput on the update builder.
func (u *SysRoleUpdate) SetInput(i UpdateSysRoleInput) *SysRoleUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysRoleInput on the update-one builder.
func (u *SysRoleUpdateOne) SetInput(i UpdateSysRoleInput) *SysRoleUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysRoleMenuInput represents a mutation input for creating sysrolemenus.
type CreateSysRoleMenuInput struct {
	IsDel     *bool
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	RoleID    string
	MenuID    string
	ActionID  *string
}

// Mutate applies the CreateSysRoleMenuInput on the SysRoleMenuCreate builder.
func (i *CreateSysRoleMenuInput) Mutate(m *SysRoleMenuCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetRoleID(i.RoleID)
	m.SetMenuID(i.MenuID)
	if v := i.ActionID; v != nil {
		m.SetActionID(*v)
	}
}

// SetInput applies the change-set in the CreateSysRoleMenuInput on the create builder.
func (c *SysRoleMenuCreate) SetInput(i CreateSysRoleMenuInput) *SysRoleMenuCreate {
	i.Mutate(c)
	return c
}

// UpdateSysRoleMenuInput represents a mutation input for updating sysrolemenus.
type UpdateSysRoleMenuInput struct {
	IsDel          *bool
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	RoleID         *string
	MenuID         *string
	ActionID       *string
	ClearActionID  bool
}

// Mutate applies the UpdateSysRoleMenuInput on the SysRoleMenuMutation.
func (i *UpdateSysRoleMenuInput) Mutate(m *SysRoleMenuMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
	if v := i.MenuID; v != nil {
		m.SetMenuID(*v)
	}
	if i.ClearActionID {
		m.ClearActionID()
	}
	if v := i.ActionID; v != nil {
		m.SetActionID(*v)
	}
}

// SetInput applies the change-set in the UpdateSysRoleMenuInput on the update builder.
func (u *SysRoleMenuUpdate) SetInput(i UpdateSysRoleMenuInput) *SysRoleMenuUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysRoleMenuInput on the update-one builder.
func (u *SysRoleMenuUpdateOne) SetInput(i UpdateSysRoleMenuInput) *SysRoleMenuUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysUserInput represents a mutation input for creating sysusers.
type CreateSysUserInput struct {
	IsDel     *bool
	Sort      *int32
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	UserName  string
	RealName  *string
	FirstName *string
	LastName  *string
	Password  string
	Email     string
	Mobile    string
	Salt      *string
}

// Mutate applies the CreateSysUserInput on the SysUserCreate builder.
func (i *CreateSysUserInput) Mutate(m *SysUserCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetUserName(i.UserName)
	if v := i.RealName; v != nil {
		m.SetRealName(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	m.SetPassword(i.Password)
	m.SetEmail(i.Email)
	m.SetMobile(i.Mobile)
	if v := i.Salt; v != nil {
		m.SetSalt(*v)
	}
}

// SetInput applies the change-set in the CreateSysUserInput on the create builder.
func (c *SysUserCreate) SetInput(i CreateSysUserInput) *SysUserCreate {
	i.Mutate(c)
	return c
}

// UpdateSysUserInput represents a mutation input for updating sysusers.
type UpdateSysUserInput struct {
	IsDel          *bool
	Sort           *int32
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	RealName       *string
	ClearRealName  bool
	FirstName      *string
	ClearFirstName bool
	LastName       *string
	ClearLastName  bool
	Password       *string
	Email          *string
	Mobile         *string
	Salt           *string
}

// Mutate applies the UpdateSysUserInput on the SysUserMutation.
func (i *UpdateSysUserInput) Mutate(m *SysUserMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if i.ClearRealName {
		m.ClearRealName()
	}
	if v := i.RealName; v != nil {
		m.SetRealName(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Mobile; v != nil {
		m.SetMobile(*v)
	}
	if v := i.Salt; v != nil {
		m.SetSalt(*v)
	}
}

// SetInput applies the change-set in the UpdateSysUserInput on the update builder.
func (u *SysUserUpdate) SetInput(i UpdateSysUserInput) *SysUserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysUserInput on the update-one builder.
func (u *SysUserUpdateOne) SetInput(i UpdateSysUserInput) *SysUserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateSysUserRoleInput represents a mutation input for creating sysuserroles.
type CreateSysUserRoleInput struct {
	IsDel     *bool
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	UserID    string
	RoleID    string
}

// Mutate applies the CreateSysUserRoleInput on the SysUserRoleCreate builder.
func (i *CreateSysUserRoleInput) Mutate(m *SysUserRoleCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetUserID(i.UserID)
	m.SetRoleID(i.RoleID)
}

// SetInput applies the change-set in the CreateSysUserRoleInput on the create builder.
func (c *SysUserRoleCreate) SetInput(i CreateSysUserRoleInput) *SysUserRoleCreate {
	i.Mutate(c)
	return c
}

// UpdateSysUserRoleInput represents a mutation input for updating sysuserroles.
type UpdateSysUserRoleInput struct {
	IsDel          *bool
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	UserID         *string
	RoleID         *string
}

// Mutate applies the UpdateSysUserRoleInput on the SysUserRoleMutation.
func (i *UpdateSysUserRoleInput) Mutate(m *SysUserRoleMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
}

// SetInput applies the change-set in the UpdateSysUserRoleInput on the update builder.
func (u *SysUserRoleUpdate) SetInput(i UpdateSysUserRoleInput) *SysUserRoleUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateSysUserRoleInput on the update-one builder.
func (u *SysUserRoleUpdateOne) SetInput(i UpdateSysUserRoleInput) *SysUserRoleUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateXxxDemoInput represents a mutation input for creating xxxdemos.
type CreateXxxDemoInput struct {
	IsDel     *bool
	Memo      *string
	Sort      *int32
	CreatedAt *time.Time
	UpdatedAt *time.Time
	DeletedAt *time.Time
	IsActive  *bool
	Code      string
	Name      string
}

// Mutate applies the CreateXxxDemoInput on the XxxDemoCreate builder.
func (i *CreateXxxDemoInput) Mutate(m *XxxDemoCreate) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	m.SetCode(i.Code)
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateXxxDemoInput on the create builder.
func (c *XxxDemoCreate) SetInput(i CreateXxxDemoInput) *XxxDemoCreate {
	i.Mutate(c)
	return c
}

// UpdateXxxDemoInput represents a mutation input for updating xxxdemos.
type UpdateXxxDemoInput struct {
	IsDel          *bool
	Memo           *string
	ClearMemo      bool
	Sort           *int32
	UpdatedAt      *time.Time
	ClearUpdatedAt bool
	DeletedAt      *time.Time
	ClearDeletedAt bool
	IsActive       *bool
	Code           *string
	Name           *string
}

// Mutate applies the UpdateXxxDemoInput on the XxxDemoMutation.
func (i *UpdateXxxDemoInput) Mutate(m *XxxDemoMutation) {
	if v := i.IsDel; v != nil {
		m.SetIsDel(*v)
	}
	if i.ClearMemo {
		m.ClearMemo()
	}
	if v := i.Memo; v != nil {
		m.SetMemo(*v)
	}
	if v := i.Sort; v != nil {
		m.SetSort(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if v := i.IsActive; v != nil {
		m.SetIsActive(*v)
	}
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateXxxDemoInput on the update builder.
func (u *XxxDemoUpdate) SetInput(i UpdateXxxDemoInput) *XxxDemoUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateXxxDemoInput on the update-one builder.
func (u *XxxDemoUpdateOne) SetInput(i UpdateXxxDemoInput) *XxxDemoUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
