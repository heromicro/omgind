// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/xxxdemo"
)

// XxxDemo is the model entity for the XxxDemo schema.
type XxxDemo struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// IsDel holds the value of the "is_del" field.
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// Memo holds the value of the "memo" field.
	// 备注
	Memo string `json:"memo,omitempty"`
	// Sort holds the value of the "sort" field.
	// 排序, 在数据库里的排序
	Sort int32 `json:"sort,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间,由程序自动生成
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 更新时间,由程序自动生成
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	// 删除时间,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Code holds the value of the "code" field.
	// 编号
	Code string `json:"code,omitempty"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status int16 `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*XxxDemo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case xxxdemo.FieldIsDel:
			values[i] = new(sql.NullBool)
		case xxxdemo.FieldSort, xxxdemo.FieldStatus:
			values[i] = new(sql.NullInt64)
		case xxxdemo.FieldID, xxxdemo.FieldMemo, xxxdemo.FieldCode, xxxdemo.FieldName:
			values[i] = new(sql.NullString)
		case xxxdemo.FieldCreatedAt, xxxdemo.FieldUpdatedAt, xxxdemo.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type XxxDemo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the XxxDemo fields.
func (xd *XxxDemo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case xxxdemo.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				xd.ID = value.String
			}
		case xxxdemo.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				xd.IsDel = value.Bool
			}
		case xxxdemo.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				xd.Memo = value.String
			}
		case xxxdemo.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				xd.Sort = int32(value.Int64)
			}
		case xxxdemo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				xd.CreatedAt = value.Time
			}
		case xxxdemo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				xd.UpdatedAt = value.Time
			}
		case xxxdemo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				xd.DeletedAt = new(time.Time)
				*xd.DeletedAt = value.Time
			}
		case xxxdemo.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				xd.Code = value.String
			}
		case xxxdemo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				xd.Name = value.String
			}
		case xxxdemo.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				xd.Status = int16(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this XxxDemo.
// Note that you need to call XxxDemo.Unwrap() before calling this method if this XxxDemo
// was returned from a transaction, and the transaction was committed or rolled back.
func (xd *XxxDemo) Update() *XxxDemoUpdateOne {
	return (&XxxDemoClient{config: xd.config}).UpdateOne(xd)
}

// Unwrap unwraps the XxxDemo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (xd *XxxDemo) Unwrap() *XxxDemo {
	tx, ok := xd.config.driver.(*txDriver)
	if !ok {
		panic("ent: XxxDemo is not a transactional entity")
	}
	xd.config.driver = tx.drv
	return xd
}

// String implements the fmt.Stringer.
func (xd *XxxDemo) String() string {
	var builder strings.Builder
	builder.WriteString("XxxDemo(")
	builder.WriteString(fmt.Sprintf("id=%v", xd.ID))
	builder.WriteString(", is_del=")
	builder.WriteString(fmt.Sprintf("%v", xd.IsDel))
	builder.WriteString(", memo=")
	builder.WriteString(xd.Memo)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", xd.Sort))
	builder.WriteString(", created_at=")
	builder.WriteString(xd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(xd.UpdatedAt.Format(time.ANSIC))
	if v := xd.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", code=")
	builder.WriteString(xd.Code)
	builder.WriteString(", name=")
	builder.WriteString(xd.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", xd.Status))
	builder.WriteByte(')')
	return builder.String()
}

// XxxDemos is a parsable slice of XxxDemo.
type XxxDemos []*XxxDemo

func (xd XxxDemos) config(cfg config) {
	for _i := range xd {
		xd[_i].config = cfg
	}
}
