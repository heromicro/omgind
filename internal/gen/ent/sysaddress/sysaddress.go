// Code generated by ent, DO NOT EDIT.

package sysaddress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the sysaddress type in the database.
	Label = "sys_address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "crtd_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "uptd_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "dltd_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldCounty holds the string denoting the county field in the database.
	FieldCounty = "county"
	// FieldCountryID holds the string denoting the country_id field in the database.
	FieldCountryID = "country_id"
	// FieldProvinceID holds the string denoting the province_id field in the database.
	FieldProvinceID = "province_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldCountyID holds the string denoting the county_id field in the database.
	FieldCountyID = "county_id"
	// FieldZipCode holds the string denoting the zip_code field in the database.
	FieldZipCode = "zip_code"
	// FieldDaddr holds the string denoting the daddr field in the database.
	FieldDaddr = "daddr"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldAreaCode holds the string denoting the area_code field in the database.
	FieldAreaCode = "area_code"
	// FieldMobile holds the string denoting the mobile field in the database.
	FieldMobile = "mobile"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// EdgeOrgan holds the string denoting the organ edge name in mutations.
	EdgeOrgan = "organ"
	// EdgeStaffResi holds the string denoting the staff_resi edge name in mutations.
	EdgeStaffResi = "staff_resi"
	// EdgeStaffIden holds the string denoting the staff_iden edge name in mutations.
	EdgeStaffIden = "staff_iden"
	// Table holds the table name of the sysaddress in the database.
	Table = "sys_addresses"
	// OrganTable is the table that holds the organ relation/edge.
	OrganTable = "org_organs"
	// OrganInverseTable is the table name for the OrgOrgan entity.
	// It exists in this package in order to avoid circular dependency with the "orgorgan" package.
	OrganInverseTable = "org_organs"
	// OrganColumn is the table column denoting the organ relation/edge.
	OrganColumn = "haddr_id"
	// StaffResiTable is the table that holds the staff_resi relation/edge.
	StaffResiTable = "org_staffs"
	// StaffResiInverseTable is the table name for the OrgStaff entity.
	// It exists in this package in order to avoid circular dependency with the "orgstaff" package.
	StaffResiInverseTable = "org_staffs"
	// StaffResiColumn is the table column denoting the staff_resi relation/edge.
	StaffResiColumn = "rsaddr_id"
	// StaffIdenTable is the table that holds the staff_iden relation/edge.
	StaffIdenTable = "org_staffs"
	// StaffIdenInverseTable is the table name for the OrgStaff entity.
	// It exists in this package in order to avoid circular dependency with the "orgstaff" package.
	StaffIdenInverseTable = "org_staffs"
	// StaffIdenColumn is the table column denoting the staff_iden relation/edge.
	StaffIdenColumn = "idaddr_id"
)

// Columns holds all SQL columns for sysaddress fields.
var Columns = []string{
	FieldID,
	FieldIsDel,
	FieldUserID,
	FieldOrgID,
	FieldSort,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldIsActive,
	FieldMemo,
	FieldCountry,
	FieldProvince,
	FieldCity,
	FieldCounty,
	FieldCountryID,
	FieldProvinceID,
	FieldCityID,
	FieldCountyID,
	FieldZipCode,
	FieldDaddr,
	FieldFirstName,
	FieldLastName,
	FieldAreaCode,
	FieldMobile,
	FieldCreator,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDel holds the default value on creation for the "is_del" field.
	DefaultIsDel bool
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// OrgIDValidator is a validator for the "org_id" field. It is called by the builders before save.
	OrgIDValidator func(string) error
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort int32
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// DefaultMemo holds the default value on creation for the "memo" field.
	DefaultMemo string
	// MemoValidator is a validator for the "memo" field. It is called by the builders before save.
	MemoValidator func(string) error
	// CountryIDValidator is a validator for the "country_id" field. It is called by the builders before save.
	CountryIDValidator func(string) error
	// ProvinceIDValidator is a validator for the "province_id" field. It is called by the builders before save.
	ProvinceIDValidator func(string) error
	// CityIDValidator is a validator for the "city_id" field. It is called by the builders before save.
	CityIDValidator func(string) error
	// CountyIDValidator is a validator for the "county_id" field. It is called by the builders before save.
	CountyIDValidator func(string) error
	// ZipCodeValidator is a validator for the "zip_code" field. It is called by the builders before save.
	ZipCodeValidator func(string) error
	// DaddrValidator is a validator for the "daddr" field. It is called by the builders before save.
	DaddrValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// AreaCodeValidator is a validator for the "area_code" field. It is called by the builders before save.
	AreaCodeValidator func(string) error
	// MobileValidator is a validator for the "mobile" field. It is called by the builders before save.
	MobileValidator func(string) error
	// CreatorValidator is a validator for the "creator" field. It is called by the builders before save.
	CreatorValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Order defines the ordering method for the SysAddress queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsDel orders the results by the is_del field.
func ByIsDel(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsDel, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByProvince orders the results by the province field.
func ByProvince(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByCounty orders the results by the county field.
func ByCounty(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCounty, opts...).ToFunc()
}

// ByCountryID orders the results by the country_id field.
func ByCountryID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCountryID, opts...).ToFunc()
}

// ByProvinceID orders the results by the province_id field.
func ByProvinceID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldProvinceID, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByCountyID orders the results by the county_id field.
func ByCountyID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCountyID, opts...).ToFunc()
}

// ByZipCode orders the results by the zip_code field.
func ByZipCode(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldZipCode, opts...).ToFunc()
}

// ByDaddr orders the results by the daddr field.
func ByDaddr(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDaddr, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByAreaCode orders the results by the area_code field.
func ByAreaCode(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldAreaCode, opts...).ToFunc()
}

// ByMobile orders the results by the mobile field.
func ByMobile(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMobile, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByOrganField orders the results by organ field.
func ByOrganField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganStep(), sql.OrderByField(field, opts...))
	}
}

// ByStaffResiField orders the results by staff_resi field.
func ByStaffResiField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaffResiStep(), sql.OrderByField(field, opts...))
	}
}

// ByStaffIdenField orders the results by staff_iden field.
func ByStaffIdenField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStaffIdenStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, OrganTable, OrganColumn),
	)
}
func newStaffResiStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaffResiInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, StaffResiTable, StaffResiColumn),
	)
}
func newStaffIdenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StaffIdenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, StaffIdenTable, StaffIdenColumn),
	)
}
