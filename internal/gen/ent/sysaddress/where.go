// Code generated by ent, DO NOT EDIT.

package sysaddress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldID, id))
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v bool) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldIsDel, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldOwnerID, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldSort, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldDeletedAt, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldIsActive, v))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldMemo, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCountry, v))
}

// Province applies equality check predicate on the "province" field. It's identical to ProvinceEQ.
func Province(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldProvince, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCity, v))
}

// County applies equality check predicate on the "county" field. It's identical to CountyEQ.
func County(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCounty, v))
}

// CountryID applies equality check predicate on the "country_id" field. It's identical to CountryIDEQ.
func CountryID(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCountryID, v))
}

// ProvinceID applies equality check predicate on the "province_id" field. It's identical to ProvinceIDEQ.
func ProvinceID(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldProvinceID, v))
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCityID, v))
}

// CountyID applies equality check predicate on the "county_id" field. It's identical to CountyIDEQ.
func CountyID(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCountyID, v))
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldZipCode, v))
}

// Daddr applies equality check predicate on the "daddr" field. It's identical to DaddrEQ.
func Daddr(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldDaddr, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldLastName, v))
}

// AreaCode applies equality check predicate on the "area_code" field. It's identical to AreaCodeEQ.
func AreaCode(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldAreaCode, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldMobile, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCreator, v))
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v bool) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldIsDel, v))
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v bool) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldIsDel, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldOwnerID, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v int32) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldSort, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldDeletedAt))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldIsActive, v))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoIsNil applies the IsNil predicate on the "memo" field.
func MemoIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldMemo))
}

// MemoNotNil applies the NotNil predicate on the "memo" field.
func MemoNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldMemo))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldMemo, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryIsNil applies the IsNil predicate on the "country" field.
func CountryIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCountry))
}

// CountryNotNil applies the NotNil predicate on the "country" field.
func CountryNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCountry))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldCountry, v))
}

// ProvinceEQ applies the EQ predicate on the "province" field.
func ProvinceEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldProvince, v))
}

// ProvinceNEQ applies the NEQ predicate on the "province" field.
func ProvinceNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldProvince, v))
}

// ProvinceIn applies the In predicate on the "province" field.
func ProvinceIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldProvince, vs...))
}

// ProvinceNotIn applies the NotIn predicate on the "province" field.
func ProvinceNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldProvince, vs...))
}

// ProvinceGT applies the GT predicate on the "province" field.
func ProvinceGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldProvince, v))
}

// ProvinceGTE applies the GTE predicate on the "province" field.
func ProvinceGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldProvince, v))
}

// ProvinceLT applies the LT predicate on the "province" field.
func ProvinceLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldProvince, v))
}

// ProvinceLTE applies the LTE predicate on the "province" field.
func ProvinceLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldProvince, v))
}

// ProvinceContains applies the Contains predicate on the "province" field.
func ProvinceContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldProvince, v))
}

// ProvinceHasPrefix applies the HasPrefix predicate on the "province" field.
func ProvinceHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldProvince, v))
}

// ProvinceHasSuffix applies the HasSuffix predicate on the "province" field.
func ProvinceHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldProvince, v))
}

// ProvinceIsNil applies the IsNil predicate on the "province" field.
func ProvinceIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldProvince))
}

// ProvinceNotNil applies the NotNil predicate on the "province" field.
func ProvinceNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldProvince))
}

// ProvinceEqualFold applies the EqualFold predicate on the "province" field.
func ProvinceEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldProvince, v))
}

// ProvinceContainsFold applies the ContainsFold predicate on the "province" field.
func ProvinceContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldProvince, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldCity, v))
}

// CountyEQ applies the EQ predicate on the "county" field.
func CountyEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCounty, v))
}

// CountyNEQ applies the NEQ predicate on the "county" field.
func CountyNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCounty, v))
}

// CountyIn applies the In predicate on the "county" field.
func CountyIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCounty, vs...))
}

// CountyNotIn applies the NotIn predicate on the "county" field.
func CountyNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCounty, vs...))
}

// CountyGT applies the GT predicate on the "county" field.
func CountyGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCounty, v))
}

// CountyGTE applies the GTE predicate on the "county" field.
func CountyGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCounty, v))
}

// CountyLT applies the LT predicate on the "county" field.
func CountyLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCounty, v))
}

// CountyLTE applies the LTE predicate on the "county" field.
func CountyLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCounty, v))
}

// CountyContains applies the Contains predicate on the "county" field.
func CountyContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldCounty, v))
}

// CountyHasPrefix applies the HasPrefix predicate on the "county" field.
func CountyHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldCounty, v))
}

// CountyHasSuffix applies the HasSuffix predicate on the "county" field.
func CountyHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldCounty, v))
}

// CountyIsNil applies the IsNil predicate on the "county" field.
func CountyIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCounty))
}

// CountyNotNil applies the NotNil predicate on the "county" field.
func CountyNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCounty))
}

// CountyEqualFold applies the EqualFold predicate on the "county" field.
func CountyEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldCounty, v))
}

// CountyContainsFold applies the ContainsFold predicate on the "county" field.
func CountyContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldCounty, v))
}

// CountryIDEQ applies the EQ predicate on the "country_id" field.
func CountryIDEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCountryID, v))
}

// CountryIDNEQ applies the NEQ predicate on the "country_id" field.
func CountryIDNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCountryID, v))
}

// CountryIDIn applies the In predicate on the "country_id" field.
func CountryIDIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCountryID, vs...))
}

// CountryIDNotIn applies the NotIn predicate on the "country_id" field.
func CountryIDNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCountryID, vs...))
}

// CountryIDGT applies the GT predicate on the "country_id" field.
func CountryIDGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCountryID, v))
}

// CountryIDGTE applies the GTE predicate on the "country_id" field.
func CountryIDGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCountryID, v))
}

// CountryIDLT applies the LT predicate on the "country_id" field.
func CountryIDLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCountryID, v))
}

// CountryIDLTE applies the LTE predicate on the "country_id" field.
func CountryIDLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCountryID, v))
}

// CountryIDContains applies the Contains predicate on the "country_id" field.
func CountryIDContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldCountryID, v))
}

// CountryIDHasPrefix applies the HasPrefix predicate on the "country_id" field.
func CountryIDHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldCountryID, v))
}

// CountryIDHasSuffix applies the HasSuffix predicate on the "country_id" field.
func CountryIDHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldCountryID, v))
}

// CountryIDIsNil applies the IsNil predicate on the "country_id" field.
func CountryIDIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCountryID))
}

// CountryIDNotNil applies the NotNil predicate on the "country_id" field.
func CountryIDNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCountryID))
}

// CountryIDEqualFold applies the EqualFold predicate on the "country_id" field.
func CountryIDEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldCountryID, v))
}

// CountryIDContainsFold applies the ContainsFold predicate on the "country_id" field.
func CountryIDContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldCountryID, v))
}

// ProvinceIDEQ applies the EQ predicate on the "province_id" field.
func ProvinceIDEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldProvinceID, v))
}

// ProvinceIDNEQ applies the NEQ predicate on the "province_id" field.
func ProvinceIDNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldProvinceID, v))
}

// ProvinceIDIn applies the In predicate on the "province_id" field.
func ProvinceIDIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldProvinceID, vs...))
}

// ProvinceIDNotIn applies the NotIn predicate on the "province_id" field.
func ProvinceIDNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldProvinceID, vs...))
}

// ProvinceIDGT applies the GT predicate on the "province_id" field.
func ProvinceIDGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldProvinceID, v))
}

// ProvinceIDGTE applies the GTE predicate on the "province_id" field.
func ProvinceIDGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldProvinceID, v))
}

// ProvinceIDLT applies the LT predicate on the "province_id" field.
func ProvinceIDLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldProvinceID, v))
}

// ProvinceIDLTE applies the LTE predicate on the "province_id" field.
func ProvinceIDLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldProvinceID, v))
}

// ProvinceIDContains applies the Contains predicate on the "province_id" field.
func ProvinceIDContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldProvinceID, v))
}

// ProvinceIDHasPrefix applies the HasPrefix predicate on the "province_id" field.
func ProvinceIDHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldProvinceID, v))
}

// ProvinceIDHasSuffix applies the HasSuffix predicate on the "province_id" field.
func ProvinceIDHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldProvinceID, v))
}

// ProvinceIDIsNil applies the IsNil predicate on the "province_id" field.
func ProvinceIDIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldProvinceID))
}

// ProvinceIDNotNil applies the NotNil predicate on the "province_id" field.
func ProvinceIDNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldProvinceID))
}

// ProvinceIDEqualFold applies the EqualFold predicate on the "province_id" field.
func ProvinceIDEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldProvinceID, v))
}

// ProvinceIDContainsFold applies the ContainsFold predicate on the "province_id" field.
func ProvinceIDContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldProvinceID, v))
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCityID, v))
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCityID, v))
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCityID, vs...))
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCityID, vs...))
}

// CityIDGT applies the GT predicate on the "city_id" field.
func CityIDGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCityID, v))
}

// CityIDGTE applies the GTE predicate on the "city_id" field.
func CityIDGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCityID, v))
}

// CityIDLT applies the LT predicate on the "city_id" field.
func CityIDLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCityID, v))
}

// CityIDLTE applies the LTE predicate on the "city_id" field.
func CityIDLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCityID, v))
}

// CityIDContains applies the Contains predicate on the "city_id" field.
func CityIDContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldCityID, v))
}

// CityIDHasPrefix applies the HasPrefix predicate on the "city_id" field.
func CityIDHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldCityID, v))
}

// CityIDHasSuffix applies the HasSuffix predicate on the "city_id" field.
func CityIDHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldCityID, v))
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCityID))
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCityID))
}

// CityIDEqualFold applies the EqualFold predicate on the "city_id" field.
func CityIDEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldCityID, v))
}

// CityIDContainsFold applies the ContainsFold predicate on the "city_id" field.
func CityIDContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldCityID, v))
}

// CountyIDEQ applies the EQ predicate on the "county_id" field.
func CountyIDEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCountyID, v))
}

// CountyIDNEQ applies the NEQ predicate on the "county_id" field.
func CountyIDNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCountyID, v))
}

// CountyIDIn applies the In predicate on the "county_id" field.
func CountyIDIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCountyID, vs...))
}

// CountyIDNotIn applies the NotIn predicate on the "county_id" field.
func CountyIDNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCountyID, vs...))
}

// CountyIDGT applies the GT predicate on the "county_id" field.
func CountyIDGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCountyID, v))
}

// CountyIDGTE applies the GTE predicate on the "county_id" field.
func CountyIDGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCountyID, v))
}

// CountyIDLT applies the LT predicate on the "county_id" field.
func CountyIDLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCountyID, v))
}

// CountyIDLTE applies the LTE predicate on the "county_id" field.
func CountyIDLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCountyID, v))
}

// CountyIDContains applies the Contains predicate on the "county_id" field.
func CountyIDContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldCountyID, v))
}

// CountyIDHasPrefix applies the HasPrefix predicate on the "county_id" field.
func CountyIDHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldCountyID, v))
}

// CountyIDHasSuffix applies the HasSuffix predicate on the "county_id" field.
func CountyIDHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldCountyID, v))
}

// CountyIDIsNil applies the IsNil predicate on the "county_id" field.
func CountyIDIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCountyID))
}

// CountyIDNotNil applies the NotNil predicate on the "county_id" field.
func CountyIDNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCountyID))
}

// CountyIDEqualFold applies the EqualFold predicate on the "county_id" field.
func CountyIDEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldCountyID, v))
}

// CountyIDContainsFold applies the ContainsFold predicate on the "county_id" field.
func CountyIDContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldCountyID, v))
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldZipCode, v))
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldZipCode, v))
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldZipCode, vs...))
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldZipCode, vs...))
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldZipCode, v))
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldZipCode, v))
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldZipCode, v))
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldZipCode, v))
}

// ZipCodeContains applies the Contains predicate on the "zip_code" field.
func ZipCodeContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldZipCode, v))
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zip_code" field.
func ZipCodeHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldZipCode, v))
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zip_code" field.
func ZipCodeHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldZipCode, v))
}

// ZipCodeIsNil applies the IsNil predicate on the "zip_code" field.
func ZipCodeIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldZipCode))
}

// ZipCodeNotNil applies the NotNil predicate on the "zip_code" field.
func ZipCodeNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldZipCode))
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zip_code" field.
func ZipCodeEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldZipCode, v))
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zip_code" field.
func ZipCodeContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldZipCode, v))
}

// DaddrEQ applies the EQ predicate on the "daddr" field.
func DaddrEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldDaddr, v))
}

// DaddrNEQ applies the NEQ predicate on the "daddr" field.
func DaddrNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldDaddr, v))
}

// DaddrIn applies the In predicate on the "daddr" field.
func DaddrIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldDaddr, vs...))
}

// DaddrNotIn applies the NotIn predicate on the "daddr" field.
func DaddrNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldDaddr, vs...))
}

// DaddrGT applies the GT predicate on the "daddr" field.
func DaddrGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldDaddr, v))
}

// DaddrGTE applies the GTE predicate on the "daddr" field.
func DaddrGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldDaddr, v))
}

// DaddrLT applies the LT predicate on the "daddr" field.
func DaddrLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldDaddr, v))
}

// DaddrLTE applies the LTE predicate on the "daddr" field.
func DaddrLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldDaddr, v))
}

// DaddrContains applies the Contains predicate on the "daddr" field.
func DaddrContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldDaddr, v))
}

// DaddrHasPrefix applies the HasPrefix predicate on the "daddr" field.
func DaddrHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldDaddr, v))
}

// DaddrHasSuffix applies the HasSuffix predicate on the "daddr" field.
func DaddrHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldDaddr, v))
}

// DaddrIsNil applies the IsNil predicate on the "daddr" field.
func DaddrIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldDaddr))
}

// DaddrNotNil applies the NotNil predicate on the "daddr" field.
func DaddrNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldDaddr))
}

// DaddrEqualFold applies the EqualFold predicate on the "daddr" field.
func DaddrEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldDaddr, v))
}

// DaddrContainsFold applies the ContainsFold predicate on the "daddr" field.
func DaddrContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldDaddr, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameIsNil applies the IsNil predicate on the "first_name" field.
func FirstNameIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldFirstName))
}

// FirstNameNotNil applies the NotNil predicate on the "first_name" field.
func FirstNameNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldFirstName))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameIsNil applies the IsNil predicate on the "last_name" field.
func LastNameIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldLastName))
}

// LastNameNotNil applies the NotNil predicate on the "last_name" field.
func LastNameNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldLastName))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldLastName, v))
}

// AreaCodeEQ applies the EQ predicate on the "area_code" field.
func AreaCodeEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldAreaCode, v))
}

// AreaCodeNEQ applies the NEQ predicate on the "area_code" field.
func AreaCodeNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldAreaCode, v))
}

// AreaCodeIn applies the In predicate on the "area_code" field.
func AreaCodeIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldAreaCode, vs...))
}

// AreaCodeNotIn applies the NotIn predicate on the "area_code" field.
func AreaCodeNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldAreaCode, vs...))
}

// AreaCodeGT applies the GT predicate on the "area_code" field.
func AreaCodeGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldAreaCode, v))
}

// AreaCodeGTE applies the GTE predicate on the "area_code" field.
func AreaCodeGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldAreaCode, v))
}

// AreaCodeLT applies the LT predicate on the "area_code" field.
func AreaCodeLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldAreaCode, v))
}

// AreaCodeLTE applies the LTE predicate on the "area_code" field.
func AreaCodeLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldAreaCode, v))
}

// AreaCodeContains applies the Contains predicate on the "area_code" field.
func AreaCodeContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldAreaCode, v))
}

// AreaCodeHasPrefix applies the HasPrefix predicate on the "area_code" field.
func AreaCodeHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldAreaCode, v))
}

// AreaCodeHasSuffix applies the HasSuffix predicate on the "area_code" field.
func AreaCodeHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldAreaCode, v))
}

// AreaCodeIsNil applies the IsNil predicate on the "area_code" field.
func AreaCodeIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldAreaCode))
}

// AreaCodeNotNil applies the NotNil predicate on the "area_code" field.
func AreaCodeNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldAreaCode))
}

// AreaCodeEqualFold applies the EqualFold predicate on the "area_code" field.
func AreaCodeEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldAreaCode, v))
}

// AreaCodeContainsFold applies the ContainsFold predicate on the "area_code" field.
func AreaCodeContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldAreaCode, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileIsNil applies the IsNil predicate on the "mobile" field.
func MobileIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldMobile))
}

// MobileNotNil applies the NotNil predicate on the "mobile" field.
func MobileNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldMobile))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldMobile, v))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.SysAddress {
	return predicate.SysAddress(sql.FieldNotNull(FieldCreator))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.SysAddress {
	return predicate.SysAddress(sql.FieldContainsFold(FieldCreator, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SysAddress) predicate.SysAddress {
	return predicate.SysAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SysAddress) predicate.SysAddress {
	return predicate.SysAddress(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SysAddress) predicate.SysAddress {
	return predicate.SysAddress(func(s *sql.Selector) {
		p(s.Not())
	})
}
