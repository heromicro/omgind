// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/internal"
	"github.com/heromicro/omgind/internal/gen/ent/orgorgan"
	"github.com/heromicro/omgind/internal/gen/ent/orgstaff"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysaddress"
)

// OrgStaffUpdate is the builder for updating OrgStaff entities.
type OrgStaffUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgStaffMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgStaffUpdate builder.
func (osu *OrgStaffUpdate) Where(ps ...predicate.OrgStaff) *OrgStaffUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetIsDel sets the "is_del" field.
func (osu *OrgStaffUpdate) SetIsDel(b bool) *OrgStaffUpdate {
	osu.mutation.SetIsDel(b)
	return osu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableIsDel(b *bool) *OrgStaffUpdate {
	if b != nil {
		osu.SetIsDel(*b)
	}
	return osu
}

// SetSort sets the "sort" field.
func (osu *OrgStaffUpdate) SetSort(i int32) *OrgStaffUpdate {
	osu.mutation.ResetSort()
	osu.mutation.SetSort(i)
	return osu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableSort(i *int32) *OrgStaffUpdate {
	if i != nil {
		osu.SetSort(*i)
	}
	return osu
}

// AddSort adds i to the "sort" field.
func (osu *OrgStaffUpdate) AddSort(i int32) *OrgStaffUpdate {
	osu.mutation.AddSort(i)
	return osu
}

// SetUpdatedAt sets the "updated_at" field.
func (osu *OrgStaffUpdate) SetUpdatedAt(t time.Time) *OrgStaffUpdate {
	osu.mutation.SetUpdatedAt(t)
	return osu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osu *OrgStaffUpdate) ClearUpdatedAt() *OrgStaffUpdate {
	osu.mutation.ClearUpdatedAt()
	return osu
}

// SetDeletedAt sets the "deleted_at" field.
func (osu *OrgStaffUpdate) SetDeletedAt(t time.Time) *OrgStaffUpdate {
	osu.mutation.SetDeletedAt(t)
	return osu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableDeletedAt(t *time.Time) *OrgStaffUpdate {
	if t != nil {
		osu.SetDeletedAt(*t)
	}
	return osu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (osu *OrgStaffUpdate) ClearDeletedAt() *OrgStaffUpdate {
	osu.mutation.ClearDeletedAt()
	return osu
}

// SetIsActive sets the "is_active" field.
func (osu *OrgStaffUpdate) SetIsActive(b bool) *OrgStaffUpdate {
	osu.mutation.SetIsActive(b)
	return osu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableIsActive(b *bool) *OrgStaffUpdate {
	if b != nil {
		osu.SetIsActive(*b)
	}
	return osu
}

// SetMemo sets the "memo" field.
func (osu *OrgStaffUpdate) SetMemo(s string) *OrgStaffUpdate {
	osu.mutation.SetMemo(s)
	return osu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableMemo(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetMemo(*s)
	}
	return osu
}

// ClearMemo clears the value of the "memo" field.
func (osu *OrgStaffUpdate) ClearMemo() *OrgStaffUpdate {
	osu.mutation.ClearMemo()
	return osu
}

// SetFirstName sets the "first_name" field.
func (osu *OrgStaffUpdate) SetFirstName(s string) *OrgStaffUpdate {
	osu.mutation.SetFirstName(s)
	return osu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableFirstName(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetFirstName(*s)
	}
	return osu
}

// ClearFirstName clears the value of the "first_name" field.
func (osu *OrgStaffUpdate) ClearFirstName() *OrgStaffUpdate {
	osu.mutation.ClearFirstName()
	return osu
}

// SetLastName sets the "last_name" field.
func (osu *OrgStaffUpdate) SetLastName(s string) *OrgStaffUpdate {
	osu.mutation.SetLastName(s)
	return osu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableLastName(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetLastName(*s)
	}
	return osu
}

// ClearLastName clears the value of the "last_name" field.
func (osu *OrgStaffUpdate) ClearLastName() *OrgStaffUpdate {
	osu.mutation.ClearLastName()
	return osu
}

// SetMobile sets the "mobile" field.
func (osu *OrgStaffUpdate) SetMobile(s string) *OrgStaffUpdate {
	osu.mutation.SetMobile(s)
	return osu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableMobile(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetMobile(*s)
	}
	return osu
}

// ClearMobile clears the value of the "mobile" field.
func (osu *OrgStaffUpdate) ClearMobile() *OrgStaffUpdate {
	osu.mutation.ClearMobile()
	return osu
}

// SetGender sets the "gender" field.
func (osu *OrgStaffUpdate) SetGender(o orgstaff.Gender) *OrgStaffUpdate {
	osu.mutation.SetGender(o)
	return osu
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableGender(o *orgstaff.Gender) *OrgStaffUpdate {
	if o != nil {
		osu.SetGender(*o)
	}
	return osu
}

// ClearGender clears the value of the "gender" field.
func (osu *OrgStaffUpdate) ClearGender() *OrgStaffUpdate {
	osu.mutation.ClearGender()
	return osu
}

// SetBirthDate sets the "birth_date" field.
func (osu *OrgStaffUpdate) SetBirthDate(t time.Time) *OrgStaffUpdate {
	osu.mutation.SetBirthDate(t)
	return osu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableBirthDate(t *time.Time) *OrgStaffUpdate {
	if t != nil {
		osu.SetBirthDate(*t)
	}
	return osu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (osu *OrgStaffUpdate) ClearBirthDate() *OrgStaffUpdate {
	osu.mutation.ClearBirthDate()
	return osu
}

// SetIdenNo sets the "iden_no" field.
func (osu *OrgStaffUpdate) SetIdenNo(s string) *OrgStaffUpdate {
	osu.mutation.SetIdenNo(s)
	return osu
}

// SetNillableIdenNo sets the "iden_no" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableIdenNo(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetIdenNo(*s)
	}
	return osu
}

// ClearIdenNo clears the value of the "iden_no" field.
func (osu *OrgStaffUpdate) ClearIdenNo() *OrgStaffUpdate {
	osu.mutation.ClearIdenNo()
	return osu
}

// SetIdenAddrID sets the "iden_addr_id" field.
func (osu *OrgStaffUpdate) SetIdenAddrID(s string) *OrgStaffUpdate {
	osu.mutation.SetIdenAddrID(s)
	return osu
}

// SetNillableIdenAddrID sets the "iden_addr_id" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableIdenAddrID(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetIdenAddrID(*s)
	}
	return osu
}

// ClearIdenAddrID clears the value of the "iden_addr_id" field.
func (osu *OrgStaffUpdate) ClearIdenAddrID() *OrgStaffUpdate {
	osu.mutation.ClearIdenAddrID()
	return osu
}

// SetResiAddrID sets the "resi_addr_id" field.
func (osu *OrgStaffUpdate) SetResiAddrID(s string) *OrgStaffUpdate {
	osu.mutation.SetResiAddrID(s)
	return osu
}

// SetNillableResiAddrID sets the "resi_addr_id" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableResiAddrID(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetResiAddrID(*s)
	}
	return osu
}

// ClearResiAddrID clears the value of the "resi_addr_id" field.
func (osu *OrgStaffUpdate) ClearResiAddrID() *OrgStaffUpdate {
	osu.mutation.ClearResiAddrID()
	return osu
}

// SetWorkerNo sets the "worker_no" field.
func (osu *OrgStaffUpdate) SetWorkerNo(s string) *OrgStaffUpdate {
	osu.mutation.SetWorkerNo(s)
	return osu
}

// SetNillableWorkerNo sets the "worker_no" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableWorkerNo(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetWorkerNo(*s)
	}
	return osu
}

// ClearWorkerNo clears the value of the "worker_no" field.
func (osu *OrgStaffUpdate) ClearWorkerNo() *OrgStaffUpdate {
	osu.mutation.ClearWorkerNo()
	return osu
}

// SetCubicle sets the "cubicle" field.
func (osu *OrgStaffUpdate) SetCubicle(s string) *OrgStaffUpdate {
	osu.mutation.SetCubicle(s)
	return osu
}

// SetNillableCubicle sets the "cubicle" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableCubicle(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetCubicle(*s)
	}
	return osu
}

// ClearCubicle clears the value of the "cubicle" field.
func (osu *OrgStaffUpdate) ClearCubicle() *OrgStaffUpdate {
	osu.mutation.ClearCubicle()
	return osu
}

// SetEntryDate sets the "entry_date" field.
func (osu *OrgStaffUpdate) SetEntryDate(t time.Time) *OrgStaffUpdate {
	osu.mutation.SetEntryDate(t)
	return osu
}

// SetNillableEntryDate sets the "entry_date" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableEntryDate(t *time.Time) *OrgStaffUpdate {
	if t != nil {
		osu.SetEntryDate(*t)
	}
	return osu
}

// ClearEntryDate clears the value of the "entry_date" field.
func (osu *OrgStaffUpdate) ClearEntryDate() *OrgStaffUpdate {
	osu.mutation.ClearEntryDate()
	return osu
}

// SetRegularDate sets the "regular_date" field.
func (osu *OrgStaffUpdate) SetRegularDate(t time.Time) *OrgStaffUpdate {
	osu.mutation.SetRegularDate(t)
	return osu
}

// SetNillableRegularDate sets the "regular_date" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableRegularDate(t *time.Time) *OrgStaffUpdate {
	if t != nil {
		osu.SetRegularDate(*t)
	}
	return osu
}

// ClearRegularDate clears the value of the "regular_date" field.
func (osu *OrgStaffUpdate) ClearRegularDate() *OrgStaffUpdate {
	osu.mutation.ClearRegularDate()
	return osu
}

// SetResignDate sets the "resign_date" field.
func (osu *OrgStaffUpdate) SetResignDate(t time.Time) *OrgStaffUpdate {
	osu.mutation.SetResignDate(t)
	return osu
}

// SetNillableResignDate sets the "resign_date" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableResignDate(t *time.Time) *OrgStaffUpdate {
	if t != nil {
		osu.SetResignDate(*t)
	}
	return osu
}

// ClearResignDate clears the value of the "resign_date" field.
func (osu *OrgStaffUpdate) ClearResignDate() *OrgStaffUpdate {
	osu.mutation.ClearResignDate()
	return osu
}

// SetOrgID sets the "org_id" field.
func (osu *OrgStaffUpdate) SetOrgID(s string) *OrgStaffUpdate {
	osu.mutation.SetOrgID(s)
	return osu
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableOrgID(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetOrgID(*s)
	}
	return osu
}

// ClearOrgID clears the value of the "org_id" field.
func (osu *OrgStaffUpdate) ClearOrgID() *OrgStaffUpdate {
	osu.mutation.ClearOrgID()
	return osu
}

// SetEmploymentStatus sets the "employment_status" field.
func (osu *OrgStaffUpdate) SetEmploymentStatus(i int) *OrgStaffUpdate {
	osu.mutation.ResetEmploymentStatus()
	osu.mutation.SetEmploymentStatus(i)
	return osu
}

// SetNillableEmploymentStatus sets the "employment_status" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableEmploymentStatus(i *int) *OrgStaffUpdate {
	if i != nil {
		osu.SetEmploymentStatus(*i)
	}
	return osu
}

// AddEmploymentStatus adds i to the "employment_status" field.
func (osu *OrgStaffUpdate) AddEmploymentStatus(i int) *OrgStaffUpdate {
	osu.mutation.AddEmploymentStatus(i)
	return osu
}

// SetEsDictID sets the "es_dict_id" field.
func (osu *OrgStaffUpdate) SetEsDictID(s string) *OrgStaffUpdate {
	osu.mutation.SetEsDictID(s)
	return osu
}

// SetNillableEsDictID sets the "es_dict_id" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableEsDictID(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetEsDictID(*s)
	}
	return osu
}

// ClearEsDictID clears the value of the "es_dict_id" field.
func (osu *OrgStaffUpdate) ClearEsDictID() *OrgStaffUpdate {
	osu.mutation.ClearEsDictID()
	return osu
}

// SetCreator sets the "creator" field.
func (osu *OrgStaffUpdate) SetCreator(s string) *OrgStaffUpdate {
	osu.mutation.SetCreator(s)
	return osu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableCreator(s *string) *OrgStaffUpdate {
	if s != nil {
		osu.SetCreator(*s)
	}
	return osu
}

// ClearCreator clears the value of the "creator" field.
func (osu *OrgStaffUpdate) ClearCreator() *OrgStaffUpdate {
	osu.mutation.ClearCreator()
	return osu
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by ID.
func (osu *OrgStaffUpdate) SetOrganID(id string) *OrgStaffUpdate {
	osu.mutation.SetOrganID(id)
	return osu
}

// SetNillableOrganID sets the "organ" edge to the OrgOrgan entity by ID if the given value is not nil.
func (osu *OrgStaffUpdate) SetNillableOrganID(id *string) *OrgStaffUpdate {
	if id != nil {
		osu = osu.SetOrganID(*id)
	}
	return osu
}

// SetOrgan sets the "organ" edge to the OrgOrgan entity.
func (osu *OrgStaffUpdate) SetOrgan(o *OrgOrgan) *OrgStaffUpdate {
	return osu.SetOrganID(o.ID)
}

// SetIdenAddr sets the "iden_addr" edge to the SysAddress entity.
func (osu *OrgStaffUpdate) SetIdenAddr(s *SysAddress) *OrgStaffUpdate {
	return osu.SetIdenAddrID(s.ID)
}

// SetResiAddr sets the "resi_addr" edge to the SysAddress entity.
func (osu *OrgStaffUpdate) SetResiAddr(s *SysAddress) *OrgStaffUpdate {
	return osu.SetResiAddrID(s.ID)
}

// Mutation returns the OrgStaffMutation object of the builder.
func (osu *OrgStaffUpdate) Mutation() *OrgStaffMutation {
	return osu.mutation
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (osu *OrgStaffUpdate) ClearOrgan() *OrgStaffUpdate {
	osu.mutation.ClearOrgan()
	return osu
}

// ClearIdenAddr clears the "iden_addr" edge to the SysAddress entity.
func (osu *OrgStaffUpdate) ClearIdenAddr() *OrgStaffUpdate {
	osu.mutation.ClearIdenAddr()
	return osu
}

// ClearResiAddr clears the "resi_addr" edge to the SysAddress entity.
func (osu *OrgStaffUpdate) ClearResiAddr() *OrgStaffUpdate {
	osu.mutation.ClearResiAddr()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrgStaffUpdate) Save(ctx context.Context) (int, error) {
	osu.defaults()
	return withHooks[int, OrgStaffMutation](ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrgStaffUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrgStaffUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrgStaffUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osu *OrgStaffUpdate) defaults() {
	if _, ok := osu.mutation.UpdatedAt(); !ok && !osu.mutation.UpdatedAtCleared() {
		v := orgstaff.UpdateDefaultUpdatedAt()
		osu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OrgStaffUpdate) check() error {
	if v, ok := osu.mutation.Memo(); ok {
		if err := orgstaff.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.memo": %w`, err)}
		}
	}
	if v, ok := osu.mutation.FirstName(); ok {
		if err := orgstaff.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.first_name": %w`, err)}
		}
	}
	if v, ok := osu.mutation.LastName(); ok {
		if err := orgstaff.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.last_name": %w`, err)}
		}
	}
	if v, ok := osu.mutation.Mobile(); ok {
		if err := orgstaff.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.mobile": %w`, err)}
		}
	}
	if v, ok := osu.mutation.Gender(); ok {
		if err := orgstaff.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.gender": %w`, err)}
		}
	}
	if v, ok := osu.mutation.IdenAddrID(); ok {
		if err := orgstaff.IdenAddrIDValidator(v); err != nil {
			return &ValidationError{Name: "iden_addr_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.iden_addr_id": %w`, err)}
		}
	}
	if v, ok := osu.mutation.ResiAddrID(); ok {
		if err := orgstaff.ResiAddrIDValidator(v); err != nil {
			return &ValidationError{Name: "resi_addr_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.resi_addr_id": %w`, err)}
		}
	}
	if v, ok := osu.mutation.WorkerNo(); ok {
		if err := orgstaff.WorkerNoValidator(v); err != nil {
			return &ValidationError{Name: "worker_no", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.worker_no": %w`, err)}
		}
	}
	if v, ok := osu.mutation.Cubicle(); ok {
		if err := orgstaff.CubicleValidator(v); err != nil {
			return &ValidationError{Name: "cubicle", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.cubicle": %w`, err)}
		}
	}
	if v, ok := osu.mutation.OrgID(); ok {
		if err := orgstaff.OrgIDValidator(v); err != nil {
			return &ValidationError{Name: "org_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.org_id": %w`, err)}
		}
	}
	if v, ok := osu.mutation.EsDictID(); ok {
		if err := orgstaff.EsDictIDValidator(v); err != nil {
			return &ValidationError{Name: "es_dict_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.es_dict_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osu *OrgStaffUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgStaffUpdate {
	osu.modifiers = append(osu.modifiers, modifiers...)
	return osu
}

func (osu *OrgStaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgstaff.Table, orgstaff.Columns, sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.IsDel(); ok {
		_spec.SetField(orgstaff.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := osu.mutation.Sort(); ok {
		_spec.SetField(orgstaff.FieldSort, field.TypeInt32, value)
	}
	if value, ok := osu.mutation.AddedSort(); ok {
		_spec.AddField(orgstaff.FieldSort, field.TypeInt32, value)
	}
	if osu.mutation.CreatedAtCleared() {
		_spec.ClearField(orgstaff.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := osu.mutation.UpdatedAt(); ok {
		_spec.SetField(orgstaff.FieldUpdatedAt, field.TypeTime, value)
	}
	if osu.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgstaff.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := osu.mutation.DeletedAt(); ok {
		_spec.SetField(orgstaff.FieldDeletedAt, field.TypeTime, value)
	}
	if osu.mutation.DeletedAtCleared() {
		_spec.ClearField(orgstaff.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := osu.mutation.IsActive(); ok {
		_spec.SetField(orgstaff.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := osu.mutation.Memo(); ok {
		_spec.SetField(orgstaff.FieldMemo, field.TypeString, value)
	}
	if osu.mutation.MemoCleared() {
		_spec.ClearField(orgstaff.FieldMemo, field.TypeString)
	}
	if value, ok := osu.mutation.FirstName(); ok {
		_spec.SetField(orgstaff.FieldFirstName, field.TypeString, value)
	}
	if osu.mutation.FirstNameCleared() {
		_spec.ClearField(orgstaff.FieldFirstName, field.TypeString)
	}
	if value, ok := osu.mutation.LastName(); ok {
		_spec.SetField(orgstaff.FieldLastName, field.TypeString, value)
	}
	if osu.mutation.LastNameCleared() {
		_spec.ClearField(orgstaff.FieldLastName, field.TypeString)
	}
	if value, ok := osu.mutation.Mobile(); ok {
		_spec.SetField(orgstaff.FieldMobile, field.TypeString, value)
	}
	if osu.mutation.MobileCleared() {
		_spec.ClearField(orgstaff.FieldMobile, field.TypeString)
	}
	if value, ok := osu.mutation.Gender(); ok {
		_spec.SetField(orgstaff.FieldGender, field.TypeEnum, value)
	}
	if osu.mutation.GenderCleared() {
		_spec.ClearField(orgstaff.FieldGender, field.TypeEnum)
	}
	if value, ok := osu.mutation.BirthDate(); ok {
		_spec.SetField(orgstaff.FieldBirthDate, field.TypeTime, value)
	}
	if osu.mutation.BirthDateCleared() {
		_spec.ClearField(orgstaff.FieldBirthDate, field.TypeTime)
	}
	if value, ok := osu.mutation.IdenNo(); ok {
		_spec.SetField(orgstaff.FieldIdenNo, field.TypeString, value)
	}
	if osu.mutation.IdenNoCleared() {
		_spec.ClearField(orgstaff.FieldIdenNo, field.TypeString)
	}
	if value, ok := osu.mutation.WorkerNo(); ok {
		_spec.SetField(orgstaff.FieldWorkerNo, field.TypeString, value)
	}
	if osu.mutation.WorkerNoCleared() {
		_spec.ClearField(orgstaff.FieldWorkerNo, field.TypeString)
	}
	if value, ok := osu.mutation.Cubicle(); ok {
		_spec.SetField(orgstaff.FieldCubicle, field.TypeString, value)
	}
	if osu.mutation.CubicleCleared() {
		_spec.ClearField(orgstaff.FieldCubicle, field.TypeString)
	}
	if value, ok := osu.mutation.EntryDate(); ok {
		_spec.SetField(orgstaff.FieldEntryDate, field.TypeTime, value)
	}
	if osu.mutation.EntryDateCleared() {
		_spec.ClearField(orgstaff.FieldEntryDate, field.TypeTime)
	}
	if value, ok := osu.mutation.RegularDate(); ok {
		_spec.SetField(orgstaff.FieldRegularDate, field.TypeTime, value)
	}
	if osu.mutation.RegularDateCleared() {
		_spec.ClearField(orgstaff.FieldRegularDate, field.TypeTime)
	}
	if value, ok := osu.mutation.ResignDate(); ok {
		_spec.SetField(orgstaff.FieldResignDate, field.TypeTime, value)
	}
	if osu.mutation.ResignDateCleared() {
		_spec.ClearField(orgstaff.FieldResignDate, field.TypeTime)
	}
	if value, ok := osu.mutation.EmploymentStatus(); ok {
		_spec.SetField(orgstaff.FieldEmploymentStatus, field.TypeInt, value)
	}
	if value, ok := osu.mutation.AddedEmploymentStatus(); ok {
		_spec.AddField(orgstaff.FieldEmploymentStatus, field.TypeInt, value)
	}
	if value, ok := osu.mutation.EsDictID(); ok {
		_spec.SetField(orgstaff.FieldEsDictID, field.TypeString, value)
	}
	if osu.mutation.EsDictIDCleared() {
		_spec.ClearField(orgstaff.FieldEsDictID, field.TypeString)
	}
	if value, ok := osu.mutation.Creator(); ok {
		_spec.SetField(orgstaff.FieldCreator, field.TypeString, value)
	}
	if osu.mutation.CreatorCleared() {
		_spec.ClearField(orgstaff.FieldCreator, field.TypeString)
	}
	if osu.mutation.OrganCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgstaff.OrganTable,
			Columns: []string{orgstaff.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgStaff
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.OrganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgstaff.OrganTable,
			Columns: []string{orgstaff.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.IdenAddrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.IdenAddrTable,
			Columns: []string{orgstaff.IdenAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgStaff
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.IdenAddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.IdenAddrTable,
			Columns: []string{orgstaff.IdenAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osu.mutation.ResiAddrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.ResiAddrTable,
			Columns: []string{orgstaff.ResiAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgStaff
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.ResiAddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.ResiAddrTable,
			Columns: []string{orgstaff.ResiAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = osu.schemaConfig.OrgStaff
	ctx = internal.NewSchemaConfigContext(ctx, osu.schemaConfig)
	_spec.AddModifiers(osu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgstaff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrgStaffUpdateOne is the builder for updating a single OrgStaff entity.
type OrgStaffUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgStaffMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsDel sets the "is_del" field.
func (osuo *OrgStaffUpdateOne) SetIsDel(b bool) *OrgStaffUpdateOne {
	osuo.mutation.SetIsDel(b)
	return osuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableIsDel(b *bool) *OrgStaffUpdateOne {
	if b != nil {
		osuo.SetIsDel(*b)
	}
	return osuo
}

// SetSort sets the "sort" field.
func (osuo *OrgStaffUpdateOne) SetSort(i int32) *OrgStaffUpdateOne {
	osuo.mutation.ResetSort()
	osuo.mutation.SetSort(i)
	return osuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableSort(i *int32) *OrgStaffUpdateOne {
	if i != nil {
		osuo.SetSort(*i)
	}
	return osuo
}

// AddSort adds i to the "sort" field.
func (osuo *OrgStaffUpdateOne) AddSort(i int32) *OrgStaffUpdateOne {
	osuo.mutation.AddSort(i)
	return osuo
}

// SetUpdatedAt sets the "updated_at" field.
func (osuo *OrgStaffUpdateOne) SetUpdatedAt(t time.Time) *OrgStaffUpdateOne {
	osuo.mutation.SetUpdatedAt(t)
	return osuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (osuo *OrgStaffUpdateOne) ClearUpdatedAt() *OrgStaffUpdateOne {
	osuo.mutation.ClearUpdatedAt()
	return osuo
}

// SetDeletedAt sets the "deleted_at" field.
func (osuo *OrgStaffUpdateOne) SetDeletedAt(t time.Time) *OrgStaffUpdateOne {
	osuo.mutation.SetDeletedAt(t)
	return osuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgStaffUpdateOne {
	if t != nil {
		osuo.SetDeletedAt(*t)
	}
	return osuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (osuo *OrgStaffUpdateOne) ClearDeletedAt() *OrgStaffUpdateOne {
	osuo.mutation.ClearDeletedAt()
	return osuo
}

// SetIsActive sets the "is_active" field.
func (osuo *OrgStaffUpdateOne) SetIsActive(b bool) *OrgStaffUpdateOne {
	osuo.mutation.SetIsActive(b)
	return osuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableIsActive(b *bool) *OrgStaffUpdateOne {
	if b != nil {
		osuo.SetIsActive(*b)
	}
	return osuo
}

// SetMemo sets the "memo" field.
func (osuo *OrgStaffUpdateOne) SetMemo(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetMemo(s)
	return osuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableMemo(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetMemo(*s)
	}
	return osuo
}

// ClearMemo clears the value of the "memo" field.
func (osuo *OrgStaffUpdateOne) ClearMemo() *OrgStaffUpdateOne {
	osuo.mutation.ClearMemo()
	return osuo
}

// SetFirstName sets the "first_name" field.
func (osuo *OrgStaffUpdateOne) SetFirstName(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetFirstName(s)
	return osuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableFirstName(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetFirstName(*s)
	}
	return osuo
}

// ClearFirstName clears the value of the "first_name" field.
func (osuo *OrgStaffUpdateOne) ClearFirstName() *OrgStaffUpdateOne {
	osuo.mutation.ClearFirstName()
	return osuo
}

// SetLastName sets the "last_name" field.
func (osuo *OrgStaffUpdateOne) SetLastName(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetLastName(s)
	return osuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableLastName(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetLastName(*s)
	}
	return osuo
}

// ClearLastName clears the value of the "last_name" field.
func (osuo *OrgStaffUpdateOne) ClearLastName() *OrgStaffUpdateOne {
	osuo.mutation.ClearLastName()
	return osuo
}

// SetMobile sets the "mobile" field.
func (osuo *OrgStaffUpdateOne) SetMobile(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetMobile(s)
	return osuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableMobile(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetMobile(*s)
	}
	return osuo
}

// ClearMobile clears the value of the "mobile" field.
func (osuo *OrgStaffUpdateOne) ClearMobile() *OrgStaffUpdateOne {
	osuo.mutation.ClearMobile()
	return osuo
}

// SetGender sets the "gender" field.
func (osuo *OrgStaffUpdateOne) SetGender(o orgstaff.Gender) *OrgStaffUpdateOne {
	osuo.mutation.SetGender(o)
	return osuo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableGender(o *orgstaff.Gender) *OrgStaffUpdateOne {
	if o != nil {
		osuo.SetGender(*o)
	}
	return osuo
}

// ClearGender clears the value of the "gender" field.
func (osuo *OrgStaffUpdateOne) ClearGender() *OrgStaffUpdateOne {
	osuo.mutation.ClearGender()
	return osuo
}

// SetBirthDate sets the "birth_date" field.
func (osuo *OrgStaffUpdateOne) SetBirthDate(t time.Time) *OrgStaffUpdateOne {
	osuo.mutation.SetBirthDate(t)
	return osuo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableBirthDate(t *time.Time) *OrgStaffUpdateOne {
	if t != nil {
		osuo.SetBirthDate(*t)
	}
	return osuo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (osuo *OrgStaffUpdateOne) ClearBirthDate() *OrgStaffUpdateOne {
	osuo.mutation.ClearBirthDate()
	return osuo
}

// SetIdenNo sets the "iden_no" field.
func (osuo *OrgStaffUpdateOne) SetIdenNo(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetIdenNo(s)
	return osuo
}

// SetNillableIdenNo sets the "iden_no" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableIdenNo(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetIdenNo(*s)
	}
	return osuo
}

// ClearIdenNo clears the value of the "iden_no" field.
func (osuo *OrgStaffUpdateOne) ClearIdenNo() *OrgStaffUpdateOne {
	osuo.mutation.ClearIdenNo()
	return osuo
}

// SetIdenAddrID sets the "iden_addr_id" field.
func (osuo *OrgStaffUpdateOne) SetIdenAddrID(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetIdenAddrID(s)
	return osuo
}

// SetNillableIdenAddrID sets the "iden_addr_id" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableIdenAddrID(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetIdenAddrID(*s)
	}
	return osuo
}

// ClearIdenAddrID clears the value of the "iden_addr_id" field.
func (osuo *OrgStaffUpdateOne) ClearIdenAddrID() *OrgStaffUpdateOne {
	osuo.mutation.ClearIdenAddrID()
	return osuo
}

// SetResiAddrID sets the "resi_addr_id" field.
func (osuo *OrgStaffUpdateOne) SetResiAddrID(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetResiAddrID(s)
	return osuo
}

// SetNillableResiAddrID sets the "resi_addr_id" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableResiAddrID(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetResiAddrID(*s)
	}
	return osuo
}

// ClearResiAddrID clears the value of the "resi_addr_id" field.
func (osuo *OrgStaffUpdateOne) ClearResiAddrID() *OrgStaffUpdateOne {
	osuo.mutation.ClearResiAddrID()
	return osuo
}

// SetWorkerNo sets the "worker_no" field.
func (osuo *OrgStaffUpdateOne) SetWorkerNo(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetWorkerNo(s)
	return osuo
}

// SetNillableWorkerNo sets the "worker_no" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableWorkerNo(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetWorkerNo(*s)
	}
	return osuo
}

// ClearWorkerNo clears the value of the "worker_no" field.
func (osuo *OrgStaffUpdateOne) ClearWorkerNo() *OrgStaffUpdateOne {
	osuo.mutation.ClearWorkerNo()
	return osuo
}

// SetCubicle sets the "cubicle" field.
func (osuo *OrgStaffUpdateOne) SetCubicle(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetCubicle(s)
	return osuo
}

// SetNillableCubicle sets the "cubicle" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableCubicle(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetCubicle(*s)
	}
	return osuo
}

// ClearCubicle clears the value of the "cubicle" field.
func (osuo *OrgStaffUpdateOne) ClearCubicle() *OrgStaffUpdateOne {
	osuo.mutation.ClearCubicle()
	return osuo
}

// SetEntryDate sets the "entry_date" field.
func (osuo *OrgStaffUpdateOne) SetEntryDate(t time.Time) *OrgStaffUpdateOne {
	osuo.mutation.SetEntryDate(t)
	return osuo
}

// SetNillableEntryDate sets the "entry_date" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableEntryDate(t *time.Time) *OrgStaffUpdateOne {
	if t != nil {
		osuo.SetEntryDate(*t)
	}
	return osuo
}

// ClearEntryDate clears the value of the "entry_date" field.
func (osuo *OrgStaffUpdateOne) ClearEntryDate() *OrgStaffUpdateOne {
	osuo.mutation.ClearEntryDate()
	return osuo
}

// SetRegularDate sets the "regular_date" field.
func (osuo *OrgStaffUpdateOne) SetRegularDate(t time.Time) *OrgStaffUpdateOne {
	osuo.mutation.SetRegularDate(t)
	return osuo
}

// SetNillableRegularDate sets the "regular_date" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableRegularDate(t *time.Time) *OrgStaffUpdateOne {
	if t != nil {
		osuo.SetRegularDate(*t)
	}
	return osuo
}

// ClearRegularDate clears the value of the "regular_date" field.
func (osuo *OrgStaffUpdateOne) ClearRegularDate() *OrgStaffUpdateOne {
	osuo.mutation.ClearRegularDate()
	return osuo
}

// SetResignDate sets the "resign_date" field.
func (osuo *OrgStaffUpdateOne) SetResignDate(t time.Time) *OrgStaffUpdateOne {
	osuo.mutation.SetResignDate(t)
	return osuo
}

// SetNillableResignDate sets the "resign_date" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableResignDate(t *time.Time) *OrgStaffUpdateOne {
	if t != nil {
		osuo.SetResignDate(*t)
	}
	return osuo
}

// ClearResignDate clears the value of the "resign_date" field.
func (osuo *OrgStaffUpdateOne) ClearResignDate() *OrgStaffUpdateOne {
	osuo.mutation.ClearResignDate()
	return osuo
}

// SetOrgID sets the "org_id" field.
func (osuo *OrgStaffUpdateOne) SetOrgID(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetOrgID(s)
	return osuo
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableOrgID(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetOrgID(*s)
	}
	return osuo
}

// ClearOrgID clears the value of the "org_id" field.
func (osuo *OrgStaffUpdateOne) ClearOrgID() *OrgStaffUpdateOne {
	osuo.mutation.ClearOrgID()
	return osuo
}

// SetEmploymentStatus sets the "employment_status" field.
func (osuo *OrgStaffUpdateOne) SetEmploymentStatus(i int) *OrgStaffUpdateOne {
	osuo.mutation.ResetEmploymentStatus()
	osuo.mutation.SetEmploymentStatus(i)
	return osuo
}

// SetNillableEmploymentStatus sets the "employment_status" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableEmploymentStatus(i *int) *OrgStaffUpdateOne {
	if i != nil {
		osuo.SetEmploymentStatus(*i)
	}
	return osuo
}

// AddEmploymentStatus adds i to the "employment_status" field.
func (osuo *OrgStaffUpdateOne) AddEmploymentStatus(i int) *OrgStaffUpdateOne {
	osuo.mutation.AddEmploymentStatus(i)
	return osuo
}

// SetEsDictID sets the "es_dict_id" field.
func (osuo *OrgStaffUpdateOne) SetEsDictID(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetEsDictID(s)
	return osuo
}

// SetNillableEsDictID sets the "es_dict_id" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableEsDictID(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetEsDictID(*s)
	}
	return osuo
}

// ClearEsDictID clears the value of the "es_dict_id" field.
func (osuo *OrgStaffUpdateOne) ClearEsDictID() *OrgStaffUpdateOne {
	osuo.mutation.ClearEsDictID()
	return osuo
}

// SetCreator sets the "creator" field.
func (osuo *OrgStaffUpdateOne) SetCreator(s string) *OrgStaffUpdateOne {
	osuo.mutation.SetCreator(s)
	return osuo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableCreator(s *string) *OrgStaffUpdateOne {
	if s != nil {
		osuo.SetCreator(*s)
	}
	return osuo
}

// ClearCreator clears the value of the "creator" field.
func (osuo *OrgStaffUpdateOne) ClearCreator() *OrgStaffUpdateOne {
	osuo.mutation.ClearCreator()
	return osuo
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by ID.
func (osuo *OrgStaffUpdateOne) SetOrganID(id string) *OrgStaffUpdateOne {
	osuo.mutation.SetOrganID(id)
	return osuo
}

// SetNillableOrganID sets the "organ" edge to the OrgOrgan entity by ID if the given value is not nil.
func (osuo *OrgStaffUpdateOne) SetNillableOrganID(id *string) *OrgStaffUpdateOne {
	if id != nil {
		osuo = osuo.SetOrganID(*id)
	}
	return osuo
}

// SetOrgan sets the "organ" edge to the OrgOrgan entity.
func (osuo *OrgStaffUpdateOne) SetOrgan(o *OrgOrgan) *OrgStaffUpdateOne {
	return osuo.SetOrganID(o.ID)
}

// SetIdenAddr sets the "iden_addr" edge to the SysAddress entity.
func (osuo *OrgStaffUpdateOne) SetIdenAddr(s *SysAddress) *OrgStaffUpdateOne {
	return osuo.SetIdenAddrID(s.ID)
}

// SetResiAddr sets the "resi_addr" edge to the SysAddress entity.
func (osuo *OrgStaffUpdateOne) SetResiAddr(s *SysAddress) *OrgStaffUpdateOne {
	return osuo.SetResiAddrID(s.ID)
}

// Mutation returns the OrgStaffMutation object of the builder.
func (osuo *OrgStaffUpdateOne) Mutation() *OrgStaffMutation {
	return osuo.mutation
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (osuo *OrgStaffUpdateOne) ClearOrgan() *OrgStaffUpdateOne {
	osuo.mutation.ClearOrgan()
	return osuo
}

// ClearIdenAddr clears the "iden_addr" edge to the SysAddress entity.
func (osuo *OrgStaffUpdateOne) ClearIdenAddr() *OrgStaffUpdateOne {
	osuo.mutation.ClearIdenAddr()
	return osuo
}

// ClearResiAddr clears the "resi_addr" edge to the SysAddress entity.
func (osuo *OrgStaffUpdateOne) ClearResiAddr() *OrgStaffUpdateOne {
	osuo.mutation.ClearResiAddr()
	return osuo
}

// Where appends a list predicates to the OrgStaffUpdate builder.
func (osuo *OrgStaffUpdateOne) Where(ps ...predicate.OrgStaff) *OrgStaffUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrgStaffUpdateOne) Select(field string, fields ...string) *OrgStaffUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrgStaff entity.
func (osuo *OrgStaffUpdateOne) Save(ctx context.Context) (*OrgStaff, error) {
	osuo.defaults()
	return withHooks[*OrgStaff, OrgStaffMutation](ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrgStaffUpdateOne) SaveX(ctx context.Context) *OrgStaff {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrgStaffUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrgStaffUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osuo *OrgStaffUpdateOne) defaults() {
	if _, ok := osuo.mutation.UpdatedAt(); !ok && !osuo.mutation.UpdatedAtCleared() {
		v := orgstaff.UpdateDefaultUpdatedAt()
		osuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OrgStaffUpdateOne) check() error {
	if v, ok := osuo.mutation.Memo(); ok {
		if err := orgstaff.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.memo": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.FirstName(); ok {
		if err := orgstaff.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.first_name": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.LastName(); ok {
		if err := orgstaff.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.last_name": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.Mobile(); ok {
		if err := orgstaff.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.mobile": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.Gender(); ok {
		if err := orgstaff.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.gender": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.IdenAddrID(); ok {
		if err := orgstaff.IdenAddrIDValidator(v); err != nil {
			return &ValidationError{Name: "iden_addr_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.iden_addr_id": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.ResiAddrID(); ok {
		if err := orgstaff.ResiAddrIDValidator(v); err != nil {
			return &ValidationError{Name: "resi_addr_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.resi_addr_id": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.WorkerNo(); ok {
		if err := orgstaff.WorkerNoValidator(v); err != nil {
			return &ValidationError{Name: "worker_no", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.worker_no": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.Cubicle(); ok {
		if err := orgstaff.CubicleValidator(v); err != nil {
			return &ValidationError{Name: "cubicle", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.cubicle": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.OrgID(); ok {
		if err := orgstaff.OrgIDValidator(v); err != nil {
			return &ValidationError{Name: "org_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.org_id": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.EsDictID(); ok {
		if err := orgstaff.EsDictIDValidator(v); err != nil {
			return &ValidationError{Name: "es_dict_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.es_dict_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (osuo *OrgStaffUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgStaffUpdateOne {
	osuo.modifiers = append(osuo.modifiers, modifiers...)
	return osuo
}

func (osuo *OrgStaffUpdateOne) sqlSave(ctx context.Context) (_node *OrgStaff, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgstaff.Table, orgstaff.Columns, sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrgStaff.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgstaff.FieldID)
		for _, f := range fields {
			if !orgstaff.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orgstaff.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.IsDel(); ok {
		_spec.SetField(orgstaff.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := osuo.mutation.Sort(); ok {
		_spec.SetField(orgstaff.FieldSort, field.TypeInt32, value)
	}
	if value, ok := osuo.mutation.AddedSort(); ok {
		_spec.AddField(orgstaff.FieldSort, field.TypeInt32, value)
	}
	if osuo.mutation.CreatedAtCleared() {
		_spec.ClearField(orgstaff.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orgstaff.FieldUpdatedAt, field.TypeTime, value)
	}
	if osuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgstaff.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.DeletedAt(); ok {
		_spec.SetField(orgstaff.FieldDeletedAt, field.TypeTime, value)
	}
	if osuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orgstaff.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := osuo.mutation.IsActive(); ok {
		_spec.SetField(orgstaff.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := osuo.mutation.Memo(); ok {
		_spec.SetField(orgstaff.FieldMemo, field.TypeString, value)
	}
	if osuo.mutation.MemoCleared() {
		_spec.ClearField(orgstaff.FieldMemo, field.TypeString)
	}
	if value, ok := osuo.mutation.FirstName(); ok {
		_spec.SetField(orgstaff.FieldFirstName, field.TypeString, value)
	}
	if osuo.mutation.FirstNameCleared() {
		_spec.ClearField(orgstaff.FieldFirstName, field.TypeString)
	}
	if value, ok := osuo.mutation.LastName(); ok {
		_spec.SetField(orgstaff.FieldLastName, field.TypeString, value)
	}
	if osuo.mutation.LastNameCleared() {
		_spec.ClearField(orgstaff.FieldLastName, field.TypeString)
	}
	if value, ok := osuo.mutation.Mobile(); ok {
		_spec.SetField(orgstaff.FieldMobile, field.TypeString, value)
	}
	if osuo.mutation.MobileCleared() {
		_spec.ClearField(orgstaff.FieldMobile, field.TypeString)
	}
	if value, ok := osuo.mutation.Gender(); ok {
		_spec.SetField(orgstaff.FieldGender, field.TypeEnum, value)
	}
	if osuo.mutation.GenderCleared() {
		_spec.ClearField(orgstaff.FieldGender, field.TypeEnum)
	}
	if value, ok := osuo.mutation.BirthDate(); ok {
		_spec.SetField(orgstaff.FieldBirthDate, field.TypeTime, value)
	}
	if osuo.mutation.BirthDateCleared() {
		_spec.ClearField(orgstaff.FieldBirthDate, field.TypeTime)
	}
	if value, ok := osuo.mutation.IdenNo(); ok {
		_spec.SetField(orgstaff.FieldIdenNo, field.TypeString, value)
	}
	if osuo.mutation.IdenNoCleared() {
		_spec.ClearField(orgstaff.FieldIdenNo, field.TypeString)
	}
	if value, ok := osuo.mutation.WorkerNo(); ok {
		_spec.SetField(orgstaff.FieldWorkerNo, field.TypeString, value)
	}
	if osuo.mutation.WorkerNoCleared() {
		_spec.ClearField(orgstaff.FieldWorkerNo, field.TypeString)
	}
	if value, ok := osuo.mutation.Cubicle(); ok {
		_spec.SetField(orgstaff.FieldCubicle, field.TypeString, value)
	}
	if osuo.mutation.CubicleCleared() {
		_spec.ClearField(orgstaff.FieldCubicle, field.TypeString)
	}
	if value, ok := osuo.mutation.EntryDate(); ok {
		_spec.SetField(orgstaff.FieldEntryDate, field.TypeTime, value)
	}
	if osuo.mutation.EntryDateCleared() {
		_spec.ClearField(orgstaff.FieldEntryDate, field.TypeTime)
	}
	if value, ok := osuo.mutation.RegularDate(); ok {
		_spec.SetField(orgstaff.FieldRegularDate, field.TypeTime, value)
	}
	if osuo.mutation.RegularDateCleared() {
		_spec.ClearField(orgstaff.FieldRegularDate, field.TypeTime)
	}
	if value, ok := osuo.mutation.ResignDate(); ok {
		_spec.SetField(orgstaff.FieldResignDate, field.TypeTime, value)
	}
	if osuo.mutation.ResignDateCleared() {
		_spec.ClearField(orgstaff.FieldResignDate, field.TypeTime)
	}
	if value, ok := osuo.mutation.EmploymentStatus(); ok {
		_spec.SetField(orgstaff.FieldEmploymentStatus, field.TypeInt, value)
	}
	if value, ok := osuo.mutation.AddedEmploymentStatus(); ok {
		_spec.AddField(orgstaff.FieldEmploymentStatus, field.TypeInt, value)
	}
	if value, ok := osuo.mutation.EsDictID(); ok {
		_spec.SetField(orgstaff.FieldEsDictID, field.TypeString, value)
	}
	if osuo.mutation.EsDictIDCleared() {
		_spec.ClearField(orgstaff.FieldEsDictID, field.TypeString)
	}
	if value, ok := osuo.mutation.Creator(); ok {
		_spec.SetField(orgstaff.FieldCreator, field.TypeString, value)
	}
	if osuo.mutation.CreatorCleared() {
		_spec.ClearField(orgstaff.FieldCreator, field.TypeString)
	}
	if osuo.mutation.OrganCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgstaff.OrganTable,
			Columns: []string{orgstaff.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgStaff
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.OrganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgstaff.OrganTable,
			Columns: []string{orgstaff.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.IdenAddrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.IdenAddrTable,
			Columns: []string{orgstaff.IdenAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgStaff
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.IdenAddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.IdenAddrTable,
			Columns: []string{orgstaff.IdenAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if osuo.mutation.ResiAddrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.ResiAddrTable,
			Columns: []string{orgstaff.ResiAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgStaff
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.ResiAddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.ResiAddrTable,
			Columns: []string{orgstaff.ResiAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = osuo.schemaConfig.OrgStaff
	ctx = internal.NewSchemaConfigContext(ctx, osuo.schemaConfig)
	_spec.AddModifiers(osuo.modifiers...)
	_node = &OrgStaff{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgstaff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
