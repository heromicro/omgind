// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/xxxdemo"
)

// XxxDemoCreate is the builder for creating a XxxDemo entity.
type XxxDemoCreate struct {
	config
	mutation *XxxDemoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (xdc *XxxDemoCreate) SetIsDel(b bool) *XxxDemoCreate {
	xdc.mutation.SetIsDel(b)
	return xdc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableIsDel(b *bool) *XxxDemoCreate {
	if b != nil {
		xdc.SetIsDel(*b)
	}
	return xdc
}

// SetMemo sets the "memo" field.
func (xdc *XxxDemoCreate) SetMemo(s string) *XxxDemoCreate {
	xdc.mutation.SetMemo(s)
	return xdc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableMemo(s *string) *XxxDemoCreate {
	if s != nil {
		xdc.SetMemo(*s)
	}
	return xdc
}

// SetSort sets the "sort" field.
func (xdc *XxxDemoCreate) SetSort(i int32) *XxxDemoCreate {
	xdc.mutation.SetSort(i)
	return xdc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableSort(i *int32) *XxxDemoCreate {
	if i != nil {
		xdc.SetSort(*i)
	}
	return xdc
}

// SetCreatedAt sets the "created_at" field.
func (xdc *XxxDemoCreate) SetCreatedAt(t time.Time) *XxxDemoCreate {
	xdc.mutation.SetCreatedAt(t)
	return xdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableCreatedAt(t *time.Time) *XxxDemoCreate {
	if t != nil {
		xdc.SetCreatedAt(*t)
	}
	return xdc
}

// SetUpdatedAt sets the "updated_at" field.
func (xdc *XxxDemoCreate) SetUpdatedAt(t time.Time) *XxxDemoCreate {
	xdc.mutation.SetUpdatedAt(t)
	return xdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableUpdatedAt(t *time.Time) *XxxDemoCreate {
	if t != nil {
		xdc.SetUpdatedAt(*t)
	}
	return xdc
}

// SetDeletedAt sets the "deleted_at" field.
func (xdc *XxxDemoCreate) SetDeletedAt(t time.Time) *XxxDemoCreate {
	xdc.mutation.SetDeletedAt(t)
	return xdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableDeletedAt(t *time.Time) *XxxDemoCreate {
	if t != nil {
		xdc.SetDeletedAt(*t)
	}
	return xdc
}

// SetIsActive sets the "is_active" field.
func (xdc *XxxDemoCreate) SetIsActive(b bool) *XxxDemoCreate {
	xdc.mutation.SetIsActive(b)
	return xdc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableIsActive(b *bool) *XxxDemoCreate {
	if b != nil {
		xdc.SetIsActive(*b)
	}
	return xdc
}

// SetCode sets the "code" field.
func (xdc *XxxDemoCreate) SetCode(s string) *XxxDemoCreate {
	xdc.mutation.SetCode(s)
	return xdc
}

// SetName sets the "name" field.
func (xdc *XxxDemoCreate) SetName(s string) *XxxDemoCreate {
	xdc.mutation.SetName(s)
	return xdc
}

// SetID sets the "id" field.
func (xdc *XxxDemoCreate) SetID(s string) *XxxDemoCreate {
	xdc.mutation.SetID(s)
	return xdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (xdc *XxxDemoCreate) SetNillableID(s *string) *XxxDemoCreate {
	if s != nil {
		xdc.SetID(*s)
	}
	return xdc
}

// Mutation returns the XxxDemoMutation object of the builder.
func (xdc *XxxDemoCreate) Mutation() *XxxDemoMutation {
	return xdc.mutation
}

// Save creates the XxxDemo in the database.
func (xdc *XxxDemoCreate) Save(ctx context.Context) (*XxxDemo, error) {
	xdc.defaults()
	return withHooks[*XxxDemo, XxxDemoMutation](ctx, xdc.sqlSave, xdc.mutation, xdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (xdc *XxxDemoCreate) SaveX(ctx context.Context) *XxxDemo {
	v, err := xdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xdc *XxxDemoCreate) Exec(ctx context.Context) error {
	_, err := xdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xdc *XxxDemoCreate) ExecX(ctx context.Context) {
	if err := xdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (xdc *XxxDemoCreate) defaults() {
	if _, ok := xdc.mutation.IsDel(); !ok {
		v := xxxdemo.DefaultIsDel
		xdc.mutation.SetIsDel(v)
	}
	if _, ok := xdc.mutation.Memo(); !ok {
		v := xxxdemo.DefaultMemo
		xdc.mutation.SetMemo(v)
	}
	if _, ok := xdc.mutation.Sort(); !ok {
		v := xxxdemo.DefaultSort
		xdc.mutation.SetSort(v)
	}
	if _, ok := xdc.mutation.CreatedAt(); !ok {
		v := xxxdemo.DefaultCreatedAt()
		xdc.mutation.SetCreatedAt(v)
	}
	if _, ok := xdc.mutation.UpdatedAt(); !ok {
		v := xxxdemo.DefaultUpdatedAt()
		xdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := xdc.mutation.IsActive(); !ok {
		v := xxxdemo.DefaultIsActive
		xdc.mutation.SetIsActive(v)
	}
	if _, ok := xdc.mutation.ID(); !ok {
		v := xxxdemo.DefaultID()
		xdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (xdc *XxxDemoCreate) check() error {
	if _, ok := xdc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "XxxDemo.is_del"`)}
	}
	if v, ok := xdc.mutation.Memo(); ok {
		if err := xxxdemo.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "XxxDemo.memo": %w`, err)}
		}
	}
	if _, ok := xdc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "XxxDemo.sort"`)}
	}
	if _, ok := xdc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "XxxDemo.is_active"`)}
	}
	if _, ok := xdc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "XxxDemo.code"`)}
	}
	if v, ok := xdc.mutation.Code(); ok {
		if err := xxxdemo.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "XxxDemo.code": %w`, err)}
		}
	}
	if _, ok := xdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "XxxDemo.name"`)}
	}
	if v, ok := xdc.mutation.Name(); ok {
		if err := xxxdemo.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "XxxDemo.name": %w`, err)}
		}
	}
	if v, ok := xdc.mutation.ID(); ok {
		if err := xxxdemo.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "XxxDemo.id": %w`, err)}
		}
	}
	return nil
}

func (xdc *XxxDemoCreate) sqlSave(ctx context.Context) (*XxxDemo, error) {
	if err := xdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := xdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, xdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected XxxDemo.ID type: %T", _spec.ID.Value)
		}
	}
	xdc.mutation.id = &_node.ID
	xdc.mutation.done = true
	return _node, nil
}

func (xdc *XxxDemoCreate) createSpec() (*XxxDemo, *sqlgraph.CreateSpec) {
	var (
		_node = &XxxDemo{config: xdc.config}
		_spec = sqlgraph.NewCreateSpec(xxxdemo.Table, sqlgraph.NewFieldSpec(xxxdemo.FieldID, field.TypeString))
	)
	_spec.OnConflict = xdc.conflict
	if id, ok := xdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := xdc.mutation.IsDel(); ok {
		_spec.SetField(xxxdemo.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := xdc.mutation.Memo(); ok {
		_spec.SetField(xxxdemo.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := xdc.mutation.Sort(); ok {
		_spec.SetField(xxxdemo.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := xdc.mutation.CreatedAt(); ok {
		_spec.SetField(xxxdemo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := xdc.mutation.UpdatedAt(); ok {
		_spec.SetField(xxxdemo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := xdc.mutation.DeletedAt(); ok {
		_spec.SetField(xxxdemo.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := xdc.mutation.IsActive(); ok {
		_spec.SetField(xxxdemo.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := xdc.mutation.Code(); ok {
		_spec.SetField(xxxdemo.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := xdc.mutation.Name(); ok {
		_spec.SetField(xxxdemo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.XxxDemo.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.XxxDemoUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (xdc *XxxDemoCreate) OnConflict(opts ...sql.ConflictOption) *XxxDemoUpsertOne {
	xdc.conflict = opts
	return &XxxDemoUpsertOne{
		create: xdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.XxxDemo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (xdc *XxxDemoCreate) OnConflictColumns(columns ...string) *XxxDemoUpsertOne {
	xdc.conflict = append(xdc.conflict, sql.ConflictColumns(columns...))
	return &XxxDemoUpsertOne{
		create: xdc,
	}
}

type (
	// XxxDemoUpsertOne is the builder for "upsert"-ing
	//  one XxxDemo node.
	XxxDemoUpsertOne struct {
		create *XxxDemoCreate
	}

	// XxxDemoUpsert is the "OnConflict" setter.
	XxxDemoUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *XxxDemoUpsert) SetIsDel(v bool) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateIsDel() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldIsDel)
	return u
}

// SetMemo sets the "memo" field.
func (u *XxxDemoUpsert) SetMemo(v string) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateMemo() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *XxxDemoUpsert) ClearMemo() *XxxDemoUpsert {
	u.SetNull(xxxdemo.FieldMemo)
	return u
}

// SetSort sets the "sort" field.
func (u *XxxDemoUpsert) SetSort(v int32) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateSort() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *XxxDemoUpsert) AddSort(v int32) *XxxDemoUpsert {
	u.Add(xxxdemo.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *XxxDemoUpsert) SetUpdatedAt(v time.Time) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateUpdatedAt() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *XxxDemoUpsert) ClearUpdatedAt() *XxxDemoUpsert {
	u.SetNull(xxxdemo.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *XxxDemoUpsert) SetDeletedAt(v time.Time) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateDeletedAt() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *XxxDemoUpsert) ClearDeletedAt() *XxxDemoUpsert {
	u.SetNull(xxxdemo.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *XxxDemoUpsert) SetIsActive(v bool) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateIsActive() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldIsActive)
	return u
}

// SetCode sets the "code" field.
func (u *XxxDemoUpsert) SetCode(v string) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateCode() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldCode)
	return u
}

// SetName sets the "name" field.
func (u *XxxDemoUpsert) SetName(v string) *XxxDemoUpsert {
	u.Set(xxxdemo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *XxxDemoUpsert) UpdateName() *XxxDemoUpsert {
	u.SetExcluded(xxxdemo.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.XxxDemo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(xxxdemo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *XxxDemoUpsertOne) UpdateNewValues() *XxxDemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(xxxdemo.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(xxxdemo.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.XxxDemo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *XxxDemoUpsertOne) Ignore() *XxxDemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *XxxDemoUpsertOne) DoNothing() *XxxDemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the XxxDemoCreate.OnConflict
// documentation for more info.
func (u *XxxDemoUpsertOne) Update(set func(*XxxDemoUpsert)) *XxxDemoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&XxxDemoUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *XxxDemoUpsertOne) SetIsDel(v bool) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateIsDel() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateIsDel()
	})
}

// SetMemo sets the "memo" field.
func (u *XxxDemoUpsertOne) SetMemo(v string) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateMemo() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *XxxDemoUpsertOne) ClearMemo() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.ClearMemo()
	})
}

// SetSort sets the "sort" field.
func (u *XxxDemoUpsertOne) SetSort(v int32) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *XxxDemoUpsertOne) AddSort(v int32) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateSort() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *XxxDemoUpsertOne) SetUpdatedAt(v time.Time) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateUpdatedAt() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *XxxDemoUpsertOne) ClearUpdatedAt() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *XxxDemoUpsertOne) SetDeletedAt(v time.Time) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateDeletedAt() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *XxxDemoUpsertOne) ClearDeletedAt() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *XxxDemoUpsertOne) SetIsActive(v bool) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateIsActive() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateIsActive()
	})
}

// SetCode sets the "code" field.
func (u *XxxDemoUpsertOne) SetCode(v string) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateCode() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *XxxDemoUpsertOne) SetName(v string) *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *XxxDemoUpsertOne) UpdateName() *XxxDemoUpsertOne {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *XxxDemoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for XxxDemoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *XxxDemoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *XxxDemoUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: XxxDemoUpsertOne.ID is not supported by MySQL driver. Use XxxDemoUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *XxxDemoUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// XxxDemoCreateBulk is the builder for creating many XxxDemo entities in bulk.
type XxxDemoCreateBulk struct {
	config
	builders []*XxxDemoCreate
	conflict []sql.ConflictOption
}

// Save creates the XxxDemo entities in the database.
func (xdcb *XxxDemoCreateBulk) Save(ctx context.Context) ([]*XxxDemo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(xdcb.builders))
	nodes := make([]*XxxDemo, len(xdcb.builders))
	mutators := make([]Mutator, len(xdcb.builders))
	for i := range xdcb.builders {
		func(i int, root context.Context) {
			builder := xdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*XxxDemoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, xdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = xdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, xdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, xdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (xdcb *XxxDemoCreateBulk) SaveX(ctx context.Context) []*XxxDemo {
	v, err := xdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (xdcb *XxxDemoCreateBulk) Exec(ctx context.Context) error {
	_, err := xdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (xdcb *XxxDemoCreateBulk) ExecX(ctx context.Context) {
	if err := xdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.XxxDemo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.XxxDemoUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (xdcb *XxxDemoCreateBulk) OnConflict(opts ...sql.ConflictOption) *XxxDemoUpsertBulk {
	xdcb.conflict = opts
	return &XxxDemoUpsertBulk{
		create: xdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.XxxDemo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (xdcb *XxxDemoCreateBulk) OnConflictColumns(columns ...string) *XxxDemoUpsertBulk {
	xdcb.conflict = append(xdcb.conflict, sql.ConflictColumns(columns...))
	return &XxxDemoUpsertBulk{
		create: xdcb,
	}
}

// XxxDemoUpsertBulk is the builder for "upsert"-ing
// a bulk of XxxDemo nodes.
type XxxDemoUpsertBulk struct {
	create *XxxDemoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.XxxDemo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(xxxdemo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *XxxDemoUpsertBulk) UpdateNewValues() *XxxDemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(xxxdemo.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(xxxdemo.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.XxxDemo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *XxxDemoUpsertBulk) Ignore() *XxxDemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *XxxDemoUpsertBulk) DoNothing() *XxxDemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the XxxDemoCreateBulk.OnConflict
// documentation for more info.
func (u *XxxDemoUpsertBulk) Update(set func(*XxxDemoUpsert)) *XxxDemoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&XxxDemoUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *XxxDemoUpsertBulk) SetIsDel(v bool) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateIsDel() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateIsDel()
	})
}

// SetMemo sets the "memo" field.
func (u *XxxDemoUpsertBulk) SetMemo(v string) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateMemo() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *XxxDemoUpsertBulk) ClearMemo() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.ClearMemo()
	})
}

// SetSort sets the "sort" field.
func (u *XxxDemoUpsertBulk) SetSort(v int32) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *XxxDemoUpsertBulk) AddSort(v int32) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateSort() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *XxxDemoUpsertBulk) SetUpdatedAt(v time.Time) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateUpdatedAt() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *XxxDemoUpsertBulk) ClearUpdatedAt() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *XxxDemoUpsertBulk) SetDeletedAt(v time.Time) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateDeletedAt() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *XxxDemoUpsertBulk) ClearDeletedAt() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *XxxDemoUpsertBulk) SetIsActive(v bool) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateIsActive() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateIsActive()
	})
}

// SetCode sets the "code" field.
func (u *XxxDemoUpsertBulk) SetCode(v string) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateCode() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateCode()
	})
}

// SetName sets the "name" field.
func (u *XxxDemoUpsertBulk) SetName(v string) *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *XxxDemoUpsertBulk) UpdateName() *XxxDemoUpsertBulk {
	return u.Update(func(s *XxxDemoUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *XxxDemoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the XxxDemoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for XxxDemoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *XxxDemoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
