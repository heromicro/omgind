// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/orgorgan"
	"github.com/heromicro/omgind/internal/gen/ent/orgstaff"
	"github.com/heromicro/omgind/internal/gen/ent/sysaddress"
)

// OrgStaffCreate is the builder for creating a OrgStaff entity.
type OrgStaffCreate struct {
	config
	mutation *OrgStaffMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (osc *OrgStaffCreate) SetIsDel(b bool) *OrgStaffCreate {
	osc.mutation.SetIsDel(b)
	return osc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableIsDel(b *bool) *OrgStaffCreate {
	if b != nil {
		osc.SetIsDel(*b)
	}
	return osc
}

// SetSort sets the "sort" field.
func (osc *OrgStaffCreate) SetSort(i int32) *OrgStaffCreate {
	osc.mutation.SetSort(i)
	return osc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableSort(i *int32) *OrgStaffCreate {
	if i != nil {
		osc.SetSort(*i)
	}
	return osc
}

// SetCreatedAt sets the "created_at" field.
func (osc *OrgStaffCreate) SetCreatedAt(t time.Time) *OrgStaffCreate {
	osc.mutation.SetCreatedAt(t)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableCreatedAt(t *time.Time) *OrgStaffCreate {
	if t != nil {
		osc.SetCreatedAt(*t)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OrgStaffCreate) SetUpdatedAt(t time.Time) *OrgStaffCreate {
	osc.mutation.SetUpdatedAt(t)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableUpdatedAt(t *time.Time) *OrgStaffCreate {
	if t != nil {
		osc.SetUpdatedAt(*t)
	}
	return osc
}

// SetDeletedAt sets the "deleted_at" field.
func (osc *OrgStaffCreate) SetDeletedAt(t time.Time) *OrgStaffCreate {
	osc.mutation.SetDeletedAt(t)
	return osc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableDeletedAt(t *time.Time) *OrgStaffCreate {
	if t != nil {
		osc.SetDeletedAt(*t)
	}
	return osc
}

// SetIsActive sets the "is_active" field.
func (osc *OrgStaffCreate) SetIsActive(b bool) *OrgStaffCreate {
	osc.mutation.SetIsActive(b)
	return osc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableIsActive(b *bool) *OrgStaffCreate {
	if b != nil {
		osc.SetIsActive(*b)
	}
	return osc
}

// SetMemo sets the "memo" field.
func (osc *OrgStaffCreate) SetMemo(s string) *OrgStaffCreate {
	osc.mutation.SetMemo(s)
	return osc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableMemo(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetMemo(*s)
	}
	return osc
}

// SetFirstName sets the "first_name" field.
func (osc *OrgStaffCreate) SetFirstName(s string) *OrgStaffCreate {
	osc.mutation.SetFirstName(s)
	return osc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableFirstName(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetFirstName(*s)
	}
	return osc
}

// SetLastName sets the "last_name" field.
func (osc *OrgStaffCreate) SetLastName(s string) *OrgStaffCreate {
	osc.mutation.SetLastName(s)
	return osc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableLastName(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetLastName(*s)
	}
	return osc
}

// SetMobile sets the "mobile" field.
func (osc *OrgStaffCreate) SetMobile(s string) *OrgStaffCreate {
	osc.mutation.SetMobile(s)
	return osc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableMobile(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetMobile(*s)
	}
	return osc
}

// SetGender sets the "gender" field.
func (osc *OrgStaffCreate) SetGender(i int32) *OrgStaffCreate {
	osc.mutation.SetGender(i)
	return osc
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableGender(i *int32) *OrgStaffCreate {
	if i != nil {
		osc.SetGender(*i)
	}
	return osc
}

// SetGndrDictID sets the "gndr_dict_id" field.
func (osc *OrgStaffCreate) SetGndrDictID(s string) *OrgStaffCreate {
	osc.mutation.SetGndrDictID(s)
	return osc
}

// SetNillableGndrDictID sets the "gndr_dict_id" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableGndrDictID(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetGndrDictID(*s)
	}
	return osc
}

// SetBirthDate sets the "birth_date" field.
func (osc *OrgStaffCreate) SetBirthDate(t time.Time) *OrgStaffCreate {
	osc.mutation.SetBirthDate(t)
	return osc
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableBirthDate(t *time.Time) *OrgStaffCreate {
	if t != nil {
		osc.SetBirthDate(*t)
	}
	return osc
}

// SetIdenNo sets the "iden_no" field.
func (osc *OrgStaffCreate) SetIdenNo(s string) *OrgStaffCreate {
	osc.mutation.SetIdenNo(s)
	return osc
}

// SetNillableIdenNo sets the "iden_no" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableIdenNo(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetIdenNo(*s)
	}
	return osc
}

// SetIdenAddrID sets the "iden_addr_id" field.
func (osc *OrgStaffCreate) SetIdenAddrID(s string) *OrgStaffCreate {
	osc.mutation.SetIdenAddrID(s)
	return osc
}

// SetNillableIdenAddrID sets the "iden_addr_id" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableIdenAddrID(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetIdenAddrID(*s)
	}
	return osc
}

// SetResiAddrID sets the "resi_addr_id" field.
func (osc *OrgStaffCreate) SetResiAddrID(s string) *OrgStaffCreate {
	osc.mutation.SetResiAddrID(s)
	return osc
}

// SetNillableResiAddrID sets the "resi_addr_id" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableResiAddrID(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetResiAddrID(*s)
	}
	return osc
}

// SetWorkerNo sets the "worker_no" field.
func (osc *OrgStaffCreate) SetWorkerNo(s string) *OrgStaffCreate {
	osc.mutation.SetWorkerNo(s)
	return osc
}

// SetNillableWorkerNo sets the "worker_no" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableWorkerNo(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetWorkerNo(*s)
	}
	return osc
}

// SetCubicle sets the "cubicle" field.
func (osc *OrgStaffCreate) SetCubicle(s string) *OrgStaffCreate {
	osc.mutation.SetCubicle(s)
	return osc
}

// SetNillableCubicle sets the "cubicle" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableCubicle(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetCubicle(*s)
	}
	return osc
}

// SetEntryDate sets the "entry_date" field.
func (osc *OrgStaffCreate) SetEntryDate(t time.Time) *OrgStaffCreate {
	osc.mutation.SetEntryDate(t)
	return osc
}

// SetNillableEntryDate sets the "entry_date" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableEntryDate(t *time.Time) *OrgStaffCreate {
	if t != nil {
		osc.SetEntryDate(*t)
	}
	return osc
}

// SetRegularDate sets the "regular_date" field.
func (osc *OrgStaffCreate) SetRegularDate(t time.Time) *OrgStaffCreate {
	osc.mutation.SetRegularDate(t)
	return osc
}

// SetNillableRegularDate sets the "regular_date" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableRegularDate(t *time.Time) *OrgStaffCreate {
	if t != nil {
		osc.SetRegularDate(*t)
	}
	return osc
}

// SetResignDate sets the "resign_date" field.
func (osc *OrgStaffCreate) SetResignDate(t time.Time) *OrgStaffCreate {
	osc.mutation.SetResignDate(t)
	return osc
}

// SetNillableResignDate sets the "resign_date" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableResignDate(t *time.Time) *OrgStaffCreate {
	if t != nil {
		osc.SetResignDate(*t)
	}
	return osc
}

// SetOrgID sets the "org_id" field.
func (osc *OrgStaffCreate) SetOrgID(s string) *OrgStaffCreate {
	osc.mutation.SetOrgID(s)
	return osc
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableOrgID(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetOrgID(*s)
	}
	return osc
}

// SetEmpStat sets the "emp_stat" field.
func (osc *OrgStaffCreate) SetEmpStat(i int32) *OrgStaffCreate {
	osc.mutation.SetEmpStat(i)
	return osc
}

// SetNillableEmpStat sets the "emp_stat" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableEmpStat(i *int32) *OrgStaffCreate {
	if i != nil {
		osc.SetEmpStat(*i)
	}
	return osc
}

// SetEmpstDictID sets the "empst_dict_id" field.
func (osc *OrgStaffCreate) SetEmpstDictID(s string) *OrgStaffCreate {
	osc.mutation.SetEmpstDictID(s)
	return osc
}

// SetNillableEmpstDictID sets the "empst_dict_id" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableEmpstDictID(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetEmpstDictID(*s)
	}
	return osc
}

// SetCreator sets the "creator" field.
func (osc *OrgStaffCreate) SetCreator(s string) *OrgStaffCreate {
	osc.mutation.SetCreator(s)
	return osc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableCreator(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetCreator(*s)
	}
	return osc
}

// SetID sets the "id" field.
func (osc *OrgStaffCreate) SetID(s string) *OrgStaffCreate {
	osc.mutation.SetID(s)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableID(s *string) *OrgStaffCreate {
	if s != nil {
		osc.SetID(*s)
	}
	return osc
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by ID.
func (osc *OrgStaffCreate) SetOrganID(id string) *OrgStaffCreate {
	osc.mutation.SetOrganID(id)
	return osc
}

// SetNillableOrganID sets the "organ" edge to the OrgOrgan entity by ID if the given value is not nil.
func (osc *OrgStaffCreate) SetNillableOrganID(id *string) *OrgStaffCreate {
	if id != nil {
		osc = osc.SetOrganID(*id)
	}
	return osc
}

// SetOrgan sets the "organ" edge to the OrgOrgan entity.
func (osc *OrgStaffCreate) SetOrgan(o *OrgOrgan) *OrgStaffCreate {
	return osc.SetOrganID(o.ID)
}

// SetIdenAddr sets the "iden_addr" edge to the SysAddress entity.
func (osc *OrgStaffCreate) SetIdenAddr(s *SysAddress) *OrgStaffCreate {
	return osc.SetIdenAddrID(s.ID)
}

// SetResiAddr sets the "resi_addr" edge to the SysAddress entity.
func (osc *OrgStaffCreate) SetResiAddr(s *SysAddress) *OrgStaffCreate {
	return osc.SetResiAddrID(s.ID)
}

// Mutation returns the OrgStaffMutation object of the builder.
func (osc *OrgStaffCreate) Mutation() *OrgStaffMutation {
	return osc.mutation
}

// Save creates the OrgStaff in the database.
func (osc *OrgStaffCreate) Save(ctx context.Context) (*OrgStaff, error) {
	osc.defaults()
	return withHooks[*OrgStaff, OrgStaffMutation](ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrgStaffCreate) SaveX(ctx context.Context) *OrgStaff {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrgStaffCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrgStaffCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrgStaffCreate) defaults() {
	if _, ok := osc.mutation.IsDel(); !ok {
		v := orgstaff.DefaultIsDel
		osc.mutation.SetIsDel(v)
	}
	if _, ok := osc.mutation.Sort(); !ok {
		v := orgstaff.DefaultSort
		osc.mutation.SetSort(v)
	}
	if _, ok := osc.mutation.CreatedAt(); !ok {
		v := orgstaff.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		v := orgstaff.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.IsActive(); !ok {
		v := orgstaff.DefaultIsActive
		osc.mutation.SetIsActive(v)
	}
	if _, ok := osc.mutation.Memo(); !ok {
		v := orgstaff.DefaultMemo
		osc.mutation.SetMemo(v)
	}
	if _, ok := osc.mutation.EmpStat(); !ok {
		v := orgstaff.DefaultEmpStat
		osc.mutation.SetEmpStat(v)
	}
	if _, ok := osc.mutation.ID(); !ok {
		v := orgstaff.DefaultID()
		osc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrgStaffCreate) check() error {
	if _, ok := osc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "OrgStaff.is_del"`)}
	}
	if _, ok := osc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "OrgStaff.sort"`)}
	}
	if _, ok := osc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "OrgStaff.is_active"`)}
	}
	if v, ok := osc.mutation.Memo(); ok {
		if err := orgstaff.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.memo": %w`, err)}
		}
	}
	if v, ok := osc.mutation.FirstName(); ok {
		if err := orgstaff.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.first_name": %w`, err)}
		}
	}
	if v, ok := osc.mutation.LastName(); ok {
		if err := orgstaff.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.last_name": %w`, err)}
		}
	}
	if v, ok := osc.mutation.Mobile(); ok {
		if err := orgstaff.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.mobile": %w`, err)}
		}
	}
	if v, ok := osc.mutation.GndrDictID(); ok {
		if err := orgstaff.GndrDictIDValidator(v); err != nil {
			return &ValidationError{Name: "gndr_dict_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.gndr_dict_id": %w`, err)}
		}
	}
	if v, ok := osc.mutation.IdenAddrID(); ok {
		if err := orgstaff.IdenAddrIDValidator(v); err != nil {
			return &ValidationError{Name: "iden_addr_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.iden_addr_id": %w`, err)}
		}
	}
	if v, ok := osc.mutation.ResiAddrID(); ok {
		if err := orgstaff.ResiAddrIDValidator(v); err != nil {
			return &ValidationError{Name: "resi_addr_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.resi_addr_id": %w`, err)}
		}
	}
	if v, ok := osc.mutation.WorkerNo(); ok {
		if err := orgstaff.WorkerNoValidator(v); err != nil {
			return &ValidationError{Name: "worker_no", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.worker_no": %w`, err)}
		}
	}
	if v, ok := osc.mutation.Cubicle(); ok {
		if err := orgstaff.CubicleValidator(v); err != nil {
			return &ValidationError{Name: "cubicle", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.cubicle": %w`, err)}
		}
	}
	if v, ok := osc.mutation.OrgID(); ok {
		if err := orgstaff.OrgIDValidator(v); err != nil {
			return &ValidationError{Name: "org_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.org_id": %w`, err)}
		}
	}
	if _, ok := osc.mutation.EmpStat(); !ok {
		return &ValidationError{Name: "emp_stat", err: errors.New(`ent: missing required field "OrgStaff.emp_stat"`)}
	}
	if v, ok := osc.mutation.EmpstDictID(); ok {
		if err := orgstaff.EmpstDictIDValidator(v); err != nil {
			return &ValidationError{Name: "empst_dict_id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.empst_dict_id": %w`, err)}
		}
	}
	if v, ok := osc.mutation.ID(); ok {
		if err := orgstaff.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "OrgStaff.id": %w`, err)}
		}
	}
	return nil
}

func (osc *OrgStaffCreate) sqlSave(ctx context.Context) (*OrgStaff, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgStaff.ID type: %T", _spec.ID.Value)
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OrgStaffCreate) createSpec() (*OrgStaff, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgStaff{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(orgstaff.Table, sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString))
	)
	_spec.Schema = osc.schemaConfig.OrgStaff
	_spec.OnConflict = osc.conflict
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.IsDel(); ok {
		_spec.SetField(orgstaff.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := osc.mutation.Sort(); ok {
		_spec.SetField(orgstaff.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.SetField(orgstaff.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgstaff.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := osc.mutation.DeletedAt(); ok {
		_spec.SetField(orgstaff.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := osc.mutation.IsActive(); ok {
		_spec.SetField(orgstaff.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := osc.mutation.Memo(); ok {
		_spec.SetField(orgstaff.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := osc.mutation.FirstName(); ok {
		_spec.SetField(orgstaff.FieldFirstName, field.TypeString, value)
		_node.FirstName = &value
	}
	if value, ok := osc.mutation.LastName(); ok {
		_spec.SetField(orgstaff.FieldLastName, field.TypeString, value)
		_node.LastName = &value
	}
	if value, ok := osc.mutation.Mobile(); ok {
		_spec.SetField(orgstaff.FieldMobile, field.TypeString, value)
		_node.Mobile = &value
	}
	if value, ok := osc.mutation.Gender(); ok {
		_spec.SetField(orgstaff.FieldGender, field.TypeInt32, value)
		_node.Gender = &value
	}
	if value, ok := osc.mutation.GndrDictID(); ok {
		_spec.SetField(orgstaff.FieldGndrDictID, field.TypeString, value)
		_node.GndrDictID = &value
	}
	if value, ok := osc.mutation.BirthDate(); ok {
		_spec.SetField(orgstaff.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = &value
	}
	if value, ok := osc.mutation.IdenNo(); ok {
		_spec.SetField(orgstaff.FieldIdenNo, field.TypeString, value)
		_node.IdenNo = &value
	}
	if value, ok := osc.mutation.WorkerNo(); ok {
		_spec.SetField(orgstaff.FieldWorkerNo, field.TypeString, value)
		_node.WorkerNo = &value
	}
	if value, ok := osc.mutation.Cubicle(); ok {
		_spec.SetField(orgstaff.FieldCubicle, field.TypeString, value)
		_node.Cubicle = &value
	}
	if value, ok := osc.mutation.EntryDate(); ok {
		_spec.SetField(orgstaff.FieldEntryDate, field.TypeTime, value)
		_node.EntryDate = &value
	}
	if value, ok := osc.mutation.RegularDate(); ok {
		_spec.SetField(orgstaff.FieldRegularDate, field.TypeTime, value)
		_node.RegularDate = &value
	}
	if value, ok := osc.mutation.ResignDate(); ok {
		_spec.SetField(orgstaff.FieldResignDate, field.TypeTime, value)
		_node.ResignDate = &value
	}
	if value, ok := osc.mutation.EmpStat(); ok {
		_spec.SetField(orgstaff.FieldEmpStat, field.TypeInt32, value)
		_node.EmpStat = value
	}
	if value, ok := osc.mutation.EmpstDictID(); ok {
		_spec.SetField(orgstaff.FieldEmpstDictID, field.TypeString, value)
		_node.EmpstDictID = &value
	}
	if value, ok := osc.mutation.Creator(); ok {
		_spec.SetField(orgstaff.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if nodes := osc.mutation.OrganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgstaff.OrganTable,
			Columns: []string{orgstaff.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		edge.Schema = osc.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.IdenAddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.IdenAddrTable,
			Columns: []string{orgstaff.IdenAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osc.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IdenAddrID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := osc.mutation.ResiAddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgstaff.ResiAddrTable,
			Columns: []string{orgstaff.ResiAddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		edge.Schema = osc.schemaConfig.OrgStaff
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResiAddrID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgStaff.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgStaffUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (osc *OrgStaffCreate) OnConflict(opts ...sql.ConflictOption) *OrgStaffUpsertOne {
	osc.conflict = opts
	return &OrgStaffUpsertOne{
		create: osc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgStaff.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (osc *OrgStaffCreate) OnConflictColumns(columns ...string) *OrgStaffUpsertOne {
	osc.conflict = append(osc.conflict, sql.ConflictColumns(columns...))
	return &OrgStaffUpsertOne{
		create: osc,
	}
}

type (
	// OrgStaffUpsertOne is the builder for "upsert"-ing
	//  one OrgStaff node.
	OrgStaffUpsertOne struct {
		create *OrgStaffCreate
	}

	// OrgStaffUpsert is the "OnConflict" setter.
	OrgStaffUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *OrgStaffUpsert) SetIsDel(v bool) *OrgStaffUpsert {
	u.Set(orgstaff.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateIsDel() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldIsDel)
	return u
}

// SetSort sets the "sort" field.
func (u *OrgStaffUpsert) SetSort(v int32) *OrgStaffUpsert {
	u.Set(orgstaff.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateSort() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *OrgStaffUpsert) AddSort(v int32) *OrgStaffUpsert {
	u.Add(orgstaff.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgStaffUpsert) SetUpdatedAt(v time.Time) *OrgStaffUpsert {
	u.Set(orgstaff.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateUpdatedAt() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgStaffUpsert) ClearUpdatedAt() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgStaffUpsert) SetDeletedAt(v time.Time) *OrgStaffUpsert {
	u.Set(orgstaff.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateDeletedAt() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgStaffUpsert) ClearDeletedAt() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *OrgStaffUpsert) SetIsActive(v bool) *OrgStaffUpsert {
	u.Set(orgstaff.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateIsActive() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldIsActive)
	return u
}

// SetMemo sets the "memo" field.
func (u *OrgStaffUpsert) SetMemo(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateMemo() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgStaffUpsert) ClearMemo() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldMemo)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *OrgStaffUpsert) SetFirstName(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateFirstName() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *OrgStaffUpsert) ClearFirstName() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *OrgStaffUpsert) SetLastName(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateLastName() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *OrgStaffUpsert) ClearLastName() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldLastName)
	return u
}

// SetMobile sets the "mobile" field.
func (u *OrgStaffUpsert) SetMobile(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldMobile, v)
	return u
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateMobile() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldMobile)
	return u
}

// ClearMobile clears the value of the "mobile" field.
func (u *OrgStaffUpsert) ClearMobile() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldMobile)
	return u
}

// SetGender sets the "gender" field.
func (u *OrgStaffUpsert) SetGender(v int32) *OrgStaffUpsert {
	u.Set(orgstaff.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateGender() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldGender)
	return u
}

// AddGender adds v to the "gender" field.
func (u *OrgStaffUpsert) AddGender(v int32) *OrgStaffUpsert {
	u.Add(orgstaff.FieldGender, v)
	return u
}

// ClearGender clears the value of the "gender" field.
func (u *OrgStaffUpsert) ClearGender() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldGender)
	return u
}

// SetGndrDictID sets the "gndr_dict_id" field.
func (u *OrgStaffUpsert) SetGndrDictID(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldGndrDictID, v)
	return u
}

// UpdateGndrDictID sets the "gndr_dict_id" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateGndrDictID() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldGndrDictID)
	return u
}

// ClearGndrDictID clears the value of the "gndr_dict_id" field.
func (u *OrgStaffUpsert) ClearGndrDictID() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldGndrDictID)
	return u
}

// SetBirthDate sets the "birth_date" field.
func (u *OrgStaffUpsert) SetBirthDate(v time.Time) *OrgStaffUpsert {
	u.Set(orgstaff.FieldBirthDate, v)
	return u
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateBirthDate() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldBirthDate)
	return u
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *OrgStaffUpsert) ClearBirthDate() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldBirthDate)
	return u
}

// SetIdenNo sets the "iden_no" field.
func (u *OrgStaffUpsert) SetIdenNo(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldIdenNo, v)
	return u
}

// UpdateIdenNo sets the "iden_no" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateIdenNo() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldIdenNo)
	return u
}

// ClearIdenNo clears the value of the "iden_no" field.
func (u *OrgStaffUpsert) ClearIdenNo() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldIdenNo)
	return u
}

// SetIdenAddrID sets the "iden_addr_id" field.
func (u *OrgStaffUpsert) SetIdenAddrID(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldIdenAddrID, v)
	return u
}

// UpdateIdenAddrID sets the "iden_addr_id" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateIdenAddrID() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldIdenAddrID)
	return u
}

// ClearIdenAddrID clears the value of the "iden_addr_id" field.
func (u *OrgStaffUpsert) ClearIdenAddrID() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldIdenAddrID)
	return u
}

// SetResiAddrID sets the "resi_addr_id" field.
func (u *OrgStaffUpsert) SetResiAddrID(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldResiAddrID, v)
	return u
}

// UpdateResiAddrID sets the "resi_addr_id" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateResiAddrID() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldResiAddrID)
	return u
}

// ClearResiAddrID clears the value of the "resi_addr_id" field.
func (u *OrgStaffUpsert) ClearResiAddrID() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldResiAddrID)
	return u
}

// SetWorkerNo sets the "worker_no" field.
func (u *OrgStaffUpsert) SetWorkerNo(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldWorkerNo, v)
	return u
}

// UpdateWorkerNo sets the "worker_no" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateWorkerNo() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldWorkerNo)
	return u
}

// ClearWorkerNo clears the value of the "worker_no" field.
func (u *OrgStaffUpsert) ClearWorkerNo() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldWorkerNo)
	return u
}

// SetCubicle sets the "cubicle" field.
func (u *OrgStaffUpsert) SetCubicle(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldCubicle, v)
	return u
}

// UpdateCubicle sets the "cubicle" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateCubicle() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldCubicle)
	return u
}

// ClearCubicle clears the value of the "cubicle" field.
func (u *OrgStaffUpsert) ClearCubicle() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldCubicle)
	return u
}

// SetEntryDate sets the "entry_date" field.
func (u *OrgStaffUpsert) SetEntryDate(v time.Time) *OrgStaffUpsert {
	u.Set(orgstaff.FieldEntryDate, v)
	return u
}

// UpdateEntryDate sets the "entry_date" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateEntryDate() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldEntryDate)
	return u
}

// ClearEntryDate clears the value of the "entry_date" field.
func (u *OrgStaffUpsert) ClearEntryDate() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldEntryDate)
	return u
}

// SetRegularDate sets the "regular_date" field.
func (u *OrgStaffUpsert) SetRegularDate(v time.Time) *OrgStaffUpsert {
	u.Set(orgstaff.FieldRegularDate, v)
	return u
}

// UpdateRegularDate sets the "regular_date" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateRegularDate() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldRegularDate)
	return u
}

// ClearRegularDate clears the value of the "regular_date" field.
func (u *OrgStaffUpsert) ClearRegularDate() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldRegularDate)
	return u
}

// SetResignDate sets the "resign_date" field.
func (u *OrgStaffUpsert) SetResignDate(v time.Time) *OrgStaffUpsert {
	u.Set(orgstaff.FieldResignDate, v)
	return u
}

// UpdateResignDate sets the "resign_date" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateResignDate() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldResignDate)
	return u
}

// ClearResignDate clears the value of the "resign_date" field.
func (u *OrgStaffUpsert) ClearResignDate() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldResignDate)
	return u
}

// SetOrgID sets the "org_id" field.
func (u *OrgStaffUpsert) SetOrgID(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldOrgID, v)
	return u
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateOrgID() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldOrgID)
	return u
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgStaffUpsert) ClearOrgID() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldOrgID)
	return u
}

// SetEmpStat sets the "emp_stat" field.
func (u *OrgStaffUpsert) SetEmpStat(v int32) *OrgStaffUpsert {
	u.Set(orgstaff.FieldEmpStat, v)
	return u
}

// UpdateEmpStat sets the "emp_stat" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateEmpStat() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldEmpStat)
	return u
}

// AddEmpStat adds v to the "emp_stat" field.
func (u *OrgStaffUpsert) AddEmpStat(v int32) *OrgStaffUpsert {
	u.Add(orgstaff.FieldEmpStat, v)
	return u
}

// SetEmpstDictID sets the "empst_dict_id" field.
func (u *OrgStaffUpsert) SetEmpstDictID(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldEmpstDictID, v)
	return u
}

// UpdateEmpstDictID sets the "empst_dict_id" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateEmpstDictID() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldEmpstDictID)
	return u
}

// ClearEmpstDictID clears the value of the "empst_dict_id" field.
func (u *OrgStaffUpsert) ClearEmpstDictID() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldEmpstDictID)
	return u
}

// SetCreator sets the "creator" field.
func (u *OrgStaffUpsert) SetCreator(v string) *OrgStaffUpsert {
	u.Set(orgstaff.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgStaffUpsert) UpdateCreator() *OrgStaffUpsert {
	u.SetExcluded(orgstaff.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgStaffUpsert) ClearCreator() *OrgStaffUpsert {
	u.SetNull(orgstaff.FieldCreator)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrgStaff.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgstaff.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgStaffUpsertOne) UpdateNewValues() *OrgStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orgstaff.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orgstaff.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgStaff.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgStaffUpsertOne) Ignore() *OrgStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgStaffUpsertOne) DoNothing() *OrgStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgStaffCreate.OnConflict
// documentation for more info.
func (u *OrgStaffUpsertOne) Update(set func(*OrgStaffUpsert)) *OrgStaffUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgStaffUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgStaffUpsertOne) SetIsDel(v bool) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateIsDel() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgStaffUpsertOne) SetSort(v int32) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgStaffUpsertOne) AddSort(v int32) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateSort() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgStaffUpsertOne) SetUpdatedAt(v time.Time) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateUpdatedAt() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgStaffUpsertOne) ClearUpdatedAt() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgStaffUpsertOne) SetDeletedAt(v time.Time) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateDeletedAt() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgStaffUpsertOne) ClearDeletedAt() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgStaffUpsertOne) SetIsActive(v bool) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateIsActive() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgStaffUpsertOne) SetMemo(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateMemo() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgStaffUpsertOne) ClearMemo() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearMemo()
	})
}

// SetFirstName sets the "first_name" field.
func (u *OrgStaffUpsertOne) SetFirstName(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateFirstName() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *OrgStaffUpsertOne) ClearFirstName() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *OrgStaffUpsertOne) SetLastName(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateLastName() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *OrgStaffUpsertOne) ClearLastName() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearLastName()
	})
}

// SetMobile sets the "mobile" field.
func (u *OrgStaffUpsertOne) SetMobile(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateMobile() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *OrgStaffUpsertOne) ClearMobile() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearMobile()
	})
}

// SetGender sets the "gender" field.
func (u *OrgStaffUpsertOne) SetGender(v int32) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *OrgStaffUpsertOne) AddGender(v int32) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateGender() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *OrgStaffUpsertOne) ClearGender() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearGender()
	})
}

// SetGndrDictID sets the "gndr_dict_id" field.
func (u *OrgStaffUpsertOne) SetGndrDictID(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetGndrDictID(v)
	})
}

// UpdateGndrDictID sets the "gndr_dict_id" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateGndrDictID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateGndrDictID()
	})
}

// ClearGndrDictID clears the value of the "gndr_dict_id" field.
func (u *OrgStaffUpsertOne) ClearGndrDictID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearGndrDictID()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *OrgStaffUpsertOne) SetBirthDate(v time.Time) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateBirthDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *OrgStaffUpsertOne) ClearBirthDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearBirthDate()
	})
}

// SetIdenNo sets the "iden_no" field.
func (u *OrgStaffUpsertOne) SetIdenNo(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIdenNo(v)
	})
}

// UpdateIdenNo sets the "iden_no" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateIdenNo() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIdenNo()
	})
}

// ClearIdenNo clears the value of the "iden_no" field.
func (u *OrgStaffUpsertOne) ClearIdenNo() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearIdenNo()
	})
}

// SetIdenAddrID sets the "iden_addr_id" field.
func (u *OrgStaffUpsertOne) SetIdenAddrID(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIdenAddrID(v)
	})
}

// UpdateIdenAddrID sets the "iden_addr_id" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateIdenAddrID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIdenAddrID()
	})
}

// ClearIdenAddrID clears the value of the "iden_addr_id" field.
func (u *OrgStaffUpsertOne) ClearIdenAddrID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearIdenAddrID()
	})
}

// SetResiAddrID sets the "resi_addr_id" field.
func (u *OrgStaffUpsertOne) SetResiAddrID(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetResiAddrID(v)
	})
}

// UpdateResiAddrID sets the "resi_addr_id" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateResiAddrID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateResiAddrID()
	})
}

// ClearResiAddrID clears the value of the "resi_addr_id" field.
func (u *OrgStaffUpsertOne) ClearResiAddrID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearResiAddrID()
	})
}

// SetWorkerNo sets the "worker_no" field.
func (u *OrgStaffUpsertOne) SetWorkerNo(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetWorkerNo(v)
	})
}

// UpdateWorkerNo sets the "worker_no" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateWorkerNo() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateWorkerNo()
	})
}

// ClearWorkerNo clears the value of the "worker_no" field.
func (u *OrgStaffUpsertOne) ClearWorkerNo() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearWorkerNo()
	})
}

// SetCubicle sets the "cubicle" field.
func (u *OrgStaffUpsertOne) SetCubicle(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetCubicle(v)
	})
}

// UpdateCubicle sets the "cubicle" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateCubicle() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateCubicle()
	})
}

// ClearCubicle clears the value of the "cubicle" field.
func (u *OrgStaffUpsertOne) ClearCubicle() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearCubicle()
	})
}

// SetEntryDate sets the "entry_date" field.
func (u *OrgStaffUpsertOne) SetEntryDate(v time.Time) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetEntryDate(v)
	})
}

// UpdateEntryDate sets the "entry_date" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateEntryDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateEntryDate()
	})
}

// ClearEntryDate clears the value of the "entry_date" field.
func (u *OrgStaffUpsertOne) ClearEntryDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearEntryDate()
	})
}

// SetRegularDate sets the "regular_date" field.
func (u *OrgStaffUpsertOne) SetRegularDate(v time.Time) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetRegularDate(v)
	})
}

// UpdateRegularDate sets the "regular_date" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateRegularDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateRegularDate()
	})
}

// ClearRegularDate clears the value of the "regular_date" field.
func (u *OrgStaffUpsertOne) ClearRegularDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearRegularDate()
	})
}

// SetResignDate sets the "resign_date" field.
func (u *OrgStaffUpsertOne) SetResignDate(v time.Time) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetResignDate(v)
	})
}

// UpdateResignDate sets the "resign_date" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateResignDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateResignDate()
	})
}

// ClearResignDate clears the value of the "resign_date" field.
func (u *OrgStaffUpsertOne) ClearResignDate() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearResignDate()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgStaffUpsertOne) SetOrgID(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateOrgID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgStaffUpsertOne) ClearOrgID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearOrgID()
	})
}

// SetEmpStat sets the "emp_stat" field.
func (u *OrgStaffUpsertOne) SetEmpStat(v int32) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetEmpStat(v)
	})
}

// AddEmpStat adds v to the "emp_stat" field.
func (u *OrgStaffUpsertOne) AddEmpStat(v int32) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.AddEmpStat(v)
	})
}

// UpdateEmpStat sets the "emp_stat" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateEmpStat() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateEmpStat()
	})
}

// SetEmpstDictID sets the "empst_dict_id" field.
func (u *OrgStaffUpsertOne) SetEmpstDictID(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetEmpstDictID(v)
	})
}

// UpdateEmpstDictID sets the "empst_dict_id" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateEmpstDictID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateEmpstDictID()
	})
}

// ClearEmpstDictID clears the value of the "empst_dict_id" field.
func (u *OrgStaffUpsertOne) ClearEmpstDictID() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearEmpstDictID()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgStaffUpsertOne) SetCreator(v string) *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgStaffUpsertOne) UpdateCreator() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgStaffUpsertOne) ClearCreator() *OrgStaffUpsertOne {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgStaffUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgStaffCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgStaffUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgStaffUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OrgStaffUpsertOne.ID is not supported by MySQL driver. Use OrgStaffUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgStaffUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgStaffCreateBulk is the builder for creating many OrgStaff entities in bulk.
type OrgStaffCreateBulk struct {
	config
	builders []*OrgStaffCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgStaff entities in the database.
func (oscb *OrgStaffCreateBulk) Save(ctx context.Context) ([]*OrgStaff, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrgStaff, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgStaffMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrgStaffCreateBulk) SaveX(ctx context.Context) []*OrgStaff {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrgStaffCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrgStaffCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgStaff.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgStaffUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (oscb *OrgStaffCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgStaffUpsertBulk {
	oscb.conflict = opts
	return &OrgStaffUpsertBulk{
		create: oscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgStaff.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oscb *OrgStaffCreateBulk) OnConflictColumns(columns ...string) *OrgStaffUpsertBulk {
	oscb.conflict = append(oscb.conflict, sql.ConflictColumns(columns...))
	return &OrgStaffUpsertBulk{
		create: oscb,
	}
}

// OrgStaffUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgStaff nodes.
type OrgStaffUpsertBulk struct {
	create *OrgStaffCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgStaff.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgstaff.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgStaffUpsertBulk) UpdateNewValues() *OrgStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orgstaff.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orgstaff.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgStaff.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgStaffUpsertBulk) Ignore() *OrgStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgStaffUpsertBulk) DoNothing() *OrgStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgStaffCreateBulk.OnConflict
// documentation for more info.
func (u *OrgStaffUpsertBulk) Update(set func(*OrgStaffUpsert)) *OrgStaffUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgStaffUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgStaffUpsertBulk) SetIsDel(v bool) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateIsDel() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgStaffUpsertBulk) SetSort(v int32) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgStaffUpsertBulk) AddSort(v int32) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateSort() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgStaffUpsertBulk) SetUpdatedAt(v time.Time) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateUpdatedAt() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgStaffUpsertBulk) ClearUpdatedAt() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgStaffUpsertBulk) SetDeletedAt(v time.Time) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateDeletedAt() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgStaffUpsertBulk) ClearDeletedAt() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgStaffUpsertBulk) SetIsActive(v bool) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateIsActive() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgStaffUpsertBulk) SetMemo(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateMemo() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgStaffUpsertBulk) ClearMemo() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearMemo()
	})
}

// SetFirstName sets the "first_name" field.
func (u *OrgStaffUpsertBulk) SetFirstName(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateFirstName() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *OrgStaffUpsertBulk) ClearFirstName() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *OrgStaffUpsertBulk) SetLastName(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateLastName() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *OrgStaffUpsertBulk) ClearLastName() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearLastName()
	})
}

// SetMobile sets the "mobile" field.
func (u *OrgStaffUpsertBulk) SetMobile(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetMobile(v)
	})
}

// UpdateMobile sets the "mobile" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateMobile() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateMobile()
	})
}

// ClearMobile clears the value of the "mobile" field.
func (u *OrgStaffUpsertBulk) ClearMobile() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearMobile()
	})
}

// SetGender sets the "gender" field.
func (u *OrgStaffUpsertBulk) SetGender(v int32) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *OrgStaffUpsertBulk) AddGender(v int32) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateGender() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateGender()
	})
}

// ClearGender clears the value of the "gender" field.
func (u *OrgStaffUpsertBulk) ClearGender() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearGender()
	})
}

// SetGndrDictID sets the "gndr_dict_id" field.
func (u *OrgStaffUpsertBulk) SetGndrDictID(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetGndrDictID(v)
	})
}

// UpdateGndrDictID sets the "gndr_dict_id" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateGndrDictID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateGndrDictID()
	})
}

// ClearGndrDictID clears the value of the "gndr_dict_id" field.
func (u *OrgStaffUpsertBulk) ClearGndrDictID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearGndrDictID()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *OrgStaffUpsertBulk) SetBirthDate(v time.Time) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateBirthDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *OrgStaffUpsertBulk) ClearBirthDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearBirthDate()
	})
}

// SetIdenNo sets the "iden_no" field.
func (u *OrgStaffUpsertBulk) SetIdenNo(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIdenNo(v)
	})
}

// UpdateIdenNo sets the "iden_no" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateIdenNo() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIdenNo()
	})
}

// ClearIdenNo clears the value of the "iden_no" field.
func (u *OrgStaffUpsertBulk) ClearIdenNo() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearIdenNo()
	})
}

// SetIdenAddrID sets the "iden_addr_id" field.
func (u *OrgStaffUpsertBulk) SetIdenAddrID(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetIdenAddrID(v)
	})
}

// UpdateIdenAddrID sets the "iden_addr_id" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateIdenAddrID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateIdenAddrID()
	})
}

// ClearIdenAddrID clears the value of the "iden_addr_id" field.
func (u *OrgStaffUpsertBulk) ClearIdenAddrID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearIdenAddrID()
	})
}

// SetResiAddrID sets the "resi_addr_id" field.
func (u *OrgStaffUpsertBulk) SetResiAddrID(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetResiAddrID(v)
	})
}

// UpdateResiAddrID sets the "resi_addr_id" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateResiAddrID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateResiAddrID()
	})
}

// ClearResiAddrID clears the value of the "resi_addr_id" field.
func (u *OrgStaffUpsertBulk) ClearResiAddrID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearResiAddrID()
	})
}

// SetWorkerNo sets the "worker_no" field.
func (u *OrgStaffUpsertBulk) SetWorkerNo(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetWorkerNo(v)
	})
}

// UpdateWorkerNo sets the "worker_no" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateWorkerNo() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateWorkerNo()
	})
}

// ClearWorkerNo clears the value of the "worker_no" field.
func (u *OrgStaffUpsertBulk) ClearWorkerNo() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearWorkerNo()
	})
}

// SetCubicle sets the "cubicle" field.
func (u *OrgStaffUpsertBulk) SetCubicle(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetCubicle(v)
	})
}

// UpdateCubicle sets the "cubicle" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateCubicle() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateCubicle()
	})
}

// ClearCubicle clears the value of the "cubicle" field.
func (u *OrgStaffUpsertBulk) ClearCubicle() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearCubicle()
	})
}

// SetEntryDate sets the "entry_date" field.
func (u *OrgStaffUpsertBulk) SetEntryDate(v time.Time) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetEntryDate(v)
	})
}

// UpdateEntryDate sets the "entry_date" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateEntryDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateEntryDate()
	})
}

// ClearEntryDate clears the value of the "entry_date" field.
func (u *OrgStaffUpsertBulk) ClearEntryDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearEntryDate()
	})
}

// SetRegularDate sets the "regular_date" field.
func (u *OrgStaffUpsertBulk) SetRegularDate(v time.Time) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetRegularDate(v)
	})
}

// UpdateRegularDate sets the "regular_date" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateRegularDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateRegularDate()
	})
}

// ClearRegularDate clears the value of the "regular_date" field.
func (u *OrgStaffUpsertBulk) ClearRegularDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearRegularDate()
	})
}

// SetResignDate sets the "resign_date" field.
func (u *OrgStaffUpsertBulk) SetResignDate(v time.Time) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetResignDate(v)
	})
}

// UpdateResignDate sets the "resign_date" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateResignDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateResignDate()
	})
}

// ClearResignDate clears the value of the "resign_date" field.
func (u *OrgStaffUpsertBulk) ClearResignDate() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearResignDate()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgStaffUpsertBulk) SetOrgID(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateOrgID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgStaffUpsertBulk) ClearOrgID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearOrgID()
	})
}

// SetEmpStat sets the "emp_stat" field.
func (u *OrgStaffUpsertBulk) SetEmpStat(v int32) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetEmpStat(v)
	})
}

// AddEmpStat adds v to the "emp_stat" field.
func (u *OrgStaffUpsertBulk) AddEmpStat(v int32) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.AddEmpStat(v)
	})
}

// UpdateEmpStat sets the "emp_stat" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateEmpStat() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateEmpStat()
	})
}

// SetEmpstDictID sets the "empst_dict_id" field.
func (u *OrgStaffUpsertBulk) SetEmpstDictID(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetEmpstDictID(v)
	})
}

// UpdateEmpstDictID sets the "empst_dict_id" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateEmpstDictID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateEmpstDictID()
	})
}

// ClearEmpstDictID clears the value of the "empst_dict_id" field.
func (u *OrgStaffUpsertBulk) ClearEmpstDictID() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearEmpstDictID()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgStaffUpsertBulk) SetCreator(v string) *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgStaffUpsertBulk) UpdateCreator() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgStaffUpsertBulk) ClearCreator() *OrgStaffUpsertBulk {
	return u.Update(func(s *OrgStaffUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgStaffUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrgStaffCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrgStaffCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgStaffUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
