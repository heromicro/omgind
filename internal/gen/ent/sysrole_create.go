// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/sysrole"
)

// SysRoleCreate is the builder for creating a SysRole entity.
type SysRoleCreate struct {
	config
	mutation *SysRoleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (src *SysRoleCreate) SetIsDel(b bool) *SysRoleCreate {
	src.mutation.SetIsDel(b)
	return src
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableIsDel(b *bool) *SysRoleCreate {
	if b != nil {
		src.SetIsDel(*b)
	}
	return src
}

// SetIsActive sets the "is_active" field.
func (src *SysRoleCreate) SetIsActive(b bool) *SysRoleCreate {
	src.mutation.SetIsActive(b)
	return src
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableIsActive(b *bool) *SysRoleCreate {
	if b != nil {
		src.SetIsActive(*b)
	}
	return src
}

// SetSort sets the "sort" field.
func (src *SysRoleCreate) SetSort(i int32) *SysRoleCreate {
	src.mutation.SetSort(i)
	return src
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableSort(i *int32) *SysRoleCreate {
	if i != nil {
		src.SetSort(*i)
	}
	return src
}

// SetMemo sets the "memo" field.
func (src *SysRoleCreate) SetMemo(s string) *SysRoleCreate {
	src.mutation.SetMemo(s)
	return src
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableMemo(s *string) *SysRoleCreate {
	if s != nil {
		src.SetMemo(*s)
	}
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *SysRoleCreate) SetCreatedAt(t time.Time) *SysRoleCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableCreatedAt(t *time.Time) *SysRoleCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *SysRoleCreate) SetUpdatedAt(t time.Time) *SysRoleCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableUpdatedAt(t *time.Time) *SysRoleCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetDeletedAt sets the "deleted_at" field.
func (src *SysRoleCreate) SetDeletedAt(t time.Time) *SysRoleCreate {
	src.mutation.SetDeletedAt(t)
	return src
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableDeletedAt(t *time.Time) *SysRoleCreate {
	if t != nil {
		src.SetDeletedAt(*t)
	}
	return src
}

// SetName sets the "name" field.
func (src *SysRoleCreate) SetName(s string) *SysRoleCreate {
	src.mutation.SetName(s)
	return src
}

// SetID sets the "id" field.
func (src *SysRoleCreate) SetID(s string) *SysRoleCreate {
	src.mutation.SetID(s)
	return src
}

// SetNillableID sets the "id" field if the given value is not nil.
func (src *SysRoleCreate) SetNillableID(s *string) *SysRoleCreate {
	if s != nil {
		src.SetID(*s)
	}
	return src
}

// Mutation returns the SysRoleMutation object of the builder.
func (src *SysRoleCreate) Mutation() *SysRoleMutation {
	return src.mutation
}

// Save creates the SysRole in the database.
func (src *SysRoleCreate) Save(ctx context.Context) (*SysRole, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SysRoleCreate) SaveX(ctx context.Context) *SysRole {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SysRoleCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SysRoleCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SysRoleCreate) defaults() {
	if _, ok := src.mutation.IsDel(); !ok {
		v := sysrole.DefaultIsDel
		src.mutation.SetIsDel(v)
	}
	if _, ok := src.mutation.IsActive(); !ok {
		v := sysrole.DefaultIsActive
		src.mutation.SetIsActive(v)
	}
	if _, ok := src.mutation.Sort(); !ok {
		v := sysrole.DefaultSort
		src.mutation.SetSort(v)
	}
	if _, ok := src.mutation.Memo(); !ok {
		v := sysrole.DefaultMemo
		src.mutation.SetMemo(v)
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := sysrole.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := sysrole.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.ID(); !ok {
		v := sysrole.DefaultID()
		src.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SysRoleCreate) check() error {
	if _, ok := src.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "SysRole.is_del"`)}
	}
	if _, ok := src.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "SysRole.is_active"`)}
	}
	if _, ok := src.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "SysRole.sort"`)}
	}
	if v, ok := src.mutation.Memo(); ok {
		if err := sysrole.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysRole.memo": %w`, err)}
		}
	}
	if _, ok := src.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysRole.name"`)}
	}
	if v, ok := src.mutation.Name(); ok {
		if err := sysrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysRole.name": %w`, err)}
		}
	}
	if v, ok := src.mutation.ID(); ok {
		if err := sysrole.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SysRole.id": %w`, err)}
		}
	}
	return nil
}

func (src *SysRoleCreate) sqlSave(ctx context.Context) (*SysRole, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysRole.ID type: %T", _spec.ID.Value)
		}
	}
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SysRoleCreate) createSpec() (*SysRole, *sqlgraph.CreateSpec) {
	var (
		_node = &SysRole{config: src.config}
		_spec = sqlgraph.NewCreateSpec(sysrole.Table, sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeString))
	)
	_spec.OnConflict = src.conflict
	if id, ok := src.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := src.mutation.IsDel(); ok {
		_spec.SetField(sysrole.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := src.mutation.IsActive(); ok {
		_spec.SetField(sysrole.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := src.mutation.Sort(); ok {
		_spec.SetField(sysrole.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := src.mutation.Memo(); ok {
		_spec.SetField(sysrole.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(sysrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(sysrole.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := src.mutation.DeletedAt(); ok {
		_spec.SetField(sysrole.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := src.mutation.Name(); ok {
		_spec.SetField(sysrole.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysRole.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysRoleUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (src *SysRoleCreate) OnConflict(opts ...sql.ConflictOption) *SysRoleUpsertOne {
	src.conflict = opts
	return &SysRoleUpsertOne{
		create: src,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (src *SysRoleCreate) OnConflictColumns(columns ...string) *SysRoleUpsertOne {
	src.conflict = append(src.conflict, sql.ConflictColumns(columns...))
	return &SysRoleUpsertOne{
		create: src,
	}
}

type (
	// SysRoleUpsertOne is the builder for "upsert"-ing
	//  one SysRole node.
	SysRoleUpsertOne struct {
		create *SysRoleCreate
	}

	// SysRoleUpsert is the "OnConflict" setter.
	SysRoleUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *SysRoleUpsert) SetIsDel(v bool) *SysRoleUpsert {
	u.Set(sysrole.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysRoleUpsert) UpdateIsDel() *SysRoleUpsert {
	u.SetExcluded(sysrole.FieldIsDel)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SysRoleUpsert) SetIsActive(v bool) *SysRoleUpsert {
	u.Set(sysrole.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysRoleUpsert) UpdateIsActive() *SysRoleUpsert {
	u.SetExcluded(sysrole.FieldIsActive)
	return u
}

// SetSort sets the "sort" field.
func (u *SysRoleUpsert) SetSort(v int32) *SysRoleUpsert {
	u.Set(sysrole.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysRoleUpsert) UpdateSort() *SysRoleUpsert {
	u.SetExcluded(sysrole.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *SysRoleUpsert) AddSort(v int32) *SysRoleUpsert {
	u.Add(sysrole.FieldSort, v)
	return u
}

// SetMemo sets the "memo" field.
func (u *SysRoleUpsert) SetMemo(v string) *SysRoleUpsert {
	u.Set(sysrole.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysRoleUpsert) UpdateMemo() *SysRoleUpsert {
	u.SetExcluded(sysrole.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *SysRoleUpsert) ClearMemo() *SysRoleUpsert {
	u.SetNull(sysrole.FieldMemo)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysRoleUpsert) SetUpdatedAt(v time.Time) *SysRoleUpsert {
	u.Set(sysrole.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysRoleUpsert) UpdateUpdatedAt() *SysRoleUpsert {
	u.SetExcluded(sysrole.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysRoleUpsert) ClearUpdatedAt() *SysRoleUpsert {
	u.SetNull(sysrole.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysRoleUpsert) SetDeletedAt(v time.Time) *SysRoleUpsert {
	u.Set(sysrole.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysRoleUpsert) UpdateDeletedAt() *SysRoleUpsert {
	u.SetExcluded(sysrole.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysRoleUpsert) ClearDeletedAt() *SysRoleUpsert {
	u.SetNull(sysrole.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *SysRoleUpsert) SetName(v string) *SysRoleUpsert {
	u.Set(sysrole.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysRoleUpsert) UpdateName() *SysRoleUpsert {
	u.SetExcluded(sysrole.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysrole.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysRoleUpsertOne) UpdateNewValues() *SysRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysrole.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(sysrole.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysRole.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysRoleUpsertOne) Ignore() *SysRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysRoleUpsertOne) DoNothing() *SysRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysRoleCreate.OnConflict
// documentation for more info.
func (u *SysRoleUpsertOne) Update(set func(*SysRoleUpsert)) *SysRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysRoleUpsertOne) SetIsDel(v bool) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysRoleUpsertOne) UpdateIsDel() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateIsDel()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysRoleUpsertOne) SetIsActive(v bool) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysRoleUpsertOne) UpdateIsActive() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateIsActive()
	})
}

// SetSort sets the "sort" field.
func (u *SysRoleUpsertOne) SetSort(v int32) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysRoleUpsertOne) AddSort(v int32) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysRoleUpsertOne) UpdateSort() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateSort()
	})
}

// SetMemo sets the "memo" field.
func (u *SysRoleUpsertOne) SetMemo(v string) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysRoleUpsertOne) UpdateMemo() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysRoleUpsertOne) ClearMemo() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.ClearMemo()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysRoleUpsertOne) SetUpdatedAt(v time.Time) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysRoleUpsertOne) UpdateUpdatedAt() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysRoleUpsertOne) ClearUpdatedAt() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysRoleUpsertOne) SetDeletedAt(v time.Time) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysRoleUpsertOne) UpdateDeletedAt() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysRoleUpsertOne) ClearDeletedAt() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *SysRoleUpsertOne) SetName(v string) *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysRoleUpsertOne) UpdateName() *SysRoleUpsertOne {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SysRoleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysRoleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysRoleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysRoleUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SysRoleUpsertOne.ID is not supported by MySQL driver. Use SysRoleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysRoleUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysRoleCreateBulk is the builder for creating many SysRole entities in bulk.
type SysRoleCreateBulk struct {
	config
	builders []*SysRoleCreate
	conflict []sql.ConflictOption
}

// Save creates the SysRole entities in the database.
func (srcb *SysRoleCreateBulk) Save(ctx context.Context) ([]*SysRole, error) {
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SysRole, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SysRoleCreateBulk) SaveX(ctx context.Context) []*SysRole {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SysRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SysRoleCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysRole.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysRoleUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (srcb *SysRoleCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysRoleUpsertBulk {
	srcb.conflict = opts
	return &SysRoleUpsertBulk{
		create: srcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcb *SysRoleCreateBulk) OnConflictColumns(columns ...string) *SysRoleUpsertBulk {
	srcb.conflict = append(srcb.conflict, sql.ConflictColumns(columns...))
	return &SysRoleUpsertBulk{
		create: srcb,
	}
}

// SysRoleUpsertBulk is the builder for "upsert"-ing
// a bulk of SysRole nodes.
type SysRoleUpsertBulk struct {
	create *SysRoleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysrole.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysRoleUpsertBulk) UpdateNewValues() *SysRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysrole.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(sysrole.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysRole.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysRoleUpsertBulk) Ignore() *SysRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysRoleUpsertBulk) DoNothing() *SysRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysRoleCreateBulk.OnConflict
// documentation for more info.
func (u *SysRoleUpsertBulk) Update(set func(*SysRoleUpsert)) *SysRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysRoleUpsertBulk) SetIsDel(v bool) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysRoleUpsertBulk) UpdateIsDel() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateIsDel()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysRoleUpsertBulk) SetIsActive(v bool) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysRoleUpsertBulk) UpdateIsActive() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateIsActive()
	})
}

// SetSort sets the "sort" field.
func (u *SysRoleUpsertBulk) SetSort(v int32) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysRoleUpsertBulk) AddSort(v int32) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysRoleUpsertBulk) UpdateSort() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateSort()
	})
}

// SetMemo sets the "memo" field.
func (u *SysRoleUpsertBulk) SetMemo(v string) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysRoleUpsertBulk) UpdateMemo() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysRoleUpsertBulk) ClearMemo() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.ClearMemo()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysRoleUpsertBulk) SetUpdatedAt(v time.Time) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysRoleUpsertBulk) UpdateUpdatedAt() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysRoleUpsertBulk) ClearUpdatedAt() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysRoleUpsertBulk) SetDeletedAt(v time.Time) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysRoleUpsertBulk) UpdateDeletedAt() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysRoleUpsertBulk) ClearDeletedAt() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *SysRoleUpsertBulk) SetName(v string) *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysRoleUpsertBulk) UpdateName() *SysRoleUpsertBulk {
	return u.Update(func(s *SysRoleUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *SysRoleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysRoleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysRoleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysRoleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
