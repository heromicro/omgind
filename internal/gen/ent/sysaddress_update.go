// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysaddress"
)

// SysAddressUpdate is the builder for updating SysAddress entities.
type SysAddressUpdate struct {
	config
	hooks    []Hook
	mutation *SysAddressMutation
}

// Where appends a list predicates to the SysAddressUpdate builder.
func (sau *SysAddressUpdate) Where(ps ...predicate.SysAddress) *SysAddressUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetIsDel sets the "is_del" field.
func (sau *SysAddressUpdate) SetIsDel(b bool) *SysAddressUpdate {
	sau.mutation.SetIsDel(b)
	return sau
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableIsDel(b *bool) *SysAddressUpdate {
	if b != nil {
		sau.SetIsDel(*b)
	}
	return sau
}

// SetOwnerID sets the "owner_id" field.
func (sau *SysAddressUpdate) SetOwnerID(s string) *SysAddressUpdate {
	sau.mutation.SetOwnerID(s)
	return sau
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableOwnerID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetOwnerID(*s)
	}
	return sau
}

// ClearOwnerID clears the value of the "owner_id" field.
func (sau *SysAddressUpdate) ClearOwnerID() *SysAddressUpdate {
	sau.mutation.ClearOwnerID()
	return sau
}

// SetSort sets the "sort" field.
func (sau *SysAddressUpdate) SetSort(i int32) *SysAddressUpdate {
	sau.mutation.ResetSort()
	sau.mutation.SetSort(i)
	return sau
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableSort(i *int32) *SysAddressUpdate {
	if i != nil {
		sau.SetSort(*i)
	}
	return sau
}

// AddSort adds i to the "sort" field.
func (sau *SysAddressUpdate) AddSort(i int32) *SysAddressUpdate {
	sau.mutation.AddSort(i)
	return sau
}

// SetUpdatedAt sets the "updated_at" field.
func (sau *SysAddressUpdate) SetUpdatedAt(t time.Time) *SysAddressUpdate {
	sau.mutation.SetUpdatedAt(t)
	return sau
}

// SetDeletedAt sets the "deleted_at" field.
func (sau *SysAddressUpdate) SetDeletedAt(t time.Time) *SysAddressUpdate {
	sau.mutation.SetDeletedAt(t)
	return sau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableDeletedAt(t *time.Time) *SysAddressUpdate {
	if t != nil {
		sau.SetDeletedAt(*t)
	}
	return sau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sau *SysAddressUpdate) ClearDeletedAt() *SysAddressUpdate {
	sau.mutation.ClearDeletedAt()
	return sau
}

// SetIsActive sets the "is_active" field.
func (sau *SysAddressUpdate) SetIsActive(b bool) *SysAddressUpdate {
	sau.mutation.SetIsActive(b)
	return sau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableIsActive(b *bool) *SysAddressUpdate {
	if b != nil {
		sau.SetIsActive(*b)
	}
	return sau
}

// SetMemo sets the "memo" field.
func (sau *SysAddressUpdate) SetMemo(s string) *SysAddressUpdate {
	sau.mutation.SetMemo(s)
	return sau
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableMemo(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetMemo(*s)
	}
	return sau
}

// ClearMemo clears the value of the "memo" field.
func (sau *SysAddressUpdate) ClearMemo() *SysAddressUpdate {
	sau.mutation.ClearMemo()
	return sau
}

// SetCountry sets the "country" field.
func (sau *SysAddressUpdate) SetCountry(s string) *SysAddressUpdate {
	sau.mutation.SetCountry(s)
	return sau
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCountry(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCountry(*s)
	}
	return sau
}

// ClearCountry clears the value of the "country" field.
func (sau *SysAddressUpdate) ClearCountry() *SysAddressUpdate {
	sau.mutation.ClearCountry()
	return sau
}

// SetProvice sets the "provice" field.
func (sau *SysAddressUpdate) SetProvice(s string) *SysAddressUpdate {
	sau.mutation.SetProvice(s)
	return sau
}

// SetNillableProvice sets the "provice" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableProvice(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetProvice(*s)
	}
	return sau
}

// ClearProvice clears the value of the "provice" field.
func (sau *SysAddressUpdate) ClearProvice() *SysAddressUpdate {
	sau.mutation.ClearProvice()
	return sau
}

// SetCity sets the "city" field.
func (sau *SysAddressUpdate) SetCity(s string) *SysAddressUpdate {
	sau.mutation.SetCity(s)
	return sau
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCity(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCity(*s)
	}
	return sau
}

// ClearCity clears the value of the "city" field.
func (sau *SysAddressUpdate) ClearCity() *SysAddressUpdate {
	sau.mutation.ClearCity()
	return sau
}

// SetCounty sets the "county" field.
func (sau *SysAddressUpdate) SetCounty(s string) *SysAddressUpdate {
	sau.mutation.SetCounty(s)
	return sau
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCounty(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCounty(*s)
	}
	return sau
}

// ClearCounty clears the value of the "county" field.
func (sau *SysAddressUpdate) ClearCounty() *SysAddressUpdate {
	sau.mutation.ClearCounty()
	return sau
}

// SetCountryID sets the "country_id" field.
func (sau *SysAddressUpdate) SetCountryID(s string) *SysAddressUpdate {
	sau.mutation.SetCountryID(s)
	return sau
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCountryID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCountryID(*s)
	}
	return sau
}

// ClearCountryID clears the value of the "country_id" field.
func (sau *SysAddressUpdate) ClearCountryID() *SysAddressUpdate {
	sau.mutation.ClearCountryID()
	return sau
}

// SetProviceID sets the "provice_id" field.
func (sau *SysAddressUpdate) SetProviceID(s string) *SysAddressUpdate {
	sau.mutation.SetProviceID(s)
	return sau
}

// SetNillableProviceID sets the "provice_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableProviceID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetProviceID(*s)
	}
	return sau
}

// ClearProviceID clears the value of the "provice_id" field.
func (sau *SysAddressUpdate) ClearProviceID() *SysAddressUpdate {
	sau.mutation.ClearProviceID()
	return sau
}

// SetCityID sets the "city_id" field.
func (sau *SysAddressUpdate) SetCityID(s string) *SysAddressUpdate {
	sau.mutation.SetCityID(s)
	return sau
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCityID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCityID(*s)
	}
	return sau
}

// ClearCityID clears the value of the "city_id" field.
func (sau *SysAddressUpdate) ClearCityID() *SysAddressUpdate {
	sau.mutation.ClearCityID()
	return sau
}

// SetCountyID sets the "county_id" field.
func (sau *SysAddressUpdate) SetCountyID(s string) *SysAddressUpdate {
	sau.mutation.SetCountyID(s)
	return sau
}

// SetNillableCountyID sets the "county_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCountyID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCountyID(*s)
	}
	return sau
}

// ClearCountyID clears the value of the "county_id" field.
func (sau *SysAddressUpdate) ClearCountyID() *SysAddressUpdate {
	sau.mutation.ClearCountyID()
	return sau
}

// SetZipCode sets the "zip_code" field.
func (sau *SysAddressUpdate) SetZipCode(s string) *SysAddressUpdate {
	sau.mutation.SetZipCode(s)
	return sau
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableZipCode(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetZipCode(*s)
	}
	return sau
}

// ClearZipCode clears the value of the "zip_code" field.
func (sau *SysAddressUpdate) ClearZipCode() *SysAddressUpdate {
	sau.mutation.ClearZipCode()
	return sau
}

// SetDaddr sets the "daddr" field.
func (sau *SysAddressUpdate) SetDaddr(s string) *SysAddressUpdate {
	sau.mutation.SetDaddr(s)
	return sau
}

// SetNillableDaddr sets the "daddr" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableDaddr(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetDaddr(*s)
	}
	return sau
}

// ClearDaddr clears the value of the "daddr" field.
func (sau *SysAddressUpdate) ClearDaddr() *SysAddressUpdate {
	sau.mutation.ClearDaddr()
	return sau
}

// SetName sets the "name" field.
func (sau *SysAddressUpdate) SetName(s string) *SysAddressUpdate {
	sau.mutation.SetName(s)
	return sau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableName(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetName(*s)
	}
	return sau
}

// ClearName clears the value of the "name" field.
func (sau *SysAddressUpdate) ClearName() *SysAddressUpdate {
	sau.mutation.ClearName()
	return sau
}

// SetMobile sets the "mobile" field.
func (sau *SysAddressUpdate) SetMobile(s string) *SysAddressUpdate {
	sau.mutation.SetMobile(s)
	return sau
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableMobile(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetMobile(*s)
	}
	return sau
}

// ClearMobile clears the value of the "mobile" field.
func (sau *SysAddressUpdate) ClearMobile() *SysAddressUpdate {
	sau.mutation.ClearMobile()
	return sau
}

// SetCreator sets the "creator" field.
func (sau *SysAddressUpdate) SetCreator(s string) *SysAddressUpdate {
	sau.mutation.SetCreator(s)
	return sau
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCreator(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCreator(*s)
	}
	return sau
}

// ClearCreator clears the value of the "creator" field.
func (sau *SysAddressUpdate) ClearCreator() *SysAddressUpdate {
	sau.mutation.ClearCreator()
	return sau
}

// Mutation returns the SysAddressMutation object of the builder.
func (sau *SysAddressUpdate) Mutation() *SysAddressMutation {
	return sau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SysAddressUpdate) Save(ctx context.Context) (int, error) {
	sau.defaults()
	return withHooks[int, SysAddressMutation](ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SysAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SysAddressUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SysAddressUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SysAddressUpdate) defaults() {
	if _, ok := sau.mutation.UpdatedAt(); !ok {
		v := sysaddress.UpdateDefaultUpdatedAt()
		sau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *SysAddressUpdate) check() error {
	if v, ok := sau.mutation.OwnerID(); ok {
		if err := sysaddress.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.owner_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Memo(); ok {
		if err := sysaddress.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysAddress.memo": %w`, err)}
		}
	}
	if v, ok := sau.mutation.CountryID(); ok {
		if err := sysaddress.CountryIDValidator(v); err != nil {
			return &ValidationError{Name: "country_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.country_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.ProviceID(); ok {
		if err := sysaddress.ProviceIDValidator(v); err != nil {
			return &ValidationError{Name: "provice_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.provice_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.CityID(); ok {
		if err := sysaddress.CityIDValidator(v); err != nil {
			return &ValidationError{Name: "city_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.city_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.CountyID(); ok {
		if err := sysaddress.CountyIDValidator(v); err != nil {
			return &ValidationError{Name: "county_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.county_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.ZipCode(); ok {
		if err := sysaddress.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "SysAddress.zip_code": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Daddr(); ok {
		if err := sysaddress.DaddrValidator(v); err != nil {
			return &ValidationError{Name: "daddr", err: fmt.Errorf(`ent: validator failed for field "SysAddress.daddr": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Name(); ok {
		if err := sysaddress.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysAddress.name": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Mobile(); ok {
		if err := sysaddress.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "SysAddress.mobile": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Creator(); ok {
		if err := sysaddress.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "SysAddress.creator": %w`, err)}
		}
	}
	return nil
}

func (sau *SysAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysaddress.Table, sysaddress.Columns, sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.IsDel(); ok {
		_spec.SetField(sysaddress.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sau.mutation.OwnerID(); ok {
		_spec.SetField(sysaddress.FieldOwnerID, field.TypeString, value)
	}
	if sau.mutation.OwnerIDCleared() {
		_spec.ClearField(sysaddress.FieldOwnerID, field.TypeString)
	}
	if value, ok := sau.mutation.Sort(); ok {
		_spec.SetField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.AddedSort(); ok {
		_spec.AddField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.UpdatedAt(); ok {
		_spec.SetField(sysaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sau.mutation.DeletedAt(); ok {
		_spec.SetField(sysaddress.FieldDeletedAt, field.TypeTime, value)
	}
	if sau.mutation.DeletedAtCleared() {
		_spec.ClearField(sysaddress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sau.mutation.IsActive(); ok {
		_spec.SetField(sysaddress.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sau.mutation.Memo(); ok {
		_spec.SetField(sysaddress.FieldMemo, field.TypeString, value)
	}
	if sau.mutation.MemoCleared() {
		_spec.ClearField(sysaddress.FieldMemo, field.TypeString)
	}
	if value, ok := sau.mutation.Country(); ok {
		_spec.SetField(sysaddress.FieldCountry, field.TypeString, value)
	}
	if sau.mutation.CountryCleared() {
		_spec.ClearField(sysaddress.FieldCountry, field.TypeString)
	}
	if value, ok := sau.mutation.Provice(); ok {
		_spec.SetField(sysaddress.FieldProvice, field.TypeString, value)
	}
	if sau.mutation.ProviceCleared() {
		_spec.ClearField(sysaddress.FieldProvice, field.TypeString)
	}
	if value, ok := sau.mutation.City(); ok {
		_spec.SetField(sysaddress.FieldCity, field.TypeString, value)
	}
	if sau.mutation.CityCleared() {
		_spec.ClearField(sysaddress.FieldCity, field.TypeString)
	}
	if value, ok := sau.mutation.County(); ok {
		_spec.SetField(sysaddress.FieldCounty, field.TypeString, value)
	}
	if sau.mutation.CountyCleared() {
		_spec.ClearField(sysaddress.FieldCounty, field.TypeString)
	}
	if value, ok := sau.mutation.CountryID(); ok {
		_spec.SetField(sysaddress.FieldCountryID, field.TypeString, value)
	}
	if sau.mutation.CountryIDCleared() {
		_spec.ClearField(sysaddress.FieldCountryID, field.TypeString)
	}
	if value, ok := sau.mutation.ProviceID(); ok {
		_spec.SetField(sysaddress.FieldProviceID, field.TypeString, value)
	}
	if sau.mutation.ProviceIDCleared() {
		_spec.ClearField(sysaddress.FieldProviceID, field.TypeString)
	}
	if value, ok := sau.mutation.CityID(); ok {
		_spec.SetField(sysaddress.FieldCityID, field.TypeString, value)
	}
	if sau.mutation.CityIDCleared() {
		_spec.ClearField(sysaddress.FieldCityID, field.TypeString)
	}
	if value, ok := sau.mutation.CountyID(); ok {
		_spec.SetField(sysaddress.FieldCountyID, field.TypeString, value)
	}
	if sau.mutation.CountyIDCleared() {
		_spec.ClearField(sysaddress.FieldCountyID, field.TypeString)
	}
	if value, ok := sau.mutation.ZipCode(); ok {
		_spec.SetField(sysaddress.FieldZipCode, field.TypeString, value)
	}
	if sau.mutation.ZipCodeCleared() {
		_spec.ClearField(sysaddress.FieldZipCode, field.TypeString)
	}
	if value, ok := sau.mutation.Daddr(); ok {
		_spec.SetField(sysaddress.FieldDaddr, field.TypeString, value)
	}
	if sau.mutation.DaddrCleared() {
		_spec.ClearField(sysaddress.FieldDaddr, field.TypeString)
	}
	if value, ok := sau.mutation.Name(); ok {
		_spec.SetField(sysaddress.FieldName, field.TypeString, value)
	}
	if sau.mutation.NameCleared() {
		_spec.ClearField(sysaddress.FieldName, field.TypeString)
	}
	if value, ok := sau.mutation.Mobile(); ok {
		_spec.SetField(sysaddress.FieldMobile, field.TypeString, value)
	}
	if sau.mutation.MobileCleared() {
		_spec.ClearField(sysaddress.FieldMobile, field.TypeString)
	}
	if value, ok := sau.mutation.Creator(); ok {
		_spec.SetField(sysaddress.FieldCreator, field.TypeString, value)
	}
	if sau.mutation.CreatorCleared() {
		_spec.ClearField(sysaddress.FieldCreator, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SysAddressUpdateOne is the builder for updating a single SysAddress entity.
type SysAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SysAddressMutation
}

// SetIsDel sets the "is_del" field.
func (sauo *SysAddressUpdateOne) SetIsDel(b bool) *SysAddressUpdateOne {
	sauo.mutation.SetIsDel(b)
	return sauo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableIsDel(b *bool) *SysAddressUpdateOne {
	if b != nil {
		sauo.SetIsDel(*b)
	}
	return sauo
}

// SetOwnerID sets the "owner_id" field.
func (sauo *SysAddressUpdateOne) SetOwnerID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetOwnerID(s)
	return sauo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableOwnerID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetOwnerID(*s)
	}
	return sauo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (sauo *SysAddressUpdateOne) ClearOwnerID() *SysAddressUpdateOne {
	sauo.mutation.ClearOwnerID()
	return sauo
}

// SetSort sets the "sort" field.
func (sauo *SysAddressUpdateOne) SetSort(i int32) *SysAddressUpdateOne {
	sauo.mutation.ResetSort()
	sauo.mutation.SetSort(i)
	return sauo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableSort(i *int32) *SysAddressUpdateOne {
	if i != nil {
		sauo.SetSort(*i)
	}
	return sauo
}

// AddSort adds i to the "sort" field.
func (sauo *SysAddressUpdateOne) AddSort(i int32) *SysAddressUpdateOne {
	sauo.mutation.AddSort(i)
	return sauo
}

// SetUpdatedAt sets the "updated_at" field.
func (sauo *SysAddressUpdateOne) SetUpdatedAt(t time.Time) *SysAddressUpdateOne {
	sauo.mutation.SetUpdatedAt(t)
	return sauo
}

// SetDeletedAt sets the "deleted_at" field.
func (sauo *SysAddressUpdateOne) SetDeletedAt(t time.Time) *SysAddressUpdateOne {
	sauo.mutation.SetDeletedAt(t)
	return sauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableDeletedAt(t *time.Time) *SysAddressUpdateOne {
	if t != nil {
		sauo.SetDeletedAt(*t)
	}
	return sauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sauo *SysAddressUpdateOne) ClearDeletedAt() *SysAddressUpdateOne {
	sauo.mutation.ClearDeletedAt()
	return sauo
}

// SetIsActive sets the "is_active" field.
func (sauo *SysAddressUpdateOne) SetIsActive(b bool) *SysAddressUpdateOne {
	sauo.mutation.SetIsActive(b)
	return sauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableIsActive(b *bool) *SysAddressUpdateOne {
	if b != nil {
		sauo.SetIsActive(*b)
	}
	return sauo
}

// SetMemo sets the "memo" field.
func (sauo *SysAddressUpdateOne) SetMemo(s string) *SysAddressUpdateOne {
	sauo.mutation.SetMemo(s)
	return sauo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableMemo(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetMemo(*s)
	}
	return sauo
}

// ClearMemo clears the value of the "memo" field.
func (sauo *SysAddressUpdateOne) ClearMemo() *SysAddressUpdateOne {
	sauo.mutation.ClearMemo()
	return sauo
}

// SetCountry sets the "country" field.
func (sauo *SysAddressUpdateOne) SetCountry(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCountry(s)
	return sauo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCountry(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCountry(*s)
	}
	return sauo
}

// ClearCountry clears the value of the "country" field.
func (sauo *SysAddressUpdateOne) ClearCountry() *SysAddressUpdateOne {
	sauo.mutation.ClearCountry()
	return sauo
}

// SetProvice sets the "provice" field.
func (sauo *SysAddressUpdateOne) SetProvice(s string) *SysAddressUpdateOne {
	sauo.mutation.SetProvice(s)
	return sauo
}

// SetNillableProvice sets the "provice" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableProvice(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetProvice(*s)
	}
	return sauo
}

// ClearProvice clears the value of the "provice" field.
func (sauo *SysAddressUpdateOne) ClearProvice() *SysAddressUpdateOne {
	sauo.mutation.ClearProvice()
	return sauo
}

// SetCity sets the "city" field.
func (sauo *SysAddressUpdateOne) SetCity(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCity(s)
	return sauo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCity(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCity(*s)
	}
	return sauo
}

// ClearCity clears the value of the "city" field.
func (sauo *SysAddressUpdateOne) ClearCity() *SysAddressUpdateOne {
	sauo.mutation.ClearCity()
	return sauo
}

// SetCounty sets the "county" field.
func (sauo *SysAddressUpdateOne) SetCounty(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCounty(s)
	return sauo
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCounty(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCounty(*s)
	}
	return sauo
}

// ClearCounty clears the value of the "county" field.
func (sauo *SysAddressUpdateOne) ClearCounty() *SysAddressUpdateOne {
	sauo.mutation.ClearCounty()
	return sauo
}

// SetCountryID sets the "country_id" field.
func (sauo *SysAddressUpdateOne) SetCountryID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCountryID(s)
	return sauo
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCountryID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCountryID(*s)
	}
	return sauo
}

// ClearCountryID clears the value of the "country_id" field.
func (sauo *SysAddressUpdateOne) ClearCountryID() *SysAddressUpdateOne {
	sauo.mutation.ClearCountryID()
	return sauo
}

// SetProviceID sets the "provice_id" field.
func (sauo *SysAddressUpdateOne) SetProviceID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetProviceID(s)
	return sauo
}

// SetNillableProviceID sets the "provice_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableProviceID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetProviceID(*s)
	}
	return sauo
}

// ClearProviceID clears the value of the "provice_id" field.
func (sauo *SysAddressUpdateOne) ClearProviceID() *SysAddressUpdateOne {
	sauo.mutation.ClearProviceID()
	return sauo
}

// SetCityID sets the "city_id" field.
func (sauo *SysAddressUpdateOne) SetCityID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCityID(s)
	return sauo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCityID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCityID(*s)
	}
	return sauo
}

// ClearCityID clears the value of the "city_id" field.
func (sauo *SysAddressUpdateOne) ClearCityID() *SysAddressUpdateOne {
	sauo.mutation.ClearCityID()
	return sauo
}

// SetCountyID sets the "county_id" field.
func (sauo *SysAddressUpdateOne) SetCountyID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCountyID(s)
	return sauo
}

// SetNillableCountyID sets the "county_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCountyID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCountyID(*s)
	}
	return sauo
}

// ClearCountyID clears the value of the "county_id" field.
func (sauo *SysAddressUpdateOne) ClearCountyID() *SysAddressUpdateOne {
	sauo.mutation.ClearCountyID()
	return sauo
}

// SetZipCode sets the "zip_code" field.
func (sauo *SysAddressUpdateOne) SetZipCode(s string) *SysAddressUpdateOne {
	sauo.mutation.SetZipCode(s)
	return sauo
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableZipCode(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetZipCode(*s)
	}
	return sauo
}

// ClearZipCode clears the value of the "zip_code" field.
func (sauo *SysAddressUpdateOne) ClearZipCode() *SysAddressUpdateOne {
	sauo.mutation.ClearZipCode()
	return sauo
}

// SetDaddr sets the "daddr" field.
func (sauo *SysAddressUpdateOne) SetDaddr(s string) *SysAddressUpdateOne {
	sauo.mutation.SetDaddr(s)
	return sauo
}

// SetNillableDaddr sets the "daddr" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableDaddr(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetDaddr(*s)
	}
	return sauo
}

// ClearDaddr clears the value of the "daddr" field.
func (sauo *SysAddressUpdateOne) ClearDaddr() *SysAddressUpdateOne {
	sauo.mutation.ClearDaddr()
	return sauo
}

// SetName sets the "name" field.
func (sauo *SysAddressUpdateOne) SetName(s string) *SysAddressUpdateOne {
	sauo.mutation.SetName(s)
	return sauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableName(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetName(*s)
	}
	return sauo
}

// ClearName clears the value of the "name" field.
func (sauo *SysAddressUpdateOne) ClearName() *SysAddressUpdateOne {
	sauo.mutation.ClearName()
	return sauo
}

// SetMobile sets the "mobile" field.
func (sauo *SysAddressUpdateOne) SetMobile(s string) *SysAddressUpdateOne {
	sauo.mutation.SetMobile(s)
	return sauo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableMobile(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetMobile(*s)
	}
	return sauo
}

// ClearMobile clears the value of the "mobile" field.
func (sauo *SysAddressUpdateOne) ClearMobile() *SysAddressUpdateOne {
	sauo.mutation.ClearMobile()
	return sauo
}

// SetCreator sets the "creator" field.
func (sauo *SysAddressUpdateOne) SetCreator(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCreator(s)
	return sauo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCreator(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCreator(*s)
	}
	return sauo
}

// ClearCreator clears the value of the "creator" field.
func (sauo *SysAddressUpdateOne) ClearCreator() *SysAddressUpdateOne {
	sauo.mutation.ClearCreator()
	return sauo
}

// Mutation returns the SysAddressMutation object of the builder.
func (sauo *SysAddressUpdateOne) Mutation() *SysAddressMutation {
	return sauo.mutation
}

// Where appends a list predicates to the SysAddressUpdate builder.
func (sauo *SysAddressUpdateOne) Where(ps ...predicate.SysAddress) *SysAddressUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SysAddressUpdateOne) Select(field string, fields ...string) *SysAddressUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SysAddress entity.
func (sauo *SysAddressUpdateOne) Save(ctx context.Context) (*SysAddress, error) {
	sauo.defaults()
	return withHooks[*SysAddress, SysAddressMutation](ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SysAddressUpdateOne) SaveX(ctx context.Context) *SysAddress {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SysAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SysAddressUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SysAddressUpdateOne) defaults() {
	if _, ok := sauo.mutation.UpdatedAt(); !ok {
		v := sysaddress.UpdateDefaultUpdatedAt()
		sauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SysAddressUpdateOne) check() error {
	if v, ok := sauo.mutation.OwnerID(); ok {
		if err := sysaddress.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.owner_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Memo(); ok {
		if err := sysaddress.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysAddress.memo": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.CountryID(); ok {
		if err := sysaddress.CountryIDValidator(v); err != nil {
			return &ValidationError{Name: "country_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.country_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.ProviceID(); ok {
		if err := sysaddress.ProviceIDValidator(v); err != nil {
			return &ValidationError{Name: "provice_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.provice_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.CityID(); ok {
		if err := sysaddress.CityIDValidator(v); err != nil {
			return &ValidationError{Name: "city_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.city_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.CountyID(); ok {
		if err := sysaddress.CountyIDValidator(v); err != nil {
			return &ValidationError{Name: "county_id", err: fmt.Errorf(`ent: validator failed for field "SysAddress.county_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.ZipCode(); ok {
		if err := sysaddress.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "SysAddress.zip_code": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Daddr(); ok {
		if err := sysaddress.DaddrValidator(v); err != nil {
			return &ValidationError{Name: "daddr", err: fmt.Errorf(`ent: validator failed for field "SysAddress.daddr": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Name(); ok {
		if err := sysaddress.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysAddress.name": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Mobile(); ok {
		if err := sysaddress.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`ent: validator failed for field "SysAddress.mobile": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Creator(); ok {
		if err := sysaddress.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "SysAddress.creator": %w`, err)}
		}
	}
	return nil
}

func (sauo *SysAddressUpdateOne) sqlSave(ctx context.Context) (_node *SysAddress, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysaddress.Table, sysaddress.Columns, sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysaddress.FieldID)
		for _, f := range fields {
			if !sysaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.IsDel(); ok {
		_spec.SetField(sysaddress.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sauo.mutation.OwnerID(); ok {
		_spec.SetField(sysaddress.FieldOwnerID, field.TypeString, value)
	}
	if sauo.mutation.OwnerIDCleared() {
		_spec.ClearField(sysaddress.FieldOwnerID, field.TypeString)
	}
	if value, ok := sauo.mutation.Sort(); ok {
		_spec.SetField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.AddedSort(); ok {
		_spec.AddField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sauo.mutation.DeletedAt(); ok {
		_spec.SetField(sysaddress.FieldDeletedAt, field.TypeTime, value)
	}
	if sauo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysaddress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.IsActive(); ok {
		_spec.SetField(sysaddress.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sauo.mutation.Memo(); ok {
		_spec.SetField(sysaddress.FieldMemo, field.TypeString, value)
	}
	if sauo.mutation.MemoCleared() {
		_spec.ClearField(sysaddress.FieldMemo, field.TypeString)
	}
	if value, ok := sauo.mutation.Country(); ok {
		_spec.SetField(sysaddress.FieldCountry, field.TypeString, value)
	}
	if sauo.mutation.CountryCleared() {
		_spec.ClearField(sysaddress.FieldCountry, field.TypeString)
	}
	if value, ok := sauo.mutation.Provice(); ok {
		_spec.SetField(sysaddress.FieldProvice, field.TypeString, value)
	}
	if sauo.mutation.ProviceCleared() {
		_spec.ClearField(sysaddress.FieldProvice, field.TypeString)
	}
	if value, ok := sauo.mutation.City(); ok {
		_spec.SetField(sysaddress.FieldCity, field.TypeString, value)
	}
	if sauo.mutation.CityCleared() {
		_spec.ClearField(sysaddress.FieldCity, field.TypeString)
	}
	if value, ok := sauo.mutation.County(); ok {
		_spec.SetField(sysaddress.FieldCounty, field.TypeString, value)
	}
	if sauo.mutation.CountyCleared() {
		_spec.ClearField(sysaddress.FieldCounty, field.TypeString)
	}
	if value, ok := sauo.mutation.CountryID(); ok {
		_spec.SetField(sysaddress.FieldCountryID, field.TypeString, value)
	}
	if sauo.mutation.CountryIDCleared() {
		_spec.ClearField(sysaddress.FieldCountryID, field.TypeString)
	}
	if value, ok := sauo.mutation.ProviceID(); ok {
		_spec.SetField(sysaddress.FieldProviceID, field.TypeString, value)
	}
	if sauo.mutation.ProviceIDCleared() {
		_spec.ClearField(sysaddress.FieldProviceID, field.TypeString)
	}
	if value, ok := sauo.mutation.CityID(); ok {
		_spec.SetField(sysaddress.FieldCityID, field.TypeString, value)
	}
	if sauo.mutation.CityIDCleared() {
		_spec.ClearField(sysaddress.FieldCityID, field.TypeString)
	}
	if value, ok := sauo.mutation.CountyID(); ok {
		_spec.SetField(sysaddress.FieldCountyID, field.TypeString, value)
	}
	if sauo.mutation.CountyIDCleared() {
		_spec.ClearField(sysaddress.FieldCountyID, field.TypeString)
	}
	if value, ok := sauo.mutation.ZipCode(); ok {
		_spec.SetField(sysaddress.FieldZipCode, field.TypeString, value)
	}
	if sauo.mutation.ZipCodeCleared() {
		_spec.ClearField(sysaddress.FieldZipCode, field.TypeString)
	}
	if value, ok := sauo.mutation.Daddr(); ok {
		_spec.SetField(sysaddress.FieldDaddr, field.TypeString, value)
	}
	if sauo.mutation.DaddrCleared() {
		_spec.ClearField(sysaddress.FieldDaddr, field.TypeString)
	}
	if value, ok := sauo.mutation.Name(); ok {
		_spec.SetField(sysaddress.FieldName, field.TypeString, value)
	}
	if sauo.mutation.NameCleared() {
		_spec.ClearField(sysaddress.FieldName, field.TypeString)
	}
	if value, ok := sauo.mutation.Mobile(); ok {
		_spec.SetField(sysaddress.FieldMobile, field.TypeString, value)
	}
	if sauo.mutation.MobileCleared() {
		_spec.ClearField(sysaddress.FieldMobile, field.TypeString)
	}
	if value, ok := sauo.mutation.Creator(); ok {
		_spec.SetField(sysaddress.FieldCreator, field.TypeString, value)
	}
	if sauo.mutation.CreatorCleared() {
		_spec.ClearField(sysaddress.FieldCreator, field.TypeString)
	}
	_node = &SysAddress{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
