// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/orgstaff"
)

// OrgStaff is the model entity for the OrgStaff schema.
type OrgStaff struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// sort
	Sort int32 `json:"sort,omitempty" sql:"sort"`
	// organization id
	OrgID *string `json:"org_id,omitempty" sql:"org_id"`
	// create time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// update time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// delete time,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 是否活跃
	IsActive bool `json:"is_active,omitempty"`
	// memo
	Memo *string `json:"memo,omitempty" sql:"memo"`
	// 名
	FirstName *string `json:"first_name,omitempty"`
	// 姓
	LastName *string `json:"last_name,omitempty"`
	// 电话
	Mobile *string `json:"mobile,omitempty"`
	// 性别
	Gender *orgstaff.Gender `json:"gender,omitempty"`
	// 出生日期
	BirthDate *string `json:"birth_date,omitempty"`
	// 身份证号码
	IdenNo *string `json:"iden_no,omitempty"`
	// 工号
	WorkerNo *string `json:"worker_no,omitempty"`
	// 工位
	Cubicle *string `json:"cubicle,omitempty"`
	// 入职日期
	EntryDate *string `json:"entry_date,omitempty"`
	// 转正日期
	RegularDate *string `json:"regular_date,omitempty"`
	// 离职日期
	ResignDate *string `json:"resign_date,omitempty"`
	// 创建者
	Creator *string `json:"creator,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgStaff) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgstaff.FieldIsDel, orgstaff.FieldIsActive:
			values[i] = new(sql.NullBool)
		case orgstaff.FieldSort:
			values[i] = new(sql.NullInt64)
		case orgstaff.FieldID, orgstaff.FieldOrgID, orgstaff.FieldMemo, orgstaff.FieldFirstName, orgstaff.FieldLastName, orgstaff.FieldMobile, orgstaff.FieldGender, orgstaff.FieldBirthDate, orgstaff.FieldIdenNo, orgstaff.FieldWorkerNo, orgstaff.FieldCubicle, orgstaff.FieldEntryDate, orgstaff.FieldRegularDate, orgstaff.FieldResignDate, orgstaff.FieldCreator:
			values[i] = new(sql.NullString)
		case orgstaff.FieldCreatedAt, orgstaff.FieldUpdatedAt, orgstaff.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrgStaff", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgStaff fields.
func (os *OrgStaff) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgstaff.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				os.ID = value.String
			}
		case orgstaff.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				os.IsDel = value.Bool
			}
		case orgstaff.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				os.Sort = int32(value.Int64)
			}
		case orgstaff.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				os.OrgID = new(string)
				*os.OrgID = value.String
			}
		case orgstaff.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = new(time.Time)
				*os.CreatedAt = value.Time
			}
		case orgstaff.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				os.UpdatedAt = new(time.Time)
				*os.UpdatedAt = value.Time
			}
		case orgstaff.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				os.DeletedAt = new(time.Time)
				*os.DeletedAt = value.Time
			}
		case orgstaff.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				os.IsActive = value.Bool
			}
		case orgstaff.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				os.Memo = new(string)
				*os.Memo = value.String
			}
		case orgstaff.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				os.FirstName = new(string)
				*os.FirstName = value.String
			}
		case orgstaff.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				os.LastName = new(string)
				*os.LastName = value.String
			}
		case orgstaff.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				os.Mobile = new(string)
				*os.Mobile = value.String
			}
		case orgstaff.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				os.Gender = new(orgstaff.Gender)
				*os.Gender = orgstaff.Gender(value.String)
			}
		case orgstaff.FieldBirthDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				os.BirthDate = new(string)
				*os.BirthDate = value.String
			}
		case orgstaff.FieldIdenNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iden_no", values[i])
			} else if value.Valid {
				os.IdenNo = new(string)
				*os.IdenNo = value.String
			}
		case orgstaff.FieldWorkerNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field worker_no", values[i])
			} else if value.Valid {
				os.WorkerNo = new(string)
				*os.WorkerNo = value.String
			}
		case orgstaff.FieldCubicle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cubicle", values[i])
			} else if value.Valid {
				os.Cubicle = new(string)
				*os.Cubicle = value.String
			}
		case orgstaff.FieldEntryDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entry_date", values[i])
			} else if value.Valid {
				os.EntryDate = new(string)
				*os.EntryDate = value.String
			}
		case orgstaff.FieldRegularDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field regular_date", values[i])
			} else if value.Valid {
				os.RegularDate = new(string)
				*os.RegularDate = value.String
			}
		case orgstaff.FieldResignDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resign_date", values[i])
			} else if value.Valid {
				os.ResignDate = new(string)
				*os.ResignDate = value.String
			}
		case orgstaff.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				os.Creator = new(string)
				*os.Creator = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrgStaff.
// Note that you need to call OrgStaff.Unwrap() before calling this method if this OrgStaff
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrgStaff) Update() *OrgStaffUpdateOne {
	return NewOrgStaffClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OrgStaff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrgStaff) Unwrap() *OrgStaff {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrgStaff is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrgStaff) String() string {
	var builder strings.Builder
	builder.WriteString("OrgStaff(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", os.IsDel))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", os.Sort))
	builder.WriteString(", ")
	if v := os.OrgID; v != nil {
		builder.WriteString("org_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", os.IsActive))
	builder.WriteString(", ")
	if v := os.Memo; v != nil {
		builder.WriteString("memo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.FirstName; v != nil {
		builder.WriteString("first_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.LastName; v != nil {
		builder.WriteString("last_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Mobile; v != nil {
		builder.WriteString("mobile=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Gender; v != nil {
		builder.WriteString("gender=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := os.BirthDate; v != nil {
		builder.WriteString("birth_date=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.IdenNo; v != nil {
		builder.WriteString("iden_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.WorkerNo; v != nil {
		builder.WriteString("worker_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Cubicle; v != nil {
		builder.WriteString("cubicle=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.EntryDate; v != nil {
		builder.WriteString("entry_date=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.RegularDate; v != nil {
		builder.WriteString("regular_date=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.ResignDate; v != nil {
		builder.WriteString("resign_date=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Creator; v != nil {
		builder.WriteString("creator=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// OrgStaffs is a parsable slice of OrgStaff.
type OrgStaffs []*OrgStaff
