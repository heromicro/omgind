// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/ent/orgorgan"
	"github.com/heromicro/omgind/internal/gen/ent/orgstaff"
	"github.com/heromicro/omgind/internal/gen/ent/sysaddress"
)

// OrgStaff is the model entity for the OrgStaff schema.
type OrgStaff struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// sort
	Sort int32 `json:"sort,omitempty" sql:"sort"`
	// create time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// update time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// delete time,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 是否活跃
	IsActive bool `json:"is_active,omitempty"`
	// memo
	Memo *string `json:"memo,omitempty" sql:"memo"`
	// 名
	FirstName *string `json:"first_name,omitempty"`
	// 姓
	LastName *string `json:"last_name,omitempty"`
	// 电话
	Mobile *string `json:"mobile,omitempty"`
	// 性别
	Gender *int32 `json:"gender,omitempty"`
	// gender options
	GenderDictID *string `json:"gender_dict_id,omitempty"`
	// 出生日期
	BirthDate *time.Time `json:"birth_date,omitempty"`
	// 身份证号码
	IdenNo *string `json:"iden_no,omitempty"`
	// 身份证地址
	IdenAddrID *string `json:"iden_addr_id,omitempty"`
	// 现居地址
	ResiAddrID *string `json:"resi_addr_id,omitempty"`
	// 工号
	WorkerNo *string `json:"worker_no,omitempty"`
	// 工位
	Cubicle *string `json:"cubicle,omitempty"`
	// 入职日期
	EntryDate *time.Time `json:"entry_date,omitempty"`
	// 转正日期
	RegularDate *time.Time `json:"regular_date,omitempty"`
	// 离职日期
	ResignDate *time.Time `json:"resign_date,omitempty"`
	// 企业id
	OrgID *string `json:"org_id,omitempty"`
	// 在职状态
	EmpyStat int32 `json:"empy_stat,omitempty"`
	// empst_stat options
	EmpystDictID *string `json:"empyst_dict_id,omitempty"`
	// dept.id
	DeptID *string `json:"dept_id,omitempty"`
	// 创建者
	Creator *string `json:"creator,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrgStaffQuery when eager-loading is set.
	Edges OrgStaffEdges `json:"edges"`
}

// OrgStaffEdges holds the relations/edges for other nodes in the graph.
type OrgStaffEdges struct {
	// Organ holds the value of the organ edge.
	Organ *OrgOrgan `json:"organ,omitempty"`
	// IdenAddr holds the value of the iden_addr edge.
	IdenAddr *SysAddress `json:"iden_addr,omitempty"`
	// ResiAddr holds the value of the resi_addr edge.
	ResiAddr *SysAddress `json:"resi_addr,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OrganOrErr returns the Organ value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgStaffEdges) OrganOrErr() (*OrgOrgan, error) {
	if e.loadedTypes[0] {
		if e.Organ == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: orgorgan.Label}
		}
		return e.Organ, nil
	}
	return nil, &NotLoadedError{edge: "organ"}
}

// IdenAddrOrErr returns the IdenAddr value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgStaffEdges) IdenAddrOrErr() (*SysAddress, error) {
	if e.loadedTypes[1] {
		if e.IdenAddr == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sysaddress.Label}
		}
		return e.IdenAddr, nil
	}
	return nil, &NotLoadedError{edge: "iden_addr"}
}

// ResiAddrOrErr returns the ResiAddr value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrgStaffEdges) ResiAddrOrErr() (*SysAddress, error) {
	if e.loadedTypes[2] {
		if e.ResiAddr == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: sysaddress.Label}
		}
		return e.ResiAddr, nil
	}
	return nil, &NotLoadedError{edge: "resi_addr"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrgStaff) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orgstaff.FieldIsDel, orgstaff.FieldIsActive:
			values[i] = new(sql.NullBool)
		case orgstaff.FieldSort, orgstaff.FieldGender, orgstaff.FieldEmpyStat:
			values[i] = new(sql.NullInt64)
		case orgstaff.FieldID, orgstaff.FieldMemo, orgstaff.FieldFirstName, orgstaff.FieldLastName, orgstaff.FieldMobile, orgstaff.FieldGenderDictID, orgstaff.FieldIdenNo, orgstaff.FieldIdenAddrID, orgstaff.FieldResiAddrID, orgstaff.FieldWorkerNo, orgstaff.FieldCubicle, orgstaff.FieldOrgID, orgstaff.FieldEmpystDictID, orgstaff.FieldDeptID, orgstaff.FieldCreator:
			values[i] = new(sql.NullString)
		case orgstaff.FieldCreatedAt, orgstaff.FieldUpdatedAt, orgstaff.FieldDeletedAt, orgstaff.FieldBirthDate, orgstaff.FieldEntryDate, orgstaff.FieldRegularDate, orgstaff.FieldResignDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrgStaff", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrgStaff fields.
func (os *OrgStaff) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orgstaff.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				os.ID = value.String
			}
		case orgstaff.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				os.IsDel = value.Bool
			}
		case orgstaff.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				os.Sort = int32(value.Int64)
			}
		case orgstaff.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = new(time.Time)
				*os.CreatedAt = value.Time
			}
		case orgstaff.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				os.UpdatedAt = new(time.Time)
				*os.UpdatedAt = value.Time
			}
		case orgstaff.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				os.DeletedAt = new(time.Time)
				*os.DeletedAt = value.Time
			}
		case orgstaff.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				os.IsActive = value.Bool
			}
		case orgstaff.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				os.Memo = new(string)
				*os.Memo = value.String
			}
		case orgstaff.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				os.FirstName = new(string)
				*os.FirstName = value.String
			}
		case orgstaff.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				os.LastName = new(string)
				*os.LastName = value.String
			}
		case orgstaff.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				os.Mobile = new(string)
				*os.Mobile = value.String
			}
		case orgstaff.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				os.Gender = new(int32)
				*os.Gender = int32(value.Int64)
			}
		case orgstaff.FieldGenderDictID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender_dict_id", values[i])
			} else if value.Valid {
				os.GenderDictID = new(string)
				*os.GenderDictID = value.String
			}
		case orgstaff.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				os.BirthDate = new(time.Time)
				*os.BirthDate = value.Time
			}
		case orgstaff.FieldIdenNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iden_no", values[i])
			} else if value.Valid {
				os.IdenNo = new(string)
				*os.IdenNo = value.String
			}
		case orgstaff.FieldIdenAddrID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iden_addr_id", values[i])
			} else if value.Valid {
				os.IdenAddrID = new(string)
				*os.IdenAddrID = value.String
			}
		case orgstaff.FieldResiAddrID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resi_addr_id", values[i])
			} else if value.Valid {
				os.ResiAddrID = new(string)
				*os.ResiAddrID = value.String
			}
		case orgstaff.FieldWorkerNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field worker_no", values[i])
			} else if value.Valid {
				os.WorkerNo = new(string)
				*os.WorkerNo = value.String
			}
		case orgstaff.FieldCubicle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cubicle", values[i])
			} else if value.Valid {
				os.Cubicle = new(string)
				*os.Cubicle = value.String
			}
		case orgstaff.FieldEntryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field entry_date", values[i])
			} else if value.Valid {
				os.EntryDate = new(time.Time)
				*os.EntryDate = value.Time
			}
		case orgstaff.FieldRegularDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field regular_date", values[i])
			} else if value.Valid {
				os.RegularDate = new(time.Time)
				*os.RegularDate = value.Time
			}
		case orgstaff.FieldResignDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field resign_date", values[i])
			} else if value.Valid {
				os.ResignDate = new(time.Time)
				*os.ResignDate = value.Time
			}
		case orgstaff.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				os.OrgID = new(string)
				*os.OrgID = value.String
			}
		case orgstaff.FieldEmpyStat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field empy_stat", values[i])
			} else if value.Valid {
				os.EmpyStat = int32(value.Int64)
			}
		case orgstaff.FieldEmpystDictID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field empyst_dict_id", values[i])
			} else if value.Valid {
				os.EmpystDictID = new(string)
				*os.EmpystDictID = value.String
			}
		case orgstaff.FieldDeptID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dept_id", values[i])
			} else if value.Valid {
				os.DeptID = new(string)
				*os.DeptID = value.String
			}
		case orgstaff.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				os.Creator = new(string)
				*os.Creator = value.String
			}
		}
	}
	return nil
}

// QueryOrgan queries the "organ" edge of the OrgStaff entity.
func (os *OrgStaff) QueryOrgan() *OrgOrganQuery {
	return NewOrgStaffClient(os.config).QueryOrgan(os)
}

// QueryIdenAddr queries the "iden_addr" edge of the OrgStaff entity.
func (os *OrgStaff) QueryIdenAddr() *SysAddressQuery {
	return NewOrgStaffClient(os.config).QueryIdenAddr(os)
}

// QueryResiAddr queries the "resi_addr" edge of the OrgStaff entity.
func (os *OrgStaff) QueryResiAddr() *SysAddressQuery {
	return NewOrgStaffClient(os.config).QueryResiAddr(os)
}

// Update returns a builder for updating this OrgStaff.
// Note that you need to call OrgStaff.Unwrap() before calling this method if this OrgStaff
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrgStaff) Update() *OrgStaffUpdateOne {
	return NewOrgStaffClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OrgStaff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrgStaff) Unwrap() *OrgStaff {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrgStaff is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrgStaff) String() string {
	var builder strings.Builder
	builder.WriteString("OrgStaff(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", os.IsDel))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", os.Sort))
	builder.WriteString(", ")
	if v := os.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", os.IsActive))
	builder.WriteString(", ")
	if v := os.Memo; v != nil {
		builder.WriteString("memo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.FirstName; v != nil {
		builder.WriteString("first_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.LastName; v != nil {
		builder.WriteString("last_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Mobile; v != nil {
		builder.WriteString("mobile=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Gender; v != nil {
		builder.WriteString("gender=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := os.GenderDictID; v != nil {
		builder.WriteString("gender_dict_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.BirthDate; v != nil {
		builder.WriteString("birth_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.IdenNo; v != nil {
		builder.WriteString("iden_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.IdenAddrID; v != nil {
		builder.WriteString("iden_addr_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.ResiAddrID; v != nil {
		builder.WriteString("resi_addr_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.WorkerNo; v != nil {
		builder.WriteString("worker_no=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Cubicle; v != nil {
		builder.WriteString("cubicle=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.EntryDate; v != nil {
		builder.WriteString("entry_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.RegularDate; v != nil {
		builder.WriteString("regular_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.ResignDate; v != nil {
		builder.WriteString("resign_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := os.OrgID; v != nil {
		builder.WriteString("org_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("empy_stat=")
	builder.WriteString(fmt.Sprintf("%v", os.EmpyStat))
	builder.WriteString(", ")
	if v := os.EmpystDictID; v != nil {
		builder.WriteString("empyst_dict_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.DeptID; v != nil {
		builder.WriteString("dept_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := os.Creator; v != nil {
		builder.WriteString("creator=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// OrgStaffs is a parsable slice of OrgStaff.
type OrgStaffs []*OrgStaff
