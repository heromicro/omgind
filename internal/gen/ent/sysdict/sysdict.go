// Code generated by ent, DO NOT EDIT.

package sysdict

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the sysdict type in the database.
	Label = "sys_dict"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "crtd_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "uptd_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "dltd_at"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldNameCn holds the string denoting the name_cn field in the database.
	FieldNameCn = "name_cn"
	// FieldNameEn holds the string denoting the name_en field in the database.
	FieldNameEn = "name_en"
	// FieldTipe holds the string denoting the tipe field in the database.
	FieldTipe = "tipe"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeStaffGender holds the string denoting the staff_gender edge name in mutations.
	EdgeStaffGender = "staff_gender"
	// EdgeStaffEmpyst holds the string denoting the staff_empyst edge name in mutations.
	EdgeStaffEmpyst = "staff_empyst"
	// Table holds the table name of the sysdict in the database.
	Table = "sys_dicts"
	// ItemsTable is the table that holds the items relation/edge.
	ItemsTable = "sys_dict_items"
	// ItemsInverseTable is the table name for the SysDictItem entity.
	// It exists in this package in order to avoid circular dependency with the "sysdictitem" package.
	ItemsInverseTable = "sys_dict_items"
	// ItemsColumn is the table column denoting the items relation/edge.
	ItemsColumn = "dict_id"
	// StaffGenderTable is the table that holds the staff_gender relation/edge.
	StaffGenderTable = "sys_dicts"
	// StaffGenderInverseTable is the table name for the OrgStaff entity.
	// It exists in this package in order to avoid circular dependency with the "orgstaff" package.
	StaffGenderInverseTable = "org_staffs"
	// StaffGenderColumn is the table column denoting the staff_gender relation/edge.
	StaffGenderColumn = "sys_dict_staff_gender"
	// StaffEmpystTable is the table that holds the staff_empyst relation/edge.
	StaffEmpystTable = "sys_dicts"
	// StaffEmpystInverseTable is the table name for the OrgStaff entity.
	// It exists in this package in order to avoid circular dependency with the "orgstaff" package.
	StaffEmpystInverseTable = "org_staffs"
	// StaffEmpystColumn is the table column denoting the staff_empyst relation/edge.
	StaffEmpystColumn = "sys_dict_staff_empyst"
)

// Columns holds all SQL columns for sysdict fields.
var Columns = []string{
	FieldID,
	FieldIsDel,
	FieldMemo,
	FieldSort,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldIsActive,
	FieldNameCn,
	FieldNameEn,
	FieldTipe,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sys_dicts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"sys_dict_staff_gender",
	"sys_dict_staff_empyst",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsDel holds the default value on creation for the "is_del" field.
	DefaultIsDel bool
	// DefaultMemo holds the default value on creation for the "memo" field.
	DefaultMemo string
	// MemoValidator is a validator for the "memo" field. It is called by the builders before save.
	MemoValidator func(string) error
	// DefaultSort holds the default value on creation for the "sort" field.
	DefaultSort int32
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive bool
	// NameCnValidator is a validator for the "name_cn" field. It is called by the builders before save.
	NameCnValidator func(string) error
	// NameEnValidator is a validator for the "name_en" field. It is called by the builders before save.
	NameEnValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Tipe defines the type for the "tipe" enum field.
type Tipe string

// TipeInt is the default value of the Tipe enum.
const DefaultTipe = TipeInt

// Tipe values.
const (
	TipeInt    Tipe = "int"
	TipeString Tipe = "string"
)

func (t Tipe) String() string {
	return string(t)
}

// TipeValidator is a validator for the "tipe" field enum values. It is called by the builders before save.
func TipeValidator(t Tipe) error {
	switch t {
	case TipeInt, TipeString:
		return nil
	default:
		return fmt.Errorf("sysdict: invalid enum value for tipe field: %q", t)
	}
}
