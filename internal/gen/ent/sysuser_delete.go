// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/internal"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysuser"
)

// SysUserDelete is the builder for deleting a SysUser entity.
type SysUserDelete struct {
	config
	hooks    []Hook
	mutation *SysUserMutation
}

// Where appends a list predicates to the SysUserDelete builder.
func (sud *SysUserDelete) Where(ps ...predicate.SysUser) *SysUserDelete {
	sud.mutation.Where(ps...)
	return sud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sud *SysUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, SysUserMutation](ctx, sud.sqlExec, sud.mutation, sud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sud *SysUserDelete) ExecX(ctx context.Context) int {
	n, err := sud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sud *SysUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysuser.Table, sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString))
	_spec.Node.Schema = sud.schemaConfig.SysUser
	ctx = internal.NewSchemaConfigContext(ctx, sud.schemaConfig)
	if ps := sud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sud.mutation.done = true
	return affected, err
}

// SysUserDeleteOne is the builder for deleting a single SysUser entity.
type SysUserDeleteOne struct {
	sud *SysUserDelete
}

// Where appends a list predicates to the SysUserDelete builder.
func (sudo *SysUserDeleteOne) Where(ps ...predicate.SysUser) *SysUserDeleteOne {
	sudo.sud.mutation.Where(ps...)
	return sudo
}

// Exec executes the deletion query.
func (sudo *SysUserDeleteOne) Exec(ctx context.Context) error {
	n, err := sudo.sud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sudo *SysUserDeleteOne) ExecX(ctx context.Context) {
	if err := sudo.Exec(ctx); err != nil {
		panic(err)
	}
}
