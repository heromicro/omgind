// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/internal"
	"github.com/heromicro/omgind/internal/gen/ent/predicate"
	"github.com/heromicro/omgind/internal/gen/ent/sysdistrict"
)

// SysDistrictUpdate is the builder for updating SysDistrict entities.
type SysDistrictUpdate struct {
	config
	hooks     []Hook
	mutation  *SysDistrictMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysDistrictUpdate builder.
func (sdu *SysDistrictUpdate) Where(ps ...predicate.SysDistrict) *SysDistrictUpdate {
	sdu.mutation.Where(ps...)
	return sdu
}

// SetIsDel sets the "is_del" field.
func (sdu *SysDistrictUpdate) SetIsDel(b bool) *SysDistrictUpdate {
	sdu.mutation.SetIsDel(b)
	return sdu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableIsDel(b *bool) *SysDistrictUpdate {
	if b != nil {
		sdu.SetIsDel(*b)
	}
	return sdu
}

// SetSort sets the "sort" field.
func (sdu *SysDistrictUpdate) SetSort(i int32) *SysDistrictUpdate {
	sdu.mutation.ResetSort()
	sdu.mutation.SetSort(i)
	return sdu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableSort(i *int32) *SysDistrictUpdate {
	if i != nil {
		sdu.SetSort(*i)
	}
	return sdu
}

// AddSort adds i to the "sort" field.
func (sdu *SysDistrictUpdate) AddSort(i int32) *SysDistrictUpdate {
	sdu.mutation.AddSort(i)
	return sdu
}

// SetUpdatedAt sets the "updated_at" field.
func (sdu *SysDistrictUpdate) SetUpdatedAt(t time.Time) *SysDistrictUpdate {
	sdu.mutation.SetUpdatedAt(t)
	return sdu
}

// SetDeletedAt sets the "deleted_at" field.
func (sdu *SysDistrictUpdate) SetDeletedAt(t time.Time) *SysDistrictUpdate {
	sdu.mutation.SetDeletedAt(t)
	return sdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableDeletedAt(t *time.Time) *SysDistrictUpdate {
	if t != nil {
		sdu.SetDeletedAt(*t)
	}
	return sdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sdu *SysDistrictUpdate) ClearDeletedAt() *SysDistrictUpdate {
	sdu.mutation.ClearDeletedAt()
	return sdu
}

// SetIsActive sets the "is_active" field.
func (sdu *SysDistrictUpdate) SetIsActive(b bool) *SysDistrictUpdate {
	sdu.mutation.SetIsActive(b)
	return sdu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableIsActive(b *bool) *SysDistrictUpdate {
	if b != nil {
		sdu.SetIsActive(*b)
	}
	return sdu
}

// SetTreeID sets the "tree_id" field.
func (sdu *SysDistrictUpdate) SetTreeID(i int64) *SysDistrictUpdate {
	sdu.mutation.ResetTreeID()
	sdu.mutation.SetTreeID(i)
	return sdu
}

// SetNillableTreeID sets the "tree_id" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableTreeID(i *int64) *SysDistrictUpdate {
	if i != nil {
		sdu.SetTreeID(*i)
	}
	return sdu
}

// AddTreeID adds i to the "tree_id" field.
func (sdu *SysDistrictUpdate) AddTreeID(i int64) *SysDistrictUpdate {
	sdu.mutation.AddTreeID(i)
	return sdu
}

// ClearTreeID clears the value of the "tree_id" field.
func (sdu *SysDistrictUpdate) ClearTreeID() *SysDistrictUpdate {
	sdu.mutation.ClearTreeID()
	return sdu
}

// SetTreeLevel sets the "tree_level" field.
func (sdu *SysDistrictUpdate) SetTreeLevel(i int32) *SysDistrictUpdate {
	sdu.mutation.ResetTreeLevel()
	sdu.mutation.SetTreeLevel(i)
	return sdu
}

// SetNillableTreeLevel sets the "tree_level" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableTreeLevel(i *int32) *SysDistrictUpdate {
	if i != nil {
		sdu.SetTreeLevel(*i)
	}
	return sdu
}

// AddTreeLevel adds i to the "tree_level" field.
func (sdu *SysDistrictUpdate) AddTreeLevel(i int32) *SysDistrictUpdate {
	sdu.mutation.AddTreeLevel(i)
	return sdu
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (sdu *SysDistrictUpdate) ClearTreeLevel() *SysDistrictUpdate {
	sdu.mutation.ClearTreeLevel()
	return sdu
}

// SetTreeLeft sets the "tree_left" field.
func (sdu *SysDistrictUpdate) SetTreeLeft(i int64) *SysDistrictUpdate {
	sdu.mutation.ResetTreeLeft()
	sdu.mutation.SetTreeLeft(i)
	return sdu
}

// SetNillableTreeLeft sets the "tree_left" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableTreeLeft(i *int64) *SysDistrictUpdate {
	if i != nil {
		sdu.SetTreeLeft(*i)
	}
	return sdu
}

// AddTreeLeft adds i to the "tree_left" field.
func (sdu *SysDistrictUpdate) AddTreeLeft(i int64) *SysDistrictUpdate {
	sdu.mutation.AddTreeLeft(i)
	return sdu
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (sdu *SysDistrictUpdate) ClearTreeLeft() *SysDistrictUpdate {
	sdu.mutation.ClearTreeLeft()
	return sdu
}

// SetTreeRight sets the "tree_right" field.
func (sdu *SysDistrictUpdate) SetTreeRight(i int64) *SysDistrictUpdate {
	sdu.mutation.ResetTreeRight()
	sdu.mutation.SetTreeRight(i)
	return sdu
}

// SetNillableTreeRight sets the "tree_right" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableTreeRight(i *int64) *SysDistrictUpdate {
	if i != nil {
		sdu.SetTreeRight(*i)
	}
	return sdu
}

// AddTreeRight adds i to the "tree_right" field.
func (sdu *SysDistrictUpdate) AddTreeRight(i int64) *SysDistrictUpdate {
	sdu.mutation.AddTreeRight(i)
	return sdu
}

// ClearTreeRight clears the value of the "tree_right" field.
func (sdu *SysDistrictUpdate) ClearTreeRight() *SysDistrictUpdate {
	sdu.mutation.ClearTreeRight()
	return sdu
}

// SetIsLeaf sets the "is_leaf" field.
func (sdu *SysDistrictUpdate) SetIsLeaf(b bool) *SysDistrictUpdate {
	sdu.mutation.SetIsLeaf(b)
	return sdu
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableIsLeaf(b *bool) *SysDistrictUpdate {
	if b != nil {
		sdu.SetIsLeaf(*b)
	}
	return sdu
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (sdu *SysDistrictUpdate) ClearIsLeaf() *SysDistrictUpdate {
	sdu.mutation.ClearIsLeaf()
	return sdu
}

// SetTreePath sets the "tree_path" field.
func (sdu *SysDistrictUpdate) SetTreePath(s string) *SysDistrictUpdate {
	sdu.mutation.SetTreePath(s)
	return sdu
}

// SetNillableTreePath sets the "tree_path" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableTreePath(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetTreePath(*s)
	}
	return sdu
}

// ClearTreePath clears the value of the "tree_path" field.
func (sdu *SysDistrictUpdate) ClearTreePath() *SysDistrictUpdate {
	sdu.mutation.ClearTreePath()
	return sdu
}

// SetName sets the "name" field.
func (sdu *SysDistrictUpdate) SetName(s string) *SysDistrictUpdate {
	sdu.mutation.SetName(s)
	return sdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableName(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetName(*s)
	}
	return sdu
}

// ClearName clears the value of the "name" field.
func (sdu *SysDistrictUpdate) ClearName() *SysDistrictUpdate {
	sdu.mutation.ClearName()
	return sdu
}

// SetSname sets the "sname" field.
func (sdu *SysDistrictUpdate) SetSname(s string) *SysDistrictUpdate {
	sdu.mutation.SetSname(s)
	return sdu
}

// SetNillableSname sets the "sname" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableSname(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetSname(*s)
	}
	return sdu
}

// ClearSname clears the value of the "sname" field.
func (sdu *SysDistrictUpdate) ClearSname() *SysDistrictUpdate {
	sdu.mutation.ClearSname()
	return sdu
}

// SetAbbr sets the "abbr" field.
func (sdu *SysDistrictUpdate) SetAbbr(s string) *SysDistrictUpdate {
	sdu.mutation.SetAbbr(s)
	return sdu
}

// SetNillableAbbr sets the "abbr" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableAbbr(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetAbbr(*s)
	}
	return sdu
}

// ClearAbbr clears the value of the "abbr" field.
func (sdu *SysDistrictUpdate) ClearAbbr() *SysDistrictUpdate {
	sdu.mutation.ClearAbbr()
	return sdu
}

// SetStCode sets the "st_code" field.
func (sdu *SysDistrictUpdate) SetStCode(s string) *SysDistrictUpdate {
	sdu.mutation.SetStCode(s)
	return sdu
}

// SetNillableStCode sets the "st_code" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableStCode(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetStCode(*s)
	}
	return sdu
}

// ClearStCode clears the value of the "st_code" field.
func (sdu *SysDistrictUpdate) ClearStCode() *SysDistrictUpdate {
	sdu.mutation.ClearStCode()
	return sdu
}

// SetInitials sets the "initials" field.
func (sdu *SysDistrictUpdate) SetInitials(s string) *SysDistrictUpdate {
	sdu.mutation.SetInitials(s)
	return sdu
}

// SetNillableInitials sets the "initials" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableInitials(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetInitials(*s)
	}
	return sdu
}

// ClearInitials clears the value of the "initials" field.
func (sdu *SysDistrictUpdate) ClearInitials() *SysDistrictUpdate {
	sdu.mutation.ClearInitials()
	return sdu
}

// SetPinyin sets the "pinyin" field.
func (sdu *SysDistrictUpdate) SetPinyin(s string) *SysDistrictUpdate {
	sdu.mutation.SetPinyin(s)
	return sdu
}

// SetNillablePinyin sets the "pinyin" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillablePinyin(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetPinyin(*s)
	}
	return sdu
}

// ClearPinyin clears the value of the "pinyin" field.
func (sdu *SysDistrictUpdate) ClearPinyin() *SysDistrictUpdate {
	sdu.mutation.ClearPinyin()
	return sdu
}

// SetParentID sets the "parent_id" field.
func (sdu *SysDistrictUpdate) SetParentID(s string) *SysDistrictUpdate {
	sdu.mutation.SetParentID(s)
	return sdu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableParentID(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetParentID(*s)
	}
	return sdu
}

// ClearParentID clears the value of the "parent_id" field.
func (sdu *SysDistrictUpdate) ClearParentID() *SysDistrictUpdate {
	sdu.mutation.ClearParentID()
	return sdu
}

// SetLongitude sets the "longitude" field.
func (sdu *SysDistrictUpdate) SetLongitude(f float64) *SysDistrictUpdate {
	sdu.mutation.ResetLongitude()
	sdu.mutation.SetLongitude(f)
	return sdu
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableLongitude(f *float64) *SysDistrictUpdate {
	if f != nil {
		sdu.SetLongitude(*f)
	}
	return sdu
}

// AddLongitude adds f to the "longitude" field.
func (sdu *SysDistrictUpdate) AddLongitude(f float64) *SysDistrictUpdate {
	sdu.mutation.AddLongitude(f)
	return sdu
}

// ClearLongitude clears the value of the "longitude" field.
func (sdu *SysDistrictUpdate) ClearLongitude() *SysDistrictUpdate {
	sdu.mutation.ClearLongitude()
	return sdu
}

// SetLatitude sets the "latitude" field.
func (sdu *SysDistrictUpdate) SetLatitude(f float64) *SysDistrictUpdate {
	sdu.mutation.ResetLatitude()
	sdu.mutation.SetLatitude(f)
	return sdu
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableLatitude(f *float64) *SysDistrictUpdate {
	if f != nil {
		sdu.SetLatitude(*f)
	}
	return sdu
}

// AddLatitude adds f to the "latitude" field.
func (sdu *SysDistrictUpdate) AddLatitude(f float64) *SysDistrictUpdate {
	sdu.mutation.AddLatitude(f)
	return sdu
}

// ClearLatitude clears the value of the "latitude" field.
func (sdu *SysDistrictUpdate) ClearLatitude() *SysDistrictUpdate {
	sdu.mutation.ClearLatitude()
	return sdu
}

// SetAreaCode sets the "area_code" field.
func (sdu *SysDistrictUpdate) SetAreaCode(s string) *SysDistrictUpdate {
	sdu.mutation.SetAreaCode(s)
	return sdu
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableAreaCode(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetAreaCode(*s)
	}
	return sdu
}

// ClearAreaCode clears the value of the "area_code" field.
func (sdu *SysDistrictUpdate) ClearAreaCode() *SysDistrictUpdate {
	sdu.mutation.ClearAreaCode()
	return sdu
}

// SetZipCode sets the "zip_code" field.
func (sdu *SysDistrictUpdate) SetZipCode(s string) *SysDistrictUpdate {
	sdu.mutation.SetZipCode(s)
	return sdu
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableZipCode(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetZipCode(*s)
	}
	return sdu
}

// ClearZipCode clears the value of the "zip_code" field.
func (sdu *SysDistrictUpdate) ClearZipCode() *SysDistrictUpdate {
	sdu.mutation.ClearZipCode()
	return sdu
}

// SetMergeName sets the "merge_name" field.
func (sdu *SysDistrictUpdate) SetMergeName(s string) *SysDistrictUpdate {
	sdu.mutation.SetMergeName(s)
	return sdu
}

// SetNillableMergeName sets the "merge_name" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableMergeName(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetMergeName(*s)
	}
	return sdu
}

// ClearMergeName clears the value of the "merge_name" field.
func (sdu *SysDistrictUpdate) ClearMergeName() *SysDistrictUpdate {
	sdu.mutation.ClearMergeName()
	return sdu
}

// SetMergeSname sets the "merge_sname" field.
func (sdu *SysDistrictUpdate) SetMergeSname(s string) *SysDistrictUpdate {
	sdu.mutation.SetMergeSname(s)
	return sdu
}

// SetNillableMergeSname sets the "merge_sname" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableMergeSname(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetMergeSname(*s)
	}
	return sdu
}

// ClearMergeSname clears the value of the "merge_sname" field.
func (sdu *SysDistrictUpdate) ClearMergeSname() *SysDistrictUpdate {
	sdu.mutation.ClearMergeSname()
	return sdu
}

// SetExtra sets the "extra" field.
func (sdu *SysDistrictUpdate) SetExtra(s string) *SysDistrictUpdate {
	sdu.mutation.SetExtra(s)
	return sdu
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableExtra(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetExtra(*s)
	}
	return sdu
}

// ClearExtra clears the value of the "extra" field.
func (sdu *SysDistrictUpdate) ClearExtra() *SysDistrictUpdate {
	sdu.mutation.ClearExtra()
	return sdu
}

// SetSuffix sets the "suffix" field.
func (sdu *SysDistrictUpdate) SetSuffix(s string) *SysDistrictUpdate {
	sdu.mutation.SetSuffix(s)
	return sdu
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableSuffix(s *string) *SysDistrictUpdate {
	if s != nil {
		sdu.SetSuffix(*s)
	}
	return sdu
}

// ClearSuffix clears the value of the "suffix" field.
func (sdu *SysDistrictUpdate) ClearSuffix() *SysDistrictUpdate {
	sdu.mutation.ClearSuffix()
	return sdu
}

// SetIsHot sets the "is_hot" field.
func (sdu *SysDistrictUpdate) SetIsHot(b bool) *SysDistrictUpdate {
	sdu.mutation.SetIsHot(b)
	return sdu
}

// SetNillableIsHot sets the "is_hot" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableIsHot(b *bool) *SysDistrictUpdate {
	if b != nil {
		sdu.SetIsHot(*b)
	}
	return sdu
}

// ClearIsHot clears the value of the "is_hot" field.
func (sdu *SysDistrictUpdate) ClearIsHot() *SysDistrictUpdate {
	sdu.mutation.ClearIsHot()
	return sdu
}

// SetIsReal sets the "is_real" field.
func (sdu *SysDistrictUpdate) SetIsReal(b bool) *SysDistrictUpdate {
	sdu.mutation.SetIsReal(b)
	return sdu
}

// SetNillableIsReal sets the "is_real" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableIsReal(b *bool) *SysDistrictUpdate {
	if b != nil {
		sdu.SetIsReal(*b)
	}
	return sdu
}

// ClearIsReal clears the value of the "is_real" field.
func (sdu *SysDistrictUpdate) ClearIsReal() *SysDistrictUpdate {
	sdu.mutation.ClearIsReal()
	return sdu
}

// SetIsMain sets the "is_main" field.
func (sdu *SysDistrictUpdate) SetIsMain(b bool) *SysDistrictUpdate {
	sdu.mutation.SetIsMain(b)
	return sdu
}

// SetNillableIsMain sets the "is_main" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableIsMain(b *bool) *SysDistrictUpdate {
	if b != nil {
		sdu.SetIsMain(*b)
	}
	return sdu
}

// ClearIsMain clears the value of the "is_main" field.
func (sdu *SysDistrictUpdate) ClearIsMain() *SysDistrictUpdate {
	sdu.mutation.ClearIsMain()
	return sdu
}

// SetIsDirect sets the "is_direct" field.
func (sdu *SysDistrictUpdate) SetIsDirect(b bool) *SysDistrictUpdate {
	sdu.mutation.SetIsDirect(b)
	return sdu
}

// SetNillableIsDirect sets the "is_direct" field if the given value is not nil.
func (sdu *SysDistrictUpdate) SetNillableIsDirect(b *bool) *SysDistrictUpdate {
	if b != nil {
		sdu.SetIsDirect(*b)
	}
	return sdu
}

// ClearIsDirect clears the value of the "is_direct" field.
func (sdu *SysDistrictUpdate) ClearIsDirect() *SysDistrictUpdate {
	sdu.mutation.ClearIsDirect()
	return sdu
}

// SetCreator sets the "creator" field.
func (sdu *SysDistrictUpdate) SetCreator(s string) *SysDistrictUpdate {
	sdu.mutation.SetCreator(s)
	return sdu
}

// SetParent sets the "parent" edge to the SysDistrict entity.
func (sdu *SysDistrictUpdate) SetParent(s *SysDistrict) *SysDistrictUpdate {
	return sdu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysDistrict entity by IDs.
func (sdu *SysDistrictUpdate) AddChildIDs(ids ...string) *SysDistrictUpdate {
	sdu.mutation.AddChildIDs(ids...)
	return sdu
}

// AddChildren adds the "children" edges to the SysDistrict entity.
func (sdu *SysDistrictUpdate) AddChildren(s ...*SysDistrict) *SysDistrictUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.AddChildIDs(ids...)
}

// Mutation returns the SysDistrictMutation object of the builder.
func (sdu *SysDistrictUpdate) Mutation() *SysDistrictMutation {
	return sdu.mutation
}

// ClearParent clears the "parent" edge to the SysDistrict entity.
func (sdu *SysDistrictUpdate) ClearParent() *SysDistrictUpdate {
	sdu.mutation.ClearParent()
	return sdu
}

// ClearChildren clears all "children" edges to the SysDistrict entity.
func (sdu *SysDistrictUpdate) ClearChildren() *SysDistrictUpdate {
	sdu.mutation.ClearChildren()
	return sdu
}

// RemoveChildIDs removes the "children" edge to SysDistrict entities by IDs.
func (sdu *SysDistrictUpdate) RemoveChildIDs(ids ...string) *SysDistrictUpdate {
	sdu.mutation.RemoveChildIDs(ids...)
	return sdu
}

// RemoveChildren removes "children" edges to SysDistrict entities.
func (sdu *SysDistrictUpdate) RemoveChildren(s ...*SysDistrict) *SysDistrictUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdu *SysDistrictUpdate) Save(ctx context.Context) (int, error) {
	sdu.defaults()
	return withHooks[int, SysDistrictMutation](ctx, sdu.sqlSave, sdu.mutation, sdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdu *SysDistrictUpdate) SaveX(ctx context.Context) int {
	affected, err := sdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdu *SysDistrictUpdate) Exec(ctx context.Context) error {
	_, err := sdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdu *SysDistrictUpdate) ExecX(ctx context.Context) {
	if err := sdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdu *SysDistrictUpdate) defaults() {
	if _, ok := sdu.mutation.UpdatedAt(); !ok {
		v := sysdistrict.UpdateDefaultUpdatedAt()
		sdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdu *SysDistrictUpdate) check() error {
	if v, ok := sdu.mutation.Name(); ok {
		if err := sysdistrict.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.name": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Sname(); ok {
		if err := sysdistrict.SnameValidator(v); err != nil {
			return &ValidationError{Name: "sname", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.sname": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Abbr(); ok {
		if err := sysdistrict.AbbrValidator(v); err != nil {
			return &ValidationError{Name: "abbr", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.abbr": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.StCode(); ok {
		if err := sysdistrict.StCodeValidator(v); err != nil {
			return &ValidationError{Name: "st_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.st_code": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Initials(); ok {
		if err := sysdistrict.InitialsValidator(v); err != nil {
			return &ValidationError{Name: "initials", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.initials": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Pinyin(); ok {
		if err := sysdistrict.PinyinValidator(v); err != nil {
			return &ValidationError{Name: "pinyin", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.pinyin": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.ParentID(); ok {
		if err := sysdistrict.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.parent_id": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.AreaCode(); ok {
		if err := sysdistrict.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.area_code": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.ZipCode(); ok {
		if err := sysdistrict.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.zip_code": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.MergeName(); ok {
		if err := sysdistrict.MergeNameValidator(v); err != nil {
			return &ValidationError{Name: "merge_name", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.merge_name": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.MergeSname(); ok {
		if err := sysdistrict.MergeSnameValidator(v); err != nil {
			return &ValidationError{Name: "merge_sname", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.merge_sname": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Extra(); ok {
		if err := sysdistrict.ExtraValidator(v); err != nil {
			return &ValidationError{Name: "extra", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.extra": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Suffix(); ok {
		if err := sysdistrict.SuffixValidator(v); err != nil {
			return &ValidationError{Name: "suffix", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.suffix": %w`, err)}
		}
	}
	if v, ok := sdu.mutation.Creator(); ok {
		if err := sysdistrict.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.creator": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sdu *SysDistrictUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysDistrictUpdate {
	sdu.modifiers = append(sdu.modifiers, modifiers...)
	return sdu
}

func (sdu *SysDistrictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysdistrict.Table, sysdistrict.Columns, sqlgraph.NewFieldSpec(sysdistrict.FieldID, field.TypeString))
	if ps := sdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdu.mutation.IsDel(); ok {
		_spec.SetField(sysdistrict.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sdu.mutation.Sort(); ok {
		_spec.SetField(sysdistrict.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sdu.mutation.AddedSort(); ok {
		_spec.AddField(sysdistrict.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sdu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdistrict.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sdu.mutation.DeletedAt(); ok {
		_spec.SetField(sysdistrict.FieldDeletedAt, field.TypeTime, value)
	}
	if sdu.mutation.DeletedAtCleared() {
		_spec.ClearField(sysdistrict.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sdu.mutation.IsActive(); ok {
		_spec.SetField(sysdistrict.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sdu.mutation.TreeID(); ok {
		_spec.SetField(sysdistrict.FieldTreeID, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedTreeID(); ok {
		_spec.AddField(sysdistrict.FieldTreeID, field.TypeInt64, value)
	}
	if sdu.mutation.TreeIDCleared() {
		_spec.ClearField(sysdistrict.FieldTreeID, field.TypeInt64)
	}
	if value, ok := sdu.mutation.TreeLevel(); ok {
		_spec.SetField(sysdistrict.FieldTreeLevel, field.TypeInt32, value)
	}
	if value, ok := sdu.mutation.AddedTreeLevel(); ok {
		_spec.AddField(sysdistrict.FieldTreeLevel, field.TypeInt32, value)
	}
	if sdu.mutation.TreeLevelCleared() {
		_spec.ClearField(sysdistrict.FieldTreeLevel, field.TypeInt32)
	}
	if value, ok := sdu.mutation.TreeLeft(); ok {
		_spec.SetField(sysdistrict.FieldTreeLeft, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedTreeLeft(); ok {
		_spec.AddField(sysdistrict.FieldTreeLeft, field.TypeInt64, value)
	}
	if sdu.mutation.TreeLeftCleared() {
		_spec.ClearField(sysdistrict.FieldTreeLeft, field.TypeInt64)
	}
	if value, ok := sdu.mutation.TreeRight(); ok {
		_spec.SetField(sysdistrict.FieldTreeRight, field.TypeInt64, value)
	}
	if value, ok := sdu.mutation.AddedTreeRight(); ok {
		_spec.AddField(sysdistrict.FieldTreeRight, field.TypeInt64, value)
	}
	if sdu.mutation.TreeRightCleared() {
		_spec.ClearField(sysdistrict.FieldTreeRight, field.TypeInt64)
	}
	if value, ok := sdu.mutation.IsLeaf(); ok {
		_spec.SetField(sysdistrict.FieldIsLeaf, field.TypeBool, value)
	}
	if sdu.mutation.IsLeafCleared() {
		_spec.ClearField(sysdistrict.FieldIsLeaf, field.TypeBool)
	}
	if value, ok := sdu.mutation.TreePath(); ok {
		_spec.SetField(sysdistrict.FieldTreePath, field.TypeString, value)
	}
	if sdu.mutation.TreePathCleared() {
		_spec.ClearField(sysdistrict.FieldTreePath, field.TypeString)
	}
	if value, ok := sdu.mutation.Name(); ok {
		_spec.SetField(sysdistrict.FieldName, field.TypeString, value)
	}
	if sdu.mutation.NameCleared() {
		_spec.ClearField(sysdistrict.FieldName, field.TypeString)
	}
	if value, ok := sdu.mutation.Sname(); ok {
		_spec.SetField(sysdistrict.FieldSname, field.TypeString, value)
	}
	if sdu.mutation.SnameCleared() {
		_spec.ClearField(sysdistrict.FieldSname, field.TypeString)
	}
	if value, ok := sdu.mutation.Abbr(); ok {
		_spec.SetField(sysdistrict.FieldAbbr, field.TypeString, value)
	}
	if sdu.mutation.AbbrCleared() {
		_spec.ClearField(sysdistrict.FieldAbbr, field.TypeString)
	}
	if value, ok := sdu.mutation.StCode(); ok {
		_spec.SetField(sysdistrict.FieldStCode, field.TypeString, value)
	}
	if sdu.mutation.StCodeCleared() {
		_spec.ClearField(sysdistrict.FieldStCode, field.TypeString)
	}
	if value, ok := sdu.mutation.Initials(); ok {
		_spec.SetField(sysdistrict.FieldInitials, field.TypeString, value)
	}
	if sdu.mutation.InitialsCleared() {
		_spec.ClearField(sysdistrict.FieldInitials, field.TypeString)
	}
	if value, ok := sdu.mutation.Pinyin(); ok {
		_spec.SetField(sysdistrict.FieldPinyin, field.TypeString, value)
	}
	if sdu.mutation.PinyinCleared() {
		_spec.ClearField(sysdistrict.FieldPinyin, field.TypeString)
	}
	if value, ok := sdu.mutation.Longitude(); ok {
		_spec.SetField(sysdistrict.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := sdu.mutation.AddedLongitude(); ok {
		_spec.AddField(sysdistrict.FieldLongitude, field.TypeFloat64, value)
	}
	if sdu.mutation.LongitudeCleared() {
		_spec.ClearField(sysdistrict.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := sdu.mutation.Latitude(); ok {
		_spec.SetField(sysdistrict.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := sdu.mutation.AddedLatitude(); ok {
		_spec.AddField(sysdistrict.FieldLatitude, field.TypeFloat64, value)
	}
	if sdu.mutation.LatitudeCleared() {
		_spec.ClearField(sysdistrict.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := sdu.mutation.AreaCode(); ok {
		_spec.SetField(sysdistrict.FieldAreaCode, field.TypeString, value)
	}
	if sdu.mutation.AreaCodeCleared() {
		_spec.ClearField(sysdistrict.FieldAreaCode, field.TypeString)
	}
	if value, ok := sdu.mutation.ZipCode(); ok {
		_spec.SetField(sysdistrict.FieldZipCode, field.TypeString, value)
	}
	if sdu.mutation.ZipCodeCleared() {
		_spec.ClearField(sysdistrict.FieldZipCode, field.TypeString)
	}
	if value, ok := sdu.mutation.MergeName(); ok {
		_spec.SetField(sysdistrict.FieldMergeName, field.TypeString, value)
	}
	if sdu.mutation.MergeNameCleared() {
		_spec.ClearField(sysdistrict.FieldMergeName, field.TypeString)
	}
	if value, ok := sdu.mutation.MergeSname(); ok {
		_spec.SetField(sysdistrict.FieldMergeSname, field.TypeString, value)
	}
	if sdu.mutation.MergeSnameCleared() {
		_spec.ClearField(sysdistrict.FieldMergeSname, field.TypeString)
	}
	if value, ok := sdu.mutation.Extra(); ok {
		_spec.SetField(sysdistrict.FieldExtra, field.TypeString, value)
	}
	if sdu.mutation.ExtraCleared() {
		_spec.ClearField(sysdistrict.FieldExtra, field.TypeString)
	}
	if value, ok := sdu.mutation.Suffix(); ok {
		_spec.SetField(sysdistrict.FieldSuffix, field.TypeString, value)
	}
	if sdu.mutation.SuffixCleared() {
		_spec.ClearField(sysdistrict.FieldSuffix, field.TypeString)
	}
	if value, ok := sdu.mutation.IsHot(); ok {
		_spec.SetField(sysdistrict.FieldIsHot, field.TypeBool, value)
	}
	if sdu.mutation.IsHotCleared() {
		_spec.ClearField(sysdistrict.FieldIsHot, field.TypeBool)
	}
	if value, ok := sdu.mutation.IsReal(); ok {
		_spec.SetField(sysdistrict.FieldIsReal, field.TypeBool, value)
	}
	if sdu.mutation.IsRealCleared() {
		_spec.ClearField(sysdistrict.FieldIsReal, field.TypeBool)
	}
	if value, ok := sdu.mutation.IsMain(); ok {
		_spec.SetField(sysdistrict.FieldIsMain, field.TypeBool, value)
	}
	if sdu.mutation.IsMainCleared() {
		_spec.ClearField(sysdistrict.FieldIsMain, field.TypeBool)
	}
	if value, ok := sdu.mutation.IsDirect(); ok {
		_spec.SetField(sysdistrict.FieldIsDirect, field.TypeBool, value)
	}
	if sdu.mutation.IsDirectCleared() {
		_spec.ClearField(sysdistrict.FieldIsDirect, field.TypeBool)
	}
	if value, ok := sdu.mutation.Creator(); ok {
		_spec.SetField(sysdistrict.FieldCreator, field.TypeString, value)
	}
	if sdu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdistrict.ParentTable,
			Columns: []string{sysdistrict.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sdu.schemaConfig.SysDistrict
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdistrict.ParentTable,
			Columns: []string{sysdistrict.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sdu.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sdu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdistrict.ChildrenTable,
			Columns: []string{sysdistrict.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sdu.schemaConfig.SysDistrict
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !sdu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdistrict.ChildrenTable,
			Columns: []string{sysdistrict.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sdu.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sdu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdistrict.ChildrenTable,
			Columns: []string{sysdistrict.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sdu.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sdu.schemaConfig.SysDistrict
	ctx = internal.NewSchemaConfigContext(ctx, sdu.schemaConfig)
	_spec.AddModifiers(sdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdistrict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdu.mutation.done = true
	return n, nil
}

// SysDistrictUpdateOne is the builder for updating a single SysDistrict entity.
type SysDistrictUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysDistrictMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsDel sets the "is_del" field.
func (sduo *SysDistrictUpdateOne) SetIsDel(b bool) *SysDistrictUpdateOne {
	sduo.mutation.SetIsDel(b)
	return sduo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableIsDel(b *bool) *SysDistrictUpdateOne {
	if b != nil {
		sduo.SetIsDel(*b)
	}
	return sduo
}

// SetSort sets the "sort" field.
func (sduo *SysDistrictUpdateOne) SetSort(i int32) *SysDistrictUpdateOne {
	sduo.mutation.ResetSort()
	sduo.mutation.SetSort(i)
	return sduo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableSort(i *int32) *SysDistrictUpdateOne {
	if i != nil {
		sduo.SetSort(*i)
	}
	return sduo
}

// AddSort adds i to the "sort" field.
func (sduo *SysDistrictUpdateOne) AddSort(i int32) *SysDistrictUpdateOne {
	sduo.mutation.AddSort(i)
	return sduo
}

// SetUpdatedAt sets the "updated_at" field.
func (sduo *SysDistrictUpdateOne) SetUpdatedAt(t time.Time) *SysDistrictUpdateOne {
	sduo.mutation.SetUpdatedAt(t)
	return sduo
}

// SetDeletedAt sets the "deleted_at" field.
func (sduo *SysDistrictUpdateOne) SetDeletedAt(t time.Time) *SysDistrictUpdateOne {
	sduo.mutation.SetDeletedAt(t)
	return sduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableDeletedAt(t *time.Time) *SysDistrictUpdateOne {
	if t != nil {
		sduo.SetDeletedAt(*t)
	}
	return sduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sduo *SysDistrictUpdateOne) ClearDeletedAt() *SysDistrictUpdateOne {
	sduo.mutation.ClearDeletedAt()
	return sduo
}

// SetIsActive sets the "is_active" field.
func (sduo *SysDistrictUpdateOne) SetIsActive(b bool) *SysDistrictUpdateOne {
	sduo.mutation.SetIsActive(b)
	return sduo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableIsActive(b *bool) *SysDistrictUpdateOne {
	if b != nil {
		sduo.SetIsActive(*b)
	}
	return sduo
}

// SetTreeID sets the "tree_id" field.
func (sduo *SysDistrictUpdateOne) SetTreeID(i int64) *SysDistrictUpdateOne {
	sduo.mutation.ResetTreeID()
	sduo.mutation.SetTreeID(i)
	return sduo
}

// SetNillableTreeID sets the "tree_id" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableTreeID(i *int64) *SysDistrictUpdateOne {
	if i != nil {
		sduo.SetTreeID(*i)
	}
	return sduo
}

// AddTreeID adds i to the "tree_id" field.
func (sduo *SysDistrictUpdateOne) AddTreeID(i int64) *SysDistrictUpdateOne {
	sduo.mutation.AddTreeID(i)
	return sduo
}

// ClearTreeID clears the value of the "tree_id" field.
func (sduo *SysDistrictUpdateOne) ClearTreeID() *SysDistrictUpdateOne {
	sduo.mutation.ClearTreeID()
	return sduo
}

// SetTreeLevel sets the "tree_level" field.
func (sduo *SysDistrictUpdateOne) SetTreeLevel(i int32) *SysDistrictUpdateOne {
	sduo.mutation.ResetTreeLevel()
	sduo.mutation.SetTreeLevel(i)
	return sduo
}

// SetNillableTreeLevel sets the "tree_level" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableTreeLevel(i *int32) *SysDistrictUpdateOne {
	if i != nil {
		sduo.SetTreeLevel(*i)
	}
	return sduo
}

// AddTreeLevel adds i to the "tree_level" field.
func (sduo *SysDistrictUpdateOne) AddTreeLevel(i int32) *SysDistrictUpdateOne {
	sduo.mutation.AddTreeLevel(i)
	return sduo
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (sduo *SysDistrictUpdateOne) ClearTreeLevel() *SysDistrictUpdateOne {
	sduo.mutation.ClearTreeLevel()
	return sduo
}

// SetTreeLeft sets the "tree_left" field.
func (sduo *SysDistrictUpdateOne) SetTreeLeft(i int64) *SysDistrictUpdateOne {
	sduo.mutation.ResetTreeLeft()
	sduo.mutation.SetTreeLeft(i)
	return sduo
}

// SetNillableTreeLeft sets the "tree_left" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableTreeLeft(i *int64) *SysDistrictUpdateOne {
	if i != nil {
		sduo.SetTreeLeft(*i)
	}
	return sduo
}

// AddTreeLeft adds i to the "tree_left" field.
func (sduo *SysDistrictUpdateOne) AddTreeLeft(i int64) *SysDistrictUpdateOne {
	sduo.mutation.AddTreeLeft(i)
	return sduo
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (sduo *SysDistrictUpdateOne) ClearTreeLeft() *SysDistrictUpdateOne {
	sduo.mutation.ClearTreeLeft()
	return sduo
}

// SetTreeRight sets the "tree_right" field.
func (sduo *SysDistrictUpdateOne) SetTreeRight(i int64) *SysDistrictUpdateOne {
	sduo.mutation.ResetTreeRight()
	sduo.mutation.SetTreeRight(i)
	return sduo
}

// SetNillableTreeRight sets the "tree_right" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableTreeRight(i *int64) *SysDistrictUpdateOne {
	if i != nil {
		sduo.SetTreeRight(*i)
	}
	return sduo
}

// AddTreeRight adds i to the "tree_right" field.
func (sduo *SysDistrictUpdateOne) AddTreeRight(i int64) *SysDistrictUpdateOne {
	sduo.mutation.AddTreeRight(i)
	return sduo
}

// ClearTreeRight clears the value of the "tree_right" field.
func (sduo *SysDistrictUpdateOne) ClearTreeRight() *SysDistrictUpdateOne {
	sduo.mutation.ClearTreeRight()
	return sduo
}

// SetIsLeaf sets the "is_leaf" field.
func (sduo *SysDistrictUpdateOne) SetIsLeaf(b bool) *SysDistrictUpdateOne {
	sduo.mutation.SetIsLeaf(b)
	return sduo
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableIsLeaf(b *bool) *SysDistrictUpdateOne {
	if b != nil {
		sduo.SetIsLeaf(*b)
	}
	return sduo
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (sduo *SysDistrictUpdateOne) ClearIsLeaf() *SysDistrictUpdateOne {
	sduo.mutation.ClearIsLeaf()
	return sduo
}

// SetTreePath sets the "tree_path" field.
func (sduo *SysDistrictUpdateOne) SetTreePath(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetTreePath(s)
	return sduo
}

// SetNillableTreePath sets the "tree_path" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableTreePath(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetTreePath(*s)
	}
	return sduo
}

// ClearTreePath clears the value of the "tree_path" field.
func (sduo *SysDistrictUpdateOne) ClearTreePath() *SysDistrictUpdateOne {
	sduo.mutation.ClearTreePath()
	return sduo
}

// SetName sets the "name" field.
func (sduo *SysDistrictUpdateOne) SetName(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetName(s)
	return sduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableName(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetName(*s)
	}
	return sduo
}

// ClearName clears the value of the "name" field.
func (sduo *SysDistrictUpdateOne) ClearName() *SysDistrictUpdateOne {
	sduo.mutation.ClearName()
	return sduo
}

// SetSname sets the "sname" field.
func (sduo *SysDistrictUpdateOne) SetSname(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetSname(s)
	return sduo
}

// SetNillableSname sets the "sname" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableSname(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetSname(*s)
	}
	return sduo
}

// ClearSname clears the value of the "sname" field.
func (sduo *SysDistrictUpdateOne) ClearSname() *SysDistrictUpdateOne {
	sduo.mutation.ClearSname()
	return sduo
}

// SetAbbr sets the "abbr" field.
func (sduo *SysDistrictUpdateOne) SetAbbr(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetAbbr(s)
	return sduo
}

// SetNillableAbbr sets the "abbr" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableAbbr(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetAbbr(*s)
	}
	return sduo
}

// ClearAbbr clears the value of the "abbr" field.
func (sduo *SysDistrictUpdateOne) ClearAbbr() *SysDistrictUpdateOne {
	sduo.mutation.ClearAbbr()
	return sduo
}

// SetStCode sets the "st_code" field.
func (sduo *SysDistrictUpdateOne) SetStCode(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetStCode(s)
	return sduo
}

// SetNillableStCode sets the "st_code" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableStCode(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetStCode(*s)
	}
	return sduo
}

// ClearStCode clears the value of the "st_code" field.
func (sduo *SysDistrictUpdateOne) ClearStCode() *SysDistrictUpdateOne {
	sduo.mutation.ClearStCode()
	return sduo
}

// SetInitials sets the "initials" field.
func (sduo *SysDistrictUpdateOne) SetInitials(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetInitials(s)
	return sduo
}

// SetNillableInitials sets the "initials" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableInitials(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetInitials(*s)
	}
	return sduo
}

// ClearInitials clears the value of the "initials" field.
func (sduo *SysDistrictUpdateOne) ClearInitials() *SysDistrictUpdateOne {
	sduo.mutation.ClearInitials()
	return sduo
}

// SetPinyin sets the "pinyin" field.
func (sduo *SysDistrictUpdateOne) SetPinyin(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetPinyin(s)
	return sduo
}

// SetNillablePinyin sets the "pinyin" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillablePinyin(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetPinyin(*s)
	}
	return sduo
}

// ClearPinyin clears the value of the "pinyin" field.
func (sduo *SysDistrictUpdateOne) ClearPinyin() *SysDistrictUpdateOne {
	sduo.mutation.ClearPinyin()
	return sduo
}

// SetParentID sets the "parent_id" field.
func (sduo *SysDistrictUpdateOne) SetParentID(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetParentID(s)
	return sduo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableParentID(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetParentID(*s)
	}
	return sduo
}

// ClearParentID clears the value of the "parent_id" field.
func (sduo *SysDistrictUpdateOne) ClearParentID() *SysDistrictUpdateOne {
	sduo.mutation.ClearParentID()
	return sduo
}

// SetLongitude sets the "longitude" field.
func (sduo *SysDistrictUpdateOne) SetLongitude(f float64) *SysDistrictUpdateOne {
	sduo.mutation.ResetLongitude()
	sduo.mutation.SetLongitude(f)
	return sduo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableLongitude(f *float64) *SysDistrictUpdateOne {
	if f != nil {
		sduo.SetLongitude(*f)
	}
	return sduo
}

// AddLongitude adds f to the "longitude" field.
func (sduo *SysDistrictUpdateOne) AddLongitude(f float64) *SysDistrictUpdateOne {
	sduo.mutation.AddLongitude(f)
	return sduo
}

// ClearLongitude clears the value of the "longitude" field.
func (sduo *SysDistrictUpdateOne) ClearLongitude() *SysDistrictUpdateOne {
	sduo.mutation.ClearLongitude()
	return sduo
}

// SetLatitude sets the "latitude" field.
func (sduo *SysDistrictUpdateOne) SetLatitude(f float64) *SysDistrictUpdateOne {
	sduo.mutation.ResetLatitude()
	sduo.mutation.SetLatitude(f)
	return sduo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableLatitude(f *float64) *SysDistrictUpdateOne {
	if f != nil {
		sduo.SetLatitude(*f)
	}
	return sduo
}

// AddLatitude adds f to the "latitude" field.
func (sduo *SysDistrictUpdateOne) AddLatitude(f float64) *SysDistrictUpdateOne {
	sduo.mutation.AddLatitude(f)
	return sduo
}

// ClearLatitude clears the value of the "latitude" field.
func (sduo *SysDistrictUpdateOne) ClearLatitude() *SysDistrictUpdateOne {
	sduo.mutation.ClearLatitude()
	return sduo
}

// SetAreaCode sets the "area_code" field.
func (sduo *SysDistrictUpdateOne) SetAreaCode(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetAreaCode(s)
	return sduo
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableAreaCode(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetAreaCode(*s)
	}
	return sduo
}

// ClearAreaCode clears the value of the "area_code" field.
func (sduo *SysDistrictUpdateOne) ClearAreaCode() *SysDistrictUpdateOne {
	sduo.mutation.ClearAreaCode()
	return sduo
}

// SetZipCode sets the "zip_code" field.
func (sduo *SysDistrictUpdateOne) SetZipCode(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetZipCode(s)
	return sduo
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableZipCode(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetZipCode(*s)
	}
	return sduo
}

// ClearZipCode clears the value of the "zip_code" field.
func (sduo *SysDistrictUpdateOne) ClearZipCode() *SysDistrictUpdateOne {
	sduo.mutation.ClearZipCode()
	return sduo
}

// SetMergeName sets the "merge_name" field.
func (sduo *SysDistrictUpdateOne) SetMergeName(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetMergeName(s)
	return sduo
}

// SetNillableMergeName sets the "merge_name" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableMergeName(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetMergeName(*s)
	}
	return sduo
}

// ClearMergeName clears the value of the "merge_name" field.
func (sduo *SysDistrictUpdateOne) ClearMergeName() *SysDistrictUpdateOne {
	sduo.mutation.ClearMergeName()
	return sduo
}

// SetMergeSname sets the "merge_sname" field.
func (sduo *SysDistrictUpdateOne) SetMergeSname(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetMergeSname(s)
	return sduo
}

// SetNillableMergeSname sets the "merge_sname" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableMergeSname(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetMergeSname(*s)
	}
	return sduo
}

// ClearMergeSname clears the value of the "merge_sname" field.
func (sduo *SysDistrictUpdateOne) ClearMergeSname() *SysDistrictUpdateOne {
	sduo.mutation.ClearMergeSname()
	return sduo
}

// SetExtra sets the "extra" field.
func (sduo *SysDistrictUpdateOne) SetExtra(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetExtra(s)
	return sduo
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableExtra(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetExtra(*s)
	}
	return sduo
}

// ClearExtra clears the value of the "extra" field.
func (sduo *SysDistrictUpdateOne) ClearExtra() *SysDistrictUpdateOne {
	sduo.mutation.ClearExtra()
	return sduo
}

// SetSuffix sets the "suffix" field.
func (sduo *SysDistrictUpdateOne) SetSuffix(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetSuffix(s)
	return sduo
}

// SetNillableSuffix sets the "suffix" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableSuffix(s *string) *SysDistrictUpdateOne {
	if s != nil {
		sduo.SetSuffix(*s)
	}
	return sduo
}

// ClearSuffix clears the value of the "suffix" field.
func (sduo *SysDistrictUpdateOne) ClearSuffix() *SysDistrictUpdateOne {
	sduo.mutation.ClearSuffix()
	return sduo
}

// SetIsHot sets the "is_hot" field.
func (sduo *SysDistrictUpdateOne) SetIsHot(b bool) *SysDistrictUpdateOne {
	sduo.mutation.SetIsHot(b)
	return sduo
}

// SetNillableIsHot sets the "is_hot" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableIsHot(b *bool) *SysDistrictUpdateOne {
	if b != nil {
		sduo.SetIsHot(*b)
	}
	return sduo
}

// ClearIsHot clears the value of the "is_hot" field.
func (sduo *SysDistrictUpdateOne) ClearIsHot() *SysDistrictUpdateOne {
	sduo.mutation.ClearIsHot()
	return sduo
}

// SetIsReal sets the "is_real" field.
func (sduo *SysDistrictUpdateOne) SetIsReal(b bool) *SysDistrictUpdateOne {
	sduo.mutation.SetIsReal(b)
	return sduo
}

// SetNillableIsReal sets the "is_real" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableIsReal(b *bool) *SysDistrictUpdateOne {
	if b != nil {
		sduo.SetIsReal(*b)
	}
	return sduo
}

// ClearIsReal clears the value of the "is_real" field.
func (sduo *SysDistrictUpdateOne) ClearIsReal() *SysDistrictUpdateOne {
	sduo.mutation.ClearIsReal()
	return sduo
}

// SetIsMain sets the "is_main" field.
func (sduo *SysDistrictUpdateOne) SetIsMain(b bool) *SysDistrictUpdateOne {
	sduo.mutation.SetIsMain(b)
	return sduo
}

// SetNillableIsMain sets the "is_main" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableIsMain(b *bool) *SysDistrictUpdateOne {
	if b != nil {
		sduo.SetIsMain(*b)
	}
	return sduo
}

// ClearIsMain clears the value of the "is_main" field.
func (sduo *SysDistrictUpdateOne) ClearIsMain() *SysDistrictUpdateOne {
	sduo.mutation.ClearIsMain()
	return sduo
}

// SetIsDirect sets the "is_direct" field.
func (sduo *SysDistrictUpdateOne) SetIsDirect(b bool) *SysDistrictUpdateOne {
	sduo.mutation.SetIsDirect(b)
	return sduo
}

// SetNillableIsDirect sets the "is_direct" field if the given value is not nil.
func (sduo *SysDistrictUpdateOne) SetNillableIsDirect(b *bool) *SysDistrictUpdateOne {
	if b != nil {
		sduo.SetIsDirect(*b)
	}
	return sduo
}

// ClearIsDirect clears the value of the "is_direct" field.
func (sduo *SysDistrictUpdateOne) ClearIsDirect() *SysDistrictUpdateOne {
	sduo.mutation.ClearIsDirect()
	return sduo
}

// SetCreator sets the "creator" field.
func (sduo *SysDistrictUpdateOne) SetCreator(s string) *SysDistrictUpdateOne {
	sduo.mutation.SetCreator(s)
	return sduo
}

// SetParent sets the "parent" edge to the SysDistrict entity.
func (sduo *SysDistrictUpdateOne) SetParent(s *SysDistrict) *SysDistrictUpdateOne {
	return sduo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysDistrict entity by IDs.
func (sduo *SysDistrictUpdateOne) AddChildIDs(ids ...string) *SysDistrictUpdateOne {
	sduo.mutation.AddChildIDs(ids...)
	return sduo
}

// AddChildren adds the "children" edges to the SysDistrict entity.
func (sduo *SysDistrictUpdateOne) AddChildren(s ...*SysDistrict) *SysDistrictUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.AddChildIDs(ids...)
}

// Mutation returns the SysDistrictMutation object of the builder.
func (sduo *SysDistrictUpdateOne) Mutation() *SysDistrictMutation {
	return sduo.mutation
}

// ClearParent clears the "parent" edge to the SysDistrict entity.
func (sduo *SysDistrictUpdateOne) ClearParent() *SysDistrictUpdateOne {
	sduo.mutation.ClearParent()
	return sduo
}

// ClearChildren clears all "children" edges to the SysDistrict entity.
func (sduo *SysDistrictUpdateOne) ClearChildren() *SysDistrictUpdateOne {
	sduo.mutation.ClearChildren()
	return sduo
}

// RemoveChildIDs removes the "children" edge to SysDistrict entities by IDs.
func (sduo *SysDistrictUpdateOne) RemoveChildIDs(ids ...string) *SysDistrictUpdateOne {
	sduo.mutation.RemoveChildIDs(ids...)
	return sduo
}

// RemoveChildren removes "children" edges to SysDistrict entities.
func (sduo *SysDistrictUpdateOne) RemoveChildren(s ...*SysDistrict) *SysDistrictUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sduo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the SysDistrictUpdate builder.
func (sduo *SysDistrictUpdateOne) Where(ps ...predicate.SysDistrict) *SysDistrictUpdateOne {
	sduo.mutation.Where(ps...)
	return sduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sduo *SysDistrictUpdateOne) Select(field string, fields ...string) *SysDistrictUpdateOne {
	sduo.fields = append([]string{field}, fields...)
	return sduo
}

// Save executes the query and returns the updated SysDistrict entity.
func (sduo *SysDistrictUpdateOne) Save(ctx context.Context) (*SysDistrict, error) {
	sduo.defaults()
	return withHooks[*SysDistrict, SysDistrictMutation](ctx, sduo.sqlSave, sduo.mutation, sduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sduo *SysDistrictUpdateOne) SaveX(ctx context.Context) *SysDistrict {
	node, err := sduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sduo *SysDistrictUpdateOne) Exec(ctx context.Context) error {
	_, err := sduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sduo *SysDistrictUpdateOne) ExecX(ctx context.Context) {
	if err := sduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sduo *SysDistrictUpdateOne) defaults() {
	if _, ok := sduo.mutation.UpdatedAt(); !ok {
		v := sysdistrict.UpdateDefaultUpdatedAt()
		sduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sduo *SysDistrictUpdateOne) check() error {
	if v, ok := sduo.mutation.Name(); ok {
		if err := sysdistrict.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.name": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Sname(); ok {
		if err := sysdistrict.SnameValidator(v); err != nil {
			return &ValidationError{Name: "sname", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.sname": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Abbr(); ok {
		if err := sysdistrict.AbbrValidator(v); err != nil {
			return &ValidationError{Name: "abbr", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.abbr": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.StCode(); ok {
		if err := sysdistrict.StCodeValidator(v); err != nil {
			return &ValidationError{Name: "st_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.st_code": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Initials(); ok {
		if err := sysdistrict.InitialsValidator(v); err != nil {
			return &ValidationError{Name: "initials", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.initials": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Pinyin(); ok {
		if err := sysdistrict.PinyinValidator(v); err != nil {
			return &ValidationError{Name: "pinyin", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.pinyin": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.ParentID(); ok {
		if err := sysdistrict.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.parent_id": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.AreaCode(); ok {
		if err := sysdistrict.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.area_code": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.ZipCode(); ok {
		if err := sysdistrict.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.zip_code": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.MergeName(); ok {
		if err := sysdistrict.MergeNameValidator(v); err != nil {
			return &ValidationError{Name: "merge_name", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.merge_name": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.MergeSname(); ok {
		if err := sysdistrict.MergeSnameValidator(v); err != nil {
			return &ValidationError{Name: "merge_sname", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.merge_sname": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Extra(); ok {
		if err := sysdistrict.ExtraValidator(v); err != nil {
			return &ValidationError{Name: "extra", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.extra": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Suffix(); ok {
		if err := sysdistrict.SuffixValidator(v); err != nil {
			return &ValidationError{Name: "suffix", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.suffix": %w`, err)}
		}
	}
	if v, ok := sduo.mutation.Creator(); ok {
		if err := sysdistrict.CreatorValidator(v); err != nil {
			return &ValidationError{Name: "creator", err: fmt.Errorf(`ent: validator failed for field "SysDistrict.creator": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sduo *SysDistrictUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysDistrictUpdateOne {
	sduo.modifiers = append(sduo.modifiers, modifiers...)
	return sduo
}

func (sduo *SysDistrictUpdateOne) sqlSave(ctx context.Context) (_node *SysDistrict, err error) {
	if err := sduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysdistrict.Table, sysdistrict.Columns, sqlgraph.NewFieldSpec(sysdistrict.FieldID, field.TypeString))
	id, ok := sduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SysDistrict.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysdistrict.FieldID)
		for _, f := range fields {
			if !sysdistrict.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sysdistrict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sduo.mutation.IsDel(); ok {
		_spec.SetField(sysdistrict.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sduo.mutation.Sort(); ok {
		_spec.SetField(sysdistrict.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sduo.mutation.AddedSort(); ok {
		_spec.AddField(sysdistrict.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sduo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysdistrict.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sduo.mutation.DeletedAt(); ok {
		_spec.SetField(sysdistrict.FieldDeletedAt, field.TypeTime, value)
	}
	if sduo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysdistrict.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sduo.mutation.IsActive(); ok {
		_spec.SetField(sysdistrict.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sduo.mutation.TreeID(); ok {
		_spec.SetField(sysdistrict.FieldTreeID, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedTreeID(); ok {
		_spec.AddField(sysdistrict.FieldTreeID, field.TypeInt64, value)
	}
	if sduo.mutation.TreeIDCleared() {
		_spec.ClearField(sysdistrict.FieldTreeID, field.TypeInt64)
	}
	if value, ok := sduo.mutation.TreeLevel(); ok {
		_spec.SetField(sysdistrict.FieldTreeLevel, field.TypeInt32, value)
	}
	if value, ok := sduo.mutation.AddedTreeLevel(); ok {
		_spec.AddField(sysdistrict.FieldTreeLevel, field.TypeInt32, value)
	}
	if sduo.mutation.TreeLevelCleared() {
		_spec.ClearField(sysdistrict.FieldTreeLevel, field.TypeInt32)
	}
	if value, ok := sduo.mutation.TreeLeft(); ok {
		_spec.SetField(sysdistrict.FieldTreeLeft, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedTreeLeft(); ok {
		_spec.AddField(sysdistrict.FieldTreeLeft, field.TypeInt64, value)
	}
	if sduo.mutation.TreeLeftCleared() {
		_spec.ClearField(sysdistrict.FieldTreeLeft, field.TypeInt64)
	}
	if value, ok := sduo.mutation.TreeRight(); ok {
		_spec.SetField(sysdistrict.FieldTreeRight, field.TypeInt64, value)
	}
	if value, ok := sduo.mutation.AddedTreeRight(); ok {
		_spec.AddField(sysdistrict.FieldTreeRight, field.TypeInt64, value)
	}
	if sduo.mutation.TreeRightCleared() {
		_spec.ClearField(sysdistrict.FieldTreeRight, field.TypeInt64)
	}
	if value, ok := sduo.mutation.IsLeaf(); ok {
		_spec.SetField(sysdistrict.FieldIsLeaf, field.TypeBool, value)
	}
	if sduo.mutation.IsLeafCleared() {
		_spec.ClearField(sysdistrict.FieldIsLeaf, field.TypeBool)
	}
	if value, ok := sduo.mutation.TreePath(); ok {
		_spec.SetField(sysdistrict.FieldTreePath, field.TypeString, value)
	}
	if sduo.mutation.TreePathCleared() {
		_spec.ClearField(sysdistrict.FieldTreePath, field.TypeString)
	}
	if value, ok := sduo.mutation.Name(); ok {
		_spec.SetField(sysdistrict.FieldName, field.TypeString, value)
	}
	if sduo.mutation.NameCleared() {
		_spec.ClearField(sysdistrict.FieldName, field.TypeString)
	}
	if value, ok := sduo.mutation.Sname(); ok {
		_spec.SetField(sysdistrict.FieldSname, field.TypeString, value)
	}
	if sduo.mutation.SnameCleared() {
		_spec.ClearField(sysdistrict.FieldSname, field.TypeString)
	}
	if value, ok := sduo.mutation.Abbr(); ok {
		_spec.SetField(sysdistrict.FieldAbbr, field.TypeString, value)
	}
	if sduo.mutation.AbbrCleared() {
		_spec.ClearField(sysdistrict.FieldAbbr, field.TypeString)
	}
	if value, ok := sduo.mutation.StCode(); ok {
		_spec.SetField(sysdistrict.FieldStCode, field.TypeString, value)
	}
	if sduo.mutation.StCodeCleared() {
		_spec.ClearField(sysdistrict.FieldStCode, field.TypeString)
	}
	if value, ok := sduo.mutation.Initials(); ok {
		_spec.SetField(sysdistrict.FieldInitials, field.TypeString, value)
	}
	if sduo.mutation.InitialsCleared() {
		_spec.ClearField(sysdistrict.FieldInitials, field.TypeString)
	}
	if value, ok := sduo.mutation.Pinyin(); ok {
		_spec.SetField(sysdistrict.FieldPinyin, field.TypeString, value)
	}
	if sduo.mutation.PinyinCleared() {
		_spec.ClearField(sysdistrict.FieldPinyin, field.TypeString)
	}
	if value, ok := sduo.mutation.Longitude(); ok {
		_spec.SetField(sysdistrict.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := sduo.mutation.AddedLongitude(); ok {
		_spec.AddField(sysdistrict.FieldLongitude, field.TypeFloat64, value)
	}
	if sduo.mutation.LongitudeCleared() {
		_spec.ClearField(sysdistrict.FieldLongitude, field.TypeFloat64)
	}
	if value, ok := sduo.mutation.Latitude(); ok {
		_spec.SetField(sysdistrict.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := sduo.mutation.AddedLatitude(); ok {
		_spec.AddField(sysdistrict.FieldLatitude, field.TypeFloat64, value)
	}
	if sduo.mutation.LatitudeCleared() {
		_spec.ClearField(sysdistrict.FieldLatitude, field.TypeFloat64)
	}
	if value, ok := sduo.mutation.AreaCode(); ok {
		_spec.SetField(sysdistrict.FieldAreaCode, field.TypeString, value)
	}
	if sduo.mutation.AreaCodeCleared() {
		_spec.ClearField(sysdistrict.FieldAreaCode, field.TypeString)
	}
	if value, ok := sduo.mutation.ZipCode(); ok {
		_spec.SetField(sysdistrict.FieldZipCode, field.TypeString, value)
	}
	if sduo.mutation.ZipCodeCleared() {
		_spec.ClearField(sysdistrict.FieldZipCode, field.TypeString)
	}
	if value, ok := sduo.mutation.MergeName(); ok {
		_spec.SetField(sysdistrict.FieldMergeName, field.TypeString, value)
	}
	if sduo.mutation.MergeNameCleared() {
		_spec.ClearField(sysdistrict.FieldMergeName, field.TypeString)
	}
	if value, ok := sduo.mutation.MergeSname(); ok {
		_spec.SetField(sysdistrict.FieldMergeSname, field.TypeString, value)
	}
	if sduo.mutation.MergeSnameCleared() {
		_spec.ClearField(sysdistrict.FieldMergeSname, field.TypeString)
	}
	if value, ok := sduo.mutation.Extra(); ok {
		_spec.SetField(sysdistrict.FieldExtra, field.TypeString, value)
	}
	if sduo.mutation.ExtraCleared() {
		_spec.ClearField(sysdistrict.FieldExtra, field.TypeString)
	}
	if value, ok := sduo.mutation.Suffix(); ok {
		_spec.SetField(sysdistrict.FieldSuffix, field.TypeString, value)
	}
	if sduo.mutation.SuffixCleared() {
		_spec.ClearField(sysdistrict.FieldSuffix, field.TypeString)
	}
	if value, ok := sduo.mutation.IsHot(); ok {
		_spec.SetField(sysdistrict.FieldIsHot, field.TypeBool, value)
	}
	if sduo.mutation.IsHotCleared() {
		_spec.ClearField(sysdistrict.FieldIsHot, field.TypeBool)
	}
	if value, ok := sduo.mutation.IsReal(); ok {
		_spec.SetField(sysdistrict.FieldIsReal, field.TypeBool, value)
	}
	if sduo.mutation.IsRealCleared() {
		_spec.ClearField(sysdistrict.FieldIsReal, field.TypeBool)
	}
	if value, ok := sduo.mutation.IsMain(); ok {
		_spec.SetField(sysdistrict.FieldIsMain, field.TypeBool, value)
	}
	if sduo.mutation.IsMainCleared() {
		_spec.ClearField(sysdistrict.FieldIsMain, field.TypeBool)
	}
	if value, ok := sduo.mutation.IsDirect(); ok {
		_spec.SetField(sysdistrict.FieldIsDirect, field.TypeBool, value)
	}
	if sduo.mutation.IsDirectCleared() {
		_spec.ClearField(sysdistrict.FieldIsDirect, field.TypeBool)
	}
	if value, ok := sduo.mutation.Creator(); ok {
		_spec.SetField(sysdistrict.FieldCreator, field.TypeString, value)
	}
	if sduo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdistrict.ParentTable,
			Columns: []string{sysdistrict.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sduo.schemaConfig.SysDistrict
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysdistrict.ParentTable,
			Columns: []string{sysdistrict.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sduo.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sduo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdistrict.ChildrenTable,
			Columns: []string{sysdistrict.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sduo.schemaConfig.SysDistrict
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !sduo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdistrict.ChildrenTable,
			Columns: []string{sysdistrict.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sduo.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sduo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysdistrict.ChildrenTable,
			Columns: []string{sysdistrict.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: sysdistrict.FieldID,
				},
			},
		}
		edge.Schema = sduo.schemaConfig.SysDistrict
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sduo.schemaConfig.SysDistrict
	ctx = internal.NewSchemaConfigContext(ctx, sduo.schemaConfig)
	_spec.AddModifiers(sduo.modifiers...)
	_node = &SysDistrict{config: sduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysdistrict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sduo.mutation.done = true
	return _node, nil
}
