// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/heromicro/omgind/internal/gen/ent/migrate"

	"github.com/heromicro/omgind/internal/gen/ent/sysaddress"
	"github.com/heromicro/omgind/internal/gen/ent/sysdict"
	"github.com/heromicro/omgind/internal/gen/ent/sysdictitem"
	"github.com/heromicro/omgind/internal/gen/ent/sysdistrict"
	"github.com/heromicro/omgind/internal/gen/ent/sysjwtblock"
	"github.com/heromicro/omgind/internal/gen/ent/syslogging"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenu"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenuaction"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenuactionresource"
	"github.com/heromicro/omgind/internal/gen/ent/sysrole"
	"github.com/heromicro/omgind/internal/gen/ent/sysrolemenu"
	"github.com/heromicro/omgind/internal/gen/ent/sysuser"
	"github.com/heromicro/omgind/internal/gen/ent/sysuserrole"
	"github.com/heromicro/omgind/internal/gen/ent/xxxdemo"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// SysAddress is the client for interacting with the SysAddress builders.
	SysAddress *SysAddressClient
	// SysDict is the client for interacting with the SysDict builders.
	SysDict *SysDictClient
	// SysDictItem is the client for interacting with the SysDictItem builders.
	SysDictItem *SysDictItemClient
	// SysDistrict is the client for interacting with the SysDistrict builders.
	SysDistrict *SysDistrictClient
	// SysJwtBlock is the client for interacting with the SysJwtBlock builders.
	SysJwtBlock *SysJwtBlockClient
	// SysLogging is the client for interacting with the SysLogging builders.
	SysLogging *SysLoggingClient
	// SysMenu is the client for interacting with the SysMenu builders.
	SysMenu *SysMenuClient
	// SysMenuAction is the client for interacting with the SysMenuAction builders.
	SysMenuAction *SysMenuActionClient
	// SysMenuActionResource is the client for interacting with the SysMenuActionResource builders.
	SysMenuActionResource *SysMenuActionResourceClient
	// SysRole is the client for interacting with the SysRole builders.
	SysRole *SysRoleClient
	// SysRoleMenu is the client for interacting with the SysRoleMenu builders.
	SysRoleMenu *SysRoleMenuClient
	// SysUser is the client for interacting with the SysUser builders.
	SysUser *SysUserClient
	// SysUserRole is the client for interacting with the SysUserRole builders.
	SysUserRole *SysUserRoleClient
	// XxxDemo is the client for interacting with the XxxDemo builders.
	XxxDemo *XxxDemoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.SysAddress = NewSysAddressClient(c.config)
	c.SysDict = NewSysDictClient(c.config)
	c.SysDictItem = NewSysDictItemClient(c.config)
	c.SysDistrict = NewSysDistrictClient(c.config)
	c.SysJwtBlock = NewSysJwtBlockClient(c.config)
	c.SysLogging = NewSysLoggingClient(c.config)
	c.SysMenu = NewSysMenuClient(c.config)
	c.SysMenuAction = NewSysMenuActionClient(c.config)
	c.SysMenuActionResource = NewSysMenuActionResourceClient(c.config)
	c.SysRole = NewSysRoleClient(c.config)
	c.SysRoleMenu = NewSysRoleMenuClient(c.config)
	c.SysUser = NewSysUserClient(c.config)
	c.SysUserRole = NewSysUserRoleClient(c.config)
	c.XxxDemo = NewXxxDemoClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		SysAddress:            NewSysAddressClient(cfg),
		SysDict:               NewSysDictClient(cfg),
		SysDictItem:           NewSysDictItemClient(cfg),
		SysDistrict:           NewSysDistrictClient(cfg),
		SysJwtBlock:           NewSysJwtBlockClient(cfg),
		SysLogging:            NewSysLoggingClient(cfg),
		SysMenu:               NewSysMenuClient(cfg),
		SysMenuAction:         NewSysMenuActionClient(cfg),
		SysMenuActionResource: NewSysMenuActionResourceClient(cfg),
		SysRole:               NewSysRoleClient(cfg),
		SysRoleMenu:           NewSysRoleMenuClient(cfg),
		SysUser:               NewSysUserClient(cfg),
		SysUserRole:           NewSysUserRoleClient(cfg),
		XxxDemo:               NewXxxDemoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		SysAddress:            NewSysAddressClient(cfg),
		SysDict:               NewSysDictClient(cfg),
		SysDictItem:           NewSysDictItemClient(cfg),
		SysDistrict:           NewSysDistrictClient(cfg),
		SysJwtBlock:           NewSysJwtBlockClient(cfg),
		SysLogging:            NewSysLoggingClient(cfg),
		SysMenu:               NewSysMenuClient(cfg),
		SysMenuAction:         NewSysMenuActionClient(cfg),
		SysMenuActionResource: NewSysMenuActionResourceClient(cfg),
		SysRole:               NewSysRoleClient(cfg),
		SysRoleMenu:           NewSysRoleMenuClient(cfg),
		SysUser:               NewSysUserClient(cfg),
		SysUserRole:           NewSysUserRoleClient(cfg),
		XxxDemo:               NewXxxDemoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		SysAddress.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.SysAddress.Use(hooks...)
	c.SysDict.Use(hooks...)
	c.SysDictItem.Use(hooks...)
	c.SysDistrict.Use(hooks...)
	c.SysJwtBlock.Use(hooks...)
	c.SysLogging.Use(hooks...)
	c.SysMenu.Use(hooks...)
	c.SysMenuAction.Use(hooks...)
	c.SysMenuActionResource.Use(hooks...)
	c.SysRole.Use(hooks...)
	c.SysRoleMenu.Use(hooks...)
	c.SysUser.Use(hooks...)
	c.SysUserRole.Use(hooks...)
	c.XxxDemo.Use(hooks...)
}

// SysAddressClient is a client for the SysAddress schema.
type SysAddressClient struct {
	config
}

// NewSysAddressClient returns a client for the SysAddress from the given config.
func NewSysAddressClient(c config) *SysAddressClient {
	return &SysAddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysaddress.Hooks(f(g(h())))`.
func (c *SysAddressClient) Use(hooks ...Hook) {
	c.hooks.SysAddress = append(c.hooks.SysAddress, hooks...)
}

// Create returns a builder for creating a SysAddress entity.
func (c *SysAddressClient) Create() *SysAddressCreate {
	mutation := newSysAddressMutation(c.config, OpCreate)
	return &SysAddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysAddress entities.
func (c *SysAddressClient) CreateBulk(builders ...*SysAddressCreate) *SysAddressCreateBulk {
	return &SysAddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysAddress.
func (c *SysAddressClient) Update() *SysAddressUpdate {
	mutation := newSysAddressMutation(c.config, OpUpdate)
	return &SysAddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysAddressClient) UpdateOne(sa *SysAddress) *SysAddressUpdateOne {
	mutation := newSysAddressMutation(c.config, OpUpdateOne, withSysAddress(sa))
	return &SysAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysAddressClient) UpdateOneID(id string) *SysAddressUpdateOne {
	mutation := newSysAddressMutation(c.config, OpUpdateOne, withSysAddressID(id))
	return &SysAddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysAddress.
func (c *SysAddressClient) Delete() *SysAddressDelete {
	mutation := newSysAddressMutation(c.config, OpDelete)
	return &SysAddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysAddressClient) DeleteOne(sa *SysAddress) *SysAddressDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysAddressClient) DeleteOneID(id string) *SysAddressDeleteOne {
	builder := c.Delete().Where(sysaddress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysAddressDeleteOne{builder}
}

// Query returns a query builder for SysAddress.
func (c *SysAddressClient) Query() *SysAddressQuery {
	return &SysAddressQuery{
		config: c.config,
	}
}

// Get returns a SysAddress entity by its id.
func (c *SysAddressClient) Get(ctx context.Context, id string) (*SysAddress, error) {
	return c.Query().Where(sysaddress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysAddressClient) GetX(ctx context.Context, id string) *SysAddress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysAddressClient) Hooks() []Hook {
	return c.hooks.SysAddress
}

// SysDictClient is a client for the SysDict schema.
type SysDictClient struct {
	config
}

// NewSysDictClient returns a client for the SysDict from the given config.
func NewSysDictClient(c config) *SysDictClient {
	return &SysDictClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdict.Hooks(f(g(h())))`.
func (c *SysDictClient) Use(hooks ...Hook) {
	c.hooks.SysDict = append(c.hooks.SysDict, hooks...)
}

// Create returns a builder for creating a SysDict entity.
func (c *SysDictClient) Create() *SysDictCreate {
	mutation := newSysDictMutation(c.config, OpCreate)
	return &SysDictCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDict entities.
func (c *SysDictClient) CreateBulk(builders ...*SysDictCreate) *SysDictCreateBulk {
	return &SysDictCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDict.
func (c *SysDictClient) Update() *SysDictUpdate {
	mutation := newSysDictMutation(c.config, OpUpdate)
	return &SysDictUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDictClient) UpdateOne(sd *SysDict) *SysDictUpdateOne {
	mutation := newSysDictMutation(c.config, OpUpdateOne, withSysDict(sd))
	return &SysDictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDictClient) UpdateOneID(id string) *SysDictUpdateOne {
	mutation := newSysDictMutation(c.config, OpUpdateOne, withSysDictID(id))
	return &SysDictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDict.
func (c *SysDictClient) Delete() *SysDictDelete {
	mutation := newSysDictMutation(c.config, OpDelete)
	return &SysDictDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysDictClient) DeleteOne(sd *SysDict) *SysDictDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysDictClient) DeleteOneID(id string) *SysDictDeleteOne {
	builder := c.Delete().Where(sysdict.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDictDeleteOne{builder}
}

// Query returns a query builder for SysDict.
func (c *SysDictClient) Query() *SysDictQuery {
	return &SysDictQuery{
		config: c.config,
	}
}

// Get returns a SysDict entity by its id.
func (c *SysDictClient) Get(ctx context.Context, id string) (*SysDict, error) {
	return c.Query().Where(sysdict.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDictClient) GetX(ctx context.Context, id string) *SysDict {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysDictClient) Hooks() []Hook {
	return c.hooks.SysDict
}

// SysDictItemClient is a client for the SysDictItem schema.
type SysDictItemClient struct {
	config
}

// NewSysDictItemClient returns a client for the SysDictItem from the given config.
func NewSysDictItemClient(c config) *SysDictItemClient {
	return &SysDictItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdictitem.Hooks(f(g(h())))`.
func (c *SysDictItemClient) Use(hooks ...Hook) {
	c.hooks.SysDictItem = append(c.hooks.SysDictItem, hooks...)
}

// Create returns a builder for creating a SysDictItem entity.
func (c *SysDictItemClient) Create() *SysDictItemCreate {
	mutation := newSysDictItemMutation(c.config, OpCreate)
	return &SysDictItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDictItem entities.
func (c *SysDictItemClient) CreateBulk(builders ...*SysDictItemCreate) *SysDictItemCreateBulk {
	return &SysDictItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDictItem.
func (c *SysDictItemClient) Update() *SysDictItemUpdate {
	mutation := newSysDictItemMutation(c.config, OpUpdate)
	return &SysDictItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDictItemClient) UpdateOne(sdi *SysDictItem) *SysDictItemUpdateOne {
	mutation := newSysDictItemMutation(c.config, OpUpdateOne, withSysDictItem(sdi))
	return &SysDictItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDictItemClient) UpdateOneID(id string) *SysDictItemUpdateOne {
	mutation := newSysDictItemMutation(c.config, OpUpdateOne, withSysDictItemID(id))
	return &SysDictItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDictItem.
func (c *SysDictItemClient) Delete() *SysDictItemDelete {
	mutation := newSysDictItemMutation(c.config, OpDelete)
	return &SysDictItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysDictItemClient) DeleteOne(sdi *SysDictItem) *SysDictItemDeleteOne {
	return c.DeleteOneID(sdi.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysDictItemClient) DeleteOneID(id string) *SysDictItemDeleteOne {
	builder := c.Delete().Where(sysdictitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDictItemDeleteOne{builder}
}

// Query returns a query builder for SysDictItem.
func (c *SysDictItemClient) Query() *SysDictItemQuery {
	return &SysDictItemQuery{
		config: c.config,
	}
}

// Get returns a SysDictItem entity by its id.
func (c *SysDictItemClient) Get(ctx context.Context, id string) (*SysDictItem, error) {
	return c.Query().Where(sysdictitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDictItemClient) GetX(ctx context.Context, id string) *SysDictItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysDictItemClient) Hooks() []Hook {
	return c.hooks.SysDictItem
}

// SysDistrictClient is a client for the SysDistrict schema.
type SysDistrictClient struct {
	config
}

// NewSysDistrictClient returns a client for the SysDistrict from the given config.
func NewSysDistrictClient(c config) *SysDistrictClient {
	return &SysDistrictClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysdistrict.Hooks(f(g(h())))`.
func (c *SysDistrictClient) Use(hooks ...Hook) {
	c.hooks.SysDistrict = append(c.hooks.SysDistrict, hooks...)
}

// Create returns a builder for creating a SysDistrict entity.
func (c *SysDistrictClient) Create() *SysDistrictCreate {
	mutation := newSysDistrictMutation(c.config, OpCreate)
	return &SysDistrictCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysDistrict entities.
func (c *SysDistrictClient) CreateBulk(builders ...*SysDistrictCreate) *SysDistrictCreateBulk {
	return &SysDistrictCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysDistrict.
func (c *SysDistrictClient) Update() *SysDistrictUpdate {
	mutation := newSysDistrictMutation(c.config, OpUpdate)
	return &SysDistrictUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysDistrictClient) UpdateOne(sd *SysDistrict) *SysDistrictUpdateOne {
	mutation := newSysDistrictMutation(c.config, OpUpdateOne, withSysDistrict(sd))
	return &SysDistrictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysDistrictClient) UpdateOneID(id string) *SysDistrictUpdateOne {
	mutation := newSysDistrictMutation(c.config, OpUpdateOne, withSysDistrictID(id))
	return &SysDistrictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysDistrict.
func (c *SysDistrictClient) Delete() *SysDistrictDelete {
	mutation := newSysDistrictMutation(c.config, OpDelete)
	return &SysDistrictDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysDistrictClient) DeleteOne(sd *SysDistrict) *SysDistrictDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysDistrictClient) DeleteOneID(id string) *SysDistrictDeleteOne {
	builder := c.Delete().Where(sysdistrict.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysDistrictDeleteOne{builder}
}

// Query returns a query builder for SysDistrict.
func (c *SysDistrictClient) Query() *SysDistrictQuery {
	return &SysDistrictQuery{
		config: c.config,
	}
}

// Get returns a SysDistrict entity by its id.
func (c *SysDistrictClient) Get(ctx context.Context, id string) (*SysDistrict, error) {
	return c.Query().Where(sysdistrict.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysDistrictClient) GetX(ctx context.Context, id string) *SysDistrict {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a SysDistrict.
func (c *SysDistrictClient) QueryParent(sd *SysDistrict) *SysDistrictQuery {
	query := &SysDistrictQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdistrict.Table, sysdistrict.FieldID, id),
			sqlgraph.To(sysdistrict.Table, sysdistrict.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sysdistrict.ParentTable, sysdistrict.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a SysDistrict.
func (c *SysDistrictClient) QueryChildren(sd *SysDistrict) *SysDistrictQuery {
	query := &SysDistrictQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sysdistrict.Table, sysdistrict.FieldID, id),
			sqlgraph.To(sysdistrict.Table, sysdistrict.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sysdistrict.ChildrenTable, sysdistrict.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SysDistrictClient) Hooks() []Hook {
	return c.hooks.SysDistrict
}

// SysJwtBlockClient is a client for the SysJwtBlock schema.
type SysJwtBlockClient struct {
	config
}

// NewSysJwtBlockClient returns a client for the SysJwtBlock from the given config.
func NewSysJwtBlockClient(c config) *SysJwtBlockClient {
	return &SysJwtBlockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysjwtblock.Hooks(f(g(h())))`.
func (c *SysJwtBlockClient) Use(hooks ...Hook) {
	c.hooks.SysJwtBlock = append(c.hooks.SysJwtBlock, hooks...)
}

// Create returns a builder for creating a SysJwtBlock entity.
func (c *SysJwtBlockClient) Create() *SysJwtBlockCreate {
	mutation := newSysJwtBlockMutation(c.config, OpCreate)
	return &SysJwtBlockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysJwtBlock entities.
func (c *SysJwtBlockClient) CreateBulk(builders ...*SysJwtBlockCreate) *SysJwtBlockCreateBulk {
	return &SysJwtBlockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysJwtBlock.
func (c *SysJwtBlockClient) Update() *SysJwtBlockUpdate {
	mutation := newSysJwtBlockMutation(c.config, OpUpdate)
	return &SysJwtBlockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysJwtBlockClient) UpdateOne(sjb *SysJwtBlock) *SysJwtBlockUpdateOne {
	mutation := newSysJwtBlockMutation(c.config, OpUpdateOne, withSysJwtBlock(sjb))
	return &SysJwtBlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysJwtBlockClient) UpdateOneID(id string) *SysJwtBlockUpdateOne {
	mutation := newSysJwtBlockMutation(c.config, OpUpdateOne, withSysJwtBlockID(id))
	return &SysJwtBlockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysJwtBlock.
func (c *SysJwtBlockClient) Delete() *SysJwtBlockDelete {
	mutation := newSysJwtBlockMutation(c.config, OpDelete)
	return &SysJwtBlockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysJwtBlockClient) DeleteOne(sjb *SysJwtBlock) *SysJwtBlockDeleteOne {
	return c.DeleteOneID(sjb.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysJwtBlockClient) DeleteOneID(id string) *SysJwtBlockDeleteOne {
	builder := c.Delete().Where(sysjwtblock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysJwtBlockDeleteOne{builder}
}

// Query returns a query builder for SysJwtBlock.
func (c *SysJwtBlockClient) Query() *SysJwtBlockQuery {
	return &SysJwtBlockQuery{
		config: c.config,
	}
}

// Get returns a SysJwtBlock entity by its id.
func (c *SysJwtBlockClient) Get(ctx context.Context, id string) (*SysJwtBlock, error) {
	return c.Query().Where(sysjwtblock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysJwtBlockClient) GetX(ctx context.Context, id string) *SysJwtBlock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysJwtBlockClient) Hooks() []Hook {
	return c.hooks.SysJwtBlock
}

// SysLoggingClient is a client for the SysLogging schema.
type SysLoggingClient struct {
	config
}

// NewSysLoggingClient returns a client for the SysLogging from the given config.
func NewSysLoggingClient(c config) *SysLoggingClient {
	return &SysLoggingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `syslogging.Hooks(f(g(h())))`.
func (c *SysLoggingClient) Use(hooks ...Hook) {
	c.hooks.SysLogging = append(c.hooks.SysLogging, hooks...)
}

// Create returns a builder for creating a SysLogging entity.
func (c *SysLoggingClient) Create() *SysLoggingCreate {
	mutation := newSysLoggingMutation(c.config, OpCreate)
	return &SysLoggingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysLogging entities.
func (c *SysLoggingClient) CreateBulk(builders ...*SysLoggingCreate) *SysLoggingCreateBulk {
	return &SysLoggingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysLogging.
func (c *SysLoggingClient) Update() *SysLoggingUpdate {
	mutation := newSysLoggingMutation(c.config, OpUpdate)
	return &SysLoggingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysLoggingClient) UpdateOne(sl *SysLogging) *SysLoggingUpdateOne {
	mutation := newSysLoggingMutation(c.config, OpUpdateOne, withSysLogging(sl))
	return &SysLoggingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysLoggingClient) UpdateOneID(id string) *SysLoggingUpdateOne {
	mutation := newSysLoggingMutation(c.config, OpUpdateOne, withSysLoggingID(id))
	return &SysLoggingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysLogging.
func (c *SysLoggingClient) Delete() *SysLoggingDelete {
	mutation := newSysLoggingMutation(c.config, OpDelete)
	return &SysLoggingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysLoggingClient) DeleteOne(sl *SysLogging) *SysLoggingDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysLoggingClient) DeleteOneID(id string) *SysLoggingDeleteOne {
	builder := c.Delete().Where(syslogging.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysLoggingDeleteOne{builder}
}

// Query returns a query builder for SysLogging.
func (c *SysLoggingClient) Query() *SysLoggingQuery {
	return &SysLoggingQuery{
		config: c.config,
	}
}

// Get returns a SysLogging entity by its id.
func (c *SysLoggingClient) Get(ctx context.Context, id string) (*SysLogging, error) {
	return c.Query().Where(syslogging.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysLoggingClient) GetX(ctx context.Context, id string) *SysLogging {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysLoggingClient) Hooks() []Hook {
	return c.hooks.SysLogging
}

// SysMenuClient is a client for the SysMenu schema.
type SysMenuClient struct {
	config
}

// NewSysMenuClient returns a client for the SysMenu from the given config.
func NewSysMenuClient(c config) *SysMenuClient {
	return &SysMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysmenu.Hooks(f(g(h())))`.
func (c *SysMenuClient) Use(hooks ...Hook) {
	c.hooks.SysMenu = append(c.hooks.SysMenu, hooks...)
}

// Create returns a builder for creating a SysMenu entity.
func (c *SysMenuClient) Create() *SysMenuCreate {
	mutation := newSysMenuMutation(c.config, OpCreate)
	return &SysMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysMenu entities.
func (c *SysMenuClient) CreateBulk(builders ...*SysMenuCreate) *SysMenuCreateBulk {
	return &SysMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysMenu.
func (c *SysMenuClient) Update() *SysMenuUpdate {
	mutation := newSysMenuMutation(c.config, OpUpdate)
	return &SysMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysMenuClient) UpdateOne(sm *SysMenu) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenu(sm))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysMenuClient) UpdateOneID(id string) *SysMenuUpdateOne {
	mutation := newSysMenuMutation(c.config, OpUpdateOne, withSysMenuID(id))
	return &SysMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysMenu.
func (c *SysMenuClient) Delete() *SysMenuDelete {
	mutation := newSysMenuMutation(c.config, OpDelete)
	return &SysMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysMenuClient) DeleteOne(sm *SysMenu) *SysMenuDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysMenuClient) DeleteOneID(id string) *SysMenuDeleteOne {
	builder := c.Delete().Where(sysmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysMenuDeleteOne{builder}
}

// Query returns a query builder for SysMenu.
func (c *SysMenuClient) Query() *SysMenuQuery {
	return &SysMenuQuery{
		config: c.config,
	}
}

// Get returns a SysMenu entity by its id.
func (c *SysMenuClient) Get(ctx context.Context, id string) (*SysMenu, error) {
	return c.Query().Where(sysmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysMenuClient) GetX(ctx context.Context, id string) *SysMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysMenuClient) Hooks() []Hook {
	return c.hooks.SysMenu
}

// SysMenuActionClient is a client for the SysMenuAction schema.
type SysMenuActionClient struct {
	config
}

// NewSysMenuActionClient returns a client for the SysMenuAction from the given config.
func NewSysMenuActionClient(c config) *SysMenuActionClient {
	return &SysMenuActionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysmenuaction.Hooks(f(g(h())))`.
func (c *SysMenuActionClient) Use(hooks ...Hook) {
	c.hooks.SysMenuAction = append(c.hooks.SysMenuAction, hooks...)
}

// Create returns a builder for creating a SysMenuAction entity.
func (c *SysMenuActionClient) Create() *SysMenuActionCreate {
	mutation := newSysMenuActionMutation(c.config, OpCreate)
	return &SysMenuActionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysMenuAction entities.
func (c *SysMenuActionClient) CreateBulk(builders ...*SysMenuActionCreate) *SysMenuActionCreateBulk {
	return &SysMenuActionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysMenuAction.
func (c *SysMenuActionClient) Update() *SysMenuActionUpdate {
	mutation := newSysMenuActionMutation(c.config, OpUpdate)
	return &SysMenuActionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysMenuActionClient) UpdateOne(sma *SysMenuAction) *SysMenuActionUpdateOne {
	mutation := newSysMenuActionMutation(c.config, OpUpdateOne, withSysMenuAction(sma))
	return &SysMenuActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysMenuActionClient) UpdateOneID(id string) *SysMenuActionUpdateOne {
	mutation := newSysMenuActionMutation(c.config, OpUpdateOne, withSysMenuActionID(id))
	return &SysMenuActionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysMenuAction.
func (c *SysMenuActionClient) Delete() *SysMenuActionDelete {
	mutation := newSysMenuActionMutation(c.config, OpDelete)
	return &SysMenuActionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysMenuActionClient) DeleteOne(sma *SysMenuAction) *SysMenuActionDeleteOne {
	return c.DeleteOneID(sma.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysMenuActionClient) DeleteOneID(id string) *SysMenuActionDeleteOne {
	builder := c.Delete().Where(sysmenuaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysMenuActionDeleteOne{builder}
}

// Query returns a query builder for SysMenuAction.
func (c *SysMenuActionClient) Query() *SysMenuActionQuery {
	return &SysMenuActionQuery{
		config: c.config,
	}
}

// Get returns a SysMenuAction entity by its id.
func (c *SysMenuActionClient) Get(ctx context.Context, id string) (*SysMenuAction, error) {
	return c.Query().Where(sysmenuaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysMenuActionClient) GetX(ctx context.Context, id string) *SysMenuAction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysMenuActionClient) Hooks() []Hook {
	return c.hooks.SysMenuAction
}

// SysMenuActionResourceClient is a client for the SysMenuActionResource schema.
type SysMenuActionResourceClient struct {
	config
}

// NewSysMenuActionResourceClient returns a client for the SysMenuActionResource from the given config.
func NewSysMenuActionResourceClient(c config) *SysMenuActionResourceClient {
	return &SysMenuActionResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysmenuactionresource.Hooks(f(g(h())))`.
func (c *SysMenuActionResourceClient) Use(hooks ...Hook) {
	c.hooks.SysMenuActionResource = append(c.hooks.SysMenuActionResource, hooks...)
}

// Create returns a builder for creating a SysMenuActionResource entity.
func (c *SysMenuActionResourceClient) Create() *SysMenuActionResourceCreate {
	mutation := newSysMenuActionResourceMutation(c.config, OpCreate)
	return &SysMenuActionResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysMenuActionResource entities.
func (c *SysMenuActionResourceClient) CreateBulk(builders ...*SysMenuActionResourceCreate) *SysMenuActionResourceCreateBulk {
	return &SysMenuActionResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysMenuActionResource.
func (c *SysMenuActionResourceClient) Update() *SysMenuActionResourceUpdate {
	mutation := newSysMenuActionResourceMutation(c.config, OpUpdate)
	return &SysMenuActionResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysMenuActionResourceClient) UpdateOne(smar *SysMenuActionResource) *SysMenuActionResourceUpdateOne {
	mutation := newSysMenuActionResourceMutation(c.config, OpUpdateOne, withSysMenuActionResource(smar))
	return &SysMenuActionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysMenuActionResourceClient) UpdateOneID(id string) *SysMenuActionResourceUpdateOne {
	mutation := newSysMenuActionResourceMutation(c.config, OpUpdateOne, withSysMenuActionResourceID(id))
	return &SysMenuActionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysMenuActionResource.
func (c *SysMenuActionResourceClient) Delete() *SysMenuActionResourceDelete {
	mutation := newSysMenuActionResourceMutation(c.config, OpDelete)
	return &SysMenuActionResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysMenuActionResourceClient) DeleteOne(smar *SysMenuActionResource) *SysMenuActionResourceDeleteOne {
	return c.DeleteOneID(smar.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysMenuActionResourceClient) DeleteOneID(id string) *SysMenuActionResourceDeleteOne {
	builder := c.Delete().Where(sysmenuactionresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysMenuActionResourceDeleteOne{builder}
}

// Query returns a query builder for SysMenuActionResource.
func (c *SysMenuActionResourceClient) Query() *SysMenuActionResourceQuery {
	return &SysMenuActionResourceQuery{
		config: c.config,
	}
}

// Get returns a SysMenuActionResource entity by its id.
func (c *SysMenuActionResourceClient) Get(ctx context.Context, id string) (*SysMenuActionResource, error) {
	return c.Query().Where(sysmenuactionresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysMenuActionResourceClient) GetX(ctx context.Context, id string) *SysMenuActionResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysMenuActionResourceClient) Hooks() []Hook {
	return c.hooks.SysMenuActionResource
}

// SysRoleClient is a client for the SysRole schema.
type SysRoleClient struct {
	config
}

// NewSysRoleClient returns a client for the SysRole from the given config.
func NewSysRoleClient(c config) *SysRoleClient {
	return &SysRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysrole.Hooks(f(g(h())))`.
func (c *SysRoleClient) Use(hooks ...Hook) {
	c.hooks.SysRole = append(c.hooks.SysRole, hooks...)
}

// Create returns a builder for creating a SysRole entity.
func (c *SysRoleClient) Create() *SysRoleCreate {
	mutation := newSysRoleMutation(c.config, OpCreate)
	return &SysRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRole entities.
func (c *SysRoleClient) CreateBulk(builders ...*SysRoleCreate) *SysRoleCreateBulk {
	return &SysRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRole.
func (c *SysRoleClient) Update() *SysRoleUpdate {
	mutation := newSysRoleMutation(c.config, OpUpdate)
	return &SysRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRoleClient) UpdateOne(sr *SysRole) *SysRoleUpdateOne {
	mutation := newSysRoleMutation(c.config, OpUpdateOne, withSysRole(sr))
	return &SysRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRoleClient) UpdateOneID(id string) *SysRoleUpdateOne {
	mutation := newSysRoleMutation(c.config, OpUpdateOne, withSysRoleID(id))
	return &SysRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRole.
func (c *SysRoleClient) Delete() *SysRoleDelete {
	mutation := newSysRoleMutation(c.config, OpDelete)
	return &SysRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysRoleClient) DeleteOne(sr *SysRole) *SysRoleDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysRoleClient) DeleteOneID(id string) *SysRoleDeleteOne {
	builder := c.Delete().Where(sysrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRoleDeleteOne{builder}
}

// Query returns a query builder for SysRole.
func (c *SysRoleClient) Query() *SysRoleQuery {
	return &SysRoleQuery{
		config: c.config,
	}
}

// Get returns a SysRole entity by its id.
func (c *SysRoleClient) Get(ctx context.Context, id string) (*SysRole, error) {
	return c.Query().Where(sysrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRoleClient) GetX(ctx context.Context, id string) *SysRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysRoleClient) Hooks() []Hook {
	return c.hooks.SysRole
}

// SysRoleMenuClient is a client for the SysRoleMenu schema.
type SysRoleMenuClient struct {
	config
}

// NewSysRoleMenuClient returns a client for the SysRoleMenu from the given config.
func NewSysRoleMenuClient(c config) *SysRoleMenuClient {
	return &SysRoleMenuClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysrolemenu.Hooks(f(g(h())))`.
func (c *SysRoleMenuClient) Use(hooks ...Hook) {
	c.hooks.SysRoleMenu = append(c.hooks.SysRoleMenu, hooks...)
}

// Create returns a builder for creating a SysRoleMenu entity.
func (c *SysRoleMenuClient) Create() *SysRoleMenuCreate {
	mutation := newSysRoleMenuMutation(c.config, OpCreate)
	return &SysRoleMenuCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysRoleMenu entities.
func (c *SysRoleMenuClient) CreateBulk(builders ...*SysRoleMenuCreate) *SysRoleMenuCreateBulk {
	return &SysRoleMenuCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysRoleMenu.
func (c *SysRoleMenuClient) Update() *SysRoleMenuUpdate {
	mutation := newSysRoleMenuMutation(c.config, OpUpdate)
	return &SysRoleMenuUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysRoleMenuClient) UpdateOne(srm *SysRoleMenu) *SysRoleMenuUpdateOne {
	mutation := newSysRoleMenuMutation(c.config, OpUpdateOne, withSysRoleMenu(srm))
	return &SysRoleMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysRoleMenuClient) UpdateOneID(id string) *SysRoleMenuUpdateOne {
	mutation := newSysRoleMenuMutation(c.config, OpUpdateOne, withSysRoleMenuID(id))
	return &SysRoleMenuUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysRoleMenu.
func (c *SysRoleMenuClient) Delete() *SysRoleMenuDelete {
	mutation := newSysRoleMenuMutation(c.config, OpDelete)
	return &SysRoleMenuDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysRoleMenuClient) DeleteOne(srm *SysRoleMenu) *SysRoleMenuDeleteOne {
	return c.DeleteOneID(srm.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysRoleMenuClient) DeleteOneID(id string) *SysRoleMenuDeleteOne {
	builder := c.Delete().Where(sysrolemenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysRoleMenuDeleteOne{builder}
}

// Query returns a query builder for SysRoleMenu.
func (c *SysRoleMenuClient) Query() *SysRoleMenuQuery {
	return &SysRoleMenuQuery{
		config: c.config,
	}
}

// Get returns a SysRoleMenu entity by its id.
func (c *SysRoleMenuClient) Get(ctx context.Context, id string) (*SysRoleMenu, error) {
	return c.Query().Where(sysrolemenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysRoleMenuClient) GetX(ctx context.Context, id string) *SysRoleMenu {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysRoleMenuClient) Hooks() []Hook {
	return c.hooks.SysRoleMenu
}

// SysUserClient is a client for the SysUser schema.
type SysUserClient struct {
	config
}

// NewSysUserClient returns a client for the SysUser from the given config.
func NewSysUserClient(c config) *SysUserClient {
	return &SysUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuser.Hooks(f(g(h())))`.
func (c *SysUserClient) Use(hooks ...Hook) {
	c.hooks.SysUser = append(c.hooks.SysUser, hooks...)
}

// Create returns a builder for creating a SysUser entity.
func (c *SysUserClient) Create() *SysUserCreate {
	mutation := newSysUserMutation(c.config, OpCreate)
	return &SysUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUser entities.
func (c *SysUserClient) CreateBulk(builders ...*SysUserCreate) *SysUserCreateBulk {
	return &SysUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUser.
func (c *SysUserClient) Update() *SysUserUpdate {
	mutation := newSysUserMutation(c.config, OpUpdate)
	return &SysUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserClient) UpdateOne(su *SysUser) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUser(su))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserClient) UpdateOneID(id string) *SysUserUpdateOne {
	mutation := newSysUserMutation(c.config, OpUpdateOne, withSysUserID(id))
	return &SysUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUser.
func (c *SysUserClient) Delete() *SysUserDelete {
	mutation := newSysUserMutation(c.config, OpDelete)
	return &SysUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysUserClient) DeleteOne(su *SysUser) *SysUserDeleteOne {
	return c.DeleteOneID(su.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysUserClient) DeleteOneID(id string) *SysUserDeleteOne {
	builder := c.Delete().Where(sysuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserDeleteOne{builder}
}

// Query returns a query builder for SysUser.
func (c *SysUserClient) Query() *SysUserQuery {
	return &SysUserQuery{
		config: c.config,
	}
}

// Get returns a SysUser entity by its id.
func (c *SysUserClient) Get(ctx context.Context, id string) (*SysUser, error) {
	return c.Query().Where(sysuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserClient) GetX(ctx context.Context, id string) *SysUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysUserClient) Hooks() []Hook {
	return c.hooks.SysUser
}

// SysUserRoleClient is a client for the SysUserRole schema.
type SysUserRoleClient struct {
	config
}

// NewSysUserRoleClient returns a client for the SysUserRole from the given config.
func NewSysUserRoleClient(c config) *SysUserRoleClient {
	return &SysUserRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sysuserrole.Hooks(f(g(h())))`.
func (c *SysUserRoleClient) Use(hooks ...Hook) {
	c.hooks.SysUserRole = append(c.hooks.SysUserRole, hooks...)
}

// Create returns a builder for creating a SysUserRole entity.
func (c *SysUserRoleClient) Create() *SysUserRoleCreate {
	mutation := newSysUserRoleMutation(c.config, OpCreate)
	return &SysUserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SysUserRole entities.
func (c *SysUserRoleClient) CreateBulk(builders ...*SysUserRoleCreate) *SysUserRoleCreateBulk {
	return &SysUserRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SysUserRole.
func (c *SysUserRoleClient) Update() *SysUserRoleUpdate {
	mutation := newSysUserRoleMutation(c.config, OpUpdate)
	return &SysUserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SysUserRoleClient) UpdateOne(sur *SysUserRole) *SysUserRoleUpdateOne {
	mutation := newSysUserRoleMutation(c.config, OpUpdateOne, withSysUserRole(sur))
	return &SysUserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SysUserRoleClient) UpdateOneID(id string) *SysUserRoleUpdateOne {
	mutation := newSysUserRoleMutation(c.config, OpUpdateOne, withSysUserRoleID(id))
	return &SysUserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SysUserRole.
func (c *SysUserRoleClient) Delete() *SysUserRoleDelete {
	mutation := newSysUserRoleMutation(c.config, OpDelete)
	return &SysUserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SysUserRoleClient) DeleteOne(sur *SysUserRole) *SysUserRoleDeleteOne {
	return c.DeleteOneID(sur.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SysUserRoleClient) DeleteOneID(id string) *SysUserRoleDeleteOne {
	builder := c.Delete().Where(sysuserrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SysUserRoleDeleteOne{builder}
}

// Query returns a query builder for SysUserRole.
func (c *SysUserRoleClient) Query() *SysUserRoleQuery {
	return &SysUserRoleQuery{
		config: c.config,
	}
}

// Get returns a SysUserRole entity by its id.
func (c *SysUserRoleClient) Get(ctx context.Context, id string) (*SysUserRole, error) {
	return c.Query().Where(sysuserrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SysUserRoleClient) GetX(ctx context.Context, id string) *SysUserRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SysUserRoleClient) Hooks() []Hook {
	return c.hooks.SysUserRole
}

// XxxDemoClient is a client for the XxxDemo schema.
type XxxDemoClient struct {
	config
}

// NewXxxDemoClient returns a client for the XxxDemo from the given config.
func NewXxxDemoClient(c config) *XxxDemoClient {
	return &XxxDemoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `xxxdemo.Hooks(f(g(h())))`.
func (c *XxxDemoClient) Use(hooks ...Hook) {
	c.hooks.XxxDemo = append(c.hooks.XxxDemo, hooks...)
}

// Create returns a builder for creating a XxxDemo entity.
func (c *XxxDemoClient) Create() *XxxDemoCreate {
	mutation := newXxxDemoMutation(c.config, OpCreate)
	return &XxxDemoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of XxxDemo entities.
func (c *XxxDemoClient) CreateBulk(builders ...*XxxDemoCreate) *XxxDemoCreateBulk {
	return &XxxDemoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for XxxDemo.
func (c *XxxDemoClient) Update() *XxxDemoUpdate {
	mutation := newXxxDemoMutation(c.config, OpUpdate)
	return &XxxDemoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *XxxDemoClient) UpdateOne(xd *XxxDemo) *XxxDemoUpdateOne {
	mutation := newXxxDemoMutation(c.config, OpUpdateOne, withXxxDemo(xd))
	return &XxxDemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *XxxDemoClient) UpdateOneID(id string) *XxxDemoUpdateOne {
	mutation := newXxxDemoMutation(c.config, OpUpdateOne, withXxxDemoID(id))
	return &XxxDemoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for XxxDemo.
func (c *XxxDemoClient) Delete() *XxxDemoDelete {
	mutation := newXxxDemoMutation(c.config, OpDelete)
	return &XxxDemoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *XxxDemoClient) DeleteOne(xd *XxxDemo) *XxxDemoDeleteOne {
	return c.DeleteOneID(xd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *XxxDemoClient) DeleteOneID(id string) *XxxDemoDeleteOne {
	builder := c.Delete().Where(xxxdemo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &XxxDemoDeleteOne{builder}
}

// Query returns a query builder for XxxDemo.
func (c *XxxDemoClient) Query() *XxxDemoQuery {
	return &XxxDemoQuery{
		config: c.config,
	}
}

// Get returns a XxxDemo entity by its id.
func (c *XxxDemoClient) Get(ctx context.Context, id string) (*XxxDemo, error) {
	return c.Query().Where(xxxdemo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *XxxDemoClient) GetX(ctx context.Context, id string) *XxxDemo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *XxxDemoClient) Hooks() []Hook {
	return c.hooks.XxxDemo
}
