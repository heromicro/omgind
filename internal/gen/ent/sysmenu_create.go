// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/ent/sysmenu"
)

// SysMenuCreate is the builder for creating a SysMenu entity.
type SysMenuCreate struct {
	config
	mutation *SysMenuMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (smc *SysMenuCreate) SetIsDel(b bool) *SysMenuCreate {
	smc.mutation.SetIsDel(b)
	return smc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsDel(b *bool) *SysMenuCreate {
	if b != nil {
		smc.SetIsDel(*b)
	}
	return smc
}

// SetMemo sets the "memo" field.
func (smc *SysMenuCreate) SetMemo(s string) *SysMenuCreate {
	smc.mutation.SetMemo(s)
	return smc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableMemo(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetMemo(*s)
	}
	return smc
}

// SetSort sets the "sort" field.
func (smc *SysMenuCreate) SetSort(i int32) *SysMenuCreate {
	smc.mutation.SetSort(i)
	return smc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableSort(i *int32) *SysMenuCreate {
	if i != nil {
		smc.SetSort(*i)
	}
	return smc
}

// SetCreatedAt sets the "created_at" field.
func (smc *SysMenuCreate) SetCreatedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetCreatedAt(t)
	return smc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableCreatedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetCreatedAt(*t)
	}
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *SysMenuCreate) SetUpdatedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetUpdatedAt(t)
	return smc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableUpdatedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetUpdatedAt(*t)
	}
	return smc
}

// SetDeletedAt sets the "deleted_at" field.
func (smc *SysMenuCreate) SetDeletedAt(t time.Time) *SysMenuCreate {
	smc.mutation.SetDeletedAt(t)
	return smc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableDeletedAt(t *time.Time) *SysMenuCreate {
	if t != nil {
		smc.SetDeletedAt(*t)
	}
	return smc
}

// SetIsActive sets the "is_active" field.
func (smc *SysMenuCreate) SetIsActive(b bool) *SysMenuCreate {
	smc.mutation.SetIsActive(b)
	return smc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsActive(b *bool) *SysMenuCreate {
	if b != nil {
		smc.SetIsActive(*b)
	}
	return smc
}

// SetName sets the "name" field.
func (smc *SysMenuCreate) SetName(s string) *SysMenuCreate {
	smc.mutation.SetName(s)
	return smc
}

// SetIcon sets the "icon" field.
func (smc *SysMenuCreate) SetIcon(s string) *SysMenuCreate {
	smc.mutation.SetIcon(s)
	return smc
}

// SetRouter sets the "router" field.
func (smc *SysMenuCreate) SetRouter(s string) *SysMenuCreate {
	smc.mutation.SetRouter(s)
	return smc
}

// SetIsShow sets the "is_show" field.
func (smc *SysMenuCreate) SetIsShow(b bool) *SysMenuCreate {
	smc.mutation.SetIsShow(b)
	return smc
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsShow(b *bool) *SysMenuCreate {
	if b != nil {
		smc.SetIsShow(*b)
	}
	return smc
}

// SetParentID sets the "parent_id" field.
func (smc *SysMenuCreate) SetParentID(s string) *SysMenuCreate {
	smc.mutation.SetParentID(s)
	return smc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableParentID(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetParentID(*s)
	}
	return smc
}

// SetParentPath sets the "parent_path" field.
func (smc *SysMenuCreate) SetParentPath(s string) *SysMenuCreate {
	smc.mutation.SetParentPath(s)
	return smc
}

// SetNillableParentPath sets the "parent_path" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableParentPath(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetParentPath(*s)
	}
	return smc
}

// SetLevel sets the "level" field.
func (smc *SysMenuCreate) SetLevel(i int32) *SysMenuCreate {
	smc.mutation.SetLevel(i)
	return smc
}

// SetIsLeaf sets the "is_leaf" field.
func (smc *SysMenuCreate) SetIsLeaf(b bool) *SysMenuCreate {
	smc.mutation.SetIsLeaf(b)
	return smc
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableIsLeaf(b *bool) *SysMenuCreate {
	if b != nil {
		smc.SetIsLeaf(*b)
	}
	return smc
}

// SetOpenBlank sets the "open_blank" field.
func (smc *SysMenuCreate) SetOpenBlank(b bool) *SysMenuCreate {
	smc.mutation.SetOpenBlank(b)
	return smc
}

// SetNillableOpenBlank sets the "open_blank" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableOpenBlank(b *bool) *SysMenuCreate {
	if b != nil {
		smc.SetOpenBlank(*b)
	}
	return smc
}

// SetID sets the "id" field.
func (smc *SysMenuCreate) SetID(s string) *SysMenuCreate {
	smc.mutation.SetID(s)
	return smc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (smc *SysMenuCreate) SetNillableID(s *string) *SysMenuCreate {
	if s != nil {
		smc.SetID(*s)
	}
	return smc
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smc *SysMenuCreate) SetParent(s *SysMenu) *SysMenuCreate {
	return smc.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysMenu entity by IDs.
func (smc *SysMenuCreate) AddChildIDs(ids ...string) *SysMenuCreate {
	smc.mutation.AddChildIDs(ids...)
	return smc
}

// AddChildren adds the "children" edges to the SysMenu entity.
func (smc *SysMenuCreate) AddChildren(s ...*SysMenu) *SysMenuCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smc.AddChildIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smc *SysMenuCreate) Mutation() *SysMenuMutation {
	return smc.mutation
}

// Save creates the SysMenu in the database.
func (smc *SysMenuCreate) Save(ctx context.Context) (*SysMenu, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SysMenuCreate) SaveX(ctx context.Context) *SysMenu {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SysMenuCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SysMenuCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *SysMenuCreate) defaults() {
	if _, ok := smc.mutation.IsDel(); !ok {
		v := sysmenu.DefaultIsDel
		smc.mutation.SetIsDel(v)
	}
	if _, ok := smc.mutation.Memo(); !ok {
		v := sysmenu.DefaultMemo
		smc.mutation.SetMemo(v)
	}
	if _, ok := smc.mutation.Sort(); !ok {
		v := sysmenu.DefaultSort
		smc.mutation.SetSort(v)
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		v := sysmenu.DefaultCreatedAt()
		smc.mutation.SetCreatedAt(v)
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		v := sysmenu.DefaultUpdatedAt()
		smc.mutation.SetUpdatedAt(v)
	}
	if _, ok := smc.mutation.IsActive(); !ok {
		v := sysmenu.DefaultIsActive
		smc.mutation.SetIsActive(v)
	}
	if _, ok := smc.mutation.IsShow(); !ok {
		v := sysmenu.DefaultIsShow
		smc.mutation.SetIsShow(v)
	}
	if _, ok := smc.mutation.IsLeaf(); !ok {
		v := sysmenu.DefaultIsLeaf
		smc.mutation.SetIsLeaf(v)
	}
	if _, ok := smc.mutation.OpenBlank(); !ok {
		v := sysmenu.DefaultOpenBlank
		smc.mutation.SetOpenBlank(v)
	}
	if _, ok := smc.mutation.ID(); !ok {
		v := sysmenu.DefaultID()
		smc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SysMenuCreate) check() error {
	if _, ok := smc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`ent: missing required field "SysMenu.is_del"`)}
	}
	if v, ok := smc.mutation.Memo(); ok {
		if err := sysmenu.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "SysMenu.memo": %w`, err)}
		}
	}
	if _, ok := smc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "SysMenu.sort"`)}
	}
	if _, ok := smc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "SysMenu.is_active"`)}
	}
	if _, ok := smc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SysMenu.name"`)}
	}
	if v, ok := smc.mutation.Name(); ok {
		if err := sysmenu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SysMenu.name": %w`, err)}
		}
	}
	if _, ok := smc.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "SysMenu.icon"`)}
	}
	if v, ok := smc.mutation.Icon(); ok {
		if err := sysmenu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "SysMenu.icon": %w`, err)}
		}
	}
	if _, ok := smc.mutation.Router(); !ok {
		return &ValidationError{Name: "router", err: errors.New(`ent: missing required field "SysMenu.router"`)}
	}
	if v, ok := smc.mutation.Router(); ok {
		if err := sysmenu.RouterValidator(v); err != nil {
			return &ValidationError{Name: "router", err: fmt.Errorf(`ent: validator failed for field "SysMenu.router": %w`, err)}
		}
	}
	if _, ok := smc.mutation.IsShow(); !ok {
		return &ValidationError{Name: "is_show", err: errors.New(`ent: missing required field "SysMenu.is_show"`)}
	}
	if v, ok := smc.mutation.ParentID(); ok {
		if err := sysmenu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`ent: validator failed for field "SysMenu.parent_id": %w`, err)}
		}
	}
	if v, ok := smc.mutation.ParentPath(); ok {
		if err := sysmenu.ParentPathValidator(v); err != nil {
			return &ValidationError{Name: "parent_path", err: fmt.Errorf(`ent: validator failed for field "SysMenu.parent_path": %w`, err)}
		}
	}
	if _, ok := smc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "SysMenu.level"`)}
	}
	if v, ok := smc.mutation.Level(); ok {
		if err := sysmenu.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "SysMenu.level": %w`, err)}
		}
	}
	if v, ok := smc.mutation.ID(); ok {
		if err := sysmenu.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "SysMenu.id": %w`, err)}
		}
	}
	return nil
}

func (smc *SysMenuCreate) sqlSave(ctx context.Context) (*SysMenu, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysMenu.ID type: %T", _spec.ID.Value)
		}
	}
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *SysMenuCreate) createSpec() (*SysMenu, *sqlgraph.CreateSpec) {
	var (
		_node = &SysMenu{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(sysmenu.Table, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString))
	)
	_spec.OnConflict = smc.conflict
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := smc.mutation.IsDel(); ok {
		_spec.SetField(sysmenu.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := smc.mutation.Memo(); ok {
		_spec.SetField(sysmenu.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := smc.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.SetField(sysmenu.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := smc.mutation.DeletedAt(); ok {
		_spec.SetField(sysmenu.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := smc.mutation.IsActive(); ok {
		_spec.SetField(sysmenu.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := smc.mutation.Name(); ok {
		_spec.SetField(sysmenu.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := smc.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := smc.mutation.Router(); ok {
		_spec.SetField(sysmenu.FieldRouter, field.TypeString, value)
		_node.Router = value
	}
	if value, ok := smc.mutation.IsShow(); ok {
		_spec.SetField(sysmenu.FieldIsShow, field.TypeBool, value)
		_node.IsShow = value
	}
	if value, ok := smc.mutation.ParentPath(); ok {
		_spec.SetField(sysmenu.FieldParentPath, field.TypeString, value)
		_node.ParentPath = &value
	}
	if value, ok := smc.mutation.Level(); ok {
		_spec.SetField(sysmenu.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := smc.mutation.IsLeaf(); ok {
		_spec.SetField(sysmenu.FieldIsLeaf, field.TypeBool, value)
		_node.IsLeaf = &value
	}
	if value, ok := smc.mutation.OpenBlank(); ok {
		_spec.SetField(sysmenu.FieldOpenBlank, field.TypeBool, value)
		_node.OpenBlank = &value
	}
	if nodes := smc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysMenu.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysMenuUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (smc *SysMenuCreate) OnConflict(opts ...sql.ConflictOption) *SysMenuUpsertOne {
	smc.conflict = opts
	return &SysMenuUpsertOne{
		create: smc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smc *SysMenuCreate) OnConflictColumns(columns ...string) *SysMenuUpsertOne {
	smc.conflict = append(smc.conflict, sql.ConflictColumns(columns...))
	return &SysMenuUpsertOne{
		create: smc,
	}
}

type (
	// SysMenuUpsertOne is the builder for "upsert"-ing
	//  one SysMenu node.
	SysMenuUpsertOne struct {
		create *SysMenuCreate
	}

	// SysMenuUpsert is the "OnConflict" setter.
	SysMenuUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *SysMenuUpsert) SetIsDel(v bool) *SysMenuUpsert {
	u.Set(sysmenu.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateIsDel() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldIsDel)
	return u
}

// SetMemo sets the "memo" field.
func (u *SysMenuUpsert) SetMemo(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateMemo() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *SysMenuUpsert) ClearMemo() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldMemo)
	return u
}

// SetSort sets the "sort" field.
func (u *SysMenuUpsert) SetSort(v int32) *SysMenuUpsert {
	u.Set(sysmenu.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateSort() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *SysMenuUpsert) AddSort(v int32) *SysMenuUpsert {
	u.Add(sysmenu.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysMenuUpsert) SetUpdatedAt(v time.Time) *SysMenuUpsert {
	u.Set(sysmenu.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateUpdatedAt() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysMenuUpsert) ClearUpdatedAt() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysMenuUpsert) SetDeletedAt(v time.Time) *SysMenuUpsert {
	u.Set(sysmenu.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateDeletedAt() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysMenuUpsert) ClearDeletedAt() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SysMenuUpsert) SetIsActive(v bool) *SysMenuUpsert {
	u.Set(sysmenu.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateIsActive() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldIsActive)
	return u
}

// SetName sets the "name" field.
func (u *SysMenuUpsert) SetName(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateName() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldName)
	return u
}

// SetIcon sets the "icon" field.
func (u *SysMenuUpsert) SetIcon(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateIcon() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldIcon)
	return u
}

// SetRouter sets the "router" field.
func (u *SysMenuUpsert) SetRouter(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldRouter, v)
	return u
}

// UpdateRouter sets the "router" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateRouter() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldRouter)
	return u
}

// SetIsShow sets the "is_show" field.
func (u *SysMenuUpsert) SetIsShow(v bool) *SysMenuUpsert {
	u.Set(sysmenu.FieldIsShow, v)
	return u
}

// UpdateIsShow sets the "is_show" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateIsShow() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldIsShow)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *SysMenuUpsert) SetParentID(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateParentID() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *SysMenuUpsert) ClearParentID() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldParentID)
	return u
}

// SetParentPath sets the "parent_path" field.
func (u *SysMenuUpsert) SetParentPath(v string) *SysMenuUpsert {
	u.Set(sysmenu.FieldParentPath, v)
	return u
}

// UpdateParentPath sets the "parent_path" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateParentPath() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldParentPath)
	return u
}

// ClearParentPath clears the value of the "parent_path" field.
func (u *SysMenuUpsert) ClearParentPath() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldParentPath)
	return u
}

// SetLevel sets the "level" field.
func (u *SysMenuUpsert) SetLevel(v int32) *SysMenuUpsert {
	u.Set(sysmenu.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateLevel() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *SysMenuUpsert) AddLevel(v int32) *SysMenuUpsert {
	u.Add(sysmenu.FieldLevel, v)
	return u
}

// SetIsLeaf sets the "is_leaf" field.
func (u *SysMenuUpsert) SetIsLeaf(v bool) *SysMenuUpsert {
	u.Set(sysmenu.FieldIsLeaf, v)
	return u
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateIsLeaf() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldIsLeaf)
	return u
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *SysMenuUpsert) ClearIsLeaf() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldIsLeaf)
	return u
}

// SetOpenBlank sets the "open_blank" field.
func (u *SysMenuUpsert) SetOpenBlank(v bool) *SysMenuUpsert {
	u.Set(sysmenu.FieldOpenBlank, v)
	return u
}

// UpdateOpenBlank sets the "open_blank" field to the value that was provided on create.
func (u *SysMenuUpsert) UpdateOpenBlank() *SysMenuUpsert {
	u.SetExcluded(sysmenu.FieldOpenBlank)
	return u
}

// ClearOpenBlank clears the value of the "open_blank" field.
func (u *SysMenuUpsert) ClearOpenBlank() *SysMenuUpsert {
	u.SetNull(sysmenu.FieldOpenBlank)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysmenu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysMenuUpsertOne) UpdateNewValues() *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sysmenu.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(sysmenu.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysMenuUpsertOne) Ignore() *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysMenuUpsertOne) DoNothing() *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysMenuCreate.OnConflict
// documentation for more info.
func (u *SysMenuUpsertOne) Update(set func(*SysMenuUpsert)) *SysMenuUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysMenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysMenuUpsertOne) SetIsDel(v bool) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateIsDel() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsDel()
	})
}

// SetMemo sets the "memo" field.
func (u *SysMenuUpsertOne) SetMemo(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateMemo() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysMenuUpsertOne) ClearMemo() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearMemo()
	})
}

// SetSort sets the "sort" field.
func (u *SysMenuUpsertOne) SetSort(v int32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysMenuUpsertOne) AddSort(v int32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateSort() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysMenuUpsertOne) SetUpdatedAt(v time.Time) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateUpdatedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysMenuUpsertOne) ClearUpdatedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysMenuUpsertOne) SetDeletedAt(v time.Time) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateDeletedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysMenuUpsertOne) ClearDeletedAt() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysMenuUpsertOne) SetIsActive(v bool) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateIsActive() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsActive()
	})
}

// SetName sets the "name" field.
func (u *SysMenuUpsertOne) SetName(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateName() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *SysMenuUpsertOne) SetIcon(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateIcon() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIcon()
	})
}

// SetRouter sets the "router" field.
func (u *SysMenuUpsertOne) SetRouter(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetRouter(v)
	})
}

// UpdateRouter sets the "router" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateRouter() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateRouter()
	})
}

// SetIsShow sets the "is_show" field.
func (u *SysMenuUpsertOne) SetIsShow(v bool) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsShow(v)
	})
}

// UpdateIsShow sets the "is_show" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateIsShow() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsShow()
	})
}

// SetParentID sets the "parent_id" field.
func (u *SysMenuUpsertOne) SetParentID(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateParentID() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *SysMenuUpsertOne) ClearParentID() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearParentID()
	})
}

// SetParentPath sets the "parent_path" field.
func (u *SysMenuUpsertOne) SetParentPath(v string) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetParentPath(v)
	})
}

// UpdateParentPath sets the "parent_path" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateParentPath() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateParentPath()
	})
}

// ClearParentPath clears the value of the "parent_path" field.
func (u *SysMenuUpsertOne) ClearParentPath() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearParentPath()
	})
}

// SetLevel sets the "level" field.
func (u *SysMenuUpsertOne) SetLevel(v int32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *SysMenuUpsertOne) AddLevel(v int32) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateLevel() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateLevel()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *SysMenuUpsertOne) SetIsLeaf(v bool) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateIsLeaf() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsLeaf()
	})
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *SysMenuUpsertOne) ClearIsLeaf() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearIsLeaf()
	})
}

// SetOpenBlank sets the "open_blank" field.
func (u *SysMenuUpsertOne) SetOpenBlank(v bool) *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetOpenBlank(v)
	})
}

// UpdateOpenBlank sets the "open_blank" field to the value that was provided on create.
func (u *SysMenuUpsertOne) UpdateOpenBlank() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateOpenBlank()
	})
}

// ClearOpenBlank clears the value of the "open_blank" field.
func (u *SysMenuUpsertOne) ClearOpenBlank() *SysMenuUpsertOne {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearOpenBlank()
	})
}

// Exec executes the query.
func (u *SysMenuUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysMenuCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysMenuUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysMenuUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SysMenuUpsertOne.ID is not supported by MySQL driver. Use SysMenuUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysMenuUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysMenuCreateBulk is the builder for creating many SysMenu entities in bulk.
type SysMenuCreateBulk struct {
	config
	builders []*SysMenuCreate
	conflict []sql.ConflictOption
}

// Save creates the SysMenu entities in the database.
func (smcb *SysMenuCreateBulk) Save(ctx context.Context) ([]*SysMenu, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SysMenu, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysMenuMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = smcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) SaveX(ctx context.Context) []*SysMenu {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SysMenuCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SysMenuCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysMenu.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysMenuUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (smcb *SysMenuCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysMenuUpsertBulk {
	smcb.conflict = opts
	return &SysMenuUpsertBulk{
		create: smcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smcb *SysMenuCreateBulk) OnConflictColumns(columns ...string) *SysMenuUpsertBulk {
	smcb.conflict = append(smcb.conflict, sql.ConflictColumns(columns...))
	return &SysMenuUpsertBulk{
		create: smcb,
	}
}

// SysMenuUpsertBulk is the builder for "upsert"-ing
// a bulk of SysMenu nodes.
type SysMenuUpsertBulk struct {
	create *SysMenuCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sysmenu.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysMenuUpsertBulk) UpdateNewValues() *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sysmenu.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(sysmenu.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysMenu.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysMenuUpsertBulk) Ignore() *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysMenuUpsertBulk) DoNothing() *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysMenuCreateBulk.OnConflict
// documentation for more info.
func (u *SysMenuUpsertBulk) Update(set func(*SysMenuUpsert)) *SysMenuUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysMenuUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysMenuUpsertBulk) SetIsDel(v bool) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateIsDel() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsDel()
	})
}

// SetMemo sets the "memo" field.
func (u *SysMenuUpsertBulk) SetMemo(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateMemo() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysMenuUpsertBulk) ClearMemo() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearMemo()
	})
}

// SetSort sets the "sort" field.
func (u *SysMenuUpsertBulk) SetSort(v int32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysMenuUpsertBulk) AddSort(v int32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateSort() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysMenuUpsertBulk) SetUpdatedAt(v time.Time) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateUpdatedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysMenuUpsertBulk) ClearUpdatedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysMenuUpsertBulk) SetDeletedAt(v time.Time) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateDeletedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysMenuUpsertBulk) ClearDeletedAt() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysMenuUpsertBulk) SetIsActive(v bool) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateIsActive() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsActive()
	})
}

// SetName sets the "name" field.
func (u *SysMenuUpsertBulk) SetName(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateName() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateName()
	})
}

// SetIcon sets the "icon" field.
func (u *SysMenuUpsertBulk) SetIcon(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateIcon() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIcon()
	})
}

// SetRouter sets the "router" field.
func (u *SysMenuUpsertBulk) SetRouter(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetRouter(v)
	})
}

// UpdateRouter sets the "router" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateRouter() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateRouter()
	})
}

// SetIsShow sets the "is_show" field.
func (u *SysMenuUpsertBulk) SetIsShow(v bool) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsShow(v)
	})
}

// UpdateIsShow sets the "is_show" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateIsShow() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsShow()
	})
}

// SetParentID sets the "parent_id" field.
func (u *SysMenuUpsertBulk) SetParentID(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateParentID() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *SysMenuUpsertBulk) ClearParentID() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearParentID()
	})
}

// SetParentPath sets the "parent_path" field.
func (u *SysMenuUpsertBulk) SetParentPath(v string) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetParentPath(v)
	})
}

// UpdateParentPath sets the "parent_path" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateParentPath() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateParentPath()
	})
}

// ClearParentPath clears the value of the "parent_path" field.
func (u *SysMenuUpsertBulk) ClearParentPath() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearParentPath()
	})
}

// SetLevel sets the "level" field.
func (u *SysMenuUpsertBulk) SetLevel(v int32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *SysMenuUpsertBulk) AddLevel(v int32) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateLevel() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateLevel()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *SysMenuUpsertBulk) SetIsLeaf(v bool) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateIsLeaf() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateIsLeaf()
	})
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *SysMenuUpsertBulk) ClearIsLeaf() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearIsLeaf()
	})
}

// SetOpenBlank sets the "open_blank" field.
func (u *SysMenuUpsertBulk) SetOpenBlank(v bool) *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.SetOpenBlank(v)
	})
}

// UpdateOpenBlank sets the "open_blank" field to the value that was provided on create.
func (u *SysMenuUpsertBulk) UpdateOpenBlank() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.UpdateOpenBlank()
	})
}

// ClearOpenBlank clears the value of the "open_blank" field.
func (u *SysMenuUpsertBulk) ClearOpenBlank() *SysMenuUpsertBulk {
	return u.Update(func(s *SysMenuUpsert) {
		s.ClearOpenBlank()
	})
}

// Exec executes the query.
func (u *SysMenuUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SysMenuCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SysMenuCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysMenuUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
