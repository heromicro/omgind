// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/mainent"
	"github.com/heromicro/omgind/internal/gen/mainent/orgdept"
	"github.com/heromicro/omgind/internal/gen/mainent/orgorgan"
	"github.com/heromicro/omgind/internal/gen/mainent/orgposition"
	"github.com/heromicro/omgind/internal/gen/mainent/orgstaff"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/sysaddress"
	"github.com/heromicro/omgind/internal/gen/mainent/sysannex"
	"github.com/heromicro/omgind/internal/gen/mainent/sysdict"
	"github.com/heromicro/omgind/internal/gen/mainent/sysdictitem"
	"github.com/heromicro/omgind/internal/gen/mainent/sysdistrict"
	"github.com/heromicro/omgind/internal/gen/mainent/sysjwtblock"
	"github.com/heromicro/omgind/internal/gen/mainent/syslogging"
	"github.com/heromicro/omgind/internal/gen/mainent/sysmenu"
	"github.com/heromicro/omgind/internal/gen/mainent/sysmenuaction"
	"github.com/heromicro/omgind/internal/gen/mainent/sysmenuactionresource"
	"github.com/heromicro/omgind/internal/gen/mainent/sysrole"
	"github.com/heromicro/omgind/internal/gen/mainent/sysrolemenu"
	"github.com/heromicro/omgind/internal/gen/mainent/systeam"
	"github.com/heromicro/omgind/internal/gen/mainent/systeamuser"
	"github.com/heromicro/omgind/internal/gen/mainent/sysuser"
	"github.com/heromicro/omgind/internal/gen/mainent/sysuserrole"
	"github.com/heromicro/omgind/internal/gen/mainent/xxxdemo"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next mainent.Querier) mainent.Querier {
	return mainent.QuerierFunc(func(ctx context.Context, q mainent.Query) (mainent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q mainent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The OrgDeptFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgDeptFunc func(context.Context, *mainent.OrgDeptQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f OrgDeptFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.OrgDeptQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.OrgDeptQuery", q)
}

// The TraverseOrgDept type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgDept func(context.Context, *mainent.OrgDeptQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgDept) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgDept) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.OrgDeptQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.OrgDeptQuery", q)
}

// The OrgOrganFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgOrganFunc func(context.Context, *mainent.OrgOrganQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f OrgOrganFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.OrgOrganQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.OrgOrganQuery", q)
}

// The TraverseOrgOrgan type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgOrgan func(context.Context, *mainent.OrgOrganQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgOrgan) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgOrgan) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.OrgOrganQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.OrgOrganQuery", q)
}

// The OrgPositionFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgPositionFunc func(context.Context, *mainent.OrgPositionQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f OrgPositionFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.OrgPositionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.OrgPositionQuery", q)
}

// The TraverseOrgPosition type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgPosition func(context.Context, *mainent.OrgPositionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgPosition) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgPosition) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.OrgPositionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.OrgPositionQuery", q)
}

// The OrgStaffFunc type is an adapter to allow the use of ordinary function as a Querier.
type OrgStaffFunc func(context.Context, *mainent.OrgStaffQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f OrgStaffFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.OrgStaffQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.OrgStaffQuery", q)
}

// The TraverseOrgStaff type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOrgStaff func(context.Context, *mainent.OrgStaffQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOrgStaff) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOrgStaff) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.OrgStaffQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.OrgStaffQuery", q)
}

// The SysAddressFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysAddressFunc func(context.Context, *mainent.SysAddressQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysAddressFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysAddressQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysAddressQuery", q)
}

// The TraverseSysAddress type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysAddress func(context.Context, *mainent.SysAddressQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysAddress) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysAddress) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysAddressQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysAddressQuery", q)
}

// The SysAnnexFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysAnnexFunc func(context.Context, *mainent.SysAnnexQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysAnnexFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysAnnexQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysAnnexQuery", q)
}

// The TraverseSysAnnex type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysAnnex func(context.Context, *mainent.SysAnnexQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysAnnex) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysAnnex) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysAnnexQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysAnnexQuery", q)
}

// The SysDictFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDictFunc func(context.Context, *mainent.SysDictQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysDictFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysDictQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysDictQuery", q)
}

// The TraverseSysDict type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDict func(context.Context, *mainent.SysDictQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDict) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDict) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysDictQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysDictQuery", q)
}

// The SysDictItemFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDictItemFunc func(context.Context, *mainent.SysDictItemQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysDictItemFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysDictItemQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysDictItemQuery", q)
}

// The TraverseSysDictItem type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDictItem func(context.Context, *mainent.SysDictItemQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDictItem) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDictItem) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysDictItemQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysDictItemQuery", q)
}

// The SysDistrictFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysDistrictFunc func(context.Context, *mainent.SysDistrictQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysDistrictFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysDistrictQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysDistrictQuery", q)
}

// The TraverseSysDistrict type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysDistrict func(context.Context, *mainent.SysDistrictQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysDistrict) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysDistrict) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysDistrictQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysDistrictQuery", q)
}

// The SysJwtBlockFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysJwtBlockFunc func(context.Context, *mainent.SysJwtBlockQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysJwtBlockFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysJwtBlockQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysJwtBlockQuery", q)
}

// The TraverseSysJwtBlock type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysJwtBlock func(context.Context, *mainent.SysJwtBlockQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysJwtBlock) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysJwtBlock) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysJwtBlockQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysJwtBlockQuery", q)
}

// The SysLoggingFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysLoggingFunc func(context.Context, *mainent.SysLoggingQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysLoggingFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysLoggingQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysLoggingQuery", q)
}

// The TraverseSysLogging type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysLogging func(context.Context, *mainent.SysLoggingQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysLogging) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysLogging) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysLoggingQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysLoggingQuery", q)
}

// The SysMenuFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysMenuFunc func(context.Context, *mainent.SysMenuQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysMenuFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysMenuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysMenuQuery", q)
}

// The TraverseSysMenu type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysMenu func(context.Context, *mainent.SysMenuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysMenu) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysMenu) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysMenuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysMenuQuery", q)
}

// The SysMenuActionFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysMenuActionFunc func(context.Context, *mainent.SysMenuActionQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysMenuActionFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysMenuActionQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysMenuActionQuery", q)
}

// The TraverseSysMenuAction type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysMenuAction func(context.Context, *mainent.SysMenuActionQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysMenuAction) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysMenuAction) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysMenuActionQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysMenuActionQuery", q)
}

// The SysMenuActionResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysMenuActionResourceFunc func(context.Context, *mainent.SysMenuActionResourceQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysMenuActionResourceFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysMenuActionResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysMenuActionResourceQuery", q)
}

// The TraverseSysMenuActionResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysMenuActionResource func(context.Context, *mainent.SysMenuActionResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysMenuActionResource) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysMenuActionResource) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysMenuActionResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysMenuActionResourceQuery", q)
}

// The SysRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysRoleFunc func(context.Context, *mainent.SysRoleQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysRoleFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysRoleQuery", q)
}

// The TraverseSysRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysRole func(context.Context, *mainent.SysRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysRole) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysRole) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysRoleQuery", q)
}

// The SysRoleMenuFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysRoleMenuFunc func(context.Context, *mainent.SysRoleMenuQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysRoleMenuFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysRoleMenuQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysRoleMenuQuery", q)
}

// The TraverseSysRoleMenu type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysRoleMenu func(context.Context, *mainent.SysRoleMenuQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysRoleMenu) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysRoleMenu) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysRoleMenuQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysRoleMenuQuery", q)
}

// The SysTeamFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysTeamFunc func(context.Context, *mainent.SysTeamQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysTeamFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysTeamQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysTeamQuery", q)
}

// The TraverseSysTeam type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysTeam func(context.Context, *mainent.SysTeamQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysTeam) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysTeam) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysTeamQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysTeamQuery", q)
}

// The SysTeamUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysTeamUserFunc func(context.Context, *mainent.SysTeamUserQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysTeamUserFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysTeamUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysTeamUserQuery", q)
}

// The TraverseSysTeamUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysTeamUser func(context.Context, *mainent.SysTeamUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysTeamUser) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysTeamUser) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysTeamUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysTeamUserQuery", q)
}

// The SysUserFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysUserFunc func(context.Context, *mainent.SysUserQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysUserFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysUserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysUserQuery", q)
}

// The TraverseSysUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysUser func(context.Context, *mainent.SysUserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysUser) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysUser) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysUserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysUserQuery", q)
}

// The SysUserRoleFunc type is an adapter to allow the use of ordinary function as a Querier.
type SysUserRoleFunc func(context.Context, *mainent.SysUserRoleQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f SysUserRoleFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.SysUserRoleQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.SysUserRoleQuery", q)
}

// The TraverseSysUserRole type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSysUserRole func(context.Context, *mainent.SysUserRoleQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSysUserRole) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSysUserRole) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.SysUserRoleQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.SysUserRoleQuery", q)
}

// The XxxDemoFunc type is an adapter to allow the use of ordinary function as a Querier.
type XxxDemoFunc func(context.Context, *mainent.XxxDemoQuery) (mainent.Value, error)

// Query calls f(ctx, q).
func (f XxxDemoFunc) Query(ctx context.Context, q mainent.Query) (mainent.Value, error) {
	if q, ok := q.(*mainent.XxxDemoQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *mainent.XxxDemoQuery", q)
}

// The TraverseXxxDemo type is an adapter to allow the use of ordinary function as Traverser.
type TraverseXxxDemo func(context.Context, *mainent.XxxDemoQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseXxxDemo) Intercept(next mainent.Querier) mainent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseXxxDemo) Traverse(ctx context.Context, q mainent.Query) error {
	if q, ok := q.(*mainent.XxxDemoQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *mainent.XxxDemoQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q mainent.Query) (Query, error) {
	switch q := q.(type) {
	case *mainent.OrgDeptQuery:
		return &query[*mainent.OrgDeptQuery, predicate.OrgDept, orgdept.OrderOption]{typ: mainent.TypeOrgDept, tq: q}, nil
	case *mainent.OrgOrganQuery:
		return &query[*mainent.OrgOrganQuery, predicate.OrgOrgan, orgorgan.OrderOption]{typ: mainent.TypeOrgOrgan, tq: q}, nil
	case *mainent.OrgPositionQuery:
		return &query[*mainent.OrgPositionQuery, predicate.OrgPosition, orgposition.OrderOption]{typ: mainent.TypeOrgPosition, tq: q}, nil
	case *mainent.OrgStaffQuery:
		return &query[*mainent.OrgStaffQuery, predicate.OrgStaff, orgstaff.OrderOption]{typ: mainent.TypeOrgStaff, tq: q}, nil
	case *mainent.SysAddressQuery:
		return &query[*mainent.SysAddressQuery, predicate.SysAddress, sysaddress.OrderOption]{typ: mainent.TypeSysAddress, tq: q}, nil
	case *mainent.SysAnnexQuery:
		return &query[*mainent.SysAnnexQuery, predicate.SysAnnex, sysannex.OrderOption]{typ: mainent.TypeSysAnnex, tq: q}, nil
	case *mainent.SysDictQuery:
		return &query[*mainent.SysDictQuery, predicate.SysDict, sysdict.OrderOption]{typ: mainent.TypeSysDict, tq: q}, nil
	case *mainent.SysDictItemQuery:
		return &query[*mainent.SysDictItemQuery, predicate.SysDictItem, sysdictitem.OrderOption]{typ: mainent.TypeSysDictItem, tq: q}, nil
	case *mainent.SysDistrictQuery:
		return &query[*mainent.SysDistrictQuery, predicate.SysDistrict, sysdistrict.OrderOption]{typ: mainent.TypeSysDistrict, tq: q}, nil
	case *mainent.SysJwtBlockQuery:
		return &query[*mainent.SysJwtBlockQuery, predicate.SysJwtBlock, sysjwtblock.OrderOption]{typ: mainent.TypeSysJwtBlock, tq: q}, nil
	case *mainent.SysLoggingQuery:
		return &query[*mainent.SysLoggingQuery, predicate.SysLogging, syslogging.OrderOption]{typ: mainent.TypeSysLogging, tq: q}, nil
	case *mainent.SysMenuQuery:
		return &query[*mainent.SysMenuQuery, predicate.SysMenu, sysmenu.OrderOption]{typ: mainent.TypeSysMenu, tq: q}, nil
	case *mainent.SysMenuActionQuery:
		return &query[*mainent.SysMenuActionQuery, predicate.SysMenuAction, sysmenuaction.OrderOption]{typ: mainent.TypeSysMenuAction, tq: q}, nil
	case *mainent.SysMenuActionResourceQuery:
		return &query[*mainent.SysMenuActionResourceQuery, predicate.SysMenuActionResource, sysmenuactionresource.OrderOption]{typ: mainent.TypeSysMenuActionResource, tq: q}, nil
	case *mainent.SysRoleQuery:
		return &query[*mainent.SysRoleQuery, predicate.SysRole, sysrole.OrderOption]{typ: mainent.TypeSysRole, tq: q}, nil
	case *mainent.SysRoleMenuQuery:
		return &query[*mainent.SysRoleMenuQuery, predicate.SysRoleMenu, sysrolemenu.OrderOption]{typ: mainent.TypeSysRoleMenu, tq: q}, nil
	case *mainent.SysTeamQuery:
		return &query[*mainent.SysTeamQuery, predicate.SysTeam, systeam.OrderOption]{typ: mainent.TypeSysTeam, tq: q}, nil
	case *mainent.SysTeamUserQuery:
		return &query[*mainent.SysTeamUserQuery, predicate.SysTeamUser, systeamuser.OrderOption]{typ: mainent.TypeSysTeamUser, tq: q}, nil
	case *mainent.SysUserQuery:
		return &query[*mainent.SysUserQuery, predicate.SysUser, sysuser.OrderOption]{typ: mainent.TypeSysUser, tq: q}, nil
	case *mainent.SysUserRoleQuery:
		return &query[*mainent.SysUserRoleQuery, predicate.SysUserRole, sysuserrole.OrderOption]{typ: mainent.TypeSysUserRole, tq: q}, nil
	case *mainent.XxxDemoQuery:
		return &query[*mainent.XxxDemoQuery, predicate.XxxDemo, xxxdemo.OrderOption]{typ: mainent.TypeXxxDemo, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
