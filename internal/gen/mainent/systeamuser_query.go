// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/systeam"
	"github.com/heromicro/omgind/internal/gen/mainent/systeamuser"
	"github.com/heromicro/omgind/internal/gen/mainent/sysuser"
)

// SysTeamUserQuery is the builder for querying SysTeamUser entities.
type SysTeamUserQuery struct {
	config
	ctx        *QueryContext
	order      []systeamuser.OrderOption
	inters     []Interceptor
	predicates []predicate.SysTeamUser
	withUser   *SysUserQuery
	withTeam   *SysTeamQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SysTeamUserQuery builder.
func (stuq *SysTeamUserQuery) Where(ps ...predicate.SysTeamUser) *SysTeamUserQuery {
	stuq.predicates = append(stuq.predicates, ps...)
	return stuq
}

// Limit the number of records to be returned by this query.
func (stuq *SysTeamUserQuery) Limit(limit int) *SysTeamUserQuery {
	stuq.ctx.Limit = &limit
	return stuq
}

// Offset to start from.
func (stuq *SysTeamUserQuery) Offset(offset int) *SysTeamUserQuery {
	stuq.ctx.Offset = &offset
	return stuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (stuq *SysTeamUserQuery) Unique(unique bool) *SysTeamUserQuery {
	stuq.ctx.Unique = &unique
	return stuq
}

// Order specifies how the records should be ordered.
func (stuq *SysTeamUserQuery) Order(o ...systeamuser.OrderOption) *SysTeamUserQuery {
	stuq.order = append(stuq.order, o...)
	return stuq
}

// QueryUser chains the current query on the "user" edge.
func (stuq *SysTeamUserQuery) QueryUser() *SysUserQuery {
	query := (&SysUserClient{config: stuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systeamuser.Table, systeamuser.FieldID, selector),
			sqlgraph.To(sysuser.Table, sysuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systeamuser.UserTable, systeamuser.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(stuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTeam chains the current query on the "team" edge.
func (stuq *SysTeamUserQuery) QueryTeam() *SysTeamQuery {
	query := (&SysTeamClient{config: stuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := stuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := stuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(systeamuser.Table, systeamuser.FieldID, selector),
			sqlgraph.To(systeam.Table, systeam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, systeamuser.TeamTable, systeamuser.TeamColumn),
		)
		fromU = sqlgraph.SetNeighbors(stuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SysTeamUser entity from the query.
// Returns a *NotFoundError when no SysTeamUser was found.
func (stuq *SysTeamUserQuery) First(ctx context.Context) (*SysTeamUser, error) {
	nodes, err := stuq.Limit(1).All(setContextOp(ctx, stuq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{systeamuser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (stuq *SysTeamUserQuery) FirstX(ctx context.Context) *SysTeamUser {
	node, err := stuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SysTeamUser ID from the query.
// Returns a *NotFoundError when no SysTeamUser ID was found.
func (stuq *SysTeamUserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = stuq.Limit(1).IDs(setContextOp(ctx, stuq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{systeamuser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (stuq *SysTeamUserQuery) FirstIDX(ctx context.Context) string {
	id, err := stuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SysTeamUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SysTeamUser entity is found.
// Returns a *NotFoundError when no SysTeamUser entities are found.
func (stuq *SysTeamUserQuery) Only(ctx context.Context) (*SysTeamUser, error) {
	nodes, err := stuq.Limit(2).All(setContextOp(ctx, stuq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{systeamuser.Label}
	default:
		return nil, &NotSingularError{systeamuser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (stuq *SysTeamUserQuery) OnlyX(ctx context.Context) *SysTeamUser {
	node, err := stuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SysTeamUser ID in the query.
// Returns a *NotSingularError when more than one SysTeamUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (stuq *SysTeamUserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = stuq.Limit(2).IDs(setContextOp(ctx, stuq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{systeamuser.Label}
	default:
		err = &NotSingularError{systeamuser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (stuq *SysTeamUserQuery) OnlyIDX(ctx context.Context) string {
	id, err := stuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SysTeamUsers.
func (stuq *SysTeamUserQuery) All(ctx context.Context) ([]*SysTeamUser, error) {
	ctx = setContextOp(ctx, stuq.ctx, "All")
	if err := stuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SysTeamUser, *SysTeamUserQuery]()
	return withInterceptors[[]*SysTeamUser](ctx, stuq, qr, stuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (stuq *SysTeamUserQuery) AllX(ctx context.Context) []*SysTeamUser {
	nodes, err := stuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SysTeamUser IDs.
func (stuq *SysTeamUserQuery) IDs(ctx context.Context) (ids []string, err error) {
	if stuq.ctx.Unique == nil && stuq.path != nil {
		stuq.Unique(true)
	}
	ctx = setContextOp(ctx, stuq.ctx, "IDs")
	if err = stuq.Select(systeamuser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (stuq *SysTeamUserQuery) IDsX(ctx context.Context) []string {
	ids, err := stuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (stuq *SysTeamUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, stuq.ctx, "Count")
	if err := stuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, stuq, querierCount[*SysTeamUserQuery](), stuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (stuq *SysTeamUserQuery) CountX(ctx context.Context) int {
	count, err := stuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (stuq *SysTeamUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, stuq.ctx, "Exist")
	switch _, err := stuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("mainent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (stuq *SysTeamUserQuery) ExistX(ctx context.Context) bool {
	exist, err := stuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SysTeamUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (stuq *SysTeamUserQuery) Clone() *SysTeamUserQuery {
	if stuq == nil {
		return nil
	}
	return &SysTeamUserQuery{
		config:     stuq.config,
		ctx:        stuq.ctx.Clone(),
		order:      append([]systeamuser.OrderOption{}, stuq.order...),
		inters:     append([]Interceptor{}, stuq.inters...),
		predicates: append([]predicate.SysTeamUser{}, stuq.predicates...),
		withUser:   stuq.withUser.Clone(),
		withTeam:   stuq.withTeam.Clone(),
		// clone intermediate query.
		sql:  stuq.sql.Clone(),
		path: stuq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (stuq *SysTeamUserQuery) WithUser(opts ...func(*SysUserQuery)) *SysTeamUserQuery {
	query := (&SysUserClient{config: stuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stuq.withUser = query
	return stuq
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (stuq *SysTeamUserQuery) WithTeam(opts ...func(*SysTeamQuery)) *SysTeamUserQuery {
	query := (&SysTeamClient{config: stuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	stuq.withTeam = query
	return stuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Sort int32 `json:"sort,omitempty" sql:"sort"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SysTeamUser.Query().
//		GroupBy(systeamuser.FieldSort).
//		Aggregate(mainent.Count()).
//		Scan(ctx, &v)
func (stuq *SysTeamUserQuery) GroupBy(field string, fields ...string) *SysTeamUserGroupBy {
	stuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SysTeamUserGroupBy{build: stuq}
	grbuild.flds = &stuq.ctx.Fields
	grbuild.label = systeamuser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Sort int32 `json:"sort,omitempty" sql:"sort"`
//	}
//
//	client.SysTeamUser.Query().
//		Select(systeamuser.FieldSort).
//		Scan(ctx, &v)
func (stuq *SysTeamUserQuery) Select(fields ...string) *SysTeamUserSelect {
	stuq.ctx.Fields = append(stuq.ctx.Fields, fields...)
	sbuild := &SysTeamUserSelect{SysTeamUserQuery: stuq}
	sbuild.label = systeamuser.Label
	sbuild.flds, sbuild.scan = &stuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SysTeamUserSelect configured with the given aggregations.
func (stuq *SysTeamUserQuery) Aggregate(fns ...AggregateFunc) *SysTeamUserSelect {
	return stuq.Select().Aggregate(fns...)
}

func (stuq *SysTeamUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range stuq.inters {
		if inter == nil {
			return fmt.Errorf("mainent: uninitialized interceptor (forgotten import mainent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, stuq); err != nil {
				return err
			}
		}
	}
	for _, f := range stuq.ctx.Fields {
		if !systeamuser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("mainent: invalid field %q for query", f)}
		}
	}
	if stuq.path != nil {
		prev, err := stuq.path(ctx)
		if err != nil {
			return err
		}
		stuq.sql = prev
	}
	return nil
}

func (stuq *SysTeamUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SysTeamUser, error) {
	var (
		nodes       = []*SysTeamUser{}
		_spec       = stuq.querySpec()
		loadedTypes = [2]bool{
			stuq.withUser != nil,
			stuq.withTeam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SysTeamUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SysTeamUser{config: stuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(stuq.modifiers) > 0 {
		_spec.Modifiers = stuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, stuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := stuq.withUser; query != nil {
		if err := stuq.loadUser(ctx, query, nodes, nil,
			func(n *SysTeamUser, e *SysUser) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := stuq.withTeam; query != nil {
		if err := stuq.loadTeam(ctx, query, nodes, nil,
			func(n *SysTeamUser, e *SysTeam) { n.Edges.Team = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (stuq *SysTeamUserQuery) loadUser(ctx context.Context, query *SysUserQuery, nodes []*SysTeamUser, init func(*SysTeamUser), assign func(*SysTeamUser, *SysUser)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SysTeamUser)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sysuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (stuq *SysTeamUserQuery) loadTeam(ctx context.Context, query *SysTeamQuery, nodes []*SysTeamUser, init func(*SysTeamUser), assign func(*SysTeamUser, *SysTeam)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SysTeamUser)
	for i := range nodes {
		fk := nodes[i].TeamID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(systeam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "team_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (stuq *SysTeamUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := stuq.querySpec()
	if len(stuq.modifiers) > 0 {
		_spec.Modifiers = stuq.modifiers
	}
	_spec.Node.Columns = stuq.ctx.Fields
	if len(stuq.ctx.Fields) > 0 {
		_spec.Unique = stuq.ctx.Unique != nil && *stuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, stuq.driver, _spec)
}

func (stuq *SysTeamUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(systeamuser.Table, systeamuser.Columns, sqlgraph.NewFieldSpec(systeamuser.FieldID, field.TypeString))
	_spec.From = stuq.sql
	if unique := stuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if stuq.path != nil {
		_spec.Unique = true
	}
	if fields := stuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systeamuser.FieldID)
		for i := range fields {
			if fields[i] != systeamuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if stuq.withUser != nil {
			_spec.Node.AddColumnOnce(systeamuser.FieldUserID)
		}
		if stuq.withTeam != nil {
			_spec.Node.AddColumnOnce(systeamuser.FieldTeamID)
		}
	}
	if ps := stuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := stuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := stuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := stuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (stuq *SysTeamUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(stuq.driver.Dialect())
	t1 := builder.Table(systeamuser.Table)
	columns := stuq.ctx.Fields
	if len(columns) == 0 {
		columns = systeamuser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if stuq.sql != nil {
		selector = stuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if stuq.ctx.Unique != nil && *stuq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range stuq.modifiers {
		m(selector)
	}
	for _, p := range stuq.predicates {
		p(selector)
	}
	for _, p := range stuq.order {
		p(selector)
	}
	if offset := stuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := stuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (stuq *SysTeamUserQuery) ForUpdate(opts ...sql.LockOption) *SysTeamUserQuery {
	if stuq.driver.Dialect() == dialect.Postgres {
		stuq.Unique(false)
	}
	stuq.modifiers = append(stuq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return stuq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (stuq *SysTeamUserQuery) ForShare(opts ...sql.LockOption) *SysTeamUserQuery {
	if stuq.driver.Dialect() == dialect.Postgres {
		stuq.Unique(false)
	}
	stuq.modifiers = append(stuq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return stuq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (stuq *SysTeamUserQuery) Modify(modifiers ...func(s *sql.Selector)) *SysTeamUserSelect {
	stuq.modifiers = append(stuq.modifiers, modifiers...)
	return stuq.Select()
}

// SysTeamUserGroupBy is the group-by builder for SysTeamUser entities.
type SysTeamUserGroupBy struct {
	selector
	build *SysTeamUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (stugb *SysTeamUserGroupBy) Aggregate(fns ...AggregateFunc) *SysTeamUserGroupBy {
	stugb.fns = append(stugb.fns, fns...)
	return stugb
}

// Scan applies the selector query and scans the result into the given value.
func (stugb *SysTeamUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, stugb.build.ctx, "GroupBy")
	if err := stugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysTeamUserQuery, *SysTeamUserGroupBy](ctx, stugb.build, stugb, stugb.build.inters, v)
}

func (stugb *SysTeamUserGroupBy) sqlScan(ctx context.Context, root *SysTeamUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(stugb.fns))
	for _, fn := range stugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*stugb.flds)+len(stugb.fns))
		for _, f := range *stugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*stugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := stugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SysTeamUserSelect is the builder for selecting fields of SysTeamUser entities.
type SysTeamUserSelect struct {
	*SysTeamUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (stus *SysTeamUserSelect) Aggregate(fns ...AggregateFunc) *SysTeamUserSelect {
	stus.fns = append(stus.fns, fns...)
	return stus
}

// Scan applies the selector query and scans the result into the given value.
func (stus *SysTeamUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, stus.ctx, "Select")
	if err := stus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SysTeamUserQuery, *SysTeamUserSelect](ctx, stus.SysTeamUserQuery, stus, stus.inters, v)
}

func (stus *SysTeamUserSelect) sqlScan(ctx context.Context, root *SysTeamUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(stus.fns))
	for _, fn := range stus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*stus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := stus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (stus *SysTeamUserSelect) Modify(modifiers ...func(s *sql.Selector)) *SysTeamUserSelect {
	stus.modifiers = append(stus.modifiers, modifiers...)
	return stus
}
