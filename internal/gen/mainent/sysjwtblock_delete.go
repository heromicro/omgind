// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/sysjwtblock"
)

// SysJwtBlockDelete is the builder for deleting a SysJwtBlock entity.
type SysJwtBlockDelete struct {
	config
	hooks    []Hook
	mutation *SysJwtBlockMutation
}

// Where appends a list predicates to the SysJwtBlockDelete builder.
func (sjbd *SysJwtBlockDelete) Where(ps ...predicate.SysJwtBlock) *SysJwtBlockDelete {
	sjbd.mutation.Where(ps...)
	return sjbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sjbd *SysJwtBlockDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sjbd.sqlExec, sjbd.mutation, sjbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sjbd *SysJwtBlockDelete) ExecX(ctx context.Context) int {
	n, err := sjbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sjbd *SysJwtBlockDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysjwtblock.Table, sqlgraph.NewFieldSpec(sysjwtblock.FieldID, field.TypeString))
	if ps := sjbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sjbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sjbd.mutation.done = true
	return affected, err
}

// SysJwtBlockDeleteOne is the builder for deleting a single SysJwtBlock entity.
type SysJwtBlockDeleteOne struct {
	sjbd *SysJwtBlockDelete
}

// Where appends a list predicates to the SysJwtBlockDelete builder.
func (sjbdo *SysJwtBlockDeleteOne) Where(ps ...predicate.SysJwtBlock) *SysJwtBlockDeleteOne {
	sjbdo.sjbd.mutation.Where(ps...)
	return sjbdo
}

// Exec executes the deletion query.
func (sjbdo *SysJwtBlockDeleteOne) Exec(ctx context.Context) error {
	n, err := sjbdo.sjbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysjwtblock.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sjbdo *SysJwtBlockDeleteOne) ExecX(ctx context.Context) {
	if err := sjbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
