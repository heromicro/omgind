// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/systeam"
	"github.com/heromicro/omgind/internal/gen/mainent/systeamuser"
	"github.com/heromicro/omgind/internal/gen/mainent/sysuser"
)

// SysTeamCreate is the builder for creating a SysTeam entity.
type SysTeamCreate struct {
	config
	mutation *SysTeamMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSort sets the "sort" field.
func (stc *SysTeamCreate) SetSort(i int32) *SysTeamCreate {
	stc.mutation.SetSort(i)
	return stc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableSort(i *int32) *SysTeamCreate {
	if i != nil {
		stc.SetSort(*i)
	}
	return stc
}

// SetCreatedAt sets the "created_at" field.
func (stc *SysTeamCreate) SetCreatedAt(t time.Time) *SysTeamCreate {
	stc.mutation.SetCreatedAt(t)
	return stc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableCreatedAt(t *time.Time) *SysTeamCreate {
	if t != nil {
		stc.SetCreatedAt(*t)
	}
	return stc
}

// SetUpdatedAt sets the "updated_at" field.
func (stc *SysTeamCreate) SetUpdatedAt(t time.Time) *SysTeamCreate {
	stc.mutation.SetUpdatedAt(t)
	return stc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableUpdatedAt(t *time.Time) *SysTeamCreate {
	if t != nil {
		stc.SetUpdatedAt(*t)
	}
	return stc
}

// SetDeletedAt sets the "deleted_at" field.
func (stc *SysTeamCreate) SetDeletedAt(t time.Time) *SysTeamCreate {
	stc.mutation.SetDeletedAt(t)
	return stc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableDeletedAt(t *time.Time) *SysTeamCreate {
	if t != nil {
		stc.SetDeletedAt(*t)
	}
	return stc
}

// SetIsActive sets the "is_active" field.
func (stc *SysTeamCreate) SetIsActive(b bool) *SysTeamCreate {
	stc.mutation.SetIsActive(b)
	return stc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableIsActive(b *bool) *SysTeamCreate {
	if b != nil {
		stc.SetIsActive(*b)
	}
	return stc
}

// SetMemo sets the "memo" field.
func (stc *SysTeamCreate) SetMemo(s string) *SysTeamCreate {
	stc.mutation.SetMemo(s)
	return stc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableMemo(s *string) *SysTeamCreate {
	if s != nil {
		stc.SetMemo(*s)
	}
	return stc
}

// SetIsDel sets the "is_del" field.
func (stc *SysTeamCreate) SetIsDel(b bool) *SysTeamCreate {
	stc.mutation.SetIsDel(b)
	return stc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableIsDel(b *bool) *SysTeamCreate {
	if b != nil {
		stc.SetIsDel(*b)
	}
	return stc
}

// SetName sets the "name" field.
func (stc *SysTeamCreate) SetName(s string) *SysTeamCreate {
	stc.mutation.SetName(s)
	return stc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableName(s *string) *SysTeamCreate {
	if s != nil {
		stc.SetName(*s)
	}
	return stc
}

// SetCode sets the "code" field.
func (stc *SysTeamCreate) SetCode(s string) *SysTeamCreate {
	stc.mutation.SetCode(s)
	return stc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableCode(s *string) *SysTeamCreate {
	if s != nil {
		stc.SetCode(*s)
	}
	return stc
}

// SetID sets the "id" field.
func (stc *SysTeamCreate) SetID(s string) *SysTeamCreate {
	stc.mutation.SetID(s)
	return stc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stc *SysTeamCreate) SetNillableID(s *string) *SysTeamCreate {
	if s != nil {
		stc.SetID(*s)
	}
	return stc
}

// AddUserIDs adds the "users" edge to the SysUser entity by IDs.
func (stc *SysTeamCreate) AddUserIDs(ids ...string) *SysTeamCreate {
	stc.mutation.AddUserIDs(ids...)
	return stc
}

// AddUsers adds the "users" edges to the SysUser entity.
func (stc *SysTeamCreate) AddUsers(s ...*SysUser) *SysTeamCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddUserIDs(ids...)
}

// AddTeamUserIDs adds the "team_users" edge to the SysTeamUser entity by IDs.
func (stc *SysTeamCreate) AddTeamUserIDs(ids ...string) *SysTeamCreate {
	stc.mutation.AddTeamUserIDs(ids...)
	return stc
}

// AddTeamUsers adds the "team_users" edges to the SysTeamUser entity.
func (stc *SysTeamCreate) AddTeamUsers(s ...*SysTeamUser) *SysTeamCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return stc.AddTeamUserIDs(ids...)
}

// Mutation returns the SysTeamMutation object of the builder.
func (stc *SysTeamCreate) Mutation() *SysTeamMutation {
	return stc.mutation
}

// Save creates the SysTeam in the database.
func (stc *SysTeamCreate) Save(ctx context.Context) (*SysTeam, error) {
	stc.defaults()
	return withHooks(ctx, stc.sqlSave, stc.mutation, stc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stc *SysTeamCreate) SaveX(ctx context.Context) *SysTeam {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stc *SysTeamCreate) Exec(ctx context.Context) error {
	_, err := stc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stc *SysTeamCreate) ExecX(ctx context.Context) {
	if err := stc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stc *SysTeamCreate) defaults() {
	if _, ok := stc.mutation.Sort(); !ok {
		v := systeam.DefaultSort
		stc.mutation.SetSort(v)
	}
	if _, ok := stc.mutation.CreatedAt(); !ok {
		v := systeam.DefaultCreatedAt()
		stc.mutation.SetCreatedAt(v)
	}
	if _, ok := stc.mutation.UpdatedAt(); !ok {
		v := systeam.DefaultUpdatedAt()
		stc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stc.mutation.IsActive(); !ok {
		v := systeam.DefaultIsActive
		stc.mutation.SetIsActive(v)
	}
	if _, ok := stc.mutation.Memo(); !ok {
		v := systeam.DefaultMemo
		stc.mutation.SetMemo(v)
	}
	if _, ok := stc.mutation.IsDel(); !ok {
		v := systeam.DefaultIsDel
		stc.mutation.SetIsDel(v)
	}
	if _, ok := stc.mutation.ID(); !ok {
		v := systeam.DefaultID()
		stc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stc *SysTeamCreate) check() error {
	if _, ok := stc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`mainent: missing required field "SysTeam.sort"`)}
	}
	if _, ok := stc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`mainent: missing required field "SysTeam.is_active"`)}
	}
	if v, ok := stc.mutation.Memo(); ok {
		if err := systeam.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysTeam.memo": %w`, err)}
		}
	}
	if _, ok := stc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`mainent: missing required field "SysTeam.is_del"`)}
	}
	if v, ok := stc.mutation.Name(); ok {
		if err := systeam.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`mainent: validator failed for field "SysTeam.name": %w`, err)}
		}
	}
	if v, ok := stc.mutation.Code(); ok {
		if err := systeam.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`mainent: validator failed for field "SysTeam.code": %w`, err)}
		}
	}
	if v, ok := stc.mutation.ID(); ok {
		if err := systeam.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`mainent: validator failed for field "SysTeam.id": %w`, err)}
		}
	}
	return nil
}

func (stc *SysTeamCreate) sqlSave(ctx context.Context) (*SysTeam, error) {
	if err := stc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysTeam.ID type: %T", _spec.ID.Value)
		}
	}
	stc.mutation.id = &_node.ID
	stc.mutation.done = true
	return _node, nil
}

func (stc *SysTeamCreate) createSpec() (*SysTeam, *sqlgraph.CreateSpec) {
	var (
		_node = &SysTeam{config: stc.config}
		_spec = sqlgraph.NewCreateSpec(systeam.Table, sqlgraph.NewFieldSpec(systeam.FieldID, field.TypeString))
	)
	_spec.OnConflict = stc.conflict
	if id, ok := stc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stc.mutation.Sort(); ok {
		_spec.SetField(systeam.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := stc.mutation.CreatedAt(); ok {
		_spec.SetField(systeam.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := stc.mutation.UpdatedAt(); ok {
		_spec.SetField(systeam.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := stc.mutation.DeletedAt(); ok {
		_spec.SetField(systeam.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := stc.mutation.IsActive(); ok {
		_spec.SetField(systeam.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := stc.mutation.Memo(); ok {
		_spec.SetField(systeam.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := stc.mutation.IsDel(); ok {
		_spec.SetField(systeam.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := stc.mutation.Name(); ok {
		_spec.SetField(systeam.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := stc.mutation.Code(); ok {
		_spec.SetField(systeam.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if nodes := stc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   systeam.UsersTable,
			Columns: systeam.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SysTeamUserCreate{config: stc.config, mutation: newSysTeamUserMutation(stc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stc.mutation.TeamUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   systeam.TeamUsersTable,
			Columns: []string{systeam.TeamUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systeamuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysTeam.Create().
//		SetSort(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysTeamUpsert) {
//			SetSort(v+v).
//		}).
//		Exec(ctx)
func (stc *SysTeamCreate) OnConflict(opts ...sql.ConflictOption) *SysTeamUpsertOne {
	stc.conflict = opts
	return &SysTeamUpsertOne{
		create: stc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysTeam.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stc *SysTeamCreate) OnConflictColumns(columns ...string) *SysTeamUpsertOne {
	stc.conflict = append(stc.conflict, sql.ConflictColumns(columns...))
	return &SysTeamUpsertOne{
		create: stc,
	}
}

type (
	// SysTeamUpsertOne is the builder for "upsert"-ing
	//  one SysTeam node.
	SysTeamUpsertOne struct {
		create *SysTeamCreate
	}

	// SysTeamUpsert is the "OnConflict" setter.
	SysTeamUpsert struct {
		*sql.UpdateSet
	}
)

// SetSort sets the "sort" field.
func (u *SysTeamUpsert) SetSort(v int32) *SysTeamUpsert {
	u.Set(systeam.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateSort() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *SysTeamUpsert) AddSort(v int32) *SysTeamUpsert {
	u.Add(systeam.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTeamUpsert) SetUpdatedAt(v time.Time) *SysTeamUpsert {
	u.Set(systeam.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateUpdatedAt() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysTeamUpsert) ClearUpdatedAt() *SysTeamUpsert {
	u.SetNull(systeam.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTeamUpsert) SetDeletedAt(v time.Time) *SysTeamUpsert {
	u.Set(systeam.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateDeletedAt() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTeamUpsert) ClearDeletedAt() *SysTeamUpsert {
	u.SetNull(systeam.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SysTeamUpsert) SetIsActive(v bool) *SysTeamUpsert {
	u.Set(systeam.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateIsActive() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldIsActive)
	return u
}

// SetMemo sets the "memo" field.
func (u *SysTeamUpsert) SetMemo(v string) *SysTeamUpsert {
	u.Set(systeam.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateMemo() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *SysTeamUpsert) ClearMemo() *SysTeamUpsert {
	u.SetNull(systeam.FieldMemo)
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysTeamUpsert) SetIsDel(v bool) *SysTeamUpsert {
	u.Set(systeam.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateIsDel() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldIsDel)
	return u
}

// SetName sets the "name" field.
func (u *SysTeamUpsert) SetName(v string) *SysTeamUpsert {
	u.Set(systeam.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateName() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *SysTeamUpsert) ClearName() *SysTeamUpsert {
	u.SetNull(systeam.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *SysTeamUpsert) SetCode(v string) *SysTeamUpsert {
	u.Set(systeam.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *SysTeamUpsert) UpdateCode() *SysTeamUpsert {
	u.SetExcluded(systeam.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *SysTeamUpsert) ClearCode() *SysTeamUpsert {
	u.SetNull(systeam.FieldCode)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysTeam.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systeam.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysTeamUpsertOne) UpdateNewValues() *SysTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systeam.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(systeam.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysTeam.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysTeamUpsertOne) Ignore() *SysTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysTeamUpsertOne) DoNothing() *SysTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysTeamCreate.OnConflict
// documentation for more info.
func (u *SysTeamUpsertOne) Update(set func(*SysTeamUpsert)) *SysTeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysTeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetSort sets the "sort" field.
func (u *SysTeamUpsertOne) SetSort(v int32) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysTeamUpsertOne) AddSort(v int32) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateSort() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTeamUpsertOne) SetUpdatedAt(v time.Time) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateUpdatedAt() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysTeamUpsertOne) ClearUpdatedAt() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTeamUpsertOne) SetDeletedAt(v time.Time) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateDeletedAt() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTeamUpsertOne) ClearDeletedAt() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysTeamUpsertOne) SetIsActive(v bool) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateIsActive() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *SysTeamUpsertOne) SetMemo(v string) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateMemo() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysTeamUpsertOne) ClearMemo() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearMemo()
	})
}

// SetIsDel sets the "is_del" field.
func (u *SysTeamUpsertOne) SetIsDel(v bool) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateIsDel() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateIsDel()
	})
}

// SetName sets the "name" field.
func (u *SysTeamUpsertOne) SetName(v string) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateName() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SysTeamUpsertOne) ClearName() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *SysTeamUpsertOne) SetCode(v string) *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *SysTeamUpsertOne) UpdateCode() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *SysTeamUpsertOne) ClearCode() *SysTeamUpsertOne {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearCode()
	})
}

// Exec executes the query.
func (u *SysTeamUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("mainent: missing options for SysTeamCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysTeamUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysTeamUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("mainent: SysTeamUpsertOne.ID is not supported by MySQL driver. Use SysTeamUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysTeamUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysTeamCreateBulk is the builder for creating many SysTeam entities in bulk.
type SysTeamCreateBulk struct {
	config
	builders []*SysTeamCreate
	conflict []sql.ConflictOption
}

// Save creates the SysTeam entities in the database.
func (stcb *SysTeamCreateBulk) Save(ctx context.Context) ([]*SysTeam, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stcb.builders))
	nodes := make([]*SysTeam, len(stcb.builders))
	mutators := make([]Mutator, len(stcb.builders))
	for i := range stcb.builders {
		func(i int, root context.Context) {
			builder := stcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysTeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stcb *SysTeamCreateBulk) SaveX(ctx context.Context) []*SysTeam {
	v, err := stcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stcb *SysTeamCreateBulk) Exec(ctx context.Context) error {
	_, err := stcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stcb *SysTeamCreateBulk) ExecX(ctx context.Context) {
	if err := stcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysTeam.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysTeamUpsert) {
//			SetSort(v+v).
//		}).
//		Exec(ctx)
func (stcb *SysTeamCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysTeamUpsertBulk {
	stcb.conflict = opts
	return &SysTeamUpsertBulk{
		create: stcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysTeam.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stcb *SysTeamCreateBulk) OnConflictColumns(columns ...string) *SysTeamUpsertBulk {
	stcb.conflict = append(stcb.conflict, sql.ConflictColumns(columns...))
	return &SysTeamUpsertBulk{
		create: stcb,
	}
}

// SysTeamUpsertBulk is the builder for "upsert"-ing
// a bulk of SysTeam nodes.
type SysTeamUpsertBulk struct {
	create *SysTeamCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysTeam.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systeam.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysTeamUpsertBulk) UpdateNewValues() *SysTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systeam.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(systeam.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysTeam.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysTeamUpsertBulk) Ignore() *SysTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysTeamUpsertBulk) DoNothing() *SysTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysTeamCreateBulk.OnConflict
// documentation for more info.
func (u *SysTeamUpsertBulk) Update(set func(*SysTeamUpsert)) *SysTeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysTeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetSort sets the "sort" field.
func (u *SysTeamUpsertBulk) SetSort(v int32) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysTeamUpsertBulk) AddSort(v int32) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateSort() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTeamUpsertBulk) SetUpdatedAt(v time.Time) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateUpdatedAt() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysTeamUpsertBulk) ClearUpdatedAt() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTeamUpsertBulk) SetDeletedAt(v time.Time) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateDeletedAt() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTeamUpsertBulk) ClearDeletedAt() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysTeamUpsertBulk) SetIsActive(v bool) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateIsActive() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *SysTeamUpsertBulk) SetMemo(v string) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateMemo() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysTeamUpsertBulk) ClearMemo() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearMemo()
	})
}

// SetIsDel sets the "is_del" field.
func (u *SysTeamUpsertBulk) SetIsDel(v bool) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateIsDel() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateIsDel()
	})
}

// SetName sets the "name" field.
func (u *SysTeamUpsertBulk) SetName(v string) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateName() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *SysTeamUpsertBulk) ClearName() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *SysTeamUpsertBulk) SetCode(v string) *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *SysTeamUpsertBulk) UpdateCode() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *SysTeamUpsertBulk) ClearCode() *SysTeamUpsertBulk {
	return u.Update(func(s *SysTeamUpsert) {
		s.ClearCode()
	})
}

// Exec executes the query.
func (u *SysTeamUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("mainent: OnConflict was set for builder %d. Set it on the SysTeamCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("mainent: missing options for SysTeamCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysTeamUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
