// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/systeamuser"
)

// SysTeamUserDelete is the builder for deleting a SysTeamUser entity.
type SysTeamUserDelete struct {
	config
	hooks    []Hook
	mutation *SysTeamUserMutation
}

// Where appends a list predicates to the SysTeamUserDelete builder.
func (stud *SysTeamUserDelete) Where(ps ...predicate.SysTeamUser) *SysTeamUserDelete {
	stud.mutation.Where(ps...)
	return stud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (stud *SysTeamUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, stud.sqlExec, stud.mutation, stud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (stud *SysTeamUserDelete) ExecX(ctx context.Context) int {
	n, err := stud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (stud *SysTeamUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(systeamuser.Table, sqlgraph.NewFieldSpec(systeamuser.FieldID, field.TypeString))
	if ps := stud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, stud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	stud.mutation.done = true
	return affected, err
}

// SysTeamUserDeleteOne is the builder for deleting a single SysTeamUser entity.
type SysTeamUserDeleteOne struct {
	stud *SysTeamUserDelete
}

// Where appends a list predicates to the SysTeamUserDelete builder.
func (studo *SysTeamUserDeleteOne) Where(ps ...predicate.SysTeamUser) *SysTeamUserDeleteOne {
	studo.stud.mutation.Where(ps...)
	return studo
}

// Exec executes the deletion query.
func (studo *SysTeamUserDeleteOne) Exec(ctx context.Context) error {
	n, err := studo.stud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{systeamuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (studo *SysTeamUserDeleteOne) ExecX(ctx context.Context) {
	if err := studo.Exec(ctx); err != nil {
		panic(err)
	}
}
