// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/mainent/systeam"
	"github.com/heromicro/omgind/internal/gen/mainent/systeamuser"
	"github.com/heromicro/omgind/internal/gen/mainent/sysuser"
)

// SysTeamUser is the model entity for the SysTeamUser schema.
type SysTeamUser struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// sort
	Sort int32 `json:"sort,omitempty" sql:"sort"`
	// create time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// update time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// delete time,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 是否活跃
	IsActive bool `json:"is_active,omitempty"`
	// memo
	Memo *string `json:"memo,omitempty" sql:"memo"`
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// systeam.id
	TeamID string `json:"team_id,omitempty"`
	// sysuser.id
	UserID string `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SysTeamUserQuery when eager-loading is set.
	Edges        SysTeamUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SysTeamUserEdges holds the relations/edges for other nodes in the graph.
type SysTeamUserEdges struct {
	// User holds the value of the user edge.
	User *SysUser `json:"user,omitempty"`
	// Team holds the value of the team edge.
	Team *SysTeam `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysTeamUserEdges) UserOrErr() (*SysUser, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sysuser.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SysTeamUserEdges) TeamOrErr() (*SysTeam, error) {
	if e.Team != nil {
		return e.Team, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: systeam.Label}
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysTeamUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case systeamuser.FieldIsActive, systeamuser.FieldIsDel:
			values[i] = new(sql.NullBool)
		case systeamuser.FieldSort:
			values[i] = new(sql.NullInt64)
		case systeamuser.FieldID, systeamuser.FieldMemo, systeamuser.FieldTeamID, systeamuser.FieldUserID:
			values[i] = new(sql.NullString)
		case systeamuser.FieldCreatedAt, systeamuser.FieldUpdatedAt, systeamuser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysTeamUser fields.
func (stu *SysTeamUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case systeamuser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				stu.ID = value.String
			}
		case systeamuser.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				stu.Sort = int32(value.Int64)
			}
		case systeamuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				stu.CreatedAt = new(time.Time)
				*stu.CreatedAt = value.Time
			}
		case systeamuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				stu.UpdatedAt = new(time.Time)
				*stu.UpdatedAt = value.Time
			}
		case systeamuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				stu.DeletedAt = new(time.Time)
				*stu.DeletedAt = value.Time
			}
		case systeamuser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				stu.IsActive = value.Bool
			}
		case systeamuser.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				stu.Memo = new(string)
				*stu.Memo = value.String
			}
		case systeamuser.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				stu.IsDel = value.Bool
			}
		case systeamuser.FieldTeamID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team_id", values[i])
			} else if value.Valid {
				stu.TeamID = value.String
			}
		case systeamuser.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				stu.UserID = value.String
			}
		default:
			stu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysTeamUser.
// This includes values selected through modifiers, order, etc.
func (stu *SysTeamUser) Value(name string) (ent.Value, error) {
	return stu.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the SysTeamUser entity.
func (stu *SysTeamUser) QueryUser() *SysUserQuery {
	return NewSysTeamUserClient(stu.config).QueryUser(stu)
}

// QueryTeam queries the "team" edge of the SysTeamUser entity.
func (stu *SysTeamUser) QueryTeam() *SysTeamQuery {
	return NewSysTeamUserClient(stu.config).QueryTeam(stu)
}

// Update returns a builder for updating this SysTeamUser.
// Note that you need to call SysTeamUser.Unwrap() before calling this method if this SysTeamUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (stu *SysTeamUser) Update() *SysTeamUserUpdateOne {
	return NewSysTeamUserClient(stu.config).UpdateOne(stu)
}

// Unwrap unwraps the SysTeamUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (stu *SysTeamUser) Unwrap() *SysTeamUser {
	_tx, ok := stu.config.driver.(*txDriver)
	if !ok {
		panic("mainent: SysTeamUser is not a transactional entity")
	}
	stu.config.driver = _tx.drv
	return stu
}

// String implements the fmt.Stringer.
func (stu *SysTeamUser) String() string {
	var builder strings.Builder
	builder.WriteString("SysTeamUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", stu.ID))
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", stu.Sort))
	builder.WriteString(", ")
	if v := stu.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := stu.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := stu.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", stu.IsActive))
	builder.WriteString(", ")
	if v := stu.Memo; v != nil {
		builder.WriteString("memo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", stu.IsDel))
	builder.WriteString(", ")
	builder.WriteString("team_id=")
	builder.WriteString(stu.TeamID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(stu.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// SysTeamUsers is a parsable slice of SysTeamUser.
type SysTeamUsers []*SysTeamUser
