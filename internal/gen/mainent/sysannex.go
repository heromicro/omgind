// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/mainent/sysannex"
)

// SysAnnex is the model entity for the SysAnnex schema.
type SysAnnex struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// memo
	Memo *string `json:"memo,omitempty" sql:"memo"`
	// sort
	Sort int32 `json:"sort,omitempty" sql:"sort"`
	// create time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// update time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// delete time,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 是否活跃
	IsActive bool `json:"is_active,omitempty"`
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// 文件名称
	Name *string `json:"name,omitempty"`
	// 文件路径
	FilePath     *string `json:"file_path,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysAnnex) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysannex.FieldIsActive, sysannex.FieldIsDel:
			values[i] = new(sql.NullBool)
		case sysannex.FieldSort:
			values[i] = new(sql.NullInt64)
		case sysannex.FieldID, sysannex.FieldMemo, sysannex.FieldName, sysannex.FieldFilePath:
			values[i] = new(sql.NullString)
		case sysannex.FieldCreatedAt, sysannex.FieldUpdatedAt, sysannex.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysAnnex fields.
func (sa *SysAnnex) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysannex.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sa.ID = value.String
			}
		case sysannex.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				sa.Memo = new(string)
				*sa.Memo = value.String
			}
		case sysannex.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sa.Sort = int32(value.Int64)
			}
		case sysannex.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sa.CreatedAt = new(time.Time)
				*sa.CreatedAt = value.Time
			}
		case sysannex.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sa.UpdatedAt = new(time.Time)
				*sa.UpdatedAt = value.Time
			}
		case sysannex.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sa.DeletedAt = new(time.Time)
				*sa.DeletedAt = value.Time
			}
		case sysannex.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				sa.IsActive = value.Bool
			}
		case sysannex.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				sa.IsDel = value.Bool
			}
		case sysannex.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sa.Name = new(string)
				*sa.Name = value.String
			}
		case sysannex.FieldFilePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_path", values[i])
			} else if value.Valid {
				sa.FilePath = new(string)
				*sa.FilePath = value.String
			}
		default:
			sa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysAnnex.
// This includes values selected through modifiers, order, etc.
func (sa *SysAnnex) Value(name string) (ent.Value, error) {
	return sa.selectValues.Get(name)
}

// Update returns a builder for updating this SysAnnex.
// Note that you need to call SysAnnex.Unwrap() before calling this method if this SysAnnex
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *SysAnnex) Update() *SysAnnexUpdateOne {
	return NewSysAnnexClient(sa.config).UpdateOne(sa)
}

// Unwrap unwraps the SysAnnex entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *SysAnnex) Unwrap() *SysAnnex {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("mainent: SysAnnex is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *SysAnnex) String() string {
	var builder strings.Builder
	builder.WriteString("SysAnnex(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	if v := sa.Memo; v != nil {
		builder.WriteString("memo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", sa.Sort))
	builder.WriteString(", ")
	if v := sa.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sa.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sa.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", sa.IsActive))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", sa.IsDel))
	builder.WriteString(", ")
	if v := sa.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sa.FilePath; v != nil {
		builder.WriteString("file_path=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SysAnnexes is a parsable slice of SysAnnex.
type SysAnnexes []*SysAnnex
