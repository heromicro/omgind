// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/systeam"
	"github.com/heromicro/omgind/internal/gen/mainent/systeamuser"
	"github.com/heromicro/omgind/internal/gen/mainent/sysuser"
)

// SysTeamUserCreate is the builder for creating a SysTeamUser entity.
type SysTeamUserCreate struct {
	config
	mutation *SysTeamUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSort sets the "sort" field.
func (stuc *SysTeamUserCreate) SetSort(i int32) *SysTeamUserCreate {
	stuc.mutation.SetSort(i)
	return stuc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableSort(i *int32) *SysTeamUserCreate {
	if i != nil {
		stuc.SetSort(*i)
	}
	return stuc
}

// SetCreatedAt sets the "created_at" field.
func (stuc *SysTeamUserCreate) SetCreatedAt(t time.Time) *SysTeamUserCreate {
	stuc.mutation.SetCreatedAt(t)
	return stuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableCreatedAt(t *time.Time) *SysTeamUserCreate {
	if t != nil {
		stuc.SetCreatedAt(*t)
	}
	return stuc
}

// SetUpdatedAt sets the "updated_at" field.
func (stuc *SysTeamUserCreate) SetUpdatedAt(t time.Time) *SysTeamUserCreate {
	stuc.mutation.SetUpdatedAt(t)
	return stuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableUpdatedAt(t *time.Time) *SysTeamUserCreate {
	if t != nil {
		stuc.SetUpdatedAt(*t)
	}
	return stuc
}

// SetDeletedAt sets the "deleted_at" field.
func (stuc *SysTeamUserCreate) SetDeletedAt(t time.Time) *SysTeamUserCreate {
	stuc.mutation.SetDeletedAt(t)
	return stuc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableDeletedAt(t *time.Time) *SysTeamUserCreate {
	if t != nil {
		stuc.SetDeletedAt(*t)
	}
	return stuc
}

// SetIsActive sets the "is_active" field.
func (stuc *SysTeamUserCreate) SetIsActive(b bool) *SysTeamUserCreate {
	stuc.mutation.SetIsActive(b)
	return stuc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableIsActive(b *bool) *SysTeamUserCreate {
	if b != nil {
		stuc.SetIsActive(*b)
	}
	return stuc
}

// SetMemo sets the "memo" field.
func (stuc *SysTeamUserCreate) SetMemo(s string) *SysTeamUserCreate {
	stuc.mutation.SetMemo(s)
	return stuc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableMemo(s *string) *SysTeamUserCreate {
	if s != nil {
		stuc.SetMemo(*s)
	}
	return stuc
}

// SetIsDel sets the "is_del" field.
func (stuc *SysTeamUserCreate) SetIsDel(b bool) *SysTeamUserCreate {
	stuc.mutation.SetIsDel(b)
	return stuc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableIsDel(b *bool) *SysTeamUserCreate {
	if b != nil {
		stuc.SetIsDel(*b)
	}
	return stuc
}

// SetTeamID sets the "team_id" field.
func (stuc *SysTeamUserCreate) SetTeamID(s string) *SysTeamUserCreate {
	stuc.mutation.SetTeamID(s)
	return stuc
}

// SetUserID sets the "user_id" field.
func (stuc *SysTeamUserCreate) SetUserID(s string) *SysTeamUserCreate {
	stuc.mutation.SetUserID(s)
	return stuc
}

// SetID sets the "id" field.
func (stuc *SysTeamUserCreate) SetID(s string) *SysTeamUserCreate {
	stuc.mutation.SetID(s)
	return stuc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (stuc *SysTeamUserCreate) SetNillableID(s *string) *SysTeamUserCreate {
	if s != nil {
		stuc.SetID(*s)
	}
	return stuc
}

// SetUser sets the "user" edge to the SysUser entity.
func (stuc *SysTeamUserCreate) SetUser(s *SysUser) *SysTeamUserCreate {
	return stuc.SetUserID(s.ID)
}

// SetTeam sets the "team" edge to the SysTeam entity.
func (stuc *SysTeamUserCreate) SetTeam(s *SysTeam) *SysTeamUserCreate {
	return stuc.SetTeamID(s.ID)
}

// Mutation returns the SysTeamUserMutation object of the builder.
func (stuc *SysTeamUserCreate) Mutation() *SysTeamUserMutation {
	return stuc.mutation
}

// Save creates the SysTeamUser in the database.
func (stuc *SysTeamUserCreate) Save(ctx context.Context) (*SysTeamUser, error) {
	stuc.defaults()
	return withHooks(ctx, stuc.sqlSave, stuc.mutation, stuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (stuc *SysTeamUserCreate) SaveX(ctx context.Context) *SysTeamUser {
	v, err := stuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stuc *SysTeamUserCreate) Exec(ctx context.Context) error {
	_, err := stuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuc *SysTeamUserCreate) ExecX(ctx context.Context) {
	if err := stuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuc *SysTeamUserCreate) defaults() {
	if _, ok := stuc.mutation.Sort(); !ok {
		v := systeamuser.DefaultSort
		stuc.mutation.SetSort(v)
	}
	if _, ok := stuc.mutation.CreatedAt(); !ok {
		v := systeamuser.DefaultCreatedAt()
		stuc.mutation.SetCreatedAt(v)
	}
	if _, ok := stuc.mutation.UpdatedAt(); !ok {
		v := systeamuser.DefaultUpdatedAt()
		stuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := stuc.mutation.IsActive(); !ok {
		v := systeamuser.DefaultIsActive
		stuc.mutation.SetIsActive(v)
	}
	if _, ok := stuc.mutation.Memo(); !ok {
		v := systeamuser.DefaultMemo
		stuc.mutation.SetMemo(v)
	}
	if _, ok := stuc.mutation.IsDel(); !ok {
		v := systeamuser.DefaultIsDel
		stuc.mutation.SetIsDel(v)
	}
	if _, ok := stuc.mutation.ID(); !ok {
		v := systeamuser.DefaultID()
		stuc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuc *SysTeamUserCreate) check() error {
	if _, ok := stuc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`mainent: missing required field "SysTeamUser.sort"`)}
	}
	if _, ok := stuc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`mainent: missing required field "SysTeamUser.is_active"`)}
	}
	if v, ok := stuc.mutation.Memo(); ok {
		if err := systeamuser.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.memo": %w`, err)}
		}
	}
	if _, ok := stuc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`mainent: missing required field "SysTeamUser.is_del"`)}
	}
	if _, ok := stuc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`mainent: missing required field "SysTeamUser.team_id"`)}
	}
	if v, ok := stuc.mutation.TeamID(); ok {
		if err := systeamuser.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.team_id": %w`, err)}
		}
	}
	if _, ok := stuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`mainent: missing required field "SysTeamUser.user_id"`)}
	}
	if v, ok := stuc.mutation.UserID(); ok {
		if err := systeamuser.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.user_id": %w`, err)}
		}
	}
	if v, ok := stuc.mutation.ID(); ok {
		if err := systeamuser.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.id": %w`, err)}
		}
	}
	if _, ok := stuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`mainent: missing required edge "SysTeamUser.user"`)}
	}
	if _, ok := stuc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team", err: errors.New(`mainent: missing required edge "SysTeamUser.team"`)}
	}
	return nil
}

func (stuc *SysTeamUserCreate) sqlSave(ctx context.Context) (*SysTeamUser, error) {
	if err := stuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := stuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SysTeamUser.ID type: %T", _spec.ID.Value)
		}
	}
	stuc.mutation.id = &_node.ID
	stuc.mutation.done = true
	return _node, nil
}

func (stuc *SysTeamUserCreate) createSpec() (*SysTeamUser, *sqlgraph.CreateSpec) {
	var (
		_node = &SysTeamUser{config: stuc.config}
		_spec = sqlgraph.NewCreateSpec(systeamuser.Table, sqlgraph.NewFieldSpec(systeamuser.FieldID, field.TypeString))
	)
	_spec.OnConflict = stuc.conflict
	if id, ok := stuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := stuc.mutation.Sort(); ok {
		_spec.SetField(systeamuser.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := stuc.mutation.CreatedAt(); ok {
		_spec.SetField(systeamuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := stuc.mutation.UpdatedAt(); ok {
		_spec.SetField(systeamuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := stuc.mutation.DeletedAt(); ok {
		_spec.SetField(systeamuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := stuc.mutation.IsActive(); ok {
		_spec.SetField(systeamuser.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := stuc.mutation.Memo(); ok {
		_spec.SetField(systeamuser.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := stuc.mutation.IsDel(); ok {
		_spec.SetField(systeamuser.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if nodes := stuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.UserTable,
			Columns: []string{systeamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := stuc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.TeamTable,
			Columns: []string{systeamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systeam.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysTeamUser.Create().
//		SetSort(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysTeamUserUpsert) {
//			SetSort(v+v).
//		}).
//		Exec(ctx)
func (stuc *SysTeamUserCreate) OnConflict(opts ...sql.ConflictOption) *SysTeamUserUpsertOne {
	stuc.conflict = opts
	return &SysTeamUserUpsertOne{
		create: stuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysTeamUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stuc *SysTeamUserCreate) OnConflictColumns(columns ...string) *SysTeamUserUpsertOne {
	stuc.conflict = append(stuc.conflict, sql.ConflictColumns(columns...))
	return &SysTeamUserUpsertOne{
		create: stuc,
	}
}

type (
	// SysTeamUserUpsertOne is the builder for "upsert"-ing
	//  one SysTeamUser node.
	SysTeamUserUpsertOne struct {
		create *SysTeamUserCreate
	}

	// SysTeamUserUpsert is the "OnConflict" setter.
	SysTeamUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetSort sets the "sort" field.
func (u *SysTeamUserUpsert) SetSort(v int32) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateSort() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *SysTeamUserUpsert) AddSort(v int32) *SysTeamUserUpsert {
	u.Add(systeamuser.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTeamUserUpsert) SetUpdatedAt(v time.Time) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateUpdatedAt() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysTeamUserUpsert) ClearUpdatedAt() *SysTeamUserUpsert {
	u.SetNull(systeamuser.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTeamUserUpsert) SetDeletedAt(v time.Time) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateDeletedAt() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTeamUserUpsert) ClearDeletedAt() *SysTeamUserUpsert {
	u.SetNull(systeamuser.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *SysTeamUserUpsert) SetIsActive(v bool) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateIsActive() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldIsActive)
	return u
}

// SetMemo sets the "memo" field.
func (u *SysTeamUserUpsert) SetMemo(v string) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateMemo() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *SysTeamUserUpsert) ClearMemo() *SysTeamUserUpsert {
	u.SetNull(systeamuser.FieldMemo)
	return u
}

// SetIsDel sets the "is_del" field.
func (u *SysTeamUserUpsert) SetIsDel(v bool) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateIsDel() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldIsDel)
	return u
}

// SetTeamID sets the "team_id" field.
func (u *SysTeamUserUpsert) SetTeamID(v string) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldTeamID, v)
	return u
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateTeamID() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldTeamID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *SysTeamUserUpsert) SetUserID(v string) *SysTeamUserUpsert {
	u.Set(systeamuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysTeamUserUpsert) UpdateUserID() *SysTeamUserUpsert {
	u.SetExcluded(systeamuser.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SysTeamUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systeamuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysTeamUserUpsertOne) UpdateNewValues() *SysTeamUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(systeamuser.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(systeamuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysTeamUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SysTeamUserUpsertOne) Ignore() *SysTeamUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysTeamUserUpsertOne) DoNothing() *SysTeamUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysTeamUserCreate.OnConflict
// documentation for more info.
func (u *SysTeamUserUpsertOne) Update(set func(*SysTeamUserUpsert)) *SysTeamUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysTeamUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetSort sets the "sort" field.
func (u *SysTeamUserUpsertOne) SetSort(v int32) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysTeamUserUpsertOne) AddSort(v int32) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateSort() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTeamUserUpsertOne) SetUpdatedAt(v time.Time) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateUpdatedAt() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysTeamUserUpsertOne) ClearUpdatedAt() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTeamUserUpsertOne) SetDeletedAt(v time.Time) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateDeletedAt() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTeamUserUpsertOne) ClearDeletedAt() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysTeamUserUpsertOne) SetIsActive(v bool) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateIsActive() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *SysTeamUserUpsertOne) SetMemo(v string) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateMemo() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysTeamUserUpsertOne) ClearMemo() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.ClearMemo()
	})
}

// SetIsDel sets the "is_del" field.
func (u *SysTeamUserUpsertOne) SetIsDel(v bool) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateIsDel() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateIsDel()
	})
}

// SetTeamID sets the "team_id" field.
func (u *SysTeamUserUpsertOne) SetTeamID(v string) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateTeamID() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateTeamID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SysTeamUserUpsertOne) SetUserID(v string) *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysTeamUserUpsertOne) UpdateUserID() *SysTeamUserUpsertOne {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *SysTeamUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("mainent: missing options for SysTeamUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysTeamUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SysTeamUserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("mainent: SysTeamUserUpsertOne.ID is not supported by MySQL driver. Use SysTeamUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SysTeamUserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SysTeamUserCreateBulk is the builder for creating many SysTeamUser entities in bulk.
type SysTeamUserCreateBulk struct {
	config
	builders []*SysTeamUserCreate
	conflict []sql.ConflictOption
}

// Save creates the SysTeamUser entities in the database.
func (stucb *SysTeamUserCreateBulk) Save(ctx context.Context) ([]*SysTeamUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(stucb.builders))
	nodes := make([]*SysTeamUser, len(stucb.builders))
	mutators := make([]Mutator, len(stucb.builders))
	for i := range stucb.builders {
		func(i int, root context.Context) {
			builder := stucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SysTeamUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, stucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = stucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, stucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, stucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (stucb *SysTeamUserCreateBulk) SaveX(ctx context.Context) []*SysTeamUser {
	v, err := stucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (stucb *SysTeamUserCreateBulk) Exec(ctx context.Context) error {
	_, err := stucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stucb *SysTeamUserCreateBulk) ExecX(ctx context.Context) {
	if err := stucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SysTeamUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SysTeamUserUpsert) {
//			SetSort(v+v).
//		}).
//		Exec(ctx)
func (stucb *SysTeamUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *SysTeamUserUpsertBulk {
	stucb.conflict = opts
	return &SysTeamUserUpsertBulk{
		create: stucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SysTeamUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (stucb *SysTeamUserCreateBulk) OnConflictColumns(columns ...string) *SysTeamUserUpsertBulk {
	stucb.conflict = append(stucb.conflict, sql.ConflictColumns(columns...))
	return &SysTeamUserUpsertBulk{
		create: stucb,
	}
}

// SysTeamUserUpsertBulk is the builder for "upsert"-ing
// a bulk of SysTeamUser nodes.
type SysTeamUserUpsertBulk struct {
	create *SysTeamUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SysTeamUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(systeamuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SysTeamUserUpsertBulk) UpdateNewValues() *SysTeamUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(systeamuser.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(systeamuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SysTeamUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SysTeamUserUpsertBulk) Ignore() *SysTeamUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SysTeamUserUpsertBulk) DoNothing() *SysTeamUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SysTeamUserCreateBulk.OnConflict
// documentation for more info.
func (u *SysTeamUserUpsertBulk) Update(set func(*SysTeamUserUpsert)) *SysTeamUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SysTeamUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetSort sets the "sort" field.
func (u *SysTeamUserUpsertBulk) SetSort(v int32) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *SysTeamUserUpsertBulk) AddSort(v int32) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateSort() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SysTeamUserUpsertBulk) SetUpdatedAt(v time.Time) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateUpdatedAt() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *SysTeamUserUpsertBulk) ClearUpdatedAt() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SysTeamUserUpsertBulk) SetDeletedAt(v time.Time) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateDeletedAt() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SysTeamUserUpsertBulk) ClearDeletedAt() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *SysTeamUserUpsertBulk) SetIsActive(v bool) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateIsActive() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *SysTeamUserUpsertBulk) SetMemo(v string) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateMemo() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *SysTeamUserUpsertBulk) ClearMemo() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.ClearMemo()
	})
}

// SetIsDel sets the "is_del" field.
func (u *SysTeamUserUpsertBulk) SetIsDel(v bool) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateIsDel() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateIsDel()
	})
}

// SetTeamID sets the "team_id" field.
func (u *SysTeamUserUpsertBulk) SetTeamID(v string) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetTeamID(v)
	})
}

// UpdateTeamID sets the "team_id" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateTeamID() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateTeamID()
	})
}

// SetUserID sets the "user_id" field.
func (u *SysTeamUserUpsertBulk) SetUserID(v string) *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *SysTeamUserUpsertBulk) UpdateUserID() *SysTeamUserUpsertBulk {
	return u.Update(func(s *SysTeamUserUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *SysTeamUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("mainent: OnConflict was set for builder %d. Set it on the SysTeamUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("mainent: missing options for SysTeamUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SysTeamUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
