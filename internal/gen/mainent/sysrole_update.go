// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/sysrole"
)

// SysRoleUpdate is the builder for updating SysRole entities.
type SysRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *SysRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysRoleUpdate builder.
func (sru *SysRoleUpdate) Where(ps ...predicate.SysRole) *SysRoleUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetIsDel sets the "is_del" field.
func (sru *SysRoleUpdate) SetIsDel(b bool) *SysRoleUpdate {
	sru.mutation.SetIsDel(b)
	return sru
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableIsDel(b *bool) *SysRoleUpdate {
	if b != nil {
		sru.SetIsDel(*b)
	}
	return sru
}

// SetIsActive sets the "is_active" field.
func (sru *SysRoleUpdate) SetIsActive(b bool) *SysRoleUpdate {
	sru.mutation.SetIsActive(b)
	return sru
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableIsActive(b *bool) *SysRoleUpdate {
	if b != nil {
		sru.SetIsActive(*b)
	}
	return sru
}

// SetSort sets the "sort" field.
func (sru *SysRoleUpdate) SetSort(i int32) *SysRoleUpdate {
	sru.mutation.ResetSort()
	sru.mutation.SetSort(i)
	return sru
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableSort(i *int32) *SysRoleUpdate {
	if i != nil {
		sru.SetSort(*i)
	}
	return sru
}

// AddSort adds i to the "sort" field.
func (sru *SysRoleUpdate) AddSort(i int32) *SysRoleUpdate {
	sru.mutation.AddSort(i)
	return sru
}

// SetMemo sets the "memo" field.
func (sru *SysRoleUpdate) SetMemo(s string) *SysRoleUpdate {
	sru.mutation.SetMemo(s)
	return sru
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableMemo(s *string) *SysRoleUpdate {
	if s != nil {
		sru.SetMemo(*s)
	}
	return sru
}

// ClearMemo clears the value of the "memo" field.
func (sru *SysRoleUpdate) ClearMemo() *SysRoleUpdate {
	sru.mutation.ClearMemo()
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *SysRoleUpdate) SetUpdatedAt(t time.Time) *SysRoleUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sru *SysRoleUpdate) ClearUpdatedAt() *SysRoleUpdate {
	sru.mutation.ClearUpdatedAt()
	return sru
}

// SetDeletedAt sets the "deleted_at" field.
func (sru *SysRoleUpdate) SetDeletedAt(t time.Time) *SysRoleUpdate {
	sru.mutation.SetDeletedAt(t)
	return sru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sru *SysRoleUpdate) SetNillableDeletedAt(t *time.Time) *SysRoleUpdate {
	if t != nil {
		sru.SetDeletedAt(*t)
	}
	return sru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sru *SysRoleUpdate) ClearDeletedAt() *SysRoleUpdate {
	sru.mutation.ClearDeletedAt()
	return sru
}

// SetName sets the "name" field.
func (sru *SysRoleUpdate) SetName(s string) *SysRoleUpdate {
	sru.mutation.SetName(s)
	return sru
}

// Mutation returns the SysRoleMutation object of the builder.
func (sru *SysRoleUpdate) Mutation() *SysRoleMutation {
	return sru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SysRoleUpdate) Save(ctx context.Context) (int, error) {
	sru.defaults()
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SysRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SysRoleUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SysRoleUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *SysRoleUpdate) defaults() {
	if _, ok := sru.mutation.UpdatedAt(); !ok && !sru.mutation.UpdatedAtCleared() {
		v := sysrole.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *SysRoleUpdate) check() error {
	if v, ok := sru.mutation.Memo(); ok {
		if err := sysrole.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysRole.memo": %w`, err)}
		}
	}
	if v, ok := sru.mutation.Name(); ok {
		if err := sysrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`mainent: validator failed for field "SysRole.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *SysRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysRoleUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *SysRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysrole.Table, sysrole.Columns, sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeString))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.IsDel(); ok {
		_spec.SetField(sysrole.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sru.mutation.IsActive(); ok {
		_spec.SetField(sysrole.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sru.mutation.Sort(); ok {
		_spec.SetField(sysrole.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.AddedSort(); ok {
		_spec.AddField(sysrole.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sru.mutation.Memo(); ok {
		_spec.SetField(sysrole.FieldMemo, field.TypeString, value)
	}
	if sru.mutation.MemoCleared() {
		_spec.ClearField(sysrole.FieldMemo, field.TypeString)
	}
	if sru.mutation.CreatedAtCleared() {
		_spec.ClearField(sysrole.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(sysrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if sru.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.DeletedAt(); ok {
		_spec.SetField(sysrole.FieldDeletedAt, field.TypeTime, value)
	}
	if sru.mutation.DeletedAtCleared() {
		_spec.ClearField(sysrole.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sru.mutation.Name(); ok {
		_spec.SetField(sysrole.FieldName, field.TypeString, value)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SysRoleUpdateOne is the builder for updating a single SysRole entity.
type SysRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsDel sets the "is_del" field.
func (sruo *SysRoleUpdateOne) SetIsDel(b bool) *SysRoleUpdateOne {
	sruo.mutation.SetIsDel(b)
	return sruo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableIsDel(b *bool) *SysRoleUpdateOne {
	if b != nil {
		sruo.SetIsDel(*b)
	}
	return sruo
}

// SetIsActive sets the "is_active" field.
func (sruo *SysRoleUpdateOne) SetIsActive(b bool) *SysRoleUpdateOne {
	sruo.mutation.SetIsActive(b)
	return sruo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableIsActive(b *bool) *SysRoleUpdateOne {
	if b != nil {
		sruo.SetIsActive(*b)
	}
	return sruo
}

// SetSort sets the "sort" field.
func (sruo *SysRoleUpdateOne) SetSort(i int32) *SysRoleUpdateOne {
	sruo.mutation.ResetSort()
	sruo.mutation.SetSort(i)
	return sruo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableSort(i *int32) *SysRoleUpdateOne {
	if i != nil {
		sruo.SetSort(*i)
	}
	return sruo
}

// AddSort adds i to the "sort" field.
func (sruo *SysRoleUpdateOne) AddSort(i int32) *SysRoleUpdateOne {
	sruo.mutation.AddSort(i)
	return sruo
}

// SetMemo sets the "memo" field.
func (sruo *SysRoleUpdateOne) SetMemo(s string) *SysRoleUpdateOne {
	sruo.mutation.SetMemo(s)
	return sruo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableMemo(s *string) *SysRoleUpdateOne {
	if s != nil {
		sruo.SetMemo(*s)
	}
	return sruo
}

// ClearMemo clears the value of the "memo" field.
func (sruo *SysRoleUpdateOne) ClearMemo() *SysRoleUpdateOne {
	sruo.mutation.ClearMemo()
	return sruo
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *SysRoleUpdateOne) SetUpdatedAt(t time.Time) *SysRoleUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sruo *SysRoleUpdateOne) ClearUpdatedAt() *SysRoleUpdateOne {
	sruo.mutation.ClearUpdatedAt()
	return sruo
}

// SetDeletedAt sets the "deleted_at" field.
func (sruo *SysRoleUpdateOne) SetDeletedAt(t time.Time) *SysRoleUpdateOne {
	sruo.mutation.SetDeletedAt(t)
	return sruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sruo *SysRoleUpdateOne) SetNillableDeletedAt(t *time.Time) *SysRoleUpdateOne {
	if t != nil {
		sruo.SetDeletedAt(*t)
	}
	return sruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sruo *SysRoleUpdateOne) ClearDeletedAt() *SysRoleUpdateOne {
	sruo.mutation.ClearDeletedAt()
	return sruo
}

// SetName sets the "name" field.
func (sruo *SysRoleUpdateOne) SetName(s string) *SysRoleUpdateOne {
	sruo.mutation.SetName(s)
	return sruo
}

// Mutation returns the SysRoleMutation object of the builder.
func (sruo *SysRoleUpdateOne) Mutation() *SysRoleMutation {
	return sruo.mutation
}

// Where appends a list predicates to the SysRoleUpdate builder.
func (sruo *SysRoleUpdateOne) Where(ps ...predicate.SysRole) *SysRoleUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SysRoleUpdateOne) Select(field string, fields ...string) *SysRoleUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SysRole entity.
func (sruo *SysRoleUpdateOne) Save(ctx context.Context) (*SysRole, error) {
	sruo.defaults()
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SysRoleUpdateOne) SaveX(ctx context.Context) *SysRole {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SysRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SysRoleUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *SysRoleUpdateOne) defaults() {
	if _, ok := sruo.mutation.UpdatedAt(); !ok && !sruo.mutation.UpdatedAtCleared() {
		v := sysrole.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *SysRoleUpdateOne) check() error {
	if v, ok := sruo.mutation.Memo(); ok {
		if err := sysrole.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysRole.memo": %w`, err)}
		}
	}
	if v, ok := sruo.mutation.Name(); ok {
		if err := sysrole.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`mainent: validator failed for field "SysRole.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *SysRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysRoleUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *SysRoleUpdateOne) sqlSave(ctx context.Context) (_node *SysRole, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysrole.Table, sysrole.Columns, sqlgraph.NewFieldSpec(sysrole.FieldID, field.TypeString))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`mainent: missing "SysRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysrole.FieldID)
		for _, f := range fields {
			if !sysrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("mainent: invalid field %q for query", f)}
			}
			if f != sysrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.IsDel(); ok {
		_spec.SetField(sysrole.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sruo.mutation.IsActive(); ok {
		_spec.SetField(sysrole.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sruo.mutation.Sort(); ok {
		_spec.SetField(sysrole.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.AddedSort(); ok {
		_spec.AddField(sysrole.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sruo.mutation.Memo(); ok {
		_spec.SetField(sysrole.FieldMemo, field.TypeString, value)
	}
	if sruo.mutation.MemoCleared() {
		_spec.ClearField(sysrole.FieldMemo, field.TypeString)
	}
	if sruo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysrole.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysrole.FieldUpdatedAt, field.TypeTime, value)
	}
	if sruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysrole.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.DeletedAt(); ok {
		_spec.SetField(sysrole.FieldDeletedAt, field.TypeTime, value)
	}
	if sruo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysrole.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sruo.mutation.Name(); ok {
		_spec.SetField(sysrole.FieldName, field.TypeString, value)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &SysRole{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
