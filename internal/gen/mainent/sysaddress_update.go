// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/orgorgan"
	"github.com/heromicro/omgind/internal/gen/mainent/orgstaff"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/sysaddress"
)

// SysAddressUpdate is the builder for updating SysAddress entities.
type SysAddressUpdate struct {
	config
	hooks     []Hook
	mutation  *SysAddressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysAddressUpdate builder.
func (sau *SysAddressUpdate) Where(ps ...predicate.SysAddress) *SysAddressUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetIsDel sets the "is_del" field.
func (sau *SysAddressUpdate) SetIsDel(b bool) *SysAddressUpdate {
	sau.mutation.SetIsDel(b)
	return sau
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableIsDel(b *bool) *SysAddressUpdate {
	if b != nil {
		sau.SetIsDel(*b)
	}
	return sau
}

// SetUserID sets the "user_id" field.
func (sau *SysAddressUpdate) SetUserID(s string) *SysAddressUpdate {
	sau.mutation.SetUserID(s)
	return sau
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableUserID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetUserID(*s)
	}
	return sau
}

// ClearUserID clears the value of the "user_id" field.
func (sau *SysAddressUpdate) ClearUserID() *SysAddressUpdate {
	sau.mutation.ClearUserID()
	return sau
}

// SetSort sets the "sort" field.
func (sau *SysAddressUpdate) SetSort(i int32) *SysAddressUpdate {
	sau.mutation.ResetSort()
	sau.mutation.SetSort(i)
	return sau
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableSort(i *int32) *SysAddressUpdate {
	if i != nil {
		sau.SetSort(*i)
	}
	return sau
}

// AddSort adds i to the "sort" field.
func (sau *SysAddressUpdate) AddSort(i int32) *SysAddressUpdate {
	sau.mutation.AddSort(i)
	return sau
}

// SetUpdatedAt sets the "updated_at" field.
func (sau *SysAddressUpdate) SetUpdatedAt(t time.Time) *SysAddressUpdate {
	sau.mutation.SetUpdatedAt(t)
	return sau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sau *SysAddressUpdate) ClearUpdatedAt() *SysAddressUpdate {
	sau.mutation.ClearUpdatedAt()
	return sau
}

// SetDeletedAt sets the "deleted_at" field.
func (sau *SysAddressUpdate) SetDeletedAt(t time.Time) *SysAddressUpdate {
	sau.mutation.SetDeletedAt(t)
	return sau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableDeletedAt(t *time.Time) *SysAddressUpdate {
	if t != nil {
		sau.SetDeletedAt(*t)
	}
	return sau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sau *SysAddressUpdate) ClearDeletedAt() *SysAddressUpdate {
	sau.mutation.ClearDeletedAt()
	return sau
}

// SetIsActive sets the "is_active" field.
func (sau *SysAddressUpdate) SetIsActive(b bool) *SysAddressUpdate {
	sau.mutation.SetIsActive(b)
	return sau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableIsActive(b *bool) *SysAddressUpdate {
	if b != nil {
		sau.SetIsActive(*b)
	}
	return sau
}

// SetMemo sets the "memo" field.
func (sau *SysAddressUpdate) SetMemo(s string) *SysAddressUpdate {
	sau.mutation.SetMemo(s)
	return sau
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableMemo(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetMemo(*s)
	}
	return sau
}

// ClearMemo clears the value of the "memo" field.
func (sau *SysAddressUpdate) ClearMemo() *SysAddressUpdate {
	sau.mutation.ClearMemo()
	return sau
}

// SetCountry sets the "country" field.
func (sau *SysAddressUpdate) SetCountry(s string) *SysAddressUpdate {
	sau.mutation.SetCountry(s)
	return sau
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCountry(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCountry(*s)
	}
	return sau
}

// ClearCountry clears the value of the "country" field.
func (sau *SysAddressUpdate) ClearCountry() *SysAddressUpdate {
	sau.mutation.ClearCountry()
	return sau
}

// SetProvince sets the "province" field.
func (sau *SysAddressUpdate) SetProvince(s string) *SysAddressUpdate {
	sau.mutation.SetProvince(s)
	return sau
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableProvince(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetProvince(*s)
	}
	return sau
}

// ClearProvince clears the value of the "province" field.
func (sau *SysAddressUpdate) ClearProvince() *SysAddressUpdate {
	sau.mutation.ClearProvince()
	return sau
}

// SetCity sets the "city" field.
func (sau *SysAddressUpdate) SetCity(s string) *SysAddressUpdate {
	sau.mutation.SetCity(s)
	return sau
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCity(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCity(*s)
	}
	return sau
}

// ClearCity clears the value of the "city" field.
func (sau *SysAddressUpdate) ClearCity() *SysAddressUpdate {
	sau.mutation.ClearCity()
	return sau
}

// SetCounty sets the "county" field.
func (sau *SysAddressUpdate) SetCounty(s string) *SysAddressUpdate {
	sau.mutation.SetCounty(s)
	return sau
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCounty(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCounty(*s)
	}
	return sau
}

// ClearCounty clears the value of the "county" field.
func (sau *SysAddressUpdate) ClearCounty() *SysAddressUpdate {
	sau.mutation.ClearCounty()
	return sau
}

// SetCountryID sets the "country_id" field.
func (sau *SysAddressUpdate) SetCountryID(s string) *SysAddressUpdate {
	sau.mutation.SetCountryID(s)
	return sau
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCountryID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCountryID(*s)
	}
	return sau
}

// ClearCountryID clears the value of the "country_id" field.
func (sau *SysAddressUpdate) ClearCountryID() *SysAddressUpdate {
	sau.mutation.ClearCountryID()
	return sau
}

// SetProvinceID sets the "province_id" field.
func (sau *SysAddressUpdate) SetProvinceID(s string) *SysAddressUpdate {
	sau.mutation.SetProvinceID(s)
	return sau
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableProvinceID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetProvinceID(*s)
	}
	return sau
}

// ClearProvinceID clears the value of the "province_id" field.
func (sau *SysAddressUpdate) ClearProvinceID() *SysAddressUpdate {
	sau.mutation.ClearProvinceID()
	return sau
}

// SetCityID sets the "city_id" field.
func (sau *SysAddressUpdate) SetCityID(s string) *SysAddressUpdate {
	sau.mutation.SetCityID(s)
	return sau
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCityID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCityID(*s)
	}
	return sau
}

// ClearCityID clears the value of the "city_id" field.
func (sau *SysAddressUpdate) ClearCityID() *SysAddressUpdate {
	sau.mutation.ClearCityID()
	return sau
}

// SetCountyID sets the "county_id" field.
func (sau *SysAddressUpdate) SetCountyID(s string) *SysAddressUpdate {
	sau.mutation.SetCountyID(s)
	return sau
}

// SetNillableCountyID sets the "county_id" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableCountyID(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetCountyID(*s)
	}
	return sau
}

// ClearCountyID clears the value of the "county_id" field.
func (sau *SysAddressUpdate) ClearCountyID() *SysAddressUpdate {
	sau.mutation.ClearCountyID()
	return sau
}

// SetZipCode sets the "zip_code" field.
func (sau *SysAddressUpdate) SetZipCode(s string) *SysAddressUpdate {
	sau.mutation.SetZipCode(s)
	return sau
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableZipCode(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetZipCode(*s)
	}
	return sau
}

// ClearZipCode clears the value of the "zip_code" field.
func (sau *SysAddressUpdate) ClearZipCode() *SysAddressUpdate {
	sau.mutation.ClearZipCode()
	return sau
}

// SetDaddr sets the "daddr" field.
func (sau *SysAddressUpdate) SetDaddr(s string) *SysAddressUpdate {
	sau.mutation.SetDaddr(s)
	return sau
}

// SetNillableDaddr sets the "daddr" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableDaddr(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetDaddr(*s)
	}
	return sau
}

// ClearDaddr clears the value of the "daddr" field.
func (sau *SysAddressUpdate) ClearDaddr() *SysAddressUpdate {
	sau.mutation.ClearDaddr()
	return sau
}

// SetFirstName sets the "first_name" field.
func (sau *SysAddressUpdate) SetFirstName(s string) *SysAddressUpdate {
	sau.mutation.SetFirstName(s)
	return sau
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableFirstName(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetFirstName(*s)
	}
	return sau
}

// ClearFirstName clears the value of the "first_name" field.
func (sau *SysAddressUpdate) ClearFirstName() *SysAddressUpdate {
	sau.mutation.ClearFirstName()
	return sau
}

// SetLastName sets the "last_name" field.
func (sau *SysAddressUpdate) SetLastName(s string) *SysAddressUpdate {
	sau.mutation.SetLastName(s)
	return sau
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableLastName(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetLastName(*s)
	}
	return sau
}

// ClearLastName clears the value of the "last_name" field.
func (sau *SysAddressUpdate) ClearLastName() *SysAddressUpdate {
	sau.mutation.ClearLastName()
	return sau
}

// SetAreaCode sets the "area_code" field.
func (sau *SysAddressUpdate) SetAreaCode(s string) *SysAddressUpdate {
	sau.mutation.SetAreaCode(s)
	return sau
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableAreaCode(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetAreaCode(*s)
	}
	return sau
}

// ClearAreaCode clears the value of the "area_code" field.
func (sau *SysAddressUpdate) ClearAreaCode() *SysAddressUpdate {
	sau.mutation.ClearAreaCode()
	return sau
}

// SetMobile sets the "mobile" field.
func (sau *SysAddressUpdate) SetMobile(s string) *SysAddressUpdate {
	sau.mutation.SetMobile(s)
	return sau
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableMobile(s *string) *SysAddressUpdate {
	if s != nil {
		sau.SetMobile(*s)
	}
	return sau
}

// ClearMobile clears the value of the "mobile" field.
func (sau *SysAddressUpdate) ClearMobile() *SysAddressUpdate {
	sau.mutation.ClearMobile()
	return sau
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by ID.
func (sau *SysAddressUpdate) SetOrganID(id string) *SysAddressUpdate {
	sau.mutation.SetOrganID(id)
	return sau
}

// SetNillableOrganID sets the "organ" edge to the OrgOrgan entity by ID if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableOrganID(id *string) *SysAddressUpdate {
	if id != nil {
		sau = sau.SetOrganID(*id)
	}
	return sau
}

// SetOrgan sets the "organ" edge to the OrgOrgan entity.
func (sau *SysAddressUpdate) SetOrgan(o *OrgOrgan) *SysAddressUpdate {
	return sau.SetOrganID(o.ID)
}

// SetStaffResiID sets the "staff_resi" edge to the OrgStaff entity by ID.
func (sau *SysAddressUpdate) SetStaffResiID(id string) *SysAddressUpdate {
	sau.mutation.SetStaffResiID(id)
	return sau
}

// SetNillableStaffResiID sets the "staff_resi" edge to the OrgStaff entity by ID if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableStaffResiID(id *string) *SysAddressUpdate {
	if id != nil {
		sau = sau.SetStaffResiID(*id)
	}
	return sau
}

// SetStaffResi sets the "staff_resi" edge to the OrgStaff entity.
func (sau *SysAddressUpdate) SetStaffResi(o *OrgStaff) *SysAddressUpdate {
	return sau.SetStaffResiID(o.ID)
}

// SetStaffIdenID sets the "staff_iden" edge to the OrgStaff entity by ID.
func (sau *SysAddressUpdate) SetStaffIdenID(id string) *SysAddressUpdate {
	sau.mutation.SetStaffIdenID(id)
	return sau
}

// SetNillableStaffIdenID sets the "staff_iden" edge to the OrgStaff entity by ID if the given value is not nil.
func (sau *SysAddressUpdate) SetNillableStaffIdenID(id *string) *SysAddressUpdate {
	if id != nil {
		sau = sau.SetStaffIdenID(*id)
	}
	return sau
}

// SetStaffIden sets the "staff_iden" edge to the OrgStaff entity.
func (sau *SysAddressUpdate) SetStaffIden(o *OrgStaff) *SysAddressUpdate {
	return sau.SetStaffIdenID(o.ID)
}

// Mutation returns the SysAddressMutation object of the builder.
func (sau *SysAddressUpdate) Mutation() *SysAddressMutation {
	return sau.mutation
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (sau *SysAddressUpdate) ClearOrgan() *SysAddressUpdate {
	sau.mutation.ClearOrgan()
	return sau
}

// ClearStaffResi clears the "staff_resi" edge to the OrgStaff entity.
func (sau *SysAddressUpdate) ClearStaffResi() *SysAddressUpdate {
	sau.mutation.ClearStaffResi()
	return sau
}

// ClearStaffIden clears the "staff_iden" edge to the OrgStaff entity.
func (sau *SysAddressUpdate) ClearStaffIden() *SysAddressUpdate {
	sau.mutation.ClearStaffIden()
	return sau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SysAddressUpdate) Save(ctx context.Context) (int, error) {
	sau.defaults()
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SysAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SysAddressUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SysAddressUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SysAddressUpdate) defaults() {
	if _, ok := sau.mutation.UpdatedAt(); !ok && !sau.mutation.UpdatedAtCleared() {
		v := sysaddress.UpdateDefaultUpdatedAt()
		sau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *SysAddressUpdate) check() error {
	if v, ok := sau.mutation.UserID(); ok {
		if err := sysaddress.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.user_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Memo(); ok {
		if err := sysaddress.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.memo": %w`, err)}
		}
	}
	if v, ok := sau.mutation.CountryID(); ok {
		if err := sysaddress.CountryIDValidator(v); err != nil {
			return &ValidationError{Name: "country_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.country_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.ProvinceID(); ok {
		if err := sysaddress.ProvinceIDValidator(v); err != nil {
			return &ValidationError{Name: "province_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.province_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.CityID(); ok {
		if err := sysaddress.CityIDValidator(v); err != nil {
			return &ValidationError{Name: "city_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.city_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.CountyID(); ok {
		if err := sysaddress.CountyIDValidator(v); err != nil {
			return &ValidationError{Name: "county_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.county_id": %w`, err)}
		}
	}
	if v, ok := sau.mutation.ZipCode(); ok {
		if err := sysaddress.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.zip_code": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Daddr(); ok {
		if err := sysaddress.DaddrValidator(v); err != nil {
			return &ValidationError{Name: "daddr", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.daddr": %w`, err)}
		}
	}
	if v, ok := sau.mutation.FirstName(); ok {
		if err := sysaddress.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.first_name": %w`, err)}
		}
	}
	if v, ok := sau.mutation.LastName(); ok {
		if err := sysaddress.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.last_name": %w`, err)}
		}
	}
	if v, ok := sau.mutation.AreaCode(); ok {
		if err := sysaddress.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.area_code": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Mobile(); ok {
		if err := sysaddress.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.mobile": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sau *SysAddressUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysAddressUpdate {
	sau.modifiers = append(sau.modifiers, modifiers...)
	return sau
}

func (sau *SysAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysaddress.Table, sysaddress.Columns, sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.IsDel(); ok {
		_spec.SetField(sysaddress.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sau.mutation.UserID(); ok {
		_spec.SetField(sysaddress.FieldUserID, field.TypeString, value)
	}
	if sau.mutation.UserIDCleared() {
		_spec.ClearField(sysaddress.FieldUserID, field.TypeString)
	}
	if sau.mutation.OrgIDCleared() {
		_spec.ClearField(sysaddress.FieldOrgID, field.TypeString)
	}
	if value, ok := sau.mutation.Sort(); ok {
		_spec.SetField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.AddedSort(); ok {
		_spec.AddField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if sau.mutation.CreatedAtCleared() {
		_spec.ClearField(sysaddress.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sau.mutation.UpdatedAt(); ok {
		_spec.SetField(sysaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if sau.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysaddress.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sau.mutation.DeletedAt(); ok {
		_spec.SetField(sysaddress.FieldDeletedAt, field.TypeTime, value)
	}
	if sau.mutation.DeletedAtCleared() {
		_spec.ClearField(sysaddress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sau.mutation.IsActive(); ok {
		_spec.SetField(sysaddress.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sau.mutation.Memo(); ok {
		_spec.SetField(sysaddress.FieldMemo, field.TypeString, value)
	}
	if sau.mutation.MemoCleared() {
		_spec.ClearField(sysaddress.FieldMemo, field.TypeString)
	}
	if value, ok := sau.mutation.Country(); ok {
		_spec.SetField(sysaddress.FieldCountry, field.TypeString, value)
	}
	if sau.mutation.CountryCleared() {
		_spec.ClearField(sysaddress.FieldCountry, field.TypeString)
	}
	if value, ok := sau.mutation.Province(); ok {
		_spec.SetField(sysaddress.FieldProvince, field.TypeString, value)
	}
	if sau.mutation.ProvinceCleared() {
		_spec.ClearField(sysaddress.FieldProvince, field.TypeString)
	}
	if value, ok := sau.mutation.City(); ok {
		_spec.SetField(sysaddress.FieldCity, field.TypeString, value)
	}
	if sau.mutation.CityCleared() {
		_spec.ClearField(sysaddress.FieldCity, field.TypeString)
	}
	if value, ok := sau.mutation.County(); ok {
		_spec.SetField(sysaddress.FieldCounty, field.TypeString, value)
	}
	if sau.mutation.CountyCleared() {
		_spec.ClearField(sysaddress.FieldCounty, field.TypeString)
	}
	if value, ok := sau.mutation.CountryID(); ok {
		_spec.SetField(sysaddress.FieldCountryID, field.TypeString, value)
	}
	if sau.mutation.CountryIDCleared() {
		_spec.ClearField(sysaddress.FieldCountryID, field.TypeString)
	}
	if value, ok := sau.mutation.ProvinceID(); ok {
		_spec.SetField(sysaddress.FieldProvinceID, field.TypeString, value)
	}
	if sau.mutation.ProvinceIDCleared() {
		_spec.ClearField(sysaddress.FieldProvinceID, field.TypeString)
	}
	if value, ok := sau.mutation.CityID(); ok {
		_spec.SetField(sysaddress.FieldCityID, field.TypeString, value)
	}
	if sau.mutation.CityIDCleared() {
		_spec.ClearField(sysaddress.FieldCityID, field.TypeString)
	}
	if value, ok := sau.mutation.CountyID(); ok {
		_spec.SetField(sysaddress.FieldCountyID, field.TypeString, value)
	}
	if sau.mutation.CountyIDCleared() {
		_spec.ClearField(sysaddress.FieldCountyID, field.TypeString)
	}
	if value, ok := sau.mutation.ZipCode(); ok {
		_spec.SetField(sysaddress.FieldZipCode, field.TypeString, value)
	}
	if sau.mutation.ZipCodeCleared() {
		_spec.ClearField(sysaddress.FieldZipCode, field.TypeString)
	}
	if value, ok := sau.mutation.Daddr(); ok {
		_spec.SetField(sysaddress.FieldDaddr, field.TypeString, value)
	}
	if sau.mutation.DaddrCleared() {
		_spec.ClearField(sysaddress.FieldDaddr, field.TypeString)
	}
	if value, ok := sau.mutation.FirstName(); ok {
		_spec.SetField(sysaddress.FieldFirstName, field.TypeString, value)
	}
	if sau.mutation.FirstNameCleared() {
		_spec.ClearField(sysaddress.FieldFirstName, field.TypeString)
	}
	if value, ok := sau.mutation.LastName(); ok {
		_spec.SetField(sysaddress.FieldLastName, field.TypeString, value)
	}
	if sau.mutation.LastNameCleared() {
		_spec.ClearField(sysaddress.FieldLastName, field.TypeString)
	}
	if value, ok := sau.mutation.AreaCode(); ok {
		_spec.SetField(sysaddress.FieldAreaCode, field.TypeString, value)
	}
	if sau.mutation.AreaCodeCleared() {
		_spec.ClearField(sysaddress.FieldAreaCode, field.TypeString)
	}
	if value, ok := sau.mutation.Mobile(); ok {
		_spec.SetField(sysaddress.FieldMobile, field.TypeString, value)
	}
	if sau.mutation.MobileCleared() {
		_spec.ClearField(sysaddress.FieldMobile, field.TypeString)
	}
	if sau.mutation.OrganCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.OrganTable,
			Columns: []string{sysaddress.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.OrganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.OrganTable,
			Columns: []string{sysaddress.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.StaffResiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffResiTable,
			Columns: []string{sysaddress.StaffResiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.StaffResiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffResiTable,
			Columns: []string{sysaddress.StaffResiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.StaffIdenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffIdenTable,
			Columns: []string{sysaddress.StaffIdenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.StaffIdenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffIdenTable,
			Columns: []string{sysaddress.StaffIdenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SysAddressUpdateOne is the builder for updating a single SysAddress entity.
type SysAddressUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysAddressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsDel sets the "is_del" field.
func (sauo *SysAddressUpdateOne) SetIsDel(b bool) *SysAddressUpdateOne {
	sauo.mutation.SetIsDel(b)
	return sauo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableIsDel(b *bool) *SysAddressUpdateOne {
	if b != nil {
		sauo.SetIsDel(*b)
	}
	return sauo
}

// SetUserID sets the "user_id" field.
func (sauo *SysAddressUpdateOne) SetUserID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetUserID(s)
	return sauo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableUserID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetUserID(*s)
	}
	return sauo
}

// ClearUserID clears the value of the "user_id" field.
func (sauo *SysAddressUpdateOne) ClearUserID() *SysAddressUpdateOne {
	sauo.mutation.ClearUserID()
	return sauo
}

// SetSort sets the "sort" field.
func (sauo *SysAddressUpdateOne) SetSort(i int32) *SysAddressUpdateOne {
	sauo.mutation.ResetSort()
	sauo.mutation.SetSort(i)
	return sauo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableSort(i *int32) *SysAddressUpdateOne {
	if i != nil {
		sauo.SetSort(*i)
	}
	return sauo
}

// AddSort adds i to the "sort" field.
func (sauo *SysAddressUpdateOne) AddSort(i int32) *SysAddressUpdateOne {
	sauo.mutation.AddSort(i)
	return sauo
}

// SetUpdatedAt sets the "updated_at" field.
func (sauo *SysAddressUpdateOne) SetUpdatedAt(t time.Time) *SysAddressUpdateOne {
	sauo.mutation.SetUpdatedAt(t)
	return sauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sauo *SysAddressUpdateOne) ClearUpdatedAt() *SysAddressUpdateOne {
	sauo.mutation.ClearUpdatedAt()
	return sauo
}

// SetDeletedAt sets the "deleted_at" field.
func (sauo *SysAddressUpdateOne) SetDeletedAt(t time.Time) *SysAddressUpdateOne {
	sauo.mutation.SetDeletedAt(t)
	return sauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableDeletedAt(t *time.Time) *SysAddressUpdateOne {
	if t != nil {
		sauo.SetDeletedAt(*t)
	}
	return sauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sauo *SysAddressUpdateOne) ClearDeletedAt() *SysAddressUpdateOne {
	sauo.mutation.ClearDeletedAt()
	return sauo
}

// SetIsActive sets the "is_active" field.
func (sauo *SysAddressUpdateOne) SetIsActive(b bool) *SysAddressUpdateOne {
	sauo.mutation.SetIsActive(b)
	return sauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableIsActive(b *bool) *SysAddressUpdateOne {
	if b != nil {
		sauo.SetIsActive(*b)
	}
	return sauo
}

// SetMemo sets the "memo" field.
func (sauo *SysAddressUpdateOne) SetMemo(s string) *SysAddressUpdateOne {
	sauo.mutation.SetMemo(s)
	return sauo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableMemo(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetMemo(*s)
	}
	return sauo
}

// ClearMemo clears the value of the "memo" field.
func (sauo *SysAddressUpdateOne) ClearMemo() *SysAddressUpdateOne {
	sauo.mutation.ClearMemo()
	return sauo
}

// SetCountry sets the "country" field.
func (sauo *SysAddressUpdateOne) SetCountry(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCountry(s)
	return sauo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCountry(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCountry(*s)
	}
	return sauo
}

// ClearCountry clears the value of the "country" field.
func (sauo *SysAddressUpdateOne) ClearCountry() *SysAddressUpdateOne {
	sauo.mutation.ClearCountry()
	return sauo
}

// SetProvince sets the "province" field.
func (sauo *SysAddressUpdateOne) SetProvince(s string) *SysAddressUpdateOne {
	sauo.mutation.SetProvince(s)
	return sauo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableProvince(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetProvince(*s)
	}
	return sauo
}

// ClearProvince clears the value of the "province" field.
func (sauo *SysAddressUpdateOne) ClearProvince() *SysAddressUpdateOne {
	sauo.mutation.ClearProvince()
	return sauo
}

// SetCity sets the "city" field.
func (sauo *SysAddressUpdateOne) SetCity(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCity(s)
	return sauo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCity(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCity(*s)
	}
	return sauo
}

// ClearCity clears the value of the "city" field.
func (sauo *SysAddressUpdateOne) ClearCity() *SysAddressUpdateOne {
	sauo.mutation.ClearCity()
	return sauo
}

// SetCounty sets the "county" field.
func (sauo *SysAddressUpdateOne) SetCounty(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCounty(s)
	return sauo
}

// SetNillableCounty sets the "county" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCounty(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCounty(*s)
	}
	return sauo
}

// ClearCounty clears the value of the "county" field.
func (sauo *SysAddressUpdateOne) ClearCounty() *SysAddressUpdateOne {
	sauo.mutation.ClearCounty()
	return sauo
}

// SetCountryID sets the "country_id" field.
func (sauo *SysAddressUpdateOne) SetCountryID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCountryID(s)
	return sauo
}

// SetNillableCountryID sets the "country_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCountryID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCountryID(*s)
	}
	return sauo
}

// ClearCountryID clears the value of the "country_id" field.
func (sauo *SysAddressUpdateOne) ClearCountryID() *SysAddressUpdateOne {
	sauo.mutation.ClearCountryID()
	return sauo
}

// SetProvinceID sets the "province_id" field.
func (sauo *SysAddressUpdateOne) SetProvinceID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetProvinceID(s)
	return sauo
}

// SetNillableProvinceID sets the "province_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableProvinceID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetProvinceID(*s)
	}
	return sauo
}

// ClearProvinceID clears the value of the "province_id" field.
func (sauo *SysAddressUpdateOne) ClearProvinceID() *SysAddressUpdateOne {
	sauo.mutation.ClearProvinceID()
	return sauo
}

// SetCityID sets the "city_id" field.
func (sauo *SysAddressUpdateOne) SetCityID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCityID(s)
	return sauo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCityID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCityID(*s)
	}
	return sauo
}

// ClearCityID clears the value of the "city_id" field.
func (sauo *SysAddressUpdateOne) ClearCityID() *SysAddressUpdateOne {
	sauo.mutation.ClearCityID()
	return sauo
}

// SetCountyID sets the "county_id" field.
func (sauo *SysAddressUpdateOne) SetCountyID(s string) *SysAddressUpdateOne {
	sauo.mutation.SetCountyID(s)
	return sauo
}

// SetNillableCountyID sets the "county_id" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableCountyID(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetCountyID(*s)
	}
	return sauo
}

// ClearCountyID clears the value of the "county_id" field.
func (sauo *SysAddressUpdateOne) ClearCountyID() *SysAddressUpdateOne {
	sauo.mutation.ClearCountyID()
	return sauo
}

// SetZipCode sets the "zip_code" field.
func (sauo *SysAddressUpdateOne) SetZipCode(s string) *SysAddressUpdateOne {
	sauo.mutation.SetZipCode(s)
	return sauo
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableZipCode(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetZipCode(*s)
	}
	return sauo
}

// ClearZipCode clears the value of the "zip_code" field.
func (sauo *SysAddressUpdateOne) ClearZipCode() *SysAddressUpdateOne {
	sauo.mutation.ClearZipCode()
	return sauo
}

// SetDaddr sets the "daddr" field.
func (sauo *SysAddressUpdateOne) SetDaddr(s string) *SysAddressUpdateOne {
	sauo.mutation.SetDaddr(s)
	return sauo
}

// SetNillableDaddr sets the "daddr" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableDaddr(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetDaddr(*s)
	}
	return sauo
}

// ClearDaddr clears the value of the "daddr" field.
func (sauo *SysAddressUpdateOne) ClearDaddr() *SysAddressUpdateOne {
	sauo.mutation.ClearDaddr()
	return sauo
}

// SetFirstName sets the "first_name" field.
func (sauo *SysAddressUpdateOne) SetFirstName(s string) *SysAddressUpdateOne {
	sauo.mutation.SetFirstName(s)
	return sauo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableFirstName(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetFirstName(*s)
	}
	return sauo
}

// ClearFirstName clears the value of the "first_name" field.
func (sauo *SysAddressUpdateOne) ClearFirstName() *SysAddressUpdateOne {
	sauo.mutation.ClearFirstName()
	return sauo
}

// SetLastName sets the "last_name" field.
func (sauo *SysAddressUpdateOne) SetLastName(s string) *SysAddressUpdateOne {
	sauo.mutation.SetLastName(s)
	return sauo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableLastName(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetLastName(*s)
	}
	return sauo
}

// ClearLastName clears the value of the "last_name" field.
func (sauo *SysAddressUpdateOne) ClearLastName() *SysAddressUpdateOne {
	sauo.mutation.ClearLastName()
	return sauo
}

// SetAreaCode sets the "area_code" field.
func (sauo *SysAddressUpdateOne) SetAreaCode(s string) *SysAddressUpdateOne {
	sauo.mutation.SetAreaCode(s)
	return sauo
}

// SetNillableAreaCode sets the "area_code" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableAreaCode(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetAreaCode(*s)
	}
	return sauo
}

// ClearAreaCode clears the value of the "area_code" field.
func (sauo *SysAddressUpdateOne) ClearAreaCode() *SysAddressUpdateOne {
	sauo.mutation.ClearAreaCode()
	return sauo
}

// SetMobile sets the "mobile" field.
func (sauo *SysAddressUpdateOne) SetMobile(s string) *SysAddressUpdateOne {
	sauo.mutation.SetMobile(s)
	return sauo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableMobile(s *string) *SysAddressUpdateOne {
	if s != nil {
		sauo.SetMobile(*s)
	}
	return sauo
}

// ClearMobile clears the value of the "mobile" field.
func (sauo *SysAddressUpdateOne) ClearMobile() *SysAddressUpdateOne {
	sauo.mutation.ClearMobile()
	return sauo
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by ID.
func (sauo *SysAddressUpdateOne) SetOrganID(id string) *SysAddressUpdateOne {
	sauo.mutation.SetOrganID(id)
	return sauo
}

// SetNillableOrganID sets the "organ" edge to the OrgOrgan entity by ID if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableOrganID(id *string) *SysAddressUpdateOne {
	if id != nil {
		sauo = sauo.SetOrganID(*id)
	}
	return sauo
}

// SetOrgan sets the "organ" edge to the OrgOrgan entity.
func (sauo *SysAddressUpdateOne) SetOrgan(o *OrgOrgan) *SysAddressUpdateOne {
	return sauo.SetOrganID(o.ID)
}

// SetStaffResiID sets the "staff_resi" edge to the OrgStaff entity by ID.
func (sauo *SysAddressUpdateOne) SetStaffResiID(id string) *SysAddressUpdateOne {
	sauo.mutation.SetStaffResiID(id)
	return sauo
}

// SetNillableStaffResiID sets the "staff_resi" edge to the OrgStaff entity by ID if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableStaffResiID(id *string) *SysAddressUpdateOne {
	if id != nil {
		sauo = sauo.SetStaffResiID(*id)
	}
	return sauo
}

// SetStaffResi sets the "staff_resi" edge to the OrgStaff entity.
func (sauo *SysAddressUpdateOne) SetStaffResi(o *OrgStaff) *SysAddressUpdateOne {
	return sauo.SetStaffResiID(o.ID)
}

// SetStaffIdenID sets the "staff_iden" edge to the OrgStaff entity by ID.
func (sauo *SysAddressUpdateOne) SetStaffIdenID(id string) *SysAddressUpdateOne {
	sauo.mutation.SetStaffIdenID(id)
	return sauo
}

// SetNillableStaffIdenID sets the "staff_iden" edge to the OrgStaff entity by ID if the given value is not nil.
func (sauo *SysAddressUpdateOne) SetNillableStaffIdenID(id *string) *SysAddressUpdateOne {
	if id != nil {
		sauo = sauo.SetStaffIdenID(*id)
	}
	return sauo
}

// SetStaffIden sets the "staff_iden" edge to the OrgStaff entity.
func (sauo *SysAddressUpdateOne) SetStaffIden(o *OrgStaff) *SysAddressUpdateOne {
	return sauo.SetStaffIdenID(o.ID)
}

// Mutation returns the SysAddressMutation object of the builder.
func (sauo *SysAddressUpdateOne) Mutation() *SysAddressMutation {
	return sauo.mutation
}

// ClearOrgan clears the "organ" edge to the OrgOrgan entity.
func (sauo *SysAddressUpdateOne) ClearOrgan() *SysAddressUpdateOne {
	sauo.mutation.ClearOrgan()
	return sauo
}

// ClearStaffResi clears the "staff_resi" edge to the OrgStaff entity.
func (sauo *SysAddressUpdateOne) ClearStaffResi() *SysAddressUpdateOne {
	sauo.mutation.ClearStaffResi()
	return sauo
}

// ClearStaffIden clears the "staff_iden" edge to the OrgStaff entity.
func (sauo *SysAddressUpdateOne) ClearStaffIden() *SysAddressUpdateOne {
	sauo.mutation.ClearStaffIden()
	return sauo
}

// Where appends a list predicates to the SysAddressUpdate builder.
func (sauo *SysAddressUpdateOne) Where(ps ...predicate.SysAddress) *SysAddressUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SysAddressUpdateOne) Select(field string, fields ...string) *SysAddressUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SysAddress entity.
func (sauo *SysAddressUpdateOne) Save(ctx context.Context) (*SysAddress, error) {
	sauo.defaults()
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SysAddressUpdateOne) SaveX(ctx context.Context) *SysAddress {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SysAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SysAddressUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SysAddressUpdateOne) defaults() {
	if _, ok := sauo.mutation.UpdatedAt(); !ok && !sauo.mutation.UpdatedAtCleared() {
		v := sysaddress.UpdateDefaultUpdatedAt()
		sauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SysAddressUpdateOne) check() error {
	if v, ok := sauo.mutation.UserID(); ok {
		if err := sysaddress.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.user_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Memo(); ok {
		if err := sysaddress.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.memo": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.CountryID(); ok {
		if err := sysaddress.CountryIDValidator(v); err != nil {
			return &ValidationError{Name: "country_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.country_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.ProvinceID(); ok {
		if err := sysaddress.ProvinceIDValidator(v); err != nil {
			return &ValidationError{Name: "province_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.province_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.CityID(); ok {
		if err := sysaddress.CityIDValidator(v); err != nil {
			return &ValidationError{Name: "city_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.city_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.CountyID(); ok {
		if err := sysaddress.CountyIDValidator(v); err != nil {
			return &ValidationError{Name: "county_id", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.county_id": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.ZipCode(); ok {
		if err := sysaddress.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zip_code", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.zip_code": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Daddr(); ok {
		if err := sysaddress.DaddrValidator(v); err != nil {
			return &ValidationError{Name: "daddr", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.daddr": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.FirstName(); ok {
		if err := sysaddress.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.first_name": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.LastName(); ok {
		if err := sysaddress.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.last_name": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.AreaCode(); ok {
		if err := sysaddress.AreaCodeValidator(v); err != nil {
			return &ValidationError{Name: "area_code", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.area_code": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Mobile(); ok {
		if err := sysaddress.MobileValidator(v); err != nil {
			return &ValidationError{Name: "mobile", err: fmt.Errorf(`mainent: validator failed for field "SysAddress.mobile": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sauo *SysAddressUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysAddressUpdateOne {
	sauo.modifiers = append(sauo.modifiers, modifiers...)
	return sauo
}

func (sauo *SysAddressUpdateOne) sqlSave(ctx context.Context) (_node *SysAddress, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysaddress.Table, sysaddress.Columns, sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`mainent: missing "SysAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysaddress.FieldID)
		for _, f := range fields {
			if !sysaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("mainent: invalid field %q for query", f)}
			}
			if f != sysaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.IsDel(); ok {
		_spec.SetField(sysaddress.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sauo.mutation.UserID(); ok {
		_spec.SetField(sysaddress.FieldUserID, field.TypeString, value)
	}
	if sauo.mutation.UserIDCleared() {
		_spec.ClearField(sysaddress.FieldUserID, field.TypeString)
	}
	if sauo.mutation.OrgIDCleared() {
		_spec.ClearField(sysaddress.FieldOrgID, field.TypeString)
	}
	if value, ok := sauo.mutation.Sort(); ok {
		_spec.SetField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.AddedSort(); ok {
		_spec.AddField(sysaddress.FieldSort, field.TypeInt32, value)
	}
	if sauo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysaddress.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysaddress.FieldUpdatedAt, field.TypeTime, value)
	}
	if sauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysaddress.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.DeletedAt(); ok {
		_spec.SetField(sysaddress.FieldDeletedAt, field.TypeTime, value)
	}
	if sauo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysaddress.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.IsActive(); ok {
		_spec.SetField(sysaddress.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sauo.mutation.Memo(); ok {
		_spec.SetField(sysaddress.FieldMemo, field.TypeString, value)
	}
	if sauo.mutation.MemoCleared() {
		_spec.ClearField(sysaddress.FieldMemo, field.TypeString)
	}
	if value, ok := sauo.mutation.Country(); ok {
		_spec.SetField(sysaddress.FieldCountry, field.TypeString, value)
	}
	if sauo.mutation.CountryCleared() {
		_spec.ClearField(sysaddress.FieldCountry, field.TypeString)
	}
	if value, ok := sauo.mutation.Province(); ok {
		_spec.SetField(sysaddress.FieldProvince, field.TypeString, value)
	}
	if sauo.mutation.ProvinceCleared() {
		_spec.ClearField(sysaddress.FieldProvince, field.TypeString)
	}
	if value, ok := sauo.mutation.City(); ok {
		_spec.SetField(sysaddress.FieldCity, field.TypeString, value)
	}
	if sauo.mutation.CityCleared() {
		_spec.ClearField(sysaddress.FieldCity, field.TypeString)
	}
	if value, ok := sauo.mutation.County(); ok {
		_spec.SetField(sysaddress.FieldCounty, field.TypeString, value)
	}
	if sauo.mutation.CountyCleared() {
		_spec.ClearField(sysaddress.FieldCounty, field.TypeString)
	}
	if value, ok := sauo.mutation.CountryID(); ok {
		_spec.SetField(sysaddress.FieldCountryID, field.TypeString, value)
	}
	if sauo.mutation.CountryIDCleared() {
		_spec.ClearField(sysaddress.FieldCountryID, field.TypeString)
	}
	if value, ok := sauo.mutation.ProvinceID(); ok {
		_spec.SetField(sysaddress.FieldProvinceID, field.TypeString, value)
	}
	if sauo.mutation.ProvinceIDCleared() {
		_spec.ClearField(sysaddress.FieldProvinceID, field.TypeString)
	}
	if value, ok := sauo.mutation.CityID(); ok {
		_spec.SetField(sysaddress.FieldCityID, field.TypeString, value)
	}
	if sauo.mutation.CityIDCleared() {
		_spec.ClearField(sysaddress.FieldCityID, field.TypeString)
	}
	if value, ok := sauo.mutation.CountyID(); ok {
		_spec.SetField(sysaddress.FieldCountyID, field.TypeString, value)
	}
	if sauo.mutation.CountyIDCleared() {
		_spec.ClearField(sysaddress.FieldCountyID, field.TypeString)
	}
	if value, ok := sauo.mutation.ZipCode(); ok {
		_spec.SetField(sysaddress.FieldZipCode, field.TypeString, value)
	}
	if sauo.mutation.ZipCodeCleared() {
		_spec.ClearField(sysaddress.FieldZipCode, field.TypeString)
	}
	if value, ok := sauo.mutation.Daddr(); ok {
		_spec.SetField(sysaddress.FieldDaddr, field.TypeString, value)
	}
	if sauo.mutation.DaddrCleared() {
		_spec.ClearField(sysaddress.FieldDaddr, field.TypeString)
	}
	if value, ok := sauo.mutation.FirstName(); ok {
		_spec.SetField(sysaddress.FieldFirstName, field.TypeString, value)
	}
	if sauo.mutation.FirstNameCleared() {
		_spec.ClearField(sysaddress.FieldFirstName, field.TypeString)
	}
	if value, ok := sauo.mutation.LastName(); ok {
		_spec.SetField(sysaddress.FieldLastName, field.TypeString, value)
	}
	if sauo.mutation.LastNameCleared() {
		_spec.ClearField(sysaddress.FieldLastName, field.TypeString)
	}
	if value, ok := sauo.mutation.AreaCode(); ok {
		_spec.SetField(sysaddress.FieldAreaCode, field.TypeString, value)
	}
	if sauo.mutation.AreaCodeCleared() {
		_spec.ClearField(sysaddress.FieldAreaCode, field.TypeString)
	}
	if value, ok := sauo.mutation.Mobile(); ok {
		_spec.SetField(sysaddress.FieldMobile, field.TypeString, value)
	}
	if sauo.mutation.MobileCleared() {
		_spec.ClearField(sysaddress.FieldMobile, field.TypeString)
	}
	if sauo.mutation.OrganCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.OrganTable,
			Columns: []string{sysaddress.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.OrganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.OrganTable,
			Columns: []string{sysaddress.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.StaffResiCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffResiTable,
			Columns: []string{sysaddress.StaffResiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.StaffResiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffResiTable,
			Columns: []string{sysaddress.StaffResiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.StaffIdenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffIdenTable,
			Columns: []string{sysaddress.StaffIdenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.StaffIdenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   sysaddress.StaffIdenTable,
			Columns: []string{sysaddress.StaffIdenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sauo.modifiers...)
	_node = &SysAddress{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
