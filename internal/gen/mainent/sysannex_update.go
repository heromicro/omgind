// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/sysannex"
)

// SysAnnexUpdate is the builder for updating SysAnnex entities.
type SysAnnexUpdate struct {
	config
	hooks     []Hook
	mutation  *SysAnnexMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysAnnexUpdate builder.
func (sau *SysAnnexUpdate) Where(ps ...predicate.SysAnnex) *SysAnnexUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetMemo sets the "memo" field.
func (sau *SysAnnexUpdate) SetMemo(s string) *SysAnnexUpdate {
	sau.mutation.SetMemo(s)
	return sau
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sau *SysAnnexUpdate) SetNillableMemo(s *string) *SysAnnexUpdate {
	if s != nil {
		sau.SetMemo(*s)
	}
	return sau
}

// ClearMemo clears the value of the "memo" field.
func (sau *SysAnnexUpdate) ClearMemo() *SysAnnexUpdate {
	sau.mutation.ClearMemo()
	return sau
}

// SetSort sets the "sort" field.
func (sau *SysAnnexUpdate) SetSort(i int32) *SysAnnexUpdate {
	sau.mutation.ResetSort()
	sau.mutation.SetSort(i)
	return sau
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sau *SysAnnexUpdate) SetNillableSort(i *int32) *SysAnnexUpdate {
	if i != nil {
		sau.SetSort(*i)
	}
	return sau
}

// AddSort adds i to the "sort" field.
func (sau *SysAnnexUpdate) AddSort(i int32) *SysAnnexUpdate {
	sau.mutation.AddSort(i)
	return sau
}

// SetUpdatedAt sets the "updated_at" field.
func (sau *SysAnnexUpdate) SetUpdatedAt(t time.Time) *SysAnnexUpdate {
	sau.mutation.SetUpdatedAt(t)
	return sau
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sau *SysAnnexUpdate) ClearUpdatedAt() *SysAnnexUpdate {
	sau.mutation.ClearUpdatedAt()
	return sau
}

// SetDeletedAt sets the "deleted_at" field.
func (sau *SysAnnexUpdate) SetDeletedAt(t time.Time) *SysAnnexUpdate {
	sau.mutation.SetDeletedAt(t)
	return sau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sau *SysAnnexUpdate) SetNillableDeletedAt(t *time.Time) *SysAnnexUpdate {
	if t != nil {
		sau.SetDeletedAt(*t)
	}
	return sau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sau *SysAnnexUpdate) ClearDeletedAt() *SysAnnexUpdate {
	sau.mutation.ClearDeletedAt()
	return sau
}

// SetIsActive sets the "is_active" field.
func (sau *SysAnnexUpdate) SetIsActive(b bool) *SysAnnexUpdate {
	sau.mutation.SetIsActive(b)
	return sau
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sau *SysAnnexUpdate) SetNillableIsActive(b *bool) *SysAnnexUpdate {
	if b != nil {
		sau.SetIsActive(*b)
	}
	return sau
}

// SetIsDel sets the "is_del" field.
func (sau *SysAnnexUpdate) SetIsDel(b bool) *SysAnnexUpdate {
	sau.mutation.SetIsDel(b)
	return sau
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sau *SysAnnexUpdate) SetNillableIsDel(b *bool) *SysAnnexUpdate {
	if b != nil {
		sau.SetIsDel(*b)
	}
	return sau
}

// SetName sets the "name" field.
func (sau *SysAnnexUpdate) SetName(s string) *SysAnnexUpdate {
	sau.mutation.SetName(s)
	return sau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sau *SysAnnexUpdate) SetNillableName(s *string) *SysAnnexUpdate {
	if s != nil {
		sau.SetName(*s)
	}
	return sau
}

// ClearName clears the value of the "name" field.
func (sau *SysAnnexUpdate) ClearName() *SysAnnexUpdate {
	sau.mutation.ClearName()
	return sau
}

// SetFilePath sets the "file_path" field.
func (sau *SysAnnexUpdate) SetFilePath(s string) *SysAnnexUpdate {
	sau.mutation.SetFilePath(s)
	return sau
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (sau *SysAnnexUpdate) SetNillableFilePath(s *string) *SysAnnexUpdate {
	if s != nil {
		sau.SetFilePath(*s)
	}
	return sau
}

// ClearFilePath clears the value of the "file_path" field.
func (sau *SysAnnexUpdate) ClearFilePath() *SysAnnexUpdate {
	sau.mutation.ClearFilePath()
	return sau
}

// Mutation returns the SysAnnexMutation object of the builder.
func (sau *SysAnnexUpdate) Mutation() *SysAnnexMutation {
	return sau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SysAnnexUpdate) Save(ctx context.Context) (int, error) {
	sau.defaults()
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SysAnnexUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SysAnnexUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SysAnnexUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SysAnnexUpdate) defaults() {
	if _, ok := sau.mutation.UpdatedAt(); !ok && !sau.mutation.UpdatedAtCleared() {
		v := sysannex.UpdateDefaultUpdatedAt()
		sau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sau *SysAnnexUpdate) check() error {
	if v, ok := sau.mutation.Memo(); ok {
		if err := sysannex.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysAnnex.memo": %w`, err)}
		}
	}
	if v, ok := sau.mutation.Name(); ok {
		if err := sysannex.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`mainent: validator failed for field "SysAnnex.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sau *SysAnnexUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysAnnexUpdate {
	sau.modifiers = append(sau.modifiers, modifiers...)
	return sau
}

func (sau *SysAnnexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysannex.Table, sysannex.Columns, sqlgraph.NewFieldSpec(sysannex.FieldID, field.TypeString))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.Memo(); ok {
		_spec.SetField(sysannex.FieldMemo, field.TypeString, value)
	}
	if sau.mutation.MemoCleared() {
		_spec.ClearField(sysannex.FieldMemo, field.TypeString)
	}
	if value, ok := sau.mutation.Sort(); ok {
		_spec.SetField(sysannex.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sau.mutation.AddedSort(); ok {
		_spec.AddField(sysannex.FieldSort, field.TypeInt32, value)
	}
	if sau.mutation.CreatedAtCleared() {
		_spec.ClearField(sysannex.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sau.mutation.UpdatedAt(); ok {
		_spec.SetField(sysannex.FieldUpdatedAt, field.TypeTime, value)
	}
	if sau.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysannex.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sau.mutation.DeletedAt(); ok {
		_spec.SetField(sysannex.FieldDeletedAt, field.TypeTime, value)
	}
	if sau.mutation.DeletedAtCleared() {
		_spec.ClearField(sysannex.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sau.mutation.IsActive(); ok {
		_spec.SetField(sysannex.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sau.mutation.IsDel(); ok {
		_spec.SetField(sysannex.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sau.mutation.Name(); ok {
		_spec.SetField(sysannex.FieldName, field.TypeString, value)
	}
	if sau.mutation.NameCleared() {
		_spec.ClearField(sysannex.FieldName, field.TypeString)
	}
	if value, ok := sau.mutation.FilePath(); ok {
		_spec.SetField(sysannex.FieldFilePath, field.TypeString, value)
	}
	if sau.mutation.FilePathCleared() {
		_spec.ClearField(sysannex.FieldFilePath, field.TypeString)
	}
	_spec.AddModifiers(sau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysannex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SysAnnexUpdateOne is the builder for updating a single SysAnnex entity.
type SysAnnexUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysAnnexMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMemo sets the "memo" field.
func (sauo *SysAnnexUpdateOne) SetMemo(s string) *SysAnnexUpdateOne {
	sauo.mutation.SetMemo(s)
	return sauo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (sauo *SysAnnexUpdateOne) SetNillableMemo(s *string) *SysAnnexUpdateOne {
	if s != nil {
		sauo.SetMemo(*s)
	}
	return sauo
}

// ClearMemo clears the value of the "memo" field.
func (sauo *SysAnnexUpdateOne) ClearMemo() *SysAnnexUpdateOne {
	sauo.mutation.ClearMemo()
	return sauo
}

// SetSort sets the "sort" field.
func (sauo *SysAnnexUpdateOne) SetSort(i int32) *SysAnnexUpdateOne {
	sauo.mutation.ResetSort()
	sauo.mutation.SetSort(i)
	return sauo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (sauo *SysAnnexUpdateOne) SetNillableSort(i *int32) *SysAnnexUpdateOne {
	if i != nil {
		sauo.SetSort(*i)
	}
	return sauo
}

// AddSort adds i to the "sort" field.
func (sauo *SysAnnexUpdateOne) AddSort(i int32) *SysAnnexUpdateOne {
	sauo.mutation.AddSort(i)
	return sauo
}

// SetUpdatedAt sets the "updated_at" field.
func (sauo *SysAnnexUpdateOne) SetUpdatedAt(t time.Time) *SysAnnexUpdateOne {
	sauo.mutation.SetUpdatedAt(t)
	return sauo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sauo *SysAnnexUpdateOne) ClearUpdatedAt() *SysAnnexUpdateOne {
	sauo.mutation.ClearUpdatedAt()
	return sauo
}

// SetDeletedAt sets the "deleted_at" field.
func (sauo *SysAnnexUpdateOne) SetDeletedAt(t time.Time) *SysAnnexUpdateOne {
	sauo.mutation.SetDeletedAt(t)
	return sauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sauo *SysAnnexUpdateOne) SetNillableDeletedAt(t *time.Time) *SysAnnexUpdateOne {
	if t != nil {
		sauo.SetDeletedAt(*t)
	}
	return sauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sauo *SysAnnexUpdateOne) ClearDeletedAt() *SysAnnexUpdateOne {
	sauo.mutation.ClearDeletedAt()
	return sauo
}

// SetIsActive sets the "is_active" field.
func (sauo *SysAnnexUpdateOne) SetIsActive(b bool) *SysAnnexUpdateOne {
	sauo.mutation.SetIsActive(b)
	return sauo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (sauo *SysAnnexUpdateOne) SetNillableIsActive(b *bool) *SysAnnexUpdateOne {
	if b != nil {
		sauo.SetIsActive(*b)
	}
	return sauo
}

// SetIsDel sets the "is_del" field.
func (sauo *SysAnnexUpdateOne) SetIsDel(b bool) *SysAnnexUpdateOne {
	sauo.mutation.SetIsDel(b)
	return sauo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (sauo *SysAnnexUpdateOne) SetNillableIsDel(b *bool) *SysAnnexUpdateOne {
	if b != nil {
		sauo.SetIsDel(*b)
	}
	return sauo
}

// SetName sets the "name" field.
func (sauo *SysAnnexUpdateOne) SetName(s string) *SysAnnexUpdateOne {
	sauo.mutation.SetName(s)
	return sauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sauo *SysAnnexUpdateOne) SetNillableName(s *string) *SysAnnexUpdateOne {
	if s != nil {
		sauo.SetName(*s)
	}
	return sauo
}

// ClearName clears the value of the "name" field.
func (sauo *SysAnnexUpdateOne) ClearName() *SysAnnexUpdateOne {
	sauo.mutation.ClearName()
	return sauo
}

// SetFilePath sets the "file_path" field.
func (sauo *SysAnnexUpdateOne) SetFilePath(s string) *SysAnnexUpdateOne {
	sauo.mutation.SetFilePath(s)
	return sauo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (sauo *SysAnnexUpdateOne) SetNillableFilePath(s *string) *SysAnnexUpdateOne {
	if s != nil {
		sauo.SetFilePath(*s)
	}
	return sauo
}

// ClearFilePath clears the value of the "file_path" field.
func (sauo *SysAnnexUpdateOne) ClearFilePath() *SysAnnexUpdateOne {
	sauo.mutation.ClearFilePath()
	return sauo
}

// Mutation returns the SysAnnexMutation object of the builder.
func (sauo *SysAnnexUpdateOne) Mutation() *SysAnnexMutation {
	return sauo.mutation
}

// Where appends a list predicates to the SysAnnexUpdate builder.
func (sauo *SysAnnexUpdateOne) Where(ps ...predicate.SysAnnex) *SysAnnexUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SysAnnexUpdateOne) Select(field string, fields ...string) *SysAnnexUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SysAnnex entity.
func (sauo *SysAnnexUpdateOne) Save(ctx context.Context) (*SysAnnex, error) {
	sauo.defaults()
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SysAnnexUpdateOne) SaveX(ctx context.Context) *SysAnnex {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SysAnnexUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SysAnnexUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SysAnnexUpdateOne) defaults() {
	if _, ok := sauo.mutation.UpdatedAt(); !ok && !sauo.mutation.UpdatedAtCleared() {
		v := sysannex.UpdateDefaultUpdatedAt()
		sauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SysAnnexUpdateOne) check() error {
	if v, ok := sauo.mutation.Memo(); ok {
		if err := sysannex.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysAnnex.memo": %w`, err)}
		}
	}
	if v, ok := sauo.mutation.Name(); ok {
		if err := sysannex.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`mainent: validator failed for field "SysAnnex.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sauo *SysAnnexUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysAnnexUpdateOne {
	sauo.modifiers = append(sauo.modifiers, modifiers...)
	return sauo
}

func (sauo *SysAnnexUpdateOne) sqlSave(ctx context.Context) (_node *SysAnnex, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysannex.Table, sysannex.Columns, sqlgraph.NewFieldSpec(sysannex.FieldID, field.TypeString))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`mainent: missing "SysAnnex.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysannex.FieldID)
		for _, f := range fields {
			if !sysannex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("mainent: invalid field %q for query", f)}
			}
			if f != sysannex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.Memo(); ok {
		_spec.SetField(sysannex.FieldMemo, field.TypeString, value)
	}
	if sauo.mutation.MemoCleared() {
		_spec.ClearField(sysannex.FieldMemo, field.TypeString)
	}
	if value, ok := sauo.mutation.Sort(); ok {
		_spec.SetField(sysannex.FieldSort, field.TypeInt32, value)
	}
	if value, ok := sauo.mutation.AddedSort(); ok {
		_spec.AddField(sysannex.FieldSort, field.TypeInt32, value)
	}
	if sauo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysannex.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysannex.FieldUpdatedAt, field.TypeTime, value)
	}
	if sauo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysannex.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.DeletedAt(); ok {
		_spec.SetField(sysannex.FieldDeletedAt, field.TypeTime, value)
	}
	if sauo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysannex.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sauo.mutation.IsActive(); ok {
		_spec.SetField(sysannex.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := sauo.mutation.IsDel(); ok {
		_spec.SetField(sysannex.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := sauo.mutation.Name(); ok {
		_spec.SetField(sysannex.FieldName, field.TypeString, value)
	}
	if sauo.mutation.NameCleared() {
		_spec.ClearField(sysannex.FieldName, field.TypeString)
	}
	if value, ok := sauo.mutation.FilePath(); ok {
		_spec.SetField(sysannex.FieldFilePath, field.TypeString, value)
	}
	if sauo.mutation.FilePathCleared() {
		_spec.ClearField(sysannex.FieldFilePath, field.TypeString)
	}
	_spec.AddModifiers(sauo.modifiers...)
	_node = &SysAnnex{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysannex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
