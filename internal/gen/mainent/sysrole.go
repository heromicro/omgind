// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/heromicro/omgind/internal/gen/mainent/sysrole"
)

// SysRole is the model entity for the SysRole schema.
type SysRole struct {
	config `json:"-" sql:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// 是否删除
	IsDel bool `json:"is_del,omitempty"`
	// 是否活跃
	IsActive bool `json:"is_active,omitempty"`
	// sort
	Sort int32 `json:"sort,omitempty" sql:"sort"`
	// memo
	Memo *string `json:"memo,omitempty" sql:"memo"`
	// create time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// update time
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// delete time,
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 角色名称
	Name         string `json:"name,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SysRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldIsDel, sysrole.FieldIsActive:
			values[i] = new(sql.NullBool)
		case sysrole.FieldSort:
			values[i] = new(sql.NullInt64)
		case sysrole.FieldID, sysrole.FieldMemo, sysrole.FieldName:
			values[i] = new(sql.NullString)
		case sysrole.FieldCreatedAt, sysrole.FieldUpdatedAt, sysrole.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SysRole fields.
func (sr *SysRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sysrole.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sr.ID = value.String
			}
		case sysrole.FieldIsDel:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				sr.IsDel = value.Bool
			}
		case sysrole.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				sr.IsActive = value.Bool
			}
		case sysrole.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				sr.Sort = int32(value.Int64)
			}
		case sysrole.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				sr.Memo = new(string)
				*sr.Memo = value.String
			}
		case sysrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = new(time.Time)
				*sr.CreatedAt = value.Time
			}
		case sysrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = new(time.Time)
				*sr.UpdatedAt = value.Time
			}
		case sysrole.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sr.DeletedAt = new(time.Time)
				*sr.DeletedAt = value.Time
			}
		case sysrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sr.Name = value.String
			}
		default:
			sr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SysRole.
// This includes values selected through modifiers, order, etc.
func (sr *SysRole) Value(name string) (ent.Value, error) {
	return sr.selectValues.Get(name)
}

// Update returns a builder for updating this SysRole.
// Note that you need to call SysRole.Unwrap() before calling this method if this SysRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SysRole) Update() *SysRoleUpdateOne {
	return NewSysRoleClient(sr.config).UpdateOne(sr)
}

// Unwrap unwraps the SysRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SysRole) Unwrap() *SysRole {
	_tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("mainent: SysRole is not a transactional entity")
	}
	sr.config.driver = _tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SysRole) String() string {
	var builder strings.Builder
	builder.WriteString("SysRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sr.ID))
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", sr.IsDel))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", sr.IsActive))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", sr.Sort))
	builder.WriteString(", ")
	if v := sr.Memo; v != nil {
		builder.WriteString("memo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sr.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sr.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sr.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// SysRoles is a parsable slice of SysRole.
type SysRoles []*SysRole
