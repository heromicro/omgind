// Code generated by ent, DO NOT EDIT.

package mainent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/mainent/predicate"
	"github.com/heromicro/omgind/internal/gen/mainent/systeam"
	"github.com/heromicro/omgind/internal/gen/mainent/systeamuser"
	"github.com/heromicro/omgind/internal/gen/mainent/sysuser"
)

// SysTeamUserUpdate is the builder for updating SysTeamUser entities.
type SysTeamUserUpdate struct {
	config
	hooks     []Hook
	mutation  *SysTeamUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysTeamUserUpdate builder.
func (stuu *SysTeamUserUpdate) Where(ps ...predicate.SysTeamUser) *SysTeamUserUpdate {
	stuu.mutation.Where(ps...)
	return stuu
}

// SetSort sets the "sort" field.
func (stuu *SysTeamUserUpdate) SetSort(i int32) *SysTeamUserUpdate {
	stuu.mutation.ResetSort()
	stuu.mutation.SetSort(i)
	return stuu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (stuu *SysTeamUserUpdate) SetNillableSort(i *int32) *SysTeamUserUpdate {
	if i != nil {
		stuu.SetSort(*i)
	}
	return stuu
}

// AddSort adds i to the "sort" field.
func (stuu *SysTeamUserUpdate) AddSort(i int32) *SysTeamUserUpdate {
	stuu.mutation.AddSort(i)
	return stuu
}

// SetUpdatedAt sets the "updated_at" field.
func (stuu *SysTeamUserUpdate) SetUpdatedAt(t time.Time) *SysTeamUserUpdate {
	stuu.mutation.SetUpdatedAt(t)
	return stuu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (stuu *SysTeamUserUpdate) ClearUpdatedAt() *SysTeamUserUpdate {
	stuu.mutation.ClearUpdatedAt()
	return stuu
}

// SetDeletedAt sets the "deleted_at" field.
func (stuu *SysTeamUserUpdate) SetDeletedAt(t time.Time) *SysTeamUserUpdate {
	stuu.mutation.SetDeletedAt(t)
	return stuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stuu *SysTeamUserUpdate) SetNillableDeletedAt(t *time.Time) *SysTeamUserUpdate {
	if t != nil {
		stuu.SetDeletedAt(*t)
	}
	return stuu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stuu *SysTeamUserUpdate) ClearDeletedAt() *SysTeamUserUpdate {
	stuu.mutation.ClearDeletedAt()
	return stuu
}

// SetIsActive sets the "is_active" field.
func (stuu *SysTeamUserUpdate) SetIsActive(b bool) *SysTeamUserUpdate {
	stuu.mutation.SetIsActive(b)
	return stuu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (stuu *SysTeamUserUpdate) SetNillableIsActive(b *bool) *SysTeamUserUpdate {
	if b != nil {
		stuu.SetIsActive(*b)
	}
	return stuu
}

// SetMemo sets the "memo" field.
func (stuu *SysTeamUserUpdate) SetMemo(s string) *SysTeamUserUpdate {
	stuu.mutation.SetMemo(s)
	return stuu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (stuu *SysTeamUserUpdate) SetNillableMemo(s *string) *SysTeamUserUpdate {
	if s != nil {
		stuu.SetMemo(*s)
	}
	return stuu
}

// ClearMemo clears the value of the "memo" field.
func (stuu *SysTeamUserUpdate) ClearMemo() *SysTeamUserUpdate {
	stuu.mutation.ClearMemo()
	return stuu
}

// SetIsDel sets the "is_del" field.
func (stuu *SysTeamUserUpdate) SetIsDel(b bool) *SysTeamUserUpdate {
	stuu.mutation.SetIsDel(b)
	return stuu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (stuu *SysTeamUserUpdate) SetNillableIsDel(b *bool) *SysTeamUserUpdate {
	if b != nil {
		stuu.SetIsDel(*b)
	}
	return stuu
}

// SetTeamID sets the "team_id" field.
func (stuu *SysTeamUserUpdate) SetTeamID(s string) *SysTeamUserUpdate {
	stuu.mutation.SetTeamID(s)
	return stuu
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (stuu *SysTeamUserUpdate) SetNillableTeamID(s *string) *SysTeamUserUpdate {
	if s != nil {
		stuu.SetTeamID(*s)
	}
	return stuu
}

// SetUserID sets the "user_id" field.
func (stuu *SysTeamUserUpdate) SetUserID(s string) *SysTeamUserUpdate {
	stuu.mutation.SetUserID(s)
	return stuu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (stuu *SysTeamUserUpdate) SetNillableUserID(s *string) *SysTeamUserUpdate {
	if s != nil {
		stuu.SetUserID(*s)
	}
	return stuu
}

// SetUser sets the "user" edge to the SysUser entity.
func (stuu *SysTeamUserUpdate) SetUser(s *SysUser) *SysTeamUserUpdate {
	return stuu.SetUserID(s.ID)
}

// SetTeam sets the "team" edge to the SysTeam entity.
func (stuu *SysTeamUserUpdate) SetTeam(s *SysTeam) *SysTeamUserUpdate {
	return stuu.SetTeamID(s.ID)
}

// Mutation returns the SysTeamUserMutation object of the builder.
func (stuu *SysTeamUserUpdate) Mutation() *SysTeamUserMutation {
	return stuu.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (stuu *SysTeamUserUpdate) ClearUser() *SysTeamUserUpdate {
	stuu.mutation.ClearUser()
	return stuu
}

// ClearTeam clears the "team" edge to the SysTeam entity.
func (stuu *SysTeamUserUpdate) ClearTeam() *SysTeamUserUpdate {
	stuu.mutation.ClearTeam()
	return stuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stuu *SysTeamUserUpdate) Save(ctx context.Context) (int, error) {
	stuu.defaults()
	return withHooks(ctx, stuu.sqlSave, stuu.mutation, stuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuu *SysTeamUserUpdate) SaveX(ctx context.Context) int {
	affected, err := stuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stuu *SysTeamUserUpdate) Exec(ctx context.Context) error {
	_, err := stuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuu *SysTeamUserUpdate) ExecX(ctx context.Context) {
	if err := stuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuu *SysTeamUserUpdate) defaults() {
	if _, ok := stuu.mutation.UpdatedAt(); !ok && !stuu.mutation.UpdatedAtCleared() {
		v := systeamuser.UpdateDefaultUpdatedAt()
		stuu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuu *SysTeamUserUpdate) check() error {
	if v, ok := stuu.mutation.Memo(); ok {
		if err := systeamuser.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.memo": %w`, err)}
		}
	}
	if v, ok := stuu.mutation.TeamID(); ok {
		if err := systeamuser.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.team_id": %w`, err)}
		}
	}
	if v, ok := stuu.mutation.UserID(); ok {
		if err := systeamuser.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.user_id": %w`, err)}
		}
	}
	if _, ok := stuu.mutation.UserID(); stuu.mutation.UserCleared() && !ok {
		return errors.New(`mainent: clearing a required unique edge "SysTeamUser.user"`)
	}
	if _, ok := stuu.mutation.TeamID(); stuu.mutation.TeamCleared() && !ok {
		return errors.New(`mainent: clearing a required unique edge "SysTeamUser.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stuu *SysTeamUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysTeamUserUpdate {
	stuu.modifiers = append(stuu.modifiers, modifiers...)
	return stuu
}

func (stuu *SysTeamUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := stuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systeamuser.Table, systeamuser.Columns, sqlgraph.NewFieldSpec(systeamuser.FieldID, field.TypeString))
	if ps := stuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuu.mutation.Sort(); ok {
		_spec.SetField(systeamuser.FieldSort, field.TypeInt32, value)
	}
	if value, ok := stuu.mutation.AddedSort(); ok {
		_spec.AddField(systeamuser.FieldSort, field.TypeInt32, value)
	}
	if stuu.mutation.CreatedAtCleared() {
		_spec.ClearField(systeamuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := stuu.mutation.UpdatedAt(); ok {
		_spec.SetField(systeamuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if stuu.mutation.UpdatedAtCleared() {
		_spec.ClearField(systeamuser.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := stuu.mutation.DeletedAt(); ok {
		_spec.SetField(systeamuser.FieldDeletedAt, field.TypeTime, value)
	}
	if stuu.mutation.DeletedAtCleared() {
		_spec.ClearField(systeamuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := stuu.mutation.IsActive(); ok {
		_spec.SetField(systeamuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := stuu.mutation.Memo(); ok {
		_spec.SetField(systeamuser.FieldMemo, field.TypeString, value)
	}
	if stuu.mutation.MemoCleared() {
		_spec.ClearField(systeamuser.FieldMemo, field.TypeString)
	}
	if value, ok := stuu.mutation.IsDel(); ok {
		_spec.SetField(systeamuser.FieldIsDel, field.TypeBool, value)
	}
	if stuu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.UserTable,
			Columns: []string{systeamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.UserTable,
			Columns: []string{systeamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.TeamTable,
			Columns: []string{systeamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systeam.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.TeamTable,
			Columns: []string{systeamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systeam.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(stuu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, stuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systeamuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	stuu.mutation.done = true
	return n, nil
}

// SysTeamUserUpdateOne is the builder for updating a single SysTeamUser entity.
type SysTeamUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysTeamUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSort sets the "sort" field.
func (stuuo *SysTeamUserUpdateOne) SetSort(i int32) *SysTeamUserUpdateOne {
	stuuo.mutation.ResetSort()
	stuuo.mutation.SetSort(i)
	return stuuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (stuuo *SysTeamUserUpdateOne) SetNillableSort(i *int32) *SysTeamUserUpdateOne {
	if i != nil {
		stuuo.SetSort(*i)
	}
	return stuuo
}

// AddSort adds i to the "sort" field.
func (stuuo *SysTeamUserUpdateOne) AddSort(i int32) *SysTeamUserUpdateOne {
	stuuo.mutation.AddSort(i)
	return stuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuuo *SysTeamUserUpdateOne) SetUpdatedAt(t time.Time) *SysTeamUserUpdateOne {
	stuuo.mutation.SetUpdatedAt(t)
	return stuuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (stuuo *SysTeamUserUpdateOne) ClearUpdatedAt() *SysTeamUserUpdateOne {
	stuuo.mutation.ClearUpdatedAt()
	return stuuo
}

// SetDeletedAt sets the "deleted_at" field.
func (stuuo *SysTeamUserUpdateOne) SetDeletedAt(t time.Time) *SysTeamUserUpdateOne {
	stuuo.mutation.SetDeletedAt(t)
	return stuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stuuo *SysTeamUserUpdateOne) SetNillableDeletedAt(t *time.Time) *SysTeamUserUpdateOne {
	if t != nil {
		stuuo.SetDeletedAt(*t)
	}
	return stuuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (stuuo *SysTeamUserUpdateOne) ClearDeletedAt() *SysTeamUserUpdateOne {
	stuuo.mutation.ClearDeletedAt()
	return stuuo
}

// SetIsActive sets the "is_active" field.
func (stuuo *SysTeamUserUpdateOne) SetIsActive(b bool) *SysTeamUserUpdateOne {
	stuuo.mutation.SetIsActive(b)
	return stuuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (stuuo *SysTeamUserUpdateOne) SetNillableIsActive(b *bool) *SysTeamUserUpdateOne {
	if b != nil {
		stuuo.SetIsActive(*b)
	}
	return stuuo
}

// SetMemo sets the "memo" field.
func (stuuo *SysTeamUserUpdateOne) SetMemo(s string) *SysTeamUserUpdateOne {
	stuuo.mutation.SetMemo(s)
	return stuuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (stuuo *SysTeamUserUpdateOne) SetNillableMemo(s *string) *SysTeamUserUpdateOne {
	if s != nil {
		stuuo.SetMemo(*s)
	}
	return stuuo
}

// ClearMemo clears the value of the "memo" field.
func (stuuo *SysTeamUserUpdateOne) ClearMemo() *SysTeamUserUpdateOne {
	stuuo.mutation.ClearMemo()
	return stuuo
}

// SetIsDel sets the "is_del" field.
func (stuuo *SysTeamUserUpdateOne) SetIsDel(b bool) *SysTeamUserUpdateOne {
	stuuo.mutation.SetIsDel(b)
	return stuuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (stuuo *SysTeamUserUpdateOne) SetNillableIsDel(b *bool) *SysTeamUserUpdateOne {
	if b != nil {
		stuuo.SetIsDel(*b)
	}
	return stuuo
}

// SetTeamID sets the "team_id" field.
func (stuuo *SysTeamUserUpdateOne) SetTeamID(s string) *SysTeamUserUpdateOne {
	stuuo.mutation.SetTeamID(s)
	return stuuo
}

// SetNillableTeamID sets the "team_id" field if the given value is not nil.
func (stuuo *SysTeamUserUpdateOne) SetNillableTeamID(s *string) *SysTeamUserUpdateOne {
	if s != nil {
		stuuo.SetTeamID(*s)
	}
	return stuuo
}

// SetUserID sets the "user_id" field.
func (stuuo *SysTeamUserUpdateOne) SetUserID(s string) *SysTeamUserUpdateOne {
	stuuo.mutation.SetUserID(s)
	return stuuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (stuuo *SysTeamUserUpdateOne) SetNillableUserID(s *string) *SysTeamUserUpdateOne {
	if s != nil {
		stuuo.SetUserID(*s)
	}
	return stuuo
}

// SetUser sets the "user" edge to the SysUser entity.
func (stuuo *SysTeamUserUpdateOne) SetUser(s *SysUser) *SysTeamUserUpdateOne {
	return stuuo.SetUserID(s.ID)
}

// SetTeam sets the "team" edge to the SysTeam entity.
func (stuuo *SysTeamUserUpdateOne) SetTeam(s *SysTeam) *SysTeamUserUpdateOne {
	return stuuo.SetTeamID(s.ID)
}

// Mutation returns the SysTeamUserMutation object of the builder.
func (stuuo *SysTeamUserUpdateOne) Mutation() *SysTeamUserMutation {
	return stuuo.mutation
}

// ClearUser clears the "user" edge to the SysUser entity.
func (stuuo *SysTeamUserUpdateOne) ClearUser() *SysTeamUserUpdateOne {
	stuuo.mutation.ClearUser()
	return stuuo
}

// ClearTeam clears the "team" edge to the SysTeam entity.
func (stuuo *SysTeamUserUpdateOne) ClearTeam() *SysTeamUserUpdateOne {
	stuuo.mutation.ClearTeam()
	return stuuo
}

// Where appends a list predicates to the SysTeamUserUpdate builder.
func (stuuo *SysTeamUserUpdateOne) Where(ps ...predicate.SysTeamUser) *SysTeamUserUpdateOne {
	stuuo.mutation.Where(ps...)
	return stuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuuo *SysTeamUserUpdateOne) Select(field string, fields ...string) *SysTeamUserUpdateOne {
	stuuo.fields = append([]string{field}, fields...)
	return stuuo
}

// Save executes the query and returns the updated SysTeamUser entity.
func (stuuo *SysTeamUserUpdateOne) Save(ctx context.Context) (*SysTeamUser, error) {
	stuuo.defaults()
	return withHooks(ctx, stuuo.sqlSave, stuuo.mutation, stuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (stuuo *SysTeamUserUpdateOne) SaveX(ctx context.Context) *SysTeamUser {
	node, err := stuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuuo *SysTeamUserUpdateOne) Exec(ctx context.Context) error {
	_, err := stuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuuo *SysTeamUserUpdateOne) ExecX(ctx context.Context) {
	if err := stuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (stuuo *SysTeamUserUpdateOne) defaults() {
	if _, ok := stuuo.mutation.UpdatedAt(); !ok && !stuuo.mutation.UpdatedAtCleared() {
		v := systeamuser.UpdateDefaultUpdatedAt()
		stuuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (stuuo *SysTeamUserUpdateOne) check() error {
	if v, ok := stuuo.mutation.Memo(); ok {
		if err := systeamuser.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.memo": %w`, err)}
		}
	}
	if v, ok := stuuo.mutation.TeamID(); ok {
		if err := systeamuser.TeamIDValidator(v); err != nil {
			return &ValidationError{Name: "team_id", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.team_id": %w`, err)}
		}
	}
	if v, ok := stuuo.mutation.UserID(); ok {
		if err := systeamuser.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`mainent: validator failed for field "SysTeamUser.user_id": %w`, err)}
		}
	}
	if _, ok := stuuo.mutation.UserID(); stuuo.mutation.UserCleared() && !ok {
		return errors.New(`mainent: clearing a required unique edge "SysTeamUser.user"`)
	}
	if _, ok := stuuo.mutation.TeamID(); stuuo.mutation.TeamCleared() && !ok {
		return errors.New(`mainent: clearing a required unique edge "SysTeamUser.team"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (stuuo *SysTeamUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysTeamUserUpdateOne {
	stuuo.modifiers = append(stuuo.modifiers, modifiers...)
	return stuuo
}

func (stuuo *SysTeamUserUpdateOne) sqlSave(ctx context.Context) (_node *SysTeamUser, err error) {
	if err := stuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systeamuser.Table, systeamuser.Columns, sqlgraph.NewFieldSpec(systeamuser.FieldID, field.TypeString))
	id, ok := stuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`mainent: missing "SysTeamUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := stuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systeamuser.FieldID)
		for _, f := range fields {
			if !systeamuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("mainent: invalid field %q for query", f)}
			}
			if f != systeamuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuuo.mutation.Sort(); ok {
		_spec.SetField(systeamuser.FieldSort, field.TypeInt32, value)
	}
	if value, ok := stuuo.mutation.AddedSort(); ok {
		_spec.AddField(systeamuser.FieldSort, field.TypeInt32, value)
	}
	if stuuo.mutation.CreatedAtCleared() {
		_spec.ClearField(systeamuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := stuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systeamuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if stuuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(systeamuser.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := stuuo.mutation.DeletedAt(); ok {
		_spec.SetField(systeamuser.FieldDeletedAt, field.TypeTime, value)
	}
	if stuuo.mutation.DeletedAtCleared() {
		_spec.ClearField(systeamuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := stuuo.mutation.IsActive(); ok {
		_spec.SetField(systeamuser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := stuuo.mutation.Memo(); ok {
		_spec.SetField(systeamuser.FieldMemo, field.TypeString, value)
	}
	if stuuo.mutation.MemoCleared() {
		_spec.ClearField(systeamuser.FieldMemo, field.TypeString)
	}
	if value, ok := stuuo.mutation.IsDel(); ok {
		_spec.SetField(systeamuser.FieldIsDel, field.TypeBool, value)
	}
	if stuuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.UserTable,
			Columns: []string{systeamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.UserTable,
			Columns: []string{systeamuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if stuuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.TeamTable,
			Columns: []string{systeamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systeam.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   systeamuser.TeamTable,
			Columns: []string{systeamuser.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systeam.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(stuuo.modifiers...)
	_node = &SysTeamUser{config: stuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systeamuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	stuuo.mutation.done = true
	return _node, nil
}
