// Code generated by ent, DO NOT EDIT.

package entscheme

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/entscheme/predicate"
	"github.com/heromicro/omgind/internal/gen/entscheme/sysmenuactionresource"
)

// SysMenuActionResourceDelete is the builder for deleting a SysMenuActionResource entity.
type SysMenuActionResourceDelete struct {
	config
	hooks    []Hook
	mutation *SysMenuActionResourceMutation
}

// Where appends a list predicates to the SysMenuActionResourceDelete builder.
func (smard *SysMenuActionResourceDelete) Where(ps ...predicate.SysMenuActionResource) *SysMenuActionResourceDelete {
	smard.mutation.Where(ps...)
	return smard
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (smard *SysMenuActionResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, smard.sqlExec, smard.mutation, smard.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (smard *SysMenuActionResourceDelete) ExecX(ctx context.Context) int {
	n, err := smard.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (smard *SysMenuActionResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sysmenuactionresource.Table, sqlgraph.NewFieldSpec(sysmenuactionresource.FieldID, field.TypeString))
	if ps := smard.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, smard.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	smard.mutation.done = true
	return affected, err
}

// SysMenuActionResourceDeleteOne is the builder for deleting a single SysMenuActionResource entity.
type SysMenuActionResourceDeleteOne struct {
	smard *SysMenuActionResourceDelete
}

// Where appends a list predicates to the SysMenuActionResourceDelete builder.
func (smardo *SysMenuActionResourceDeleteOne) Where(ps ...predicate.SysMenuActionResource) *SysMenuActionResourceDeleteOne {
	smardo.smard.mutation.Where(ps...)
	return smardo
}

// Exec executes the deletion query.
func (smardo *SysMenuActionResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := smardo.smard.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sysmenuactionresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (smardo *SysMenuActionResourceDeleteOne) ExecX(ctx context.Context) {
	if err := smardo.Exec(ctx); err != nil {
		panic(err)
	}
}
