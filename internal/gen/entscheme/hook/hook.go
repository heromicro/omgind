// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/heromicro/omgind/internal/gen/entscheme"
)

// The OrgDeptFunc type is an adapter to allow the use of ordinary
// function as OrgDept mutator.
type OrgDeptFunc func(context.Context, *entscheme.OrgDeptMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f OrgDeptFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.OrgDeptMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.OrgDeptMutation", m)
}

// The OrgOrganFunc type is an adapter to allow the use of ordinary
// function as OrgOrgan mutator.
type OrgOrganFunc func(context.Context, *entscheme.OrgOrganMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f OrgOrganFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.OrgOrganMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.OrgOrganMutation", m)
}

// The OrgPositionFunc type is an adapter to allow the use of ordinary
// function as OrgPosition mutator.
type OrgPositionFunc func(context.Context, *entscheme.OrgPositionMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f OrgPositionFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.OrgPositionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.OrgPositionMutation", m)
}

// The OrgStaffFunc type is an adapter to allow the use of ordinary
// function as OrgStaff mutator.
type OrgStaffFunc func(context.Context, *entscheme.OrgStaffMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f OrgStaffFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.OrgStaffMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.OrgStaffMutation", m)
}

// The SysAddressFunc type is an adapter to allow the use of ordinary
// function as SysAddress mutator.
type SysAddressFunc func(context.Context, *entscheme.SysAddressMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysAddressFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysAddressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysAddressMutation", m)
}

// The SysDictFunc type is an adapter to allow the use of ordinary
// function as SysDict mutator.
type SysDictFunc func(context.Context, *entscheme.SysDictMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysDictFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysDictMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysDictMutation", m)
}

// The SysDictItemFunc type is an adapter to allow the use of ordinary
// function as SysDictItem mutator.
type SysDictItemFunc func(context.Context, *entscheme.SysDictItemMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysDictItemFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysDictItemMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysDictItemMutation", m)
}

// The SysDistrictFunc type is an adapter to allow the use of ordinary
// function as SysDistrict mutator.
type SysDistrictFunc func(context.Context, *entscheme.SysDistrictMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysDistrictFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysDistrictMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysDistrictMutation", m)
}

// The SysJwtBlockFunc type is an adapter to allow the use of ordinary
// function as SysJwtBlock mutator.
type SysJwtBlockFunc func(context.Context, *entscheme.SysJwtBlockMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysJwtBlockFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysJwtBlockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysJwtBlockMutation", m)
}

// The SysLoggingFunc type is an adapter to allow the use of ordinary
// function as SysLogging mutator.
type SysLoggingFunc func(context.Context, *entscheme.SysLoggingMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysLoggingFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysLoggingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysLoggingMutation", m)
}

// The SysMenuFunc type is an adapter to allow the use of ordinary
// function as SysMenu mutator.
type SysMenuFunc func(context.Context, *entscheme.SysMenuMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysMenuFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysMenuMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysMenuMutation", m)
}

// The SysMenuActionFunc type is an adapter to allow the use of ordinary
// function as SysMenuAction mutator.
type SysMenuActionFunc func(context.Context, *entscheme.SysMenuActionMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysMenuActionFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysMenuActionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysMenuActionMutation", m)
}

// The SysMenuActionResourceFunc type is an adapter to allow the use of ordinary
// function as SysMenuActionResource mutator.
type SysMenuActionResourceFunc func(context.Context, *entscheme.SysMenuActionResourceMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysMenuActionResourceFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysMenuActionResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysMenuActionResourceMutation", m)
}

// The SysRoleFunc type is an adapter to allow the use of ordinary
// function as SysRole mutator.
type SysRoleFunc func(context.Context, *entscheme.SysRoleMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysRoleFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysRoleMutation", m)
}

// The SysRoleMenuFunc type is an adapter to allow the use of ordinary
// function as SysRoleMenu mutator.
type SysRoleMenuFunc func(context.Context, *entscheme.SysRoleMenuMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysRoleMenuFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysRoleMenuMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysRoleMenuMutation", m)
}

// The SysTeamFunc type is an adapter to allow the use of ordinary
// function as SysTeam mutator.
type SysTeamFunc func(context.Context, *entscheme.SysTeamMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysTeamFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysTeamMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysTeamMutation", m)
}

// The SysTeamUserFunc type is an adapter to allow the use of ordinary
// function as SysTeamUser mutator.
type SysTeamUserFunc func(context.Context, *entscheme.SysTeamUserMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysTeamUserFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysTeamUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysTeamUserMutation", m)
}

// The SysUserFunc type is an adapter to allow the use of ordinary
// function as SysUser mutator.
type SysUserFunc func(context.Context, *entscheme.SysUserMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysUserFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysUserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysUserMutation", m)
}

// The SysUserRoleFunc type is an adapter to allow the use of ordinary
// function as SysUserRole mutator.
type SysUserRoleFunc func(context.Context, *entscheme.SysUserRoleMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f SysUserRoleFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.SysUserRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.SysUserRoleMutation", m)
}

// The XxxDemoFunc type is an adapter to allow the use of ordinary
// function as XxxDemo mutator.
type XxxDemoFunc func(context.Context, *entscheme.XxxDemoMutation) (entscheme.Value, error)

// Mutate calls f(ctx, m).
func (f XxxDemoFunc) Mutate(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
	if mv, ok := m.(*entscheme.XxxDemoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *entscheme.XxxDemoMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, entscheme.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m entscheme.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m entscheme.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m entscheme.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op entscheme.Op) Condition {
	return func(_ context.Context, m entscheme.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m entscheme.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m entscheme.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m entscheme.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk entscheme.Hook, cond Condition) entscheme.Hook {
	return func(next entscheme.Mutator) entscheme.Mutator {
		return entscheme.MutateFunc(func(ctx context.Context, m entscheme.Mutation) (entscheme.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, entscheme.Delete|entscheme.Create)
func On(hk entscheme.Hook, op entscheme.Op) entscheme.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, entscheme.Update|entscheme.UpdateOne)
func Unless(hk entscheme.Hook, op entscheme.Op) entscheme.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) entscheme.Hook {
	return func(entscheme.Mutator) entscheme.Mutator {
		return entscheme.MutateFunc(func(context.Context, entscheme.Mutation) (entscheme.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []entscheme.Hook {
//		return []entscheme.Hook{
//			Reject(entscheme.Delete|entscheme.Update),
//		}
//	}
func Reject(op entscheme.Op) entscheme.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []entscheme.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...entscheme.Hook) Chain {
	return Chain{append([]entscheme.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() entscheme.Hook {
	return func(mutator entscheme.Mutator) entscheme.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...entscheme.Hook) Chain {
	newHooks := make([]entscheme.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
