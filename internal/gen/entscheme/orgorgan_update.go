// Code generated by ent, DO NOT EDIT.

package entscheme

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgdept"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgorgan"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgposition"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgstaff"
	"github.com/heromicro/omgind/internal/gen/entscheme/predicate"
	"github.com/heromicro/omgind/internal/gen/entscheme/sysaddress"
)

// OrgOrganUpdate is the builder for updating OrgOrgan entities.
type OrgOrganUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgOrganMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgOrganUpdate builder.
func (oou *OrgOrganUpdate) Where(ps ...predicate.OrgOrgan) *OrgOrganUpdate {
	oou.mutation.Where(ps...)
	return oou
}

// SetIsDel sets the "is_del" field.
func (oou *OrgOrganUpdate) SetIsDel(b bool) *OrgOrganUpdate {
	oou.mutation.SetIsDel(b)
	return oou
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableIsDel(b *bool) *OrgOrganUpdate {
	if b != nil {
		oou.SetIsDel(*b)
	}
	return oou
}

// SetSort sets the "sort" field.
func (oou *OrgOrganUpdate) SetSort(i int32) *OrgOrganUpdate {
	oou.mutation.ResetSort()
	oou.mutation.SetSort(i)
	return oou
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableSort(i *int32) *OrgOrganUpdate {
	if i != nil {
		oou.SetSort(*i)
	}
	return oou
}

// AddSort adds i to the "sort" field.
func (oou *OrgOrganUpdate) AddSort(i int32) *OrgOrganUpdate {
	oou.mutation.AddSort(i)
	return oou
}

// SetUpdatedAt sets the "updated_at" field.
func (oou *OrgOrganUpdate) SetUpdatedAt(t time.Time) *OrgOrganUpdate {
	oou.mutation.SetUpdatedAt(t)
	return oou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oou *OrgOrganUpdate) ClearUpdatedAt() *OrgOrganUpdate {
	oou.mutation.ClearUpdatedAt()
	return oou
}

// SetDeletedAt sets the "deleted_at" field.
func (oou *OrgOrganUpdate) SetDeletedAt(t time.Time) *OrgOrganUpdate {
	oou.mutation.SetDeletedAt(t)
	return oou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableDeletedAt(t *time.Time) *OrgOrganUpdate {
	if t != nil {
		oou.SetDeletedAt(*t)
	}
	return oou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oou *OrgOrganUpdate) ClearDeletedAt() *OrgOrganUpdate {
	oou.mutation.ClearDeletedAt()
	return oou
}

// SetIsActive sets the "is_active" field.
func (oou *OrgOrganUpdate) SetIsActive(b bool) *OrgOrganUpdate {
	oou.mutation.SetIsActive(b)
	return oou
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableIsActive(b *bool) *OrgOrganUpdate {
	if b != nil {
		oou.SetIsActive(*b)
	}
	return oou
}

// SetMemo sets the "memo" field.
func (oou *OrgOrganUpdate) SetMemo(s string) *OrgOrganUpdate {
	oou.mutation.SetMemo(s)
	return oou
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableMemo(s *string) *OrgOrganUpdate {
	if s != nil {
		oou.SetMemo(*s)
	}
	return oou
}

// ClearMemo clears the value of the "memo" field.
func (oou *OrgOrganUpdate) ClearMemo() *OrgOrganUpdate {
	oou.mutation.ClearMemo()
	return oou
}

// SetName sets the "name" field.
func (oou *OrgOrganUpdate) SetName(s string) *OrgOrganUpdate {
	oou.mutation.SetName(s)
	return oou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableName(s *string) *OrgOrganUpdate {
	if s != nil {
		oou.SetName(*s)
	}
	return oou
}

// ClearName clears the value of the "name" field.
func (oou *OrgOrganUpdate) ClearName() *OrgOrganUpdate {
	oou.mutation.ClearName()
	return oou
}

// SetSname sets the "sname" field.
func (oou *OrgOrganUpdate) SetSname(s string) *OrgOrganUpdate {
	oou.mutation.SetSname(s)
	return oou
}

// SetNillableSname sets the "sname" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableSname(s *string) *OrgOrganUpdate {
	if s != nil {
		oou.SetSname(*s)
	}
	return oou
}

// ClearSname clears the value of the "sname" field.
func (oou *OrgOrganUpdate) ClearSname() *OrgOrganUpdate {
	oou.mutation.ClearSname()
	return oou
}

// SetCode sets the "code" field.
func (oou *OrgOrganUpdate) SetCode(s string) *OrgOrganUpdate {
	oou.mutation.SetCode(s)
	return oou
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableCode(s *string) *OrgOrganUpdate {
	if s != nil {
		oou.SetCode(*s)
	}
	return oou
}

// ClearCode clears the value of the "code" field.
func (oou *OrgOrganUpdate) ClearCode() *OrgOrganUpdate {
	oou.mutation.ClearCode()
	return oou
}

// SetIdenNo sets the "iden_no" field.
func (oou *OrgOrganUpdate) SetIdenNo(s string) *OrgOrganUpdate {
	oou.mutation.SetIdenNo(s)
	return oou
}

// SetNillableIdenNo sets the "iden_no" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableIdenNo(s *string) *OrgOrganUpdate {
	if s != nil {
		oou.SetIdenNo(*s)
	}
	return oou
}

// ClearIdenNo clears the value of the "iden_no" field.
func (oou *OrgOrganUpdate) ClearIdenNo() *OrgOrganUpdate {
	oou.mutation.ClearIdenNo()
	return oou
}

// SetOwnerID sets the "owner_id" field.
func (oou *OrgOrganUpdate) SetOwnerID(s string) *OrgOrganUpdate {
	oou.mutation.SetOwnerID(s)
	return oou
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableOwnerID(s *string) *OrgOrganUpdate {
	if s != nil {
		oou.SetOwnerID(*s)
	}
	return oou
}

// ClearOwnerID clears the value of the "owner_id" field.
func (oou *OrgOrganUpdate) ClearOwnerID() *OrgOrganUpdate {
	oou.mutation.ClearOwnerID()
	return oou
}

// SetHaddrID sets the "haddr_id" field.
func (oou *OrgOrganUpdate) SetHaddrID(s string) *OrgOrganUpdate {
	oou.mutation.SetHaddrID(s)
	return oou
}

// SetNillableHaddrID sets the "haddr_id" field if the given value is not nil.
func (oou *OrgOrganUpdate) SetNillableHaddrID(s *string) *OrgOrganUpdate {
	if s != nil {
		oou.SetHaddrID(*s)
	}
	return oou
}

// ClearHaddrID clears the value of the "haddr_id" field.
func (oou *OrgOrganUpdate) ClearHaddrID() *OrgOrganUpdate {
	oou.mutation.ClearHaddrID()
	return oou
}

// SetHaddr sets the "haddr" edge to the SysAddress entity.
func (oou *OrgOrganUpdate) SetHaddr(s *SysAddress) *OrgOrganUpdate {
	return oou.SetHaddrID(s.ID)
}

// AddDeptIDs adds the "depts" edge to the OrgDept entity by IDs.
func (oou *OrgOrganUpdate) AddDeptIDs(ids ...string) *OrgOrganUpdate {
	oou.mutation.AddDeptIDs(ids...)
	return oou
}

// AddDepts adds the "depts" edges to the OrgDept entity.
func (oou *OrgOrganUpdate) AddDepts(o ...*OrgDept) *OrgOrganUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oou.AddDeptIDs(ids...)
}

// AddStaffIDs adds the "staffs" edge to the OrgStaff entity by IDs.
func (oou *OrgOrganUpdate) AddStaffIDs(ids ...string) *OrgOrganUpdate {
	oou.mutation.AddStaffIDs(ids...)
	return oou
}

// AddStaffs adds the "staffs" edges to the OrgStaff entity.
func (oou *OrgOrganUpdate) AddStaffs(o ...*OrgStaff) *OrgOrganUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oou.AddStaffIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the OrgPosition entity by IDs.
func (oou *OrgOrganUpdate) AddPositionIDs(ids ...string) *OrgOrganUpdate {
	oou.mutation.AddPositionIDs(ids...)
	return oou
}

// AddPositions adds the "positions" edges to the OrgPosition entity.
func (oou *OrgOrganUpdate) AddPositions(o ...*OrgPosition) *OrgOrganUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oou.AddPositionIDs(ids...)
}

// Mutation returns the OrgOrganMutation object of the builder.
func (oou *OrgOrganUpdate) Mutation() *OrgOrganMutation {
	return oou.mutation
}

// ClearHaddr clears the "haddr" edge to the SysAddress entity.
func (oou *OrgOrganUpdate) ClearHaddr() *OrgOrganUpdate {
	oou.mutation.ClearHaddr()
	return oou
}

// ClearDepts clears all "depts" edges to the OrgDept entity.
func (oou *OrgOrganUpdate) ClearDepts() *OrgOrganUpdate {
	oou.mutation.ClearDepts()
	return oou
}

// RemoveDeptIDs removes the "depts" edge to OrgDept entities by IDs.
func (oou *OrgOrganUpdate) RemoveDeptIDs(ids ...string) *OrgOrganUpdate {
	oou.mutation.RemoveDeptIDs(ids...)
	return oou
}

// RemoveDepts removes "depts" edges to OrgDept entities.
func (oou *OrgOrganUpdate) RemoveDepts(o ...*OrgDept) *OrgOrganUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oou.RemoveDeptIDs(ids...)
}

// ClearStaffs clears all "staffs" edges to the OrgStaff entity.
func (oou *OrgOrganUpdate) ClearStaffs() *OrgOrganUpdate {
	oou.mutation.ClearStaffs()
	return oou
}

// RemoveStaffIDs removes the "staffs" edge to OrgStaff entities by IDs.
func (oou *OrgOrganUpdate) RemoveStaffIDs(ids ...string) *OrgOrganUpdate {
	oou.mutation.RemoveStaffIDs(ids...)
	return oou
}

// RemoveStaffs removes "staffs" edges to OrgStaff entities.
func (oou *OrgOrganUpdate) RemoveStaffs(o ...*OrgStaff) *OrgOrganUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oou.RemoveStaffIDs(ids...)
}

// ClearPositions clears all "positions" edges to the OrgPosition entity.
func (oou *OrgOrganUpdate) ClearPositions() *OrgOrganUpdate {
	oou.mutation.ClearPositions()
	return oou
}

// RemovePositionIDs removes the "positions" edge to OrgPosition entities by IDs.
func (oou *OrgOrganUpdate) RemovePositionIDs(ids ...string) *OrgOrganUpdate {
	oou.mutation.RemovePositionIDs(ids...)
	return oou
}

// RemovePositions removes "positions" edges to OrgPosition entities.
func (oou *OrgOrganUpdate) RemovePositions(o ...*OrgPosition) *OrgOrganUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oou.RemovePositionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oou *OrgOrganUpdate) Save(ctx context.Context) (int, error) {
	oou.defaults()
	return withHooks(ctx, oou.sqlSave, oou.mutation, oou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oou *OrgOrganUpdate) SaveX(ctx context.Context) int {
	affected, err := oou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oou *OrgOrganUpdate) Exec(ctx context.Context) error {
	_, err := oou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oou *OrgOrganUpdate) ExecX(ctx context.Context) {
	if err := oou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oou *OrgOrganUpdate) defaults() {
	if _, ok := oou.mutation.UpdatedAt(); !ok && !oou.mutation.UpdatedAtCleared() {
		v := orgorgan.UpdateDefaultUpdatedAt()
		oou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oou *OrgOrganUpdate) check() error {
	if v, ok := oou.mutation.Memo(); ok {
		if err := orgorgan.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.memo": %w`, err)}
		}
	}
	if v, ok := oou.mutation.Name(); ok {
		if err := orgorgan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.name": %w`, err)}
		}
	}
	if v, ok := oou.mutation.Sname(); ok {
		if err := orgorgan.SnameValidator(v); err != nil {
			return &ValidationError{Name: "sname", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.sname": %w`, err)}
		}
	}
	if v, ok := oou.mutation.Code(); ok {
		if err := orgorgan.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.code": %w`, err)}
		}
	}
	if v, ok := oou.mutation.IdenNo(); ok {
		if err := orgorgan.IdenNoValidator(v); err != nil {
			return &ValidationError{Name: "iden_no", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.iden_no": %w`, err)}
		}
	}
	if v, ok := oou.mutation.OwnerID(); ok {
		if err := orgorgan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.owner_id": %w`, err)}
		}
	}
	if v, ok := oou.mutation.HaddrID(); ok {
		if err := orgorgan.HaddrIDValidator(v); err != nil {
			return &ValidationError{Name: "haddr_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.haddr_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oou *OrgOrganUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgOrganUpdate {
	oou.modifiers = append(oou.modifiers, modifiers...)
	return oou
}

func (oou *OrgOrganUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgorgan.Table, orgorgan.Columns, sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString))
	if ps := oou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oou.mutation.IsDel(); ok {
		_spec.SetField(orgorgan.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := oou.mutation.Sort(); ok {
		_spec.SetField(orgorgan.FieldSort, field.TypeInt32, value)
	}
	if value, ok := oou.mutation.AddedSort(); ok {
		_spec.AddField(orgorgan.FieldSort, field.TypeInt32, value)
	}
	if oou.mutation.CreatedAtCleared() {
		_spec.ClearField(orgorgan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oou.mutation.UpdatedAt(); ok {
		_spec.SetField(orgorgan.FieldUpdatedAt, field.TypeTime, value)
	}
	if oou.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgorgan.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := oou.mutation.DeletedAt(); ok {
		_spec.SetField(orgorgan.FieldDeletedAt, field.TypeTime, value)
	}
	if oou.mutation.DeletedAtCleared() {
		_spec.ClearField(orgorgan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oou.mutation.IsActive(); ok {
		_spec.SetField(orgorgan.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := oou.mutation.Memo(); ok {
		_spec.SetField(orgorgan.FieldMemo, field.TypeString, value)
	}
	if oou.mutation.MemoCleared() {
		_spec.ClearField(orgorgan.FieldMemo, field.TypeString)
	}
	if value, ok := oou.mutation.Name(); ok {
		_spec.SetField(orgorgan.FieldName, field.TypeString, value)
	}
	if oou.mutation.NameCleared() {
		_spec.ClearField(orgorgan.FieldName, field.TypeString)
	}
	if value, ok := oou.mutation.Sname(); ok {
		_spec.SetField(orgorgan.FieldSname, field.TypeString, value)
	}
	if oou.mutation.SnameCleared() {
		_spec.ClearField(orgorgan.FieldSname, field.TypeString)
	}
	if value, ok := oou.mutation.Code(); ok {
		_spec.SetField(orgorgan.FieldCode, field.TypeString, value)
	}
	if oou.mutation.CodeCleared() {
		_spec.ClearField(orgorgan.FieldCode, field.TypeString)
	}
	if value, ok := oou.mutation.IdenNo(); ok {
		_spec.SetField(orgorgan.FieldIdenNo, field.TypeString, value)
	}
	if oou.mutation.IdenNoCleared() {
		_spec.ClearField(orgorgan.FieldIdenNo, field.TypeString)
	}
	if value, ok := oou.mutation.OwnerID(); ok {
		_spec.SetField(orgorgan.FieldOwnerID, field.TypeString, value)
	}
	if oou.mutation.OwnerIDCleared() {
		_spec.ClearField(orgorgan.FieldOwnerID, field.TypeString)
	}
	if oou.mutation.HaddrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgorgan.HaddrTable,
			Columns: []string{orgorgan.HaddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.HaddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgorgan.HaddrTable,
			Columns: []string{orgorgan.HaddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oou.mutation.DeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.DeptsTable,
			Columns: []string{orgorgan.DeptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.RemovedDeptsIDs(); len(nodes) > 0 && !oou.mutation.DeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.DeptsTable,
			Columns: []string{orgorgan.DeptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.DeptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.DeptsTable,
			Columns: []string{orgorgan.DeptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oou.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.StaffsTable,
			Columns: []string{orgorgan.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.RemovedStaffsIDs(); len(nodes) > 0 && !oou.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.StaffsTable,
			Columns: []string{orgorgan.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.StaffsTable,
			Columns: []string{orgorgan.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oou.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.PositionsTable,
			Columns: []string{orgorgan.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgposition.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !oou.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.PositionsTable,
			Columns: []string{orgorgan.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgposition.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oou.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.PositionsTable,
			Columns: []string{orgorgan.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgposition.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, oou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgorgan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oou.mutation.done = true
	return n, nil
}

// OrgOrganUpdateOne is the builder for updating a single OrgOrgan entity.
type OrgOrganUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgOrganMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsDel sets the "is_del" field.
func (oouo *OrgOrganUpdateOne) SetIsDel(b bool) *OrgOrganUpdateOne {
	oouo.mutation.SetIsDel(b)
	return oouo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableIsDel(b *bool) *OrgOrganUpdateOne {
	if b != nil {
		oouo.SetIsDel(*b)
	}
	return oouo
}

// SetSort sets the "sort" field.
func (oouo *OrgOrganUpdateOne) SetSort(i int32) *OrgOrganUpdateOne {
	oouo.mutation.ResetSort()
	oouo.mutation.SetSort(i)
	return oouo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableSort(i *int32) *OrgOrganUpdateOne {
	if i != nil {
		oouo.SetSort(*i)
	}
	return oouo
}

// AddSort adds i to the "sort" field.
func (oouo *OrgOrganUpdateOne) AddSort(i int32) *OrgOrganUpdateOne {
	oouo.mutation.AddSort(i)
	return oouo
}

// SetUpdatedAt sets the "updated_at" field.
func (oouo *OrgOrganUpdateOne) SetUpdatedAt(t time.Time) *OrgOrganUpdateOne {
	oouo.mutation.SetUpdatedAt(t)
	return oouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (oouo *OrgOrganUpdateOne) ClearUpdatedAt() *OrgOrganUpdateOne {
	oouo.mutation.ClearUpdatedAt()
	return oouo
}

// SetDeletedAt sets the "deleted_at" field.
func (oouo *OrgOrganUpdateOne) SetDeletedAt(t time.Time) *OrgOrganUpdateOne {
	oouo.mutation.SetDeletedAt(t)
	return oouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgOrganUpdateOne {
	if t != nil {
		oouo.SetDeletedAt(*t)
	}
	return oouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oouo *OrgOrganUpdateOne) ClearDeletedAt() *OrgOrganUpdateOne {
	oouo.mutation.ClearDeletedAt()
	return oouo
}

// SetIsActive sets the "is_active" field.
func (oouo *OrgOrganUpdateOne) SetIsActive(b bool) *OrgOrganUpdateOne {
	oouo.mutation.SetIsActive(b)
	return oouo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableIsActive(b *bool) *OrgOrganUpdateOne {
	if b != nil {
		oouo.SetIsActive(*b)
	}
	return oouo
}

// SetMemo sets the "memo" field.
func (oouo *OrgOrganUpdateOne) SetMemo(s string) *OrgOrganUpdateOne {
	oouo.mutation.SetMemo(s)
	return oouo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableMemo(s *string) *OrgOrganUpdateOne {
	if s != nil {
		oouo.SetMemo(*s)
	}
	return oouo
}

// ClearMemo clears the value of the "memo" field.
func (oouo *OrgOrganUpdateOne) ClearMemo() *OrgOrganUpdateOne {
	oouo.mutation.ClearMemo()
	return oouo
}

// SetName sets the "name" field.
func (oouo *OrgOrganUpdateOne) SetName(s string) *OrgOrganUpdateOne {
	oouo.mutation.SetName(s)
	return oouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableName(s *string) *OrgOrganUpdateOne {
	if s != nil {
		oouo.SetName(*s)
	}
	return oouo
}

// ClearName clears the value of the "name" field.
func (oouo *OrgOrganUpdateOne) ClearName() *OrgOrganUpdateOne {
	oouo.mutation.ClearName()
	return oouo
}

// SetSname sets the "sname" field.
func (oouo *OrgOrganUpdateOne) SetSname(s string) *OrgOrganUpdateOne {
	oouo.mutation.SetSname(s)
	return oouo
}

// SetNillableSname sets the "sname" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableSname(s *string) *OrgOrganUpdateOne {
	if s != nil {
		oouo.SetSname(*s)
	}
	return oouo
}

// ClearSname clears the value of the "sname" field.
func (oouo *OrgOrganUpdateOne) ClearSname() *OrgOrganUpdateOne {
	oouo.mutation.ClearSname()
	return oouo
}

// SetCode sets the "code" field.
func (oouo *OrgOrganUpdateOne) SetCode(s string) *OrgOrganUpdateOne {
	oouo.mutation.SetCode(s)
	return oouo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableCode(s *string) *OrgOrganUpdateOne {
	if s != nil {
		oouo.SetCode(*s)
	}
	return oouo
}

// ClearCode clears the value of the "code" field.
func (oouo *OrgOrganUpdateOne) ClearCode() *OrgOrganUpdateOne {
	oouo.mutation.ClearCode()
	return oouo
}

// SetIdenNo sets the "iden_no" field.
func (oouo *OrgOrganUpdateOne) SetIdenNo(s string) *OrgOrganUpdateOne {
	oouo.mutation.SetIdenNo(s)
	return oouo
}

// SetNillableIdenNo sets the "iden_no" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableIdenNo(s *string) *OrgOrganUpdateOne {
	if s != nil {
		oouo.SetIdenNo(*s)
	}
	return oouo
}

// ClearIdenNo clears the value of the "iden_no" field.
func (oouo *OrgOrganUpdateOne) ClearIdenNo() *OrgOrganUpdateOne {
	oouo.mutation.ClearIdenNo()
	return oouo
}

// SetOwnerID sets the "owner_id" field.
func (oouo *OrgOrganUpdateOne) SetOwnerID(s string) *OrgOrganUpdateOne {
	oouo.mutation.SetOwnerID(s)
	return oouo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableOwnerID(s *string) *OrgOrganUpdateOne {
	if s != nil {
		oouo.SetOwnerID(*s)
	}
	return oouo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (oouo *OrgOrganUpdateOne) ClearOwnerID() *OrgOrganUpdateOne {
	oouo.mutation.ClearOwnerID()
	return oouo
}

// SetHaddrID sets the "haddr_id" field.
func (oouo *OrgOrganUpdateOne) SetHaddrID(s string) *OrgOrganUpdateOne {
	oouo.mutation.SetHaddrID(s)
	return oouo
}

// SetNillableHaddrID sets the "haddr_id" field if the given value is not nil.
func (oouo *OrgOrganUpdateOne) SetNillableHaddrID(s *string) *OrgOrganUpdateOne {
	if s != nil {
		oouo.SetHaddrID(*s)
	}
	return oouo
}

// ClearHaddrID clears the value of the "haddr_id" field.
func (oouo *OrgOrganUpdateOne) ClearHaddrID() *OrgOrganUpdateOne {
	oouo.mutation.ClearHaddrID()
	return oouo
}

// SetHaddr sets the "haddr" edge to the SysAddress entity.
func (oouo *OrgOrganUpdateOne) SetHaddr(s *SysAddress) *OrgOrganUpdateOne {
	return oouo.SetHaddrID(s.ID)
}

// AddDeptIDs adds the "depts" edge to the OrgDept entity by IDs.
func (oouo *OrgOrganUpdateOne) AddDeptIDs(ids ...string) *OrgOrganUpdateOne {
	oouo.mutation.AddDeptIDs(ids...)
	return oouo
}

// AddDepts adds the "depts" edges to the OrgDept entity.
func (oouo *OrgOrganUpdateOne) AddDepts(o ...*OrgDept) *OrgOrganUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oouo.AddDeptIDs(ids...)
}

// AddStaffIDs adds the "staffs" edge to the OrgStaff entity by IDs.
func (oouo *OrgOrganUpdateOne) AddStaffIDs(ids ...string) *OrgOrganUpdateOne {
	oouo.mutation.AddStaffIDs(ids...)
	return oouo
}

// AddStaffs adds the "staffs" edges to the OrgStaff entity.
func (oouo *OrgOrganUpdateOne) AddStaffs(o ...*OrgStaff) *OrgOrganUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oouo.AddStaffIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the OrgPosition entity by IDs.
func (oouo *OrgOrganUpdateOne) AddPositionIDs(ids ...string) *OrgOrganUpdateOne {
	oouo.mutation.AddPositionIDs(ids...)
	return oouo
}

// AddPositions adds the "positions" edges to the OrgPosition entity.
func (oouo *OrgOrganUpdateOne) AddPositions(o ...*OrgPosition) *OrgOrganUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oouo.AddPositionIDs(ids...)
}

// Mutation returns the OrgOrganMutation object of the builder.
func (oouo *OrgOrganUpdateOne) Mutation() *OrgOrganMutation {
	return oouo.mutation
}

// ClearHaddr clears the "haddr" edge to the SysAddress entity.
func (oouo *OrgOrganUpdateOne) ClearHaddr() *OrgOrganUpdateOne {
	oouo.mutation.ClearHaddr()
	return oouo
}

// ClearDepts clears all "depts" edges to the OrgDept entity.
func (oouo *OrgOrganUpdateOne) ClearDepts() *OrgOrganUpdateOne {
	oouo.mutation.ClearDepts()
	return oouo
}

// RemoveDeptIDs removes the "depts" edge to OrgDept entities by IDs.
func (oouo *OrgOrganUpdateOne) RemoveDeptIDs(ids ...string) *OrgOrganUpdateOne {
	oouo.mutation.RemoveDeptIDs(ids...)
	return oouo
}

// RemoveDepts removes "depts" edges to OrgDept entities.
func (oouo *OrgOrganUpdateOne) RemoveDepts(o ...*OrgDept) *OrgOrganUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oouo.RemoveDeptIDs(ids...)
}

// ClearStaffs clears all "staffs" edges to the OrgStaff entity.
func (oouo *OrgOrganUpdateOne) ClearStaffs() *OrgOrganUpdateOne {
	oouo.mutation.ClearStaffs()
	return oouo
}

// RemoveStaffIDs removes the "staffs" edge to OrgStaff entities by IDs.
func (oouo *OrgOrganUpdateOne) RemoveStaffIDs(ids ...string) *OrgOrganUpdateOne {
	oouo.mutation.RemoveStaffIDs(ids...)
	return oouo
}

// RemoveStaffs removes "staffs" edges to OrgStaff entities.
func (oouo *OrgOrganUpdateOne) RemoveStaffs(o ...*OrgStaff) *OrgOrganUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oouo.RemoveStaffIDs(ids...)
}

// ClearPositions clears all "positions" edges to the OrgPosition entity.
func (oouo *OrgOrganUpdateOne) ClearPositions() *OrgOrganUpdateOne {
	oouo.mutation.ClearPositions()
	return oouo
}

// RemovePositionIDs removes the "positions" edge to OrgPosition entities by IDs.
func (oouo *OrgOrganUpdateOne) RemovePositionIDs(ids ...string) *OrgOrganUpdateOne {
	oouo.mutation.RemovePositionIDs(ids...)
	return oouo
}

// RemovePositions removes "positions" edges to OrgPosition entities.
func (oouo *OrgOrganUpdateOne) RemovePositions(o ...*OrgPosition) *OrgOrganUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oouo.RemovePositionIDs(ids...)
}

// Where appends a list predicates to the OrgOrganUpdate builder.
func (oouo *OrgOrganUpdateOne) Where(ps ...predicate.OrgOrgan) *OrgOrganUpdateOne {
	oouo.mutation.Where(ps...)
	return oouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oouo *OrgOrganUpdateOne) Select(field string, fields ...string) *OrgOrganUpdateOne {
	oouo.fields = append([]string{field}, fields...)
	return oouo
}

// Save executes the query and returns the updated OrgOrgan entity.
func (oouo *OrgOrganUpdateOne) Save(ctx context.Context) (*OrgOrgan, error) {
	oouo.defaults()
	return withHooks(ctx, oouo.sqlSave, oouo.mutation, oouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oouo *OrgOrganUpdateOne) SaveX(ctx context.Context) *OrgOrgan {
	node, err := oouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oouo *OrgOrganUpdateOne) Exec(ctx context.Context) error {
	_, err := oouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oouo *OrgOrganUpdateOne) ExecX(ctx context.Context) {
	if err := oouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oouo *OrgOrganUpdateOne) defaults() {
	if _, ok := oouo.mutation.UpdatedAt(); !ok && !oouo.mutation.UpdatedAtCleared() {
		v := orgorgan.UpdateDefaultUpdatedAt()
		oouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oouo *OrgOrganUpdateOne) check() error {
	if v, ok := oouo.mutation.Memo(); ok {
		if err := orgorgan.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.memo": %w`, err)}
		}
	}
	if v, ok := oouo.mutation.Name(); ok {
		if err := orgorgan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.name": %w`, err)}
		}
	}
	if v, ok := oouo.mutation.Sname(); ok {
		if err := orgorgan.SnameValidator(v); err != nil {
			return &ValidationError{Name: "sname", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.sname": %w`, err)}
		}
	}
	if v, ok := oouo.mutation.Code(); ok {
		if err := orgorgan.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.code": %w`, err)}
		}
	}
	if v, ok := oouo.mutation.IdenNo(); ok {
		if err := orgorgan.IdenNoValidator(v); err != nil {
			return &ValidationError{Name: "iden_no", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.iden_no": %w`, err)}
		}
	}
	if v, ok := oouo.mutation.OwnerID(); ok {
		if err := orgorgan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.owner_id": %w`, err)}
		}
	}
	if v, ok := oouo.mutation.HaddrID(); ok {
		if err := orgorgan.HaddrIDValidator(v); err != nil {
			return &ValidationError{Name: "haddr_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.haddr_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (oouo *OrgOrganUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgOrganUpdateOne {
	oouo.modifiers = append(oouo.modifiers, modifiers...)
	return oouo
}

func (oouo *OrgOrganUpdateOne) sqlSave(ctx context.Context) (_node *OrgOrgan, err error) {
	if err := oouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgorgan.Table, orgorgan.Columns, sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString))
	id, ok := oouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entscheme: missing "OrgOrgan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgorgan.FieldID)
		for _, f := range fields {
			if !orgorgan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entscheme: invalid field %q for query", f)}
			}
			if f != orgorgan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oouo.mutation.IsDel(); ok {
		_spec.SetField(orgorgan.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := oouo.mutation.Sort(); ok {
		_spec.SetField(orgorgan.FieldSort, field.TypeInt32, value)
	}
	if value, ok := oouo.mutation.AddedSort(); ok {
		_spec.AddField(orgorgan.FieldSort, field.TypeInt32, value)
	}
	if oouo.mutation.CreatedAtCleared() {
		_spec.ClearField(orgorgan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := oouo.mutation.UpdatedAt(); ok {
		_spec.SetField(orgorgan.FieldUpdatedAt, field.TypeTime, value)
	}
	if oouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgorgan.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := oouo.mutation.DeletedAt(); ok {
		_spec.SetField(orgorgan.FieldDeletedAt, field.TypeTime, value)
	}
	if oouo.mutation.DeletedAtCleared() {
		_spec.ClearField(orgorgan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := oouo.mutation.IsActive(); ok {
		_spec.SetField(orgorgan.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := oouo.mutation.Memo(); ok {
		_spec.SetField(orgorgan.FieldMemo, field.TypeString, value)
	}
	if oouo.mutation.MemoCleared() {
		_spec.ClearField(orgorgan.FieldMemo, field.TypeString)
	}
	if value, ok := oouo.mutation.Name(); ok {
		_spec.SetField(orgorgan.FieldName, field.TypeString, value)
	}
	if oouo.mutation.NameCleared() {
		_spec.ClearField(orgorgan.FieldName, field.TypeString)
	}
	if value, ok := oouo.mutation.Sname(); ok {
		_spec.SetField(orgorgan.FieldSname, field.TypeString, value)
	}
	if oouo.mutation.SnameCleared() {
		_spec.ClearField(orgorgan.FieldSname, field.TypeString)
	}
	if value, ok := oouo.mutation.Code(); ok {
		_spec.SetField(orgorgan.FieldCode, field.TypeString, value)
	}
	if oouo.mutation.CodeCleared() {
		_spec.ClearField(orgorgan.FieldCode, field.TypeString)
	}
	if value, ok := oouo.mutation.IdenNo(); ok {
		_spec.SetField(orgorgan.FieldIdenNo, field.TypeString, value)
	}
	if oouo.mutation.IdenNoCleared() {
		_spec.ClearField(orgorgan.FieldIdenNo, field.TypeString)
	}
	if value, ok := oouo.mutation.OwnerID(); ok {
		_spec.SetField(orgorgan.FieldOwnerID, field.TypeString, value)
	}
	if oouo.mutation.OwnerIDCleared() {
		_spec.ClearField(orgorgan.FieldOwnerID, field.TypeString)
	}
	if oouo.mutation.HaddrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgorgan.HaddrTable,
			Columns: []string{orgorgan.HaddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.HaddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgorgan.HaddrTable,
			Columns: []string{orgorgan.HaddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oouo.mutation.DeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.DeptsTable,
			Columns: []string{orgorgan.DeptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.RemovedDeptsIDs(); len(nodes) > 0 && !oouo.mutation.DeptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.DeptsTable,
			Columns: []string{orgorgan.DeptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.DeptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.DeptsTable,
			Columns: []string{orgorgan.DeptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oouo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.StaffsTable,
			Columns: []string{orgorgan.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.RemovedStaffsIDs(); len(nodes) > 0 && !oouo.mutation.StaffsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.StaffsTable,
			Columns: []string{orgorgan.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.StaffsTable,
			Columns: []string{orgorgan.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oouo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.PositionsTable,
			Columns: []string{orgorgan.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgposition.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !oouo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.PositionsTable,
			Columns: []string{orgorgan.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgposition.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oouo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.PositionsTable,
			Columns: []string{orgorgan.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgposition.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(oouo.modifiers...)
	_node = &OrgOrgan{config: oouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgorgan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oouo.mutation.done = true
	return _node, nil
}
