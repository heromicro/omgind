// Code generated by ent, DO NOT EDIT.

package entscheme

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgdept"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgorgan"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgposition"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgstaff"
	"github.com/heromicro/omgind/internal/gen/entscheme/predicate"
	"github.com/heromicro/omgind/internal/gen/entscheme/sysaddress"
)

// OrgOrganQuery is the builder for querying OrgOrgan entities.
type OrgOrganQuery struct {
	config
	ctx           *QueryContext
	order         []orgorgan.OrderOption
	inters        []Interceptor
	predicates    []predicate.OrgOrgan
	withHaddr     *SysAddressQuery
	withDepts     *OrgDeptQuery
	withStaffs    *OrgStaffQuery
	withPositions *OrgPositionQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrgOrganQuery builder.
func (ooq *OrgOrganQuery) Where(ps ...predicate.OrgOrgan) *OrgOrganQuery {
	ooq.predicates = append(ooq.predicates, ps...)
	return ooq
}

// Limit the number of records to be returned by this query.
func (ooq *OrgOrganQuery) Limit(limit int) *OrgOrganQuery {
	ooq.ctx.Limit = &limit
	return ooq
}

// Offset to start from.
func (ooq *OrgOrganQuery) Offset(offset int) *OrgOrganQuery {
	ooq.ctx.Offset = &offset
	return ooq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ooq *OrgOrganQuery) Unique(unique bool) *OrgOrganQuery {
	ooq.ctx.Unique = &unique
	return ooq
}

// Order specifies how the records should be ordered.
func (ooq *OrgOrganQuery) Order(o ...orgorgan.OrderOption) *OrgOrganQuery {
	ooq.order = append(ooq.order, o...)
	return ooq
}

// QueryHaddr chains the current query on the "haddr" edge.
func (ooq *OrgOrganQuery) QueryHaddr() *SysAddressQuery {
	query := (&SysAddressClient{config: ooq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ooq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ooq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgorgan.Table, orgorgan.FieldID, selector),
			sqlgraph.To(sysaddress.Table, sysaddress.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, orgorgan.HaddrTable, orgorgan.HaddrColumn),
		)
		fromU = sqlgraph.SetNeighbors(ooq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDepts chains the current query on the "depts" edge.
func (ooq *OrgOrganQuery) QueryDepts() *OrgDeptQuery {
	query := (&OrgDeptClient{config: ooq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ooq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ooq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgorgan.Table, orgorgan.FieldID, selector),
			sqlgraph.To(orgdept.Table, orgdept.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgorgan.DeptsTable, orgorgan.DeptsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ooq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStaffs chains the current query on the "staffs" edge.
func (ooq *OrgOrganQuery) QueryStaffs() *OrgStaffQuery {
	query := (&OrgStaffClient{config: ooq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ooq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ooq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgorgan.Table, orgorgan.FieldID, selector),
			sqlgraph.To(orgstaff.Table, orgstaff.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgorgan.StaffsTable, orgorgan.StaffsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ooq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPositions chains the current query on the "positions" edge.
func (ooq *OrgOrganQuery) QueryPositions() *OrgPositionQuery {
	query := (&OrgPositionClient{config: ooq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ooq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ooq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgorgan.Table, orgorgan.FieldID, selector),
			sqlgraph.To(orgposition.Table, orgposition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgorgan.PositionsTable, orgorgan.PositionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ooq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrgOrgan entity from the query.
// Returns a *NotFoundError when no OrgOrgan was found.
func (ooq *OrgOrganQuery) First(ctx context.Context) (*OrgOrgan, error) {
	nodes, err := ooq.Limit(1).All(setContextOp(ctx, ooq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orgorgan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ooq *OrgOrganQuery) FirstX(ctx context.Context) *OrgOrgan {
	node, err := ooq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrgOrgan ID from the query.
// Returns a *NotFoundError when no OrgOrgan ID was found.
func (ooq *OrgOrganQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ooq.Limit(1).IDs(setContextOp(ctx, ooq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orgorgan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ooq *OrgOrganQuery) FirstIDX(ctx context.Context) string {
	id, err := ooq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrgOrgan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrgOrgan entity is found.
// Returns a *NotFoundError when no OrgOrgan entities are found.
func (ooq *OrgOrganQuery) Only(ctx context.Context) (*OrgOrgan, error) {
	nodes, err := ooq.Limit(2).All(setContextOp(ctx, ooq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orgorgan.Label}
	default:
		return nil, &NotSingularError{orgorgan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ooq *OrgOrganQuery) OnlyX(ctx context.Context) *OrgOrgan {
	node, err := ooq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrgOrgan ID in the query.
// Returns a *NotSingularError when more than one OrgOrgan ID is found.
// Returns a *NotFoundError when no entities are found.
func (ooq *OrgOrganQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ooq.Limit(2).IDs(setContextOp(ctx, ooq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orgorgan.Label}
	default:
		err = &NotSingularError{orgorgan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ooq *OrgOrganQuery) OnlyIDX(ctx context.Context) string {
	id, err := ooq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrgOrgans.
func (ooq *OrgOrganQuery) All(ctx context.Context) ([]*OrgOrgan, error) {
	ctx = setContextOp(ctx, ooq.ctx, "All")
	if err := ooq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrgOrgan, *OrgOrganQuery]()
	return withInterceptors[[]*OrgOrgan](ctx, ooq, qr, ooq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ooq *OrgOrganQuery) AllX(ctx context.Context) []*OrgOrgan {
	nodes, err := ooq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrgOrgan IDs.
func (ooq *OrgOrganQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ooq.ctx.Unique == nil && ooq.path != nil {
		ooq.Unique(true)
	}
	ctx = setContextOp(ctx, ooq.ctx, "IDs")
	if err = ooq.Select(orgorgan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ooq *OrgOrganQuery) IDsX(ctx context.Context) []string {
	ids, err := ooq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ooq *OrgOrganQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ooq.ctx, "Count")
	if err := ooq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ooq, querierCount[*OrgOrganQuery](), ooq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ooq *OrgOrganQuery) CountX(ctx context.Context) int {
	count, err := ooq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ooq *OrgOrganQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ooq.ctx, "Exist")
	switch _, err := ooq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entscheme: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ooq *OrgOrganQuery) ExistX(ctx context.Context) bool {
	exist, err := ooq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrgOrganQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ooq *OrgOrganQuery) Clone() *OrgOrganQuery {
	if ooq == nil {
		return nil
	}
	return &OrgOrganQuery{
		config:        ooq.config,
		ctx:           ooq.ctx.Clone(),
		order:         append([]orgorgan.OrderOption{}, ooq.order...),
		inters:        append([]Interceptor{}, ooq.inters...),
		predicates:    append([]predicate.OrgOrgan{}, ooq.predicates...),
		withHaddr:     ooq.withHaddr.Clone(),
		withDepts:     ooq.withDepts.Clone(),
		withStaffs:    ooq.withStaffs.Clone(),
		withPositions: ooq.withPositions.Clone(),
		// clone intermediate query.
		sql:  ooq.sql.Clone(),
		path: ooq.path,
	}
}

// WithHaddr tells the query-builder to eager-load the nodes that are connected to
// the "haddr" edge. The optional arguments are used to configure the query builder of the edge.
func (ooq *OrgOrganQuery) WithHaddr(opts ...func(*SysAddressQuery)) *OrgOrganQuery {
	query := (&SysAddressClient{config: ooq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ooq.withHaddr = query
	return ooq
}

// WithDepts tells the query-builder to eager-load the nodes that are connected to
// the "depts" edge. The optional arguments are used to configure the query builder of the edge.
func (ooq *OrgOrganQuery) WithDepts(opts ...func(*OrgDeptQuery)) *OrgOrganQuery {
	query := (&OrgDeptClient{config: ooq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ooq.withDepts = query
	return ooq
}

// WithStaffs tells the query-builder to eager-load the nodes that are connected to
// the "staffs" edge. The optional arguments are used to configure the query builder of the edge.
func (ooq *OrgOrganQuery) WithStaffs(opts ...func(*OrgStaffQuery)) *OrgOrganQuery {
	query := (&OrgStaffClient{config: ooq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ooq.withStaffs = query
	return ooq
}

// WithPositions tells the query-builder to eager-load the nodes that are connected to
// the "positions" edge. The optional arguments are used to configure the query builder of the edge.
func (ooq *OrgOrganQuery) WithPositions(opts ...func(*OrgPositionQuery)) *OrgOrganQuery {
	query := (&OrgPositionClient{config: ooq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ooq.withPositions = query
	return ooq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		IsDel bool `json:"is_del,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrgOrgan.Query().
//		GroupBy(orgorgan.FieldIsDel).
//		Aggregate(entscheme.Count()).
//		Scan(ctx, &v)
func (ooq *OrgOrganQuery) GroupBy(field string, fields ...string) *OrgOrganGroupBy {
	ooq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrgOrganGroupBy{build: ooq}
	grbuild.flds = &ooq.ctx.Fields
	grbuild.label = orgorgan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		IsDel bool `json:"is_del,omitempty"`
//	}
//
//	client.OrgOrgan.Query().
//		Select(orgorgan.FieldIsDel).
//		Scan(ctx, &v)
func (ooq *OrgOrganQuery) Select(fields ...string) *OrgOrganSelect {
	ooq.ctx.Fields = append(ooq.ctx.Fields, fields...)
	sbuild := &OrgOrganSelect{OrgOrganQuery: ooq}
	sbuild.label = orgorgan.Label
	sbuild.flds, sbuild.scan = &ooq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrgOrganSelect configured with the given aggregations.
func (ooq *OrgOrganQuery) Aggregate(fns ...AggregateFunc) *OrgOrganSelect {
	return ooq.Select().Aggregate(fns...)
}

func (ooq *OrgOrganQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ooq.inters {
		if inter == nil {
			return fmt.Errorf("entscheme: uninitialized interceptor (forgotten import entscheme/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ooq); err != nil {
				return err
			}
		}
	}
	for _, f := range ooq.ctx.Fields {
		if !orgorgan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entscheme: invalid field %q for query", f)}
		}
	}
	if ooq.path != nil {
		prev, err := ooq.path(ctx)
		if err != nil {
			return err
		}
		ooq.sql = prev
	}
	return nil
}

func (ooq *OrgOrganQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrgOrgan, error) {
	var (
		nodes       = []*OrgOrgan{}
		_spec       = ooq.querySpec()
		loadedTypes = [4]bool{
			ooq.withHaddr != nil,
			ooq.withDepts != nil,
			ooq.withStaffs != nil,
			ooq.withPositions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrgOrgan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrgOrgan{config: ooq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ooq.modifiers) > 0 {
		_spec.Modifiers = ooq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ooq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ooq.withHaddr; query != nil {
		if err := ooq.loadHaddr(ctx, query, nodes, nil,
			func(n *OrgOrgan, e *SysAddress) { n.Edges.Haddr = e }); err != nil {
			return nil, err
		}
	}
	if query := ooq.withDepts; query != nil {
		if err := ooq.loadDepts(ctx, query, nodes,
			func(n *OrgOrgan) { n.Edges.Depts = []*OrgDept{} },
			func(n *OrgOrgan, e *OrgDept) { n.Edges.Depts = append(n.Edges.Depts, e) }); err != nil {
			return nil, err
		}
	}
	if query := ooq.withStaffs; query != nil {
		if err := ooq.loadStaffs(ctx, query, nodes,
			func(n *OrgOrgan) { n.Edges.Staffs = []*OrgStaff{} },
			func(n *OrgOrgan, e *OrgStaff) { n.Edges.Staffs = append(n.Edges.Staffs, e) }); err != nil {
			return nil, err
		}
	}
	if query := ooq.withPositions; query != nil {
		if err := ooq.loadPositions(ctx, query, nodes,
			func(n *OrgOrgan) { n.Edges.Positions = []*OrgPosition{} },
			func(n *OrgOrgan, e *OrgPosition) { n.Edges.Positions = append(n.Edges.Positions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ooq *OrgOrganQuery) loadHaddr(ctx context.Context, query *SysAddressQuery, nodes []*OrgOrgan, init func(*OrgOrgan), assign func(*OrgOrgan, *SysAddress)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*OrgOrgan)
	for i := range nodes {
		if nodes[i].HaddrID == nil {
			continue
		}
		fk := *nodes[i].HaddrID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(sysaddress.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "haddr_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ooq *OrgOrganQuery) loadDepts(ctx context.Context, query *OrgDeptQuery, nodes []*OrgOrgan, init func(*OrgOrgan), assign func(*OrgOrgan, *OrgDept)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*OrgOrgan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgdept.FieldOrgID)
	}
	query.Where(predicate.OrgDept(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orgorgan.DeptsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		if fk == nil {
			return fmt.Errorf(`foreign-key "org_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ooq *OrgOrganQuery) loadStaffs(ctx context.Context, query *OrgStaffQuery, nodes []*OrgOrgan, init func(*OrgOrgan), assign func(*OrgOrgan, *OrgStaff)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*OrgOrgan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgstaff.FieldOrgID)
	}
	query.Where(predicate.OrgStaff(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orgorgan.StaffsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		if fk == nil {
			return fmt.Errorf(`foreign-key "org_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ooq *OrgOrganQuery) loadPositions(ctx context.Context, query *OrgPositionQuery, nodes []*OrgOrgan, init func(*OrgOrgan), assign func(*OrgOrgan, *OrgPosition)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*OrgOrgan)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgposition.FieldOrgID)
	}
	query.Where(predicate.OrgPosition(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orgorgan.PositionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrgID
		if fk == nil {
			return fmt.Errorf(`foreign-key "org_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "org_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ooq *OrgOrganQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ooq.querySpec()
	if len(ooq.modifiers) > 0 {
		_spec.Modifiers = ooq.modifiers
	}
	_spec.Node.Columns = ooq.ctx.Fields
	if len(ooq.ctx.Fields) > 0 {
		_spec.Unique = ooq.ctx.Unique != nil && *ooq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ooq.driver, _spec)
}

func (ooq *OrgOrganQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orgorgan.Table, orgorgan.Columns, sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString))
	_spec.From = ooq.sql
	if unique := ooq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ooq.path != nil {
		_spec.Unique = true
	}
	if fields := ooq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgorgan.FieldID)
		for i := range fields {
			if fields[i] != orgorgan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ooq.withHaddr != nil {
			_spec.Node.AddColumnOnce(orgorgan.FieldHaddrID)
		}
	}
	if ps := ooq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ooq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ooq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ooq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ooq *OrgOrganQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ooq.driver.Dialect())
	t1 := builder.Table(orgorgan.Table)
	columns := ooq.ctx.Fields
	if len(columns) == 0 {
		columns = orgorgan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ooq.sql != nil {
		selector = ooq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ooq.ctx.Unique != nil && *ooq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ooq.modifiers {
		m(selector)
	}
	for _, p := range ooq.predicates {
		p(selector)
	}
	for _, p := range ooq.order {
		p(selector)
	}
	if offset := ooq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ooq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (ooq *OrgOrganQuery) ForUpdate(opts ...sql.LockOption) *OrgOrganQuery {
	if ooq.driver.Dialect() == dialect.Postgres {
		ooq.Unique(false)
	}
	ooq.modifiers = append(ooq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return ooq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (ooq *OrgOrganQuery) ForShare(opts ...sql.LockOption) *OrgOrganQuery {
	if ooq.driver.Dialect() == dialect.Postgres {
		ooq.Unique(false)
	}
	ooq.modifiers = append(ooq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return ooq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ooq *OrgOrganQuery) Modify(modifiers ...func(s *sql.Selector)) *OrgOrganSelect {
	ooq.modifiers = append(ooq.modifiers, modifiers...)
	return ooq.Select()
}

// OrgOrganGroupBy is the group-by builder for OrgOrgan entities.
type OrgOrganGroupBy struct {
	selector
	build *OrgOrganQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oogb *OrgOrganGroupBy) Aggregate(fns ...AggregateFunc) *OrgOrganGroupBy {
	oogb.fns = append(oogb.fns, fns...)
	return oogb
}

// Scan applies the selector query and scans the result into the given value.
func (oogb *OrgOrganGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oogb.build.ctx, "GroupBy")
	if err := oogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgOrganQuery, *OrgOrganGroupBy](ctx, oogb.build, oogb, oogb.build.inters, v)
}

func (oogb *OrgOrganGroupBy) sqlScan(ctx context.Context, root *OrgOrganQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oogb.fns))
	for _, fn := range oogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oogb.flds)+len(oogb.fns))
		for _, f := range *oogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrgOrganSelect is the builder for selecting fields of OrgOrgan entities.
type OrgOrganSelect struct {
	*OrgOrganQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oos *OrgOrganSelect) Aggregate(fns ...AggregateFunc) *OrgOrganSelect {
	oos.fns = append(oos.fns, fns...)
	return oos
}

// Scan applies the selector query and scans the result into the given value.
func (oos *OrgOrganSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oos.ctx, "Select")
	if err := oos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgOrganQuery, *OrgOrganSelect](ctx, oos.OrgOrganQuery, oos, oos.inters, v)
}

func (oos *OrgOrganSelect) sqlScan(ctx context.Context, root *OrgOrganQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oos.fns))
	for _, fn := range oos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oos *OrgOrganSelect) Modify(modifiers ...func(s *sql.Selector)) *OrgOrganSelect {
	oos.modifiers = append(oos.modifiers, modifiers...)
	return oos
}
