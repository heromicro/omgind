// Code generated by ent, DO NOT EDIT.

package entscheme

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgdept"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgorgan"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgstaff"
)

// OrgDeptCreate is the builder for creating a OrgDept entity.
type OrgDeptCreate struct {
	config
	mutation *OrgDeptMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (odc *OrgDeptCreate) SetIsDel(b bool) *OrgDeptCreate {
	odc.mutation.SetIsDel(b)
	return odc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableIsDel(b *bool) *OrgDeptCreate {
	if b != nil {
		odc.SetIsDel(*b)
	}
	return odc
}

// SetSort sets the "sort" field.
func (odc *OrgDeptCreate) SetSort(i int32) *OrgDeptCreate {
	odc.mutation.SetSort(i)
	return odc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableSort(i *int32) *OrgDeptCreate {
	if i != nil {
		odc.SetSort(*i)
	}
	return odc
}

// SetCreatedAt sets the "created_at" field.
func (odc *OrgDeptCreate) SetCreatedAt(t time.Time) *OrgDeptCreate {
	odc.mutation.SetCreatedAt(t)
	return odc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableCreatedAt(t *time.Time) *OrgDeptCreate {
	if t != nil {
		odc.SetCreatedAt(*t)
	}
	return odc
}

// SetUpdatedAt sets the "updated_at" field.
func (odc *OrgDeptCreate) SetUpdatedAt(t time.Time) *OrgDeptCreate {
	odc.mutation.SetUpdatedAt(t)
	return odc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableUpdatedAt(t *time.Time) *OrgDeptCreate {
	if t != nil {
		odc.SetUpdatedAt(*t)
	}
	return odc
}

// SetDeletedAt sets the "deleted_at" field.
func (odc *OrgDeptCreate) SetDeletedAt(t time.Time) *OrgDeptCreate {
	odc.mutation.SetDeletedAt(t)
	return odc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableDeletedAt(t *time.Time) *OrgDeptCreate {
	if t != nil {
		odc.SetDeletedAt(*t)
	}
	return odc
}

// SetIsActive sets the "is_active" field.
func (odc *OrgDeptCreate) SetIsActive(b bool) *OrgDeptCreate {
	odc.mutation.SetIsActive(b)
	return odc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableIsActive(b *bool) *OrgDeptCreate {
	if b != nil {
		odc.SetIsActive(*b)
	}
	return odc
}

// SetMemo sets the "memo" field.
func (odc *OrgDeptCreate) SetMemo(s string) *OrgDeptCreate {
	odc.mutation.SetMemo(s)
	return odc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableMemo(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetMemo(*s)
	}
	return odc
}

// SetTreeID sets the "tree_id" field.
func (odc *OrgDeptCreate) SetTreeID(i int64) *OrgDeptCreate {
	odc.mutation.SetTreeID(i)
	return odc
}

// SetNillableTreeID sets the "tree_id" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableTreeID(i *int64) *OrgDeptCreate {
	if i != nil {
		odc.SetTreeID(*i)
	}
	return odc
}

// SetTreeLevel sets the "tree_level" field.
func (odc *OrgDeptCreate) SetTreeLevel(i int32) *OrgDeptCreate {
	odc.mutation.SetTreeLevel(i)
	return odc
}

// SetNillableTreeLevel sets the "tree_level" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableTreeLevel(i *int32) *OrgDeptCreate {
	if i != nil {
		odc.SetTreeLevel(*i)
	}
	return odc
}

// SetTreeLeft sets the "tree_left" field.
func (odc *OrgDeptCreate) SetTreeLeft(i int64) *OrgDeptCreate {
	odc.mutation.SetTreeLeft(i)
	return odc
}

// SetNillableTreeLeft sets the "tree_left" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableTreeLeft(i *int64) *OrgDeptCreate {
	if i != nil {
		odc.SetTreeLeft(*i)
	}
	return odc
}

// SetTreeRight sets the "tree_right" field.
func (odc *OrgDeptCreate) SetTreeRight(i int64) *OrgDeptCreate {
	odc.mutation.SetTreeRight(i)
	return odc
}

// SetNillableTreeRight sets the "tree_right" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableTreeRight(i *int64) *OrgDeptCreate {
	if i != nil {
		odc.SetTreeRight(*i)
	}
	return odc
}

// SetIsLeaf sets the "is_leaf" field.
func (odc *OrgDeptCreate) SetIsLeaf(b bool) *OrgDeptCreate {
	odc.mutation.SetIsLeaf(b)
	return odc
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableIsLeaf(b *bool) *OrgDeptCreate {
	if b != nil {
		odc.SetIsLeaf(*b)
	}
	return odc
}

// SetTreePath sets the "tree_path" field.
func (odc *OrgDeptCreate) SetTreePath(s string) *OrgDeptCreate {
	odc.mutation.SetTreePath(s)
	return odc
}

// SetNillableTreePath sets the "tree_path" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableTreePath(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetTreePath(*s)
	}
	return odc
}

// SetName sets the "name" field.
func (odc *OrgDeptCreate) SetName(s string) *OrgDeptCreate {
	odc.mutation.SetName(s)
	return odc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableName(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetName(*s)
	}
	return odc
}

// SetCode sets the "code" field.
func (odc *OrgDeptCreate) SetCode(s string) *OrgDeptCreate {
	odc.mutation.SetCode(s)
	return odc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableCode(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetCode(*s)
	}
	return odc
}

// SetMergeName sets the "merge_name" field.
func (odc *OrgDeptCreate) SetMergeName(s string) *OrgDeptCreate {
	odc.mutation.SetMergeName(s)
	return odc
}

// SetNillableMergeName sets the "merge_name" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableMergeName(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetMergeName(*s)
	}
	return odc
}

// SetOrgID sets the "org_id" field.
func (odc *OrgDeptCreate) SetOrgID(s string) *OrgDeptCreate {
	odc.mutation.SetOrgID(s)
	return odc
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableOrgID(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetOrgID(*s)
	}
	return odc
}

// SetParentID sets the "parent_id" field.
func (odc *OrgDeptCreate) SetParentID(s string) *OrgDeptCreate {
	odc.mutation.SetParentID(s)
	return odc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableParentID(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetParentID(*s)
	}
	return odc
}

// SetIsReal sets the "is_real" field.
func (odc *OrgDeptCreate) SetIsReal(b bool) *OrgDeptCreate {
	odc.mutation.SetIsReal(b)
	return odc
}

// SetNillableIsReal sets the "is_real" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableIsReal(b *bool) *OrgDeptCreate {
	if b != nil {
		odc.SetIsReal(*b)
	}
	return odc
}

// SetIsShow sets the "is_show" field.
func (odc *OrgDeptCreate) SetIsShow(b bool) *OrgDeptCreate {
	odc.mutation.SetIsShow(b)
	return odc
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableIsShow(b *bool) *OrgDeptCreate {
	if b != nil {
		odc.SetIsShow(*b)
	}
	return odc
}

// SetCreator sets the "creator" field.
func (odc *OrgDeptCreate) SetCreator(s string) *OrgDeptCreate {
	odc.mutation.SetCreator(s)
	return odc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableCreator(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetCreator(*s)
	}
	return odc
}

// SetID sets the "id" field.
func (odc *OrgDeptCreate) SetID(s string) *OrgDeptCreate {
	odc.mutation.SetID(s)
	return odc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableID(s *string) *OrgDeptCreate {
	if s != nil {
		odc.SetID(*s)
	}
	return odc
}

// SetParent sets the "parent" edge to the OrgDept entity.
func (odc *OrgDeptCreate) SetParent(o *OrgDept) *OrgDeptCreate {
	return odc.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the OrgDept entity by IDs.
func (odc *OrgDeptCreate) AddChildIDs(ids ...string) *OrgDeptCreate {
	odc.mutation.AddChildIDs(ids...)
	return odc
}

// AddChildren adds the "children" edges to the OrgDept entity.
func (odc *OrgDeptCreate) AddChildren(o ...*OrgDept) *OrgDeptCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return odc.AddChildIDs(ids...)
}

// SetOrganID sets the "organ" edge to the OrgOrgan entity by ID.
func (odc *OrgDeptCreate) SetOrganID(id string) *OrgDeptCreate {
	odc.mutation.SetOrganID(id)
	return odc
}

// SetNillableOrganID sets the "organ" edge to the OrgOrgan entity by ID if the given value is not nil.
func (odc *OrgDeptCreate) SetNillableOrganID(id *string) *OrgDeptCreate {
	if id != nil {
		odc = odc.SetOrganID(*id)
	}
	return odc
}

// SetOrgan sets the "organ" edge to the OrgOrgan entity.
func (odc *OrgDeptCreate) SetOrgan(o *OrgOrgan) *OrgDeptCreate {
	return odc.SetOrganID(o.ID)
}

// AddStaffIDs adds the "staffs" edge to the OrgStaff entity by IDs.
func (odc *OrgDeptCreate) AddStaffIDs(ids ...string) *OrgDeptCreate {
	odc.mutation.AddStaffIDs(ids...)
	return odc
}

// AddStaffs adds the "staffs" edges to the OrgStaff entity.
func (odc *OrgDeptCreate) AddStaffs(o ...*OrgStaff) *OrgDeptCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return odc.AddStaffIDs(ids...)
}

// Mutation returns the OrgDeptMutation object of the builder.
func (odc *OrgDeptCreate) Mutation() *OrgDeptMutation {
	return odc.mutation
}

// Save creates the OrgDept in the database.
func (odc *OrgDeptCreate) Save(ctx context.Context) (*OrgDept, error) {
	odc.defaults()
	return withHooks(ctx, odc.sqlSave, odc.mutation, odc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (odc *OrgDeptCreate) SaveX(ctx context.Context) *OrgDept {
	v, err := odc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odc *OrgDeptCreate) Exec(ctx context.Context) error {
	_, err := odc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odc *OrgDeptCreate) ExecX(ctx context.Context) {
	if err := odc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (odc *OrgDeptCreate) defaults() {
	if _, ok := odc.mutation.IsDel(); !ok {
		v := orgdept.DefaultIsDel
		odc.mutation.SetIsDel(v)
	}
	if _, ok := odc.mutation.Sort(); !ok {
		v := orgdept.DefaultSort
		odc.mutation.SetSort(v)
	}
	if _, ok := odc.mutation.CreatedAt(); !ok {
		v := orgdept.DefaultCreatedAt()
		odc.mutation.SetCreatedAt(v)
	}
	if _, ok := odc.mutation.UpdatedAt(); !ok {
		v := orgdept.DefaultUpdatedAt()
		odc.mutation.SetUpdatedAt(v)
	}
	if _, ok := odc.mutation.IsActive(); !ok {
		v := orgdept.DefaultIsActive
		odc.mutation.SetIsActive(v)
	}
	if _, ok := odc.mutation.Memo(); !ok {
		v := orgdept.DefaultMemo
		odc.mutation.SetMemo(v)
	}
	if _, ok := odc.mutation.IsLeaf(); !ok {
		v := orgdept.DefaultIsLeaf
		odc.mutation.SetIsLeaf(v)
	}
	if _, ok := odc.mutation.IsReal(); !ok {
		v := orgdept.DefaultIsReal
		odc.mutation.SetIsReal(v)
	}
	if _, ok := odc.mutation.IsShow(); !ok {
		v := orgdept.DefaultIsShow
		odc.mutation.SetIsShow(v)
	}
	if _, ok := odc.mutation.ID(); !ok {
		v := orgdept.DefaultID()
		odc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (odc *OrgDeptCreate) check() error {
	if _, ok := odc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`entscheme: missing required field "OrgDept.is_del"`)}
	}
	if _, ok := odc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`entscheme: missing required field "OrgDept.sort"`)}
	}
	if _, ok := odc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`entscheme: missing required field "OrgDept.is_active"`)}
	}
	if v, ok := odc.mutation.Memo(); ok {
		if err := orgdept.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`entscheme: validator failed for field "OrgDept.memo": %w`, err)}
		}
	}
	if v, ok := odc.mutation.Name(); ok {
		if err := orgdept.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entscheme: validator failed for field "OrgDept.name": %w`, err)}
		}
	}
	if v, ok := odc.mutation.Code(); ok {
		if err := orgdept.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`entscheme: validator failed for field "OrgDept.code": %w`, err)}
		}
	}
	if v, ok := odc.mutation.MergeName(); ok {
		if err := orgdept.MergeNameValidator(v); err != nil {
			return &ValidationError{Name: "merge_name", err: fmt.Errorf(`entscheme: validator failed for field "OrgDept.merge_name": %w`, err)}
		}
	}
	if v, ok := odc.mutation.OrgID(); ok {
		if err := orgdept.OrgIDValidator(v); err != nil {
			return &ValidationError{Name: "org_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgDept.org_id": %w`, err)}
		}
	}
	if v, ok := odc.mutation.ParentID(); ok {
		if err := orgdept.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgDept.parent_id": %w`, err)}
		}
	}
	if v, ok := odc.mutation.ID(); ok {
		if err := orgdept.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entscheme: validator failed for field "OrgDept.id": %w`, err)}
		}
	}
	return nil
}

func (odc *OrgDeptCreate) sqlSave(ctx context.Context) (*OrgDept, error) {
	if err := odc.check(); err != nil {
		return nil, err
	}
	_node, _spec := odc.createSpec()
	if err := sqlgraph.CreateNode(ctx, odc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgDept.ID type: %T", _spec.ID.Value)
		}
	}
	odc.mutation.id = &_node.ID
	odc.mutation.done = true
	return _node, nil
}

func (odc *OrgDeptCreate) createSpec() (*OrgDept, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgDept{config: odc.config}
		_spec = sqlgraph.NewCreateSpec(orgdept.Table, sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString))
	)
	_spec.OnConflict = odc.conflict
	if id, ok := odc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := odc.mutation.IsDel(); ok {
		_spec.SetField(orgdept.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := odc.mutation.Sort(); ok {
		_spec.SetField(orgdept.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := odc.mutation.CreatedAt(); ok {
		_spec.SetField(orgdept.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := odc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgdept.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := odc.mutation.DeletedAt(); ok {
		_spec.SetField(orgdept.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := odc.mutation.IsActive(); ok {
		_spec.SetField(orgdept.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := odc.mutation.Memo(); ok {
		_spec.SetField(orgdept.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := odc.mutation.TreeID(); ok {
		_spec.SetField(orgdept.FieldTreeID, field.TypeInt64, value)
		_node.TreeID = &value
	}
	if value, ok := odc.mutation.TreeLevel(); ok {
		_spec.SetField(orgdept.FieldTreeLevel, field.TypeInt32, value)
		_node.TreeLevel = &value
	}
	if value, ok := odc.mutation.TreeLeft(); ok {
		_spec.SetField(orgdept.FieldTreeLeft, field.TypeInt64, value)
		_node.TreeLeft = &value
	}
	if value, ok := odc.mutation.TreeRight(); ok {
		_spec.SetField(orgdept.FieldTreeRight, field.TypeInt64, value)
		_node.TreeRight = &value
	}
	if value, ok := odc.mutation.IsLeaf(); ok {
		_spec.SetField(orgdept.FieldIsLeaf, field.TypeBool, value)
		_node.IsLeaf = &value
	}
	if value, ok := odc.mutation.TreePath(); ok {
		_spec.SetField(orgdept.FieldTreePath, field.TypeString, value)
		_node.TreePath = &value
	}
	if value, ok := odc.mutation.Name(); ok {
		_spec.SetField(orgdept.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := odc.mutation.Code(); ok {
		_spec.SetField(orgdept.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := odc.mutation.MergeName(); ok {
		_spec.SetField(orgdept.FieldMergeName, field.TypeString, value)
		_node.MergeName = &value
	}
	if value, ok := odc.mutation.IsReal(); ok {
		_spec.SetField(orgdept.FieldIsReal, field.TypeBool, value)
		_node.IsReal = &value
	}
	if value, ok := odc.mutation.IsShow(); ok {
		_spec.SetField(orgdept.FieldIsShow, field.TypeBool, value)
		_node.IsShow = &value
	}
	if value, ok := odc.mutation.Creator(); ok {
		_spec.SetField(orgdept.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if nodes := odc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgdept.ParentTable,
			Columns: []string{orgdept.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := odc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgdept.ChildrenTable,
			Columns: []string{orgdept.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := odc.mutation.OrganIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgdept.OrganTable,
			Columns: []string{orgdept.OrganColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := odc.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgdept.StaffsTable,
			Columns: []string{orgdept.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgDept.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgDeptUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (odc *OrgDeptCreate) OnConflict(opts ...sql.ConflictOption) *OrgDeptUpsertOne {
	odc.conflict = opts
	return &OrgDeptUpsertOne{
		create: odc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgDept.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (odc *OrgDeptCreate) OnConflictColumns(columns ...string) *OrgDeptUpsertOne {
	odc.conflict = append(odc.conflict, sql.ConflictColumns(columns...))
	return &OrgDeptUpsertOne{
		create: odc,
	}
}

type (
	// OrgDeptUpsertOne is the builder for "upsert"-ing
	//  one OrgDept node.
	OrgDeptUpsertOne struct {
		create *OrgDeptCreate
	}

	// OrgDeptUpsert is the "OnConflict" setter.
	OrgDeptUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *OrgDeptUpsert) SetIsDel(v bool) *OrgDeptUpsert {
	u.Set(orgdept.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateIsDel() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldIsDel)
	return u
}

// SetSort sets the "sort" field.
func (u *OrgDeptUpsert) SetSort(v int32) *OrgDeptUpsert {
	u.Set(orgdept.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateSort() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *OrgDeptUpsert) AddSort(v int32) *OrgDeptUpsert {
	u.Add(orgdept.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgDeptUpsert) SetUpdatedAt(v time.Time) *OrgDeptUpsert {
	u.Set(orgdept.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateUpdatedAt() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgDeptUpsert) ClearUpdatedAt() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgDeptUpsert) SetDeletedAt(v time.Time) *OrgDeptUpsert {
	u.Set(orgdept.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateDeletedAt() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgDeptUpsert) ClearDeletedAt() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *OrgDeptUpsert) SetIsActive(v bool) *OrgDeptUpsert {
	u.Set(orgdept.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateIsActive() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldIsActive)
	return u
}

// SetMemo sets the "memo" field.
func (u *OrgDeptUpsert) SetMemo(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateMemo() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgDeptUpsert) ClearMemo() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldMemo)
	return u
}

// SetTreeID sets the "tree_id" field.
func (u *OrgDeptUpsert) SetTreeID(v int64) *OrgDeptUpsert {
	u.Set(orgdept.FieldTreeID, v)
	return u
}

// UpdateTreeID sets the "tree_id" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateTreeID() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldTreeID)
	return u
}

// AddTreeID adds v to the "tree_id" field.
func (u *OrgDeptUpsert) AddTreeID(v int64) *OrgDeptUpsert {
	u.Add(orgdept.FieldTreeID, v)
	return u
}

// ClearTreeID clears the value of the "tree_id" field.
func (u *OrgDeptUpsert) ClearTreeID() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldTreeID)
	return u
}

// SetTreeLevel sets the "tree_level" field.
func (u *OrgDeptUpsert) SetTreeLevel(v int32) *OrgDeptUpsert {
	u.Set(orgdept.FieldTreeLevel, v)
	return u
}

// UpdateTreeLevel sets the "tree_level" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateTreeLevel() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldTreeLevel)
	return u
}

// AddTreeLevel adds v to the "tree_level" field.
func (u *OrgDeptUpsert) AddTreeLevel(v int32) *OrgDeptUpsert {
	u.Add(orgdept.FieldTreeLevel, v)
	return u
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (u *OrgDeptUpsert) ClearTreeLevel() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldTreeLevel)
	return u
}

// SetTreeLeft sets the "tree_left" field.
func (u *OrgDeptUpsert) SetTreeLeft(v int64) *OrgDeptUpsert {
	u.Set(orgdept.FieldTreeLeft, v)
	return u
}

// UpdateTreeLeft sets the "tree_left" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateTreeLeft() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldTreeLeft)
	return u
}

// AddTreeLeft adds v to the "tree_left" field.
func (u *OrgDeptUpsert) AddTreeLeft(v int64) *OrgDeptUpsert {
	u.Add(orgdept.FieldTreeLeft, v)
	return u
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (u *OrgDeptUpsert) ClearTreeLeft() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldTreeLeft)
	return u
}

// SetTreeRight sets the "tree_right" field.
func (u *OrgDeptUpsert) SetTreeRight(v int64) *OrgDeptUpsert {
	u.Set(orgdept.FieldTreeRight, v)
	return u
}

// UpdateTreeRight sets the "tree_right" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateTreeRight() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldTreeRight)
	return u
}

// AddTreeRight adds v to the "tree_right" field.
func (u *OrgDeptUpsert) AddTreeRight(v int64) *OrgDeptUpsert {
	u.Add(orgdept.FieldTreeRight, v)
	return u
}

// ClearTreeRight clears the value of the "tree_right" field.
func (u *OrgDeptUpsert) ClearTreeRight() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldTreeRight)
	return u
}

// SetIsLeaf sets the "is_leaf" field.
func (u *OrgDeptUpsert) SetIsLeaf(v bool) *OrgDeptUpsert {
	u.Set(orgdept.FieldIsLeaf, v)
	return u
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateIsLeaf() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldIsLeaf)
	return u
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *OrgDeptUpsert) ClearIsLeaf() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldIsLeaf)
	return u
}

// SetTreePath sets the "tree_path" field.
func (u *OrgDeptUpsert) SetTreePath(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldTreePath, v)
	return u
}

// UpdateTreePath sets the "tree_path" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateTreePath() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldTreePath)
	return u
}

// ClearTreePath clears the value of the "tree_path" field.
func (u *OrgDeptUpsert) ClearTreePath() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldTreePath)
	return u
}

// SetName sets the "name" field.
func (u *OrgDeptUpsert) SetName(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateName() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *OrgDeptUpsert) ClearName() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *OrgDeptUpsert) SetCode(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateCode() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *OrgDeptUpsert) ClearCode() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldCode)
	return u
}

// SetMergeName sets the "merge_name" field.
func (u *OrgDeptUpsert) SetMergeName(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldMergeName, v)
	return u
}

// UpdateMergeName sets the "merge_name" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateMergeName() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldMergeName)
	return u
}

// ClearMergeName clears the value of the "merge_name" field.
func (u *OrgDeptUpsert) ClearMergeName() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldMergeName)
	return u
}

// SetOrgID sets the "org_id" field.
func (u *OrgDeptUpsert) SetOrgID(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldOrgID, v)
	return u
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateOrgID() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldOrgID)
	return u
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgDeptUpsert) ClearOrgID() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldOrgID)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *OrgDeptUpsert) SetParentID(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateParentID() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrgDeptUpsert) ClearParentID() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldParentID)
	return u
}

// SetIsReal sets the "is_real" field.
func (u *OrgDeptUpsert) SetIsReal(v bool) *OrgDeptUpsert {
	u.Set(orgdept.FieldIsReal, v)
	return u
}

// UpdateIsReal sets the "is_real" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateIsReal() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldIsReal)
	return u
}

// ClearIsReal clears the value of the "is_real" field.
func (u *OrgDeptUpsert) ClearIsReal() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldIsReal)
	return u
}

// SetIsShow sets the "is_show" field.
func (u *OrgDeptUpsert) SetIsShow(v bool) *OrgDeptUpsert {
	u.Set(orgdept.FieldIsShow, v)
	return u
}

// UpdateIsShow sets the "is_show" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateIsShow() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldIsShow)
	return u
}

// ClearIsShow clears the value of the "is_show" field.
func (u *OrgDeptUpsert) ClearIsShow() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldIsShow)
	return u
}

// SetCreator sets the "creator" field.
func (u *OrgDeptUpsert) SetCreator(v string) *OrgDeptUpsert {
	u.Set(orgdept.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgDeptUpsert) UpdateCreator() *OrgDeptUpsert {
	u.SetExcluded(orgdept.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgDeptUpsert) ClearCreator() *OrgDeptUpsert {
	u.SetNull(orgdept.FieldCreator)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrgDept.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgdept.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgDeptUpsertOne) UpdateNewValues() *OrgDeptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orgdept.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orgdept.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgDept.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgDeptUpsertOne) Ignore() *OrgDeptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgDeptUpsertOne) DoNothing() *OrgDeptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgDeptCreate.OnConflict
// documentation for more info.
func (u *OrgDeptUpsertOne) Update(set func(*OrgDeptUpsert)) *OrgDeptUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgDeptUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgDeptUpsertOne) SetIsDel(v bool) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateIsDel() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgDeptUpsertOne) SetSort(v int32) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgDeptUpsertOne) AddSort(v int32) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateSort() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgDeptUpsertOne) SetUpdatedAt(v time.Time) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateUpdatedAt() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgDeptUpsertOne) ClearUpdatedAt() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgDeptUpsertOne) SetDeletedAt(v time.Time) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateDeletedAt() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgDeptUpsertOne) ClearDeletedAt() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgDeptUpsertOne) SetIsActive(v bool) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateIsActive() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgDeptUpsertOne) SetMemo(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateMemo() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgDeptUpsertOne) ClearMemo() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearMemo()
	})
}

// SetTreeID sets the "tree_id" field.
func (u *OrgDeptUpsertOne) SetTreeID(v int64) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeID(v)
	})
}

// AddTreeID adds v to the "tree_id" field.
func (u *OrgDeptUpsertOne) AddTreeID(v int64) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeID(v)
	})
}

// UpdateTreeID sets the "tree_id" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateTreeID() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeID()
	})
}

// ClearTreeID clears the value of the "tree_id" field.
func (u *OrgDeptUpsertOne) ClearTreeID() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeID()
	})
}

// SetTreeLevel sets the "tree_level" field.
func (u *OrgDeptUpsertOne) SetTreeLevel(v int32) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeLevel(v)
	})
}

// AddTreeLevel adds v to the "tree_level" field.
func (u *OrgDeptUpsertOne) AddTreeLevel(v int32) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeLevel(v)
	})
}

// UpdateTreeLevel sets the "tree_level" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateTreeLevel() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeLevel()
	})
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (u *OrgDeptUpsertOne) ClearTreeLevel() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeLevel()
	})
}

// SetTreeLeft sets the "tree_left" field.
func (u *OrgDeptUpsertOne) SetTreeLeft(v int64) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeLeft(v)
	})
}

// AddTreeLeft adds v to the "tree_left" field.
func (u *OrgDeptUpsertOne) AddTreeLeft(v int64) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeLeft(v)
	})
}

// UpdateTreeLeft sets the "tree_left" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateTreeLeft() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeLeft()
	})
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (u *OrgDeptUpsertOne) ClearTreeLeft() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeLeft()
	})
}

// SetTreeRight sets the "tree_right" field.
func (u *OrgDeptUpsertOne) SetTreeRight(v int64) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeRight(v)
	})
}

// AddTreeRight adds v to the "tree_right" field.
func (u *OrgDeptUpsertOne) AddTreeRight(v int64) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeRight(v)
	})
}

// UpdateTreeRight sets the "tree_right" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateTreeRight() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeRight()
	})
}

// ClearTreeRight clears the value of the "tree_right" field.
func (u *OrgDeptUpsertOne) ClearTreeRight() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeRight()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *OrgDeptUpsertOne) SetIsLeaf(v bool) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateIsLeaf() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsLeaf()
	})
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *OrgDeptUpsertOne) ClearIsLeaf() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearIsLeaf()
	})
}

// SetTreePath sets the "tree_path" field.
func (u *OrgDeptUpsertOne) SetTreePath(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreePath(v)
	})
}

// UpdateTreePath sets the "tree_path" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateTreePath() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreePath()
	})
}

// ClearTreePath clears the value of the "tree_path" field.
func (u *OrgDeptUpsertOne) ClearTreePath() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreePath()
	})
}

// SetName sets the "name" field.
func (u *OrgDeptUpsertOne) SetName(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateName() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrgDeptUpsertOne) ClearName() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *OrgDeptUpsertOne) SetCode(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateCode() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgDeptUpsertOne) ClearCode() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearCode()
	})
}

// SetMergeName sets the "merge_name" field.
func (u *OrgDeptUpsertOne) SetMergeName(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetMergeName(v)
	})
}

// UpdateMergeName sets the "merge_name" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateMergeName() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateMergeName()
	})
}

// ClearMergeName clears the value of the "merge_name" field.
func (u *OrgDeptUpsertOne) ClearMergeName() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearMergeName()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgDeptUpsertOne) SetOrgID(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateOrgID() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgDeptUpsertOne) ClearOrgID() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearOrgID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrgDeptUpsertOne) SetParentID(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateParentID() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrgDeptUpsertOne) ClearParentID() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearParentID()
	})
}

// SetIsReal sets the "is_real" field.
func (u *OrgDeptUpsertOne) SetIsReal(v bool) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsReal(v)
	})
}

// UpdateIsReal sets the "is_real" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateIsReal() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsReal()
	})
}

// ClearIsReal clears the value of the "is_real" field.
func (u *OrgDeptUpsertOne) ClearIsReal() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearIsReal()
	})
}

// SetIsShow sets the "is_show" field.
func (u *OrgDeptUpsertOne) SetIsShow(v bool) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsShow(v)
	})
}

// UpdateIsShow sets the "is_show" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateIsShow() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsShow()
	})
}

// ClearIsShow clears the value of the "is_show" field.
func (u *OrgDeptUpsertOne) ClearIsShow() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearIsShow()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgDeptUpsertOne) SetCreator(v string) *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgDeptUpsertOne) UpdateCreator() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgDeptUpsertOne) ClearCreator() *OrgDeptUpsertOne {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgDeptUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entscheme: missing options for OrgDeptCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgDeptUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgDeptUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entscheme: OrgDeptUpsertOne.ID is not supported by MySQL driver. Use OrgDeptUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgDeptUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgDeptCreateBulk is the builder for creating many OrgDept entities in bulk.
type OrgDeptCreateBulk struct {
	config
	builders []*OrgDeptCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgDept entities in the database.
func (odcb *OrgDeptCreateBulk) Save(ctx context.Context) ([]*OrgDept, error) {
	specs := make([]*sqlgraph.CreateSpec, len(odcb.builders))
	nodes := make([]*OrgDept, len(odcb.builders))
	mutators := make([]Mutator, len(odcb.builders))
	for i := range odcb.builders {
		func(i int, root context.Context) {
			builder := odcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgDeptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, odcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = odcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, odcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, odcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (odcb *OrgDeptCreateBulk) SaveX(ctx context.Context) []*OrgDept {
	v, err := odcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odcb *OrgDeptCreateBulk) Exec(ctx context.Context) error {
	_, err := odcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odcb *OrgDeptCreateBulk) ExecX(ctx context.Context) {
	if err := odcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgDept.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgDeptUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (odcb *OrgDeptCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgDeptUpsertBulk {
	odcb.conflict = opts
	return &OrgDeptUpsertBulk{
		create: odcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgDept.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (odcb *OrgDeptCreateBulk) OnConflictColumns(columns ...string) *OrgDeptUpsertBulk {
	odcb.conflict = append(odcb.conflict, sql.ConflictColumns(columns...))
	return &OrgDeptUpsertBulk{
		create: odcb,
	}
}

// OrgDeptUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgDept nodes.
type OrgDeptUpsertBulk struct {
	create *OrgDeptCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgDept.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgdept.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgDeptUpsertBulk) UpdateNewValues() *OrgDeptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orgdept.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orgdept.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgDept.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgDeptUpsertBulk) Ignore() *OrgDeptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgDeptUpsertBulk) DoNothing() *OrgDeptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgDeptCreateBulk.OnConflict
// documentation for more info.
func (u *OrgDeptUpsertBulk) Update(set func(*OrgDeptUpsert)) *OrgDeptUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgDeptUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgDeptUpsertBulk) SetIsDel(v bool) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateIsDel() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgDeptUpsertBulk) SetSort(v int32) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgDeptUpsertBulk) AddSort(v int32) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateSort() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgDeptUpsertBulk) SetUpdatedAt(v time.Time) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateUpdatedAt() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgDeptUpsertBulk) ClearUpdatedAt() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgDeptUpsertBulk) SetDeletedAt(v time.Time) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateDeletedAt() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgDeptUpsertBulk) ClearDeletedAt() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgDeptUpsertBulk) SetIsActive(v bool) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateIsActive() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgDeptUpsertBulk) SetMemo(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateMemo() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgDeptUpsertBulk) ClearMemo() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearMemo()
	})
}

// SetTreeID sets the "tree_id" field.
func (u *OrgDeptUpsertBulk) SetTreeID(v int64) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeID(v)
	})
}

// AddTreeID adds v to the "tree_id" field.
func (u *OrgDeptUpsertBulk) AddTreeID(v int64) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeID(v)
	})
}

// UpdateTreeID sets the "tree_id" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateTreeID() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeID()
	})
}

// ClearTreeID clears the value of the "tree_id" field.
func (u *OrgDeptUpsertBulk) ClearTreeID() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeID()
	})
}

// SetTreeLevel sets the "tree_level" field.
func (u *OrgDeptUpsertBulk) SetTreeLevel(v int32) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeLevel(v)
	})
}

// AddTreeLevel adds v to the "tree_level" field.
func (u *OrgDeptUpsertBulk) AddTreeLevel(v int32) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeLevel(v)
	})
}

// UpdateTreeLevel sets the "tree_level" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateTreeLevel() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeLevel()
	})
}

// ClearTreeLevel clears the value of the "tree_level" field.
func (u *OrgDeptUpsertBulk) ClearTreeLevel() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeLevel()
	})
}

// SetTreeLeft sets the "tree_left" field.
func (u *OrgDeptUpsertBulk) SetTreeLeft(v int64) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeLeft(v)
	})
}

// AddTreeLeft adds v to the "tree_left" field.
func (u *OrgDeptUpsertBulk) AddTreeLeft(v int64) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeLeft(v)
	})
}

// UpdateTreeLeft sets the "tree_left" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateTreeLeft() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeLeft()
	})
}

// ClearTreeLeft clears the value of the "tree_left" field.
func (u *OrgDeptUpsertBulk) ClearTreeLeft() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeLeft()
	})
}

// SetTreeRight sets the "tree_right" field.
func (u *OrgDeptUpsertBulk) SetTreeRight(v int64) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreeRight(v)
	})
}

// AddTreeRight adds v to the "tree_right" field.
func (u *OrgDeptUpsertBulk) AddTreeRight(v int64) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.AddTreeRight(v)
	})
}

// UpdateTreeRight sets the "tree_right" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateTreeRight() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreeRight()
	})
}

// ClearTreeRight clears the value of the "tree_right" field.
func (u *OrgDeptUpsertBulk) ClearTreeRight() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreeRight()
	})
}

// SetIsLeaf sets the "is_leaf" field.
func (u *OrgDeptUpsertBulk) SetIsLeaf(v bool) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsLeaf(v)
	})
}

// UpdateIsLeaf sets the "is_leaf" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateIsLeaf() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsLeaf()
	})
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (u *OrgDeptUpsertBulk) ClearIsLeaf() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearIsLeaf()
	})
}

// SetTreePath sets the "tree_path" field.
func (u *OrgDeptUpsertBulk) SetTreePath(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetTreePath(v)
	})
}

// UpdateTreePath sets the "tree_path" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateTreePath() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateTreePath()
	})
}

// ClearTreePath clears the value of the "tree_path" field.
func (u *OrgDeptUpsertBulk) ClearTreePath() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearTreePath()
	})
}

// SetName sets the "name" field.
func (u *OrgDeptUpsertBulk) SetName(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateName() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrgDeptUpsertBulk) ClearName() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearName()
	})
}

// SetCode sets the "code" field.
func (u *OrgDeptUpsertBulk) SetCode(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateCode() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgDeptUpsertBulk) ClearCode() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearCode()
	})
}

// SetMergeName sets the "merge_name" field.
func (u *OrgDeptUpsertBulk) SetMergeName(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetMergeName(v)
	})
}

// UpdateMergeName sets the "merge_name" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateMergeName() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateMergeName()
	})
}

// ClearMergeName clears the value of the "merge_name" field.
func (u *OrgDeptUpsertBulk) ClearMergeName() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearMergeName()
	})
}

// SetOrgID sets the "org_id" field.
func (u *OrgDeptUpsertBulk) SetOrgID(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateOrgID() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *OrgDeptUpsertBulk) ClearOrgID() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearOrgID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrgDeptUpsertBulk) SetParentID(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateParentID() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrgDeptUpsertBulk) ClearParentID() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearParentID()
	})
}

// SetIsReal sets the "is_real" field.
func (u *OrgDeptUpsertBulk) SetIsReal(v bool) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsReal(v)
	})
}

// UpdateIsReal sets the "is_real" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateIsReal() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsReal()
	})
}

// ClearIsReal clears the value of the "is_real" field.
func (u *OrgDeptUpsertBulk) ClearIsReal() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearIsReal()
	})
}

// SetIsShow sets the "is_show" field.
func (u *OrgDeptUpsertBulk) SetIsShow(v bool) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetIsShow(v)
	})
}

// UpdateIsShow sets the "is_show" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateIsShow() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateIsShow()
	})
}

// ClearIsShow clears the value of the "is_show" field.
func (u *OrgDeptUpsertBulk) ClearIsShow() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearIsShow()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgDeptUpsertBulk) SetCreator(v string) *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgDeptUpsertBulk) UpdateCreator() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgDeptUpsertBulk) ClearCreator() *OrgDeptUpsertBulk {
	return u.Update(func(s *OrgDeptUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgDeptUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entscheme: OnConflict was set for builder %d. Set it on the OrgDeptCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entscheme: missing options for OrgDeptCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgDeptUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
