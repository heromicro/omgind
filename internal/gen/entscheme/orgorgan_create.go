// Code generated by ent, DO NOT EDIT.

package entscheme

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgdept"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgorgan"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgposition"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgstaff"
	"github.com/heromicro/omgind/internal/gen/entscheme/sysaddress"
)

// OrgOrganCreate is the builder for creating a OrgOrgan entity.
type OrgOrganCreate struct {
	config
	mutation *OrgOrganMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsDel sets the "is_del" field.
func (ooc *OrgOrganCreate) SetIsDel(b bool) *OrgOrganCreate {
	ooc.mutation.SetIsDel(b)
	return ooc
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableIsDel(b *bool) *OrgOrganCreate {
	if b != nil {
		ooc.SetIsDel(*b)
	}
	return ooc
}

// SetSort sets the "sort" field.
func (ooc *OrgOrganCreate) SetSort(i int32) *OrgOrganCreate {
	ooc.mutation.SetSort(i)
	return ooc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableSort(i *int32) *OrgOrganCreate {
	if i != nil {
		ooc.SetSort(*i)
	}
	return ooc
}

// SetCreatedAt sets the "created_at" field.
func (ooc *OrgOrganCreate) SetCreatedAt(t time.Time) *OrgOrganCreate {
	ooc.mutation.SetCreatedAt(t)
	return ooc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableCreatedAt(t *time.Time) *OrgOrganCreate {
	if t != nil {
		ooc.SetCreatedAt(*t)
	}
	return ooc
}

// SetUpdatedAt sets the "updated_at" field.
func (ooc *OrgOrganCreate) SetUpdatedAt(t time.Time) *OrgOrganCreate {
	ooc.mutation.SetUpdatedAt(t)
	return ooc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableUpdatedAt(t *time.Time) *OrgOrganCreate {
	if t != nil {
		ooc.SetUpdatedAt(*t)
	}
	return ooc
}

// SetDeletedAt sets the "deleted_at" field.
func (ooc *OrgOrganCreate) SetDeletedAt(t time.Time) *OrgOrganCreate {
	ooc.mutation.SetDeletedAt(t)
	return ooc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableDeletedAt(t *time.Time) *OrgOrganCreate {
	if t != nil {
		ooc.SetDeletedAt(*t)
	}
	return ooc
}

// SetIsActive sets the "is_active" field.
func (ooc *OrgOrganCreate) SetIsActive(b bool) *OrgOrganCreate {
	ooc.mutation.SetIsActive(b)
	return ooc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableIsActive(b *bool) *OrgOrganCreate {
	if b != nil {
		ooc.SetIsActive(*b)
	}
	return ooc
}

// SetMemo sets the "memo" field.
func (ooc *OrgOrganCreate) SetMemo(s string) *OrgOrganCreate {
	ooc.mutation.SetMemo(s)
	return ooc
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableMemo(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetMemo(*s)
	}
	return ooc
}

// SetName sets the "name" field.
func (ooc *OrgOrganCreate) SetName(s string) *OrgOrganCreate {
	ooc.mutation.SetName(s)
	return ooc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableName(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetName(*s)
	}
	return ooc
}

// SetSname sets the "sname" field.
func (ooc *OrgOrganCreate) SetSname(s string) *OrgOrganCreate {
	ooc.mutation.SetSname(s)
	return ooc
}

// SetNillableSname sets the "sname" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableSname(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetSname(*s)
	}
	return ooc
}

// SetCode sets the "code" field.
func (ooc *OrgOrganCreate) SetCode(s string) *OrgOrganCreate {
	ooc.mutation.SetCode(s)
	return ooc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableCode(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetCode(*s)
	}
	return ooc
}

// SetIdenNo sets the "iden_no" field.
func (ooc *OrgOrganCreate) SetIdenNo(s string) *OrgOrganCreate {
	ooc.mutation.SetIdenNo(s)
	return ooc
}

// SetNillableIdenNo sets the "iden_no" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableIdenNo(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetIdenNo(*s)
	}
	return ooc
}

// SetOwnerID sets the "owner_id" field.
func (ooc *OrgOrganCreate) SetOwnerID(s string) *OrgOrganCreate {
	ooc.mutation.SetOwnerID(s)
	return ooc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableOwnerID(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetOwnerID(*s)
	}
	return ooc
}

// SetHaddrID sets the "haddr_id" field.
func (ooc *OrgOrganCreate) SetHaddrID(s string) *OrgOrganCreate {
	ooc.mutation.SetHaddrID(s)
	return ooc
}

// SetNillableHaddrID sets the "haddr_id" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableHaddrID(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetHaddrID(*s)
	}
	return ooc
}

// SetCreator sets the "creator" field.
func (ooc *OrgOrganCreate) SetCreator(s string) *OrgOrganCreate {
	ooc.mutation.SetCreator(s)
	return ooc
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableCreator(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetCreator(*s)
	}
	return ooc
}

// SetID sets the "id" field.
func (ooc *OrgOrganCreate) SetID(s string) *OrgOrganCreate {
	ooc.mutation.SetID(s)
	return ooc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ooc *OrgOrganCreate) SetNillableID(s *string) *OrgOrganCreate {
	if s != nil {
		ooc.SetID(*s)
	}
	return ooc
}

// SetHaddr sets the "haddr" edge to the SysAddress entity.
func (ooc *OrgOrganCreate) SetHaddr(s *SysAddress) *OrgOrganCreate {
	return ooc.SetHaddrID(s.ID)
}

// AddDeptIDs adds the "depts" edge to the OrgDept entity by IDs.
func (ooc *OrgOrganCreate) AddDeptIDs(ids ...string) *OrgOrganCreate {
	ooc.mutation.AddDeptIDs(ids...)
	return ooc
}

// AddDepts adds the "depts" edges to the OrgDept entity.
func (ooc *OrgOrganCreate) AddDepts(o ...*OrgDept) *OrgOrganCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ooc.AddDeptIDs(ids...)
}

// AddStaffIDs adds the "staffs" edge to the OrgStaff entity by IDs.
func (ooc *OrgOrganCreate) AddStaffIDs(ids ...string) *OrgOrganCreate {
	ooc.mutation.AddStaffIDs(ids...)
	return ooc
}

// AddStaffs adds the "staffs" edges to the OrgStaff entity.
func (ooc *OrgOrganCreate) AddStaffs(o ...*OrgStaff) *OrgOrganCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ooc.AddStaffIDs(ids...)
}

// AddPositionIDs adds the "positions" edge to the OrgPosition entity by IDs.
func (ooc *OrgOrganCreate) AddPositionIDs(ids ...string) *OrgOrganCreate {
	ooc.mutation.AddPositionIDs(ids...)
	return ooc
}

// AddPositions adds the "positions" edges to the OrgPosition entity.
func (ooc *OrgOrganCreate) AddPositions(o ...*OrgPosition) *OrgOrganCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ooc.AddPositionIDs(ids...)
}

// Mutation returns the OrgOrganMutation object of the builder.
func (ooc *OrgOrganCreate) Mutation() *OrgOrganMutation {
	return ooc.mutation
}

// Save creates the OrgOrgan in the database.
func (ooc *OrgOrganCreate) Save(ctx context.Context) (*OrgOrgan, error) {
	ooc.defaults()
	return withHooks(ctx, ooc.sqlSave, ooc.mutation, ooc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ooc *OrgOrganCreate) SaveX(ctx context.Context) *OrgOrgan {
	v, err := ooc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ooc *OrgOrganCreate) Exec(ctx context.Context) error {
	_, err := ooc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ooc *OrgOrganCreate) ExecX(ctx context.Context) {
	if err := ooc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ooc *OrgOrganCreate) defaults() {
	if _, ok := ooc.mutation.IsDel(); !ok {
		v := orgorgan.DefaultIsDel
		ooc.mutation.SetIsDel(v)
	}
	if _, ok := ooc.mutation.Sort(); !ok {
		v := orgorgan.DefaultSort
		ooc.mutation.SetSort(v)
	}
	if _, ok := ooc.mutation.CreatedAt(); !ok {
		v := orgorgan.DefaultCreatedAt()
		ooc.mutation.SetCreatedAt(v)
	}
	if _, ok := ooc.mutation.UpdatedAt(); !ok {
		v := orgorgan.DefaultUpdatedAt()
		ooc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ooc.mutation.IsActive(); !ok {
		v := orgorgan.DefaultIsActive
		ooc.mutation.SetIsActive(v)
	}
	if _, ok := ooc.mutation.Memo(); !ok {
		v := orgorgan.DefaultMemo
		ooc.mutation.SetMemo(v)
	}
	if _, ok := ooc.mutation.ID(); !ok {
		v := orgorgan.DefaultID()
		ooc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ooc *OrgOrganCreate) check() error {
	if _, ok := ooc.mutation.IsDel(); !ok {
		return &ValidationError{Name: "is_del", err: errors.New(`entscheme: missing required field "OrgOrgan.is_del"`)}
	}
	if _, ok := ooc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`entscheme: missing required field "OrgOrgan.sort"`)}
	}
	if _, ok := ooc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`entscheme: missing required field "OrgOrgan.is_active"`)}
	}
	if v, ok := ooc.mutation.Memo(); ok {
		if err := orgorgan.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.memo": %w`, err)}
		}
	}
	if v, ok := ooc.mutation.Name(); ok {
		if err := orgorgan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.name": %w`, err)}
		}
	}
	if v, ok := ooc.mutation.Sname(); ok {
		if err := orgorgan.SnameValidator(v); err != nil {
			return &ValidationError{Name: "sname", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.sname": %w`, err)}
		}
	}
	if v, ok := ooc.mutation.Code(); ok {
		if err := orgorgan.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.code": %w`, err)}
		}
	}
	if v, ok := ooc.mutation.IdenNo(); ok {
		if err := orgorgan.IdenNoValidator(v); err != nil {
			return &ValidationError{Name: "iden_no", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.iden_no": %w`, err)}
		}
	}
	if v, ok := ooc.mutation.OwnerID(); ok {
		if err := orgorgan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.owner_id": %w`, err)}
		}
	}
	if v, ok := ooc.mutation.HaddrID(); ok {
		if err := orgorgan.HaddrIDValidator(v); err != nil {
			return &ValidationError{Name: "haddr_id", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.haddr_id": %w`, err)}
		}
	}
	if v, ok := ooc.mutation.ID(); ok {
		if err := orgorgan.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entscheme: validator failed for field "OrgOrgan.id": %w`, err)}
		}
	}
	return nil
}

func (ooc *OrgOrganCreate) sqlSave(ctx context.Context) (*OrgOrgan, error) {
	if err := ooc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ooc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ooc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgOrgan.ID type: %T", _spec.ID.Value)
		}
	}
	ooc.mutation.id = &_node.ID
	ooc.mutation.done = true
	return _node, nil
}

func (ooc *OrgOrganCreate) createSpec() (*OrgOrgan, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgOrgan{config: ooc.config}
		_spec = sqlgraph.NewCreateSpec(orgorgan.Table, sqlgraph.NewFieldSpec(orgorgan.FieldID, field.TypeString))
	)
	_spec.OnConflict = ooc.conflict
	if id, ok := ooc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ooc.mutation.IsDel(); ok {
		_spec.SetField(orgorgan.FieldIsDel, field.TypeBool, value)
		_node.IsDel = value
	}
	if value, ok := ooc.mutation.Sort(); ok {
		_spec.SetField(orgorgan.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := ooc.mutation.CreatedAt(); ok {
		_spec.SetField(orgorgan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := ooc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgorgan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := ooc.mutation.DeletedAt(); ok {
		_spec.SetField(orgorgan.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ooc.mutation.IsActive(); ok {
		_spec.SetField(orgorgan.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ooc.mutation.Memo(); ok {
		_spec.SetField(orgorgan.FieldMemo, field.TypeString, value)
		_node.Memo = &value
	}
	if value, ok := ooc.mutation.Name(); ok {
		_spec.SetField(orgorgan.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := ooc.mutation.Sname(); ok {
		_spec.SetField(orgorgan.FieldSname, field.TypeString, value)
		_node.Sname = &value
	}
	if value, ok := ooc.mutation.Code(); ok {
		_spec.SetField(orgorgan.FieldCode, field.TypeString, value)
		_node.Code = &value
	}
	if value, ok := ooc.mutation.IdenNo(); ok {
		_spec.SetField(orgorgan.FieldIdenNo, field.TypeString, value)
		_node.IdenNo = &value
	}
	if value, ok := ooc.mutation.OwnerID(); ok {
		_spec.SetField(orgorgan.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = &value
	}
	if value, ok := ooc.mutation.Creator(); ok {
		_spec.SetField(orgorgan.FieldCreator, field.TypeString, value)
		_node.Creator = &value
	}
	if nodes := ooc.mutation.HaddrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orgorgan.HaddrTable,
			Columns: []string{orgorgan.HaddrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysaddress.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.HaddrID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ooc.mutation.DeptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.DeptsTable,
			Columns: []string{orgorgan.DeptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgdept.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ooc.mutation.StaffsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.StaffsTable,
			Columns: []string{orgorgan.StaffsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ooc.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgorgan.PositionsTable,
			Columns: []string{orgorgan.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgposition.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgOrgan.Create().
//		SetIsDel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgOrganUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (ooc *OrgOrganCreate) OnConflict(opts ...sql.ConflictOption) *OrgOrganUpsertOne {
	ooc.conflict = opts
	return &OrgOrganUpsertOne{
		create: ooc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgOrgan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ooc *OrgOrganCreate) OnConflictColumns(columns ...string) *OrgOrganUpsertOne {
	ooc.conflict = append(ooc.conflict, sql.ConflictColumns(columns...))
	return &OrgOrganUpsertOne{
		create: ooc,
	}
}

type (
	// OrgOrganUpsertOne is the builder for "upsert"-ing
	//  one OrgOrgan node.
	OrgOrganUpsertOne struct {
		create *OrgOrganCreate
	}

	// OrgOrganUpsert is the "OnConflict" setter.
	OrgOrganUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsDel sets the "is_del" field.
func (u *OrgOrganUpsert) SetIsDel(v bool) *OrgOrganUpsert {
	u.Set(orgorgan.FieldIsDel, v)
	return u
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateIsDel() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldIsDel)
	return u
}

// SetSort sets the "sort" field.
func (u *OrgOrganUpsert) SetSort(v int32) *OrgOrganUpsert {
	u.Set(orgorgan.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateSort() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *OrgOrganUpsert) AddSort(v int32) *OrgOrganUpsert {
	u.Add(orgorgan.FieldSort, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgOrganUpsert) SetUpdatedAt(v time.Time) *OrgOrganUpsert {
	u.Set(orgorgan.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateUpdatedAt() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgOrganUpsert) ClearUpdatedAt() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgOrganUpsert) SetDeletedAt(v time.Time) *OrgOrganUpsert {
	u.Set(orgorgan.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateDeletedAt() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgOrganUpsert) ClearDeletedAt() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldDeletedAt)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *OrgOrganUpsert) SetIsActive(v bool) *OrgOrganUpsert {
	u.Set(orgorgan.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateIsActive() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldIsActive)
	return u
}

// SetMemo sets the "memo" field.
func (u *OrgOrganUpsert) SetMemo(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateMemo() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldMemo)
	return u
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgOrganUpsert) ClearMemo() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldMemo)
	return u
}

// SetName sets the "name" field.
func (u *OrgOrganUpsert) SetName(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateName() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *OrgOrganUpsert) ClearName() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldName)
	return u
}

// SetSname sets the "sname" field.
func (u *OrgOrganUpsert) SetSname(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldSname, v)
	return u
}

// UpdateSname sets the "sname" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateSname() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldSname)
	return u
}

// ClearSname clears the value of the "sname" field.
func (u *OrgOrganUpsert) ClearSname() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldSname)
	return u
}

// SetCode sets the "code" field.
func (u *OrgOrganUpsert) SetCode(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateCode() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldCode)
	return u
}

// ClearCode clears the value of the "code" field.
func (u *OrgOrganUpsert) ClearCode() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldCode)
	return u
}

// SetIdenNo sets the "iden_no" field.
func (u *OrgOrganUpsert) SetIdenNo(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldIdenNo, v)
	return u
}

// UpdateIdenNo sets the "iden_no" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateIdenNo() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldIdenNo)
	return u
}

// ClearIdenNo clears the value of the "iden_no" field.
func (u *OrgOrganUpsert) ClearIdenNo() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldIdenNo)
	return u
}

// SetOwnerID sets the "owner_id" field.
func (u *OrgOrganUpsert) SetOwnerID(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldOwnerID, v)
	return u
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateOwnerID() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldOwnerID)
	return u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrgOrganUpsert) ClearOwnerID() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldOwnerID)
	return u
}

// SetHaddrID sets the "haddr_id" field.
func (u *OrgOrganUpsert) SetHaddrID(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldHaddrID, v)
	return u
}

// UpdateHaddrID sets the "haddr_id" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateHaddrID() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldHaddrID)
	return u
}

// ClearHaddrID clears the value of the "haddr_id" field.
func (u *OrgOrganUpsert) ClearHaddrID() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldHaddrID)
	return u
}

// SetCreator sets the "creator" field.
func (u *OrgOrganUpsert) SetCreator(v string) *OrgOrganUpsert {
	u.Set(orgorgan.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgOrganUpsert) UpdateCreator() *OrgOrganUpsert {
	u.SetExcluded(orgorgan.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgOrganUpsert) ClearCreator() *OrgOrganUpsert {
	u.SetNull(orgorgan.FieldCreator)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrgOrgan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgorgan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgOrganUpsertOne) UpdateNewValues() *OrgOrganUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orgorgan.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orgorgan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgOrgan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrgOrganUpsertOne) Ignore() *OrgOrganUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgOrganUpsertOne) DoNothing() *OrgOrganUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgOrganCreate.OnConflict
// documentation for more info.
func (u *OrgOrganUpsertOne) Update(set func(*OrgOrganUpsert)) *OrgOrganUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgOrganUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgOrganUpsertOne) SetIsDel(v bool) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateIsDel() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgOrganUpsertOne) SetSort(v int32) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgOrganUpsertOne) AddSort(v int32) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateSort() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgOrganUpsertOne) SetUpdatedAt(v time.Time) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateUpdatedAt() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgOrganUpsertOne) ClearUpdatedAt() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgOrganUpsertOne) SetDeletedAt(v time.Time) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateDeletedAt() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgOrganUpsertOne) ClearDeletedAt() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgOrganUpsertOne) SetIsActive(v bool) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateIsActive() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgOrganUpsertOne) SetMemo(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateMemo() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgOrganUpsertOne) ClearMemo() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearMemo()
	})
}

// SetName sets the "name" field.
func (u *OrgOrganUpsertOne) SetName(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateName() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrgOrganUpsertOne) ClearName() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearName()
	})
}

// SetSname sets the "sname" field.
func (u *OrgOrganUpsertOne) SetSname(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetSname(v)
	})
}

// UpdateSname sets the "sname" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateSname() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateSname()
	})
}

// ClearSname clears the value of the "sname" field.
func (u *OrgOrganUpsertOne) ClearSname() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearSname()
	})
}

// SetCode sets the "code" field.
func (u *OrgOrganUpsertOne) SetCode(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateCode() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgOrganUpsertOne) ClearCode() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearCode()
	})
}

// SetIdenNo sets the "iden_no" field.
func (u *OrgOrganUpsertOne) SetIdenNo(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetIdenNo(v)
	})
}

// UpdateIdenNo sets the "iden_no" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateIdenNo() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateIdenNo()
	})
}

// ClearIdenNo clears the value of the "iden_no" field.
func (u *OrgOrganUpsertOne) ClearIdenNo() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearIdenNo()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *OrgOrganUpsertOne) SetOwnerID(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateOwnerID() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrgOrganUpsertOne) ClearOwnerID() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearOwnerID()
	})
}

// SetHaddrID sets the "haddr_id" field.
func (u *OrgOrganUpsertOne) SetHaddrID(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetHaddrID(v)
	})
}

// UpdateHaddrID sets the "haddr_id" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateHaddrID() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateHaddrID()
	})
}

// ClearHaddrID clears the value of the "haddr_id" field.
func (u *OrgOrganUpsertOne) ClearHaddrID() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearHaddrID()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgOrganUpsertOne) SetCreator(v string) *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgOrganUpsertOne) UpdateCreator() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgOrganUpsertOne) ClearCreator() *OrgOrganUpsertOne {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgOrganUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entscheme: missing options for OrgOrganCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgOrganUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrgOrganUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entscheme: OrgOrganUpsertOne.ID is not supported by MySQL driver. Use OrgOrganUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrgOrganUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrgOrganCreateBulk is the builder for creating many OrgOrgan entities in bulk.
type OrgOrganCreateBulk struct {
	config
	builders []*OrgOrganCreate
	conflict []sql.ConflictOption
}

// Save creates the OrgOrgan entities in the database.
func (oocb *OrgOrganCreateBulk) Save(ctx context.Context) ([]*OrgOrgan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oocb.builders))
	nodes := make([]*OrgOrgan, len(oocb.builders))
	mutators := make([]Mutator, len(oocb.builders))
	for i := range oocb.builders {
		func(i int, root context.Context) {
			builder := oocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgOrganMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oocb *OrgOrganCreateBulk) SaveX(ctx context.Context) []*OrgOrgan {
	v, err := oocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oocb *OrgOrganCreateBulk) Exec(ctx context.Context) error {
	_, err := oocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oocb *OrgOrganCreateBulk) ExecX(ctx context.Context) {
	if err := oocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrgOrgan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrgOrganUpsert) {
//			SetIsDel(v+v).
//		}).
//		Exec(ctx)
func (oocb *OrgOrganCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrgOrganUpsertBulk {
	oocb.conflict = opts
	return &OrgOrganUpsertBulk{
		create: oocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrgOrgan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oocb *OrgOrganCreateBulk) OnConflictColumns(columns ...string) *OrgOrganUpsertBulk {
	oocb.conflict = append(oocb.conflict, sql.ConflictColumns(columns...))
	return &OrgOrganUpsertBulk{
		create: oocb,
	}
}

// OrgOrganUpsertBulk is the builder for "upsert"-ing
// a bulk of OrgOrgan nodes.
type OrgOrganUpsertBulk struct {
	create *OrgOrganCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrgOrgan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orgorgan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrgOrganUpsertBulk) UpdateNewValues() *OrgOrganUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orgorgan.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orgorgan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrgOrgan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrgOrganUpsertBulk) Ignore() *OrgOrganUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrgOrganUpsertBulk) DoNothing() *OrgOrganUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrgOrganCreateBulk.OnConflict
// documentation for more info.
func (u *OrgOrganUpsertBulk) Update(set func(*OrgOrganUpsert)) *OrgOrganUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrgOrganUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsDel sets the "is_del" field.
func (u *OrgOrganUpsertBulk) SetIsDel(v bool) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetIsDel(v)
	})
}

// UpdateIsDel sets the "is_del" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateIsDel() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateIsDel()
	})
}

// SetSort sets the "sort" field.
func (u *OrgOrganUpsertBulk) SetSort(v int32) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *OrgOrganUpsertBulk) AddSort(v int32) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateSort() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateSort()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrgOrganUpsertBulk) SetUpdatedAt(v time.Time) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateUpdatedAt() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OrgOrganUpsertBulk) ClearUpdatedAt() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrgOrganUpsertBulk) SetDeletedAt(v time.Time) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateDeletedAt() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrgOrganUpsertBulk) ClearDeletedAt() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearDeletedAt()
	})
}

// SetIsActive sets the "is_active" field.
func (u *OrgOrganUpsertBulk) SetIsActive(v bool) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateIsActive() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateIsActive()
	})
}

// SetMemo sets the "memo" field.
func (u *OrgOrganUpsertBulk) SetMemo(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateMemo() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateMemo()
	})
}

// ClearMemo clears the value of the "memo" field.
func (u *OrgOrganUpsertBulk) ClearMemo() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearMemo()
	})
}

// SetName sets the "name" field.
func (u *OrgOrganUpsertBulk) SetName(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateName() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OrgOrganUpsertBulk) ClearName() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearName()
	})
}

// SetSname sets the "sname" field.
func (u *OrgOrganUpsertBulk) SetSname(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetSname(v)
	})
}

// UpdateSname sets the "sname" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateSname() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateSname()
	})
}

// ClearSname clears the value of the "sname" field.
func (u *OrgOrganUpsertBulk) ClearSname() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearSname()
	})
}

// SetCode sets the "code" field.
func (u *OrgOrganUpsertBulk) SetCode(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateCode() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateCode()
	})
}

// ClearCode clears the value of the "code" field.
func (u *OrgOrganUpsertBulk) ClearCode() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearCode()
	})
}

// SetIdenNo sets the "iden_no" field.
func (u *OrgOrganUpsertBulk) SetIdenNo(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetIdenNo(v)
	})
}

// UpdateIdenNo sets the "iden_no" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateIdenNo() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateIdenNo()
	})
}

// ClearIdenNo clears the value of the "iden_no" field.
func (u *OrgOrganUpsertBulk) ClearIdenNo() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearIdenNo()
	})
}

// SetOwnerID sets the "owner_id" field.
func (u *OrgOrganUpsertBulk) SetOwnerID(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetOwnerID(v)
	})
}

// UpdateOwnerID sets the "owner_id" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateOwnerID() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateOwnerID()
	})
}

// ClearOwnerID clears the value of the "owner_id" field.
func (u *OrgOrganUpsertBulk) ClearOwnerID() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearOwnerID()
	})
}

// SetHaddrID sets the "haddr_id" field.
func (u *OrgOrganUpsertBulk) SetHaddrID(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetHaddrID(v)
	})
}

// UpdateHaddrID sets the "haddr_id" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateHaddrID() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateHaddrID()
	})
}

// ClearHaddrID clears the value of the "haddr_id" field.
func (u *OrgOrganUpsertBulk) ClearHaddrID() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearHaddrID()
	})
}

// SetCreator sets the "creator" field.
func (u *OrgOrganUpsertBulk) SetCreator(v string) *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrgOrganUpsertBulk) UpdateCreator() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrgOrganUpsertBulk) ClearCreator() *OrgOrganUpsertBulk {
	return u.Update(func(s *OrgOrganUpsert) {
		s.ClearCreator()
	})
}

// Exec executes the query.
func (u *OrgOrganUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entscheme: OnConflict was set for builder %d. Set it on the OrgOrganCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entscheme: missing options for OrgOrganCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrgOrganUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
