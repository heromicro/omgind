// Code generated by ent, DO NOT EDIT.

package entscheme

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/entscheme/orgstaff"
	"github.com/heromicro/omgind/internal/gen/entscheme/predicate"
)

// OrgStaffDelete is the builder for deleting a OrgStaff entity.
type OrgStaffDelete struct {
	config
	hooks    []Hook
	mutation *OrgStaffMutation
}

// Where appends a list predicates to the OrgStaffDelete builder.
func (osd *OrgStaffDelete) Where(ps ...predicate.OrgStaff) *OrgStaffDelete {
	osd.mutation.Where(ps...)
	return osd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (osd *OrgStaffDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, osd.sqlExec, osd.mutation, osd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (osd *OrgStaffDelete) ExecX(ctx context.Context) int {
	n, err := osd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (osd *OrgStaffDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(orgstaff.Table, sqlgraph.NewFieldSpec(orgstaff.FieldID, field.TypeString))
	if ps := osd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, osd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	osd.mutation.done = true
	return affected, err
}

// OrgStaffDeleteOne is the builder for deleting a single OrgStaff entity.
type OrgStaffDeleteOne struct {
	osd *OrgStaffDelete
}

// Where appends a list predicates to the OrgStaffDelete builder.
func (osdo *OrgStaffDeleteOne) Where(ps ...predicate.OrgStaff) *OrgStaffDeleteOne {
	osdo.osd.mutation.Where(ps...)
	return osdo
}

// Exec executes the deletion query.
func (osdo *OrgStaffDeleteOne) Exec(ctx context.Context) error {
	n, err := osdo.osd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{orgstaff.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (osdo *OrgStaffDeleteOne) ExecX(ctx context.Context) {
	if err := osdo.Exec(ctx); err != nil {
		panic(err)
	}
}
