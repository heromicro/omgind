// Code generated by ent, DO NOT EDIT.

package entscheme

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/heromicro/omgind/internal/gen/entscheme/predicate"
	"github.com/heromicro/omgind/internal/gen/entscheme/sysmenu"
)

// SysMenuUpdate is the builder for updating SysMenu entities.
type SysMenuUpdate struct {
	config
	hooks     []Hook
	mutation  *SysMenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smu *SysMenuUpdate) Where(ps ...predicate.SysMenu) *SysMenuUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetIsDel sets the "is_del" field.
func (smu *SysMenuUpdate) SetIsDel(b bool) *SysMenuUpdate {
	smu.mutation.SetIsDel(b)
	return smu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsDel(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetIsDel(*b)
	}
	return smu
}

// SetMemo sets the "memo" field.
func (smu *SysMenuUpdate) SetMemo(s string) *SysMenuUpdate {
	smu.mutation.SetMemo(s)
	return smu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableMemo(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetMemo(*s)
	}
	return smu
}

// ClearMemo clears the value of the "memo" field.
func (smu *SysMenuUpdate) ClearMemo() *SysMenuUpdate {
	smu.mutation.ClearMemo()
	return smu
}

// SetSort sets the "sort" field.
func (smu *SysMenuUpdate) SetSort(i int32) *SysMenuUpdate {
	smu.mutation.ResetSort()
	smu.mutation.SetSort(i)
	return smu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableSort(i *int32) *SysMenuUpdate {
	if i != nil {
		smu.SetSort(*i)
	}
	return smu
}

// AddSort adds i to the "sort" field.
func (smu *SysMenuUpdate) AddSort(i int32) *SysMenuUpdate {
	smu.mutation.AddSort(i)
	return smu
}

// SetUpdatedAt sets the "updated_at" field.
func (smu *SysMenuUpdate) SetUpdatedAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetUpdatedAt(t)
	return smu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smu *SysMenuUpdate) ClearUpdatedAt() *SysMenuUpdate {
	smu.mutation.ClearUpdatedAt()
	return smu
}

// SetDeletedAt sets the "deleted_at" field.
func (smu *SysMenuUpdate) SetDeletedAt(t time.Time) *SysMenuUpdate {
	smu.mutation.SetDeletedAt(t)
	return smu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableDeletedAt(t *time.Time) *SysMenuUpdate {
	if t != nil {
		smu.SetDeletedAt(*t)
	}
	return smu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (smu *SysMenuUpdate) ClearDeletedAt() *SysMenuUpdate {
	smu.mutation.ClearDeletedAt()
	return smu
}

// SetIsActive sets the "is_active" field.
func (smu *SysMenuUpdate) SetIsActive(b bool) *SysMenuUpdate {
	smu.mutation.SetIsActive(b)
	return smu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsActive(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetIsActive(*b)
	}
	return smu
}

// SetName sets the "name" field.
func (smu *SysMenuUpdate) SetName(s string) *SysMenuUpdate {
	smu.mutation.SetName(s)
	return smu
}

// SetIcon sets the "icon" field.
func (smu *SysMenuUpdate) SetIcon(s string) *SysMenuUpdate {
	smu.mutation.SetIcon(s)
	return smu
}

// SetRouter sets the "router" field.
func (smu *SysMenuUpdate) SetRouter(s string) *SysMenuUpdate {
	smu.mutation.SetRouter(s)
	return smu
}

// SetIsShow sets the "is_show" field.
func (smu *SysMenuUpdate) SetIsShow(b bool) *SysMenuUpdate {
	smu.mutation.SetIsShow(b)
	return smu
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsShow(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetIsShow(*b)
	}
	return smu
}

// SetParentID sets the "parent_id" field.
func (smu *SysMenuUpdate) SetParentID(s string) *SysMenuUpdate {
	smu.mutation.SetParentID(s)
	return smu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableParentID(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetParentID(*s)
	}
	return smu
}

// ClearParentID clears the value of the "parent_id" field.
func (smu *SysMenuUpdate) ClearParentID() *SysMenuUpdate {
	smu.mutation.ClearParentID()
	return smu
}

// SetParentPath sets the "parent_path" field.
func (smu *SysMenuUpdate) SetParentPath(s string) *SysMenuUpdate {
	smu.mutation.SetParentPath(s)
	return smu
}

// SetNillableParentPath sets the "parent_path" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableParentPath(s *string) *SysMenuUpdate {
	if s != nil {
		smu.SetParentPath(*s)
	}
	return smu
}

// ClearParentPath clears the value of the "parent_path" field.
func (smu *SysMenuUpdate) ClearParentPath() *SysMenuUpdate {
	smu.mutation.ClearParentPath()
	return smu
}

// SetLevel sets the "level" field.
func (smu *SysMenuUpdate) SetLevel(i int32) *SysMenuUpdate {
	smu.mutation.ResetLevel()
	smu.mutation.SetLevel(i)
	return smu
}

// AddLevel adds i to the "level" field.
func (smu *SysMenuUpdate) AddLevel(i int32) *SysMenuUpdate {
	smu.mutation.AddLevel(i)
	return smu
}

// SetIsLeaf sets the "is_leaf" field.
func (smu *SysMenuUpdate) SetIsLeaf(b bool) *SysMenuUpdate {
	smu.mutation.SetIsLeaf(b)
	return smu
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableIsLeaf(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetIsLeaf(*b)
	}
	return smu
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (smu *SysMenuUpdate) ClearIsLeaf() *SysMenuUpdate {
	smu.mutation.ClearIsLeaf()
	return smu
}

// SetOpenBlank sets the "open_blank" field.
func (smu *SysMenuUpdate) SetOpenBlank(b bool) *SysMenuUpdate {
	smu.mutation.SetOpenBlank(b)
	return smu
}

// SetNillableOpenBlank sets the "open_blank" field if the given value is not nil.
func (smu *SysMenuUpdate) SetNillableOpenBlank(b *bool) *SysMenuUpdate {
	if b != nil {
		smu.SetOpenBlank(*b)
	}
	return smu
}

// ClearOpenBlank clears the value of the "open_blank" field.
func (smu *SysMenuUpdate) ClearOpenBlank() *SysMenuUpdate {
	smu.mutation.ClearOpenBlank()
	return smu
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) SetParent(s *SysMenu) *SysMenuUpdate {
	return smu.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysMenu entity by IDs.
func (smu *SysMenuUpdate) AddChildIDs(ids ...string) *SysMenuUpdate {
	smu.mutation.AddChildIDs(ids...)
	return smu
}

// AddChildren adds the "children" edges to the SysMenu entity.
func (smu *SysMenuUpdate) AddChildren(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.AddChildIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smu *SysMenuUpdate) Mutation() *SysMenuMutation {
	return smu.mutation
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smu *SysMenuUpdate) ClearParent() *SysMenuUpdate {
	smu.mutation.ClearParent()
	return smu
}

// ClearChildren clears all "children" edges to the SysMenu entity.
func (smu *SysMenuUpdate) ClearChildren() *SysMenuUpdate {
	smu.mutation.ClearChildren()
	return smu
}

// RemoveChildIDs removes the "children" edge to SysMenu entities by IDs.
func (smu *SysMenuUpdate) RemoveChildIDs(ids ...string) *SysMenuUpdate {
	smu.mutation.RemoveChildIDs(ids...)
	return smu
}

// RemoveChildren removes "children" edges to SysMenu entities.
func (smu *SysMenuUpdate) RemoveChildren(s ...*SysMenu) *SysMenuUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SysMenuUpdate) Save(ctx context.Context) (int, error) {
	smu.defaults()
	return withHooks(ctx, smu.sqlSave, smu.mutation, smu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SysMenuUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SysMenuUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SysMenuUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smu *SysMenuUpdate) defaults() {
	if _, ok := smu.mutation.UpdatedAt(); !ok && !smu.mutation.UpdatedAtCleared() {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *SysMenuUpdate) check() error {
	if v, ok := smu.mutation.Memo(); ok {
		if err := sysmenu.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.memo": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Name(); ok {
		if err := sysmenu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.name": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Icon(); ok {
		if err := sysmenu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.icon": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Router(); ok {
		if err := sysmenu.RouterValidator(v); err != nil {
			return &ValidationError{Name: "router", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.router": %w`, err)}
		}
	}
	if v, ok := smu.mutation.ParentID(); ok {
		if err := sysmenu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.parent_id": %w`, err)}
		}
	}
	if v, ok := smu.mutation.ParentPath(); ok {
		if err := sysmenu.ParentPathValidator(v); err != nil {
			return &ValidationError{Name: "parent_path", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.parent_path": %w`, err)}
		}
	}
	if v, ok := smu.mutation.Level(); ok {
		if err := sysmenu.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.level": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smu *SysMenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysMenuUpdate {
	smu.modifiers = append(smu.modifiers, modifiers...)
	return smu
}

func (smu *SysMenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := smu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString))
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.IsDel(); ok {
		_spec.SetField(sysmenu.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := smu.mutation.Memo(); ok {
		_spec.SetField(sysmenu.FieldMemo, field.TypeString, value)
	}
	if smu.mutation.MemoCleared() {
		_spec.ClearField(sysmenu.FieldMemo, field.TypeString)
	}
	if value, ok := smu.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.AddedSort(); ok {
		_spec.AddField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if smu.mutation.CreatedAtCleared() {
		_spec.ClearField(sysmenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if smu.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.DeletedAt(); ok {
		_spec.SetField(sysmenu.FieldDeletedAt, field.TypeTime, value)
	}
	if smu.mutation.DeletedAtCleared() {
		_spec.ClearField(sysmenu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := smu.mutation.IsActive(); ok {
		_spec.SetField(sysmenu.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := smu.mutation.Name(); ok {
		_spec.SetField(sysmenu.FieldName, field.TypeString, value)
	}
	if value, ok := smu.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
	}
	if value, ok := smu.mutation.Router(); ok {
		_spec.SetField(sysmenu.FieldRouter, field.TypeString, value)
	}
	if value, ok := smu.mutation.IsShow(); ok {
		_spec.SetField(sysmenu.FieldIsShow, field.TypeBool, value)
	}
	if value, ok := smu.mutation.ParentPath(); ok {
		_spec.SetField(sysmenu.FieldParentPath, field.TypeString, value)
	}
	if smu.mutation.ParentPathCleared() {
		_spec.ClearField(sysmenu.FieldParentPath, field.TypeString)
	}
	if value, ok := smu.mutation.Level(); ok {
		_spec.SetField(sysmenu.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.AddedLevel(); ok {
		_spec.AddField(sysmenu.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := smu.mutation.IsLeaf(); ok {
		_spec.SetField(sysmenu.FieldIsLeaf, field.TypeBool, value)
	}
	if smu.mutation.IsLeafCleared() {
		_spec.ClearField(sysmenu.FieldIsLeaf, field.TypeBool)
	}
	if value, ok := smu.mutation.OpenBlank(); ok {
		_spec.SetField(sysmenu.FieldOpenBlank, field.TypeBool, value)
	}
	if smu.mutation.OpenBlankCleared() {
		_spec.ClearField(sysmenu.FieldOpenBlank, field.TypeBool)
	}
	if smu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !smu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	smu.mutation.done = true
	return n, nil
}

// SysMenuUpdateOne is the builder for updating a single SysMenu entity.
type SysMenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SysMenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetIsDel sets the "is_del" field.
func (smuo *SysMenuUpdateOne) SetIsDel(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetIsDel(b)
	return smuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsDel(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetIsDel(*b)
	}
	return smuo
}

// SetMemo sets the "memo" field.
func (smuo *SysMenuUpdateOne) SetMemo(s string) *SysMenuUpdateOne {
	smuo.mutation.SetMemo(s)
	return smuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableMemo(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetMemo(*s)
	}
	return smuo
}

// ClearMemo clears the value of the "memo" field.
func (smuo *SysMenuUpdateOne) ClearMemo() *SysMenuUpdateOne {
	smuo.mutation.ClearMemo()
	return smuo
}

// SetSort sets the "sort" field.
func (smuo *SysMenuUpdateOne) SetSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.ResetSort()
	smuo.mutation.SetSort(i)
	return smuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableSort(i *int32) *SysMenuUpdateOne {
	if i != nil {
		smuo.SetSort(*i)
	}
	return smuo
}

// AddSort adds i to the "sort" field.
func (smuo *SysMenuUpdateOne) AddSort(i int32) *SysMenuUpdateOne {
	smuo.mutation.AddSort(i)
	return smuo
}

// SetUpdatedAt sets the "updated_at" field.
func (smuo *SysMenuUpdateOne) SetUpdatedAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetUpdatedAt(t)
	return smuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (smuo *SysMenuUpdateOne) ClearUpdatedAt() *SysMenuUpdateOne {
	smuo.mutation.ClearUpdatedAt()
	return smuo
}

// SetDeletedAt sets the "deleted_at" field.
func (smuo *SysMenuUpdateOne) SetDeletedAt(t time.Time) *SysMenuUpdateOne {
	smuo.mutation.SetDeletedAt(t)
	return smuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableDeletedAt(t *time.Time) *SysMenuUpdateOne {
	if t != nil {
		smuo.SetDeletedAt(*t)
	}
	return smuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (smuo *SysMenuUpdateOne) ClearDeletedAt() *SysMenuUpdateOne {
	smuo.mutation.ClearDeletedAt()
	return smuo
}

// SetIsActive sets the "is_active" field.
func (smuo *SysMenuUpdateOne) SetIsActive(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetIsActive(b)
	return smuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsActive(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetIsActive(*b)
	}
	return smuo
}

// SetName sets the "name" field.
func (smuo *SysMenuUpdateOne) SetName(s string) *SysMenuUpdateOne {
	smuo.mutation.SetName(s)
	return smuo
}

// SetIcon sets the "icon" field.
func (smuo *SysMenuUpdateOne) SetIcon(s string) *SysMenuUpdateOne {
	smuo.mutation.SetIcon(s)
	return smuo
}

// SetRouter sets the "router" field.
func (smuo *SysMenuUpdateOne) SetRouter(s string) *SysMenuUpdateOne {
	smuo.mutation.SetRouter(s)
	return smuo
}

// SetIsShow sets the "is_show" field.
func (smuo *SysMenuUpdateOne) SetIsShow(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetIsShow(b)
	return smuo
}

// SetNillableIsShow sets the "is_show" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsShow(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetIsShow(*b)
	}
	return smuo
}

// SetParentID sets the "parent_id" field.
func (smuo *SysMenuUpdateOne) SetParentID(s string) *SysMenuUpdateOne {
	smuo.mutation.SetParentID(s)
	return smuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableParentID(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetParentID(*s)
	}
	return smuo
}

// ClearParentID clears the value of the "parent_id" field.
func (smuo *SysMenuUpdateOne) ClearParentID() *SysMenuUpdateOne {
	smuo.mutation.ClearParentID()
	return smuo
}

// SetParentPath sets the "parent_path" field.
func (smuo *SysMenuUpdateOne) SetParentPath(s string) *SysMenuUpdateOne {
	smuo.mutation.SetParentPath(s)
	return smuo
}

// SetNillableParentPath sets the "parent_path" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableParentPath(s *string) *SysMenuUpdateOne {
	if s != nil {
		smuo.SetParentPath(*s)
	}
	return smuo
}

// ClearParentPath clears the value of the "parent_path" field.
func (smuo *SysMenuUpdateOne) ClearParentPath() *SysMenuUpdateOne {
	smuo.mutation.ClearParentPath()
	return smuo
}

// SetLevel sets the "level" field.
func (smuo *SysMenuUpdateOne) SetLevel(i int32) *SysMenuUpdateOne {
	smuo.mutation.ResetLevel()
	smuo.mutation.SetLevel(i)
	return smuo
}

// AddLevel adds i to the "level" field.
func (smuo *SysMenuUpdateOne) AddLevel(i int32) *SysMenuUpdateOne {
	smuo.mutation.AddLevel(i)
	return smuo
}

// SetIsLeaf sets the "is_leaf" field.
func (smuo *SysMenuUpdateOne) SetIsLeaf(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetIsLeaf(b)
	return smuo
}

// SetNillableIsLeaf sets the "is_leaf" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableIsLeaf(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetIsLeaf(*b)
	}
	return smuo
}

// ClearIsLeaf clears the value of the "is_leaf" field.
func (smuo *SysMenuUpdateOne) ClearIsLeaf() *SysMenuUpdateOne {
	smuo.mutation.ClearIsLeaf()
	return smuo
}

// SetOpenBlank sets the "open_blank" field.
func (smuo *SysMenuUpdateOne) SetOpenBlank(b bool) *SysMenuUpdateOne {
	smuo.mutation.SetOpenBlank(b)
	return smuo
}

// SetNillableOpenBlank sets the "open_blank" field if the given value is not nil.
func (smuo *SysMenuUpdateOne) SetNillableOpenBlank(b *bool) *SysMenuUpdateOne {
	if b != nil {
		smuo.SetOpenBlank(*b)
	}
	return smuo
}

// ClearOpenBlank clears the value of the "open_blank" field.
func (smuo *SysMenuUpdateOne) ClearOpenBlank() *SysMenuUpdateOne {
	smuo.mutation.ClearOpenBlank()
	return smuo
}

// SetParent sets the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) SetParent(s *SysMenu) *SysMenuUpdateOne {
	return smuo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the SysMenu entity by IDs.
func (smuo *SysMenuUpdateOne) AddChildIDs(ids ...string) *SysMenuUpdateOne {
	smuo.mutation.AddChildIDs(ids...)
	return smuo
}

// AddChildren adds the "children" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) AddChildren(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.AddChildIDs(ids...)
}

// Mutation returns the SysMenuMutation object of the builder.
func (smuo *SysMenuUpdateOne) Mutation() *SysMenuMutation {
	return smuo.mutation
}

// ClearParent clears the "parent" edge to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearParent() *SysMenuUpdateOne {
	smuo.mutation.ClearParent()
	return smuo
}

// ClearChildren clears all "children" edges to the SysMenu entity.
func (smuo *SysMenuUpdateOne) ClearChildren() *SysMenuUpdateOne {
	smuo.mutation.ClearChildren()
	return smuo
}

// RemoveChildIDs removes the "children" edge to SysMenu entities by IDs.
func (smuo *SysMenuUpdateOne) RemoveChildIDs(ids ...string) *SysMenuUpdateOne {
	smuo.mutation.RemoveChildIDs(ids...)
	return smuo
}

// RemoveChildren removes "children" edges to SysMenu entities.
func (smuo *SysMenuUpdateOne) RemoveChildren(s ...*SysMenu) *SysMenuUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return smuo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the SysMenuUpdate builder.
func (smuo *SysMenuUpdateOne) Where(ps ...predicate.SysMenu) *SysMenuUpdateOne {
	smuo.mutation.Where(ps...)
	return smuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SysMenuUpdateOne) Select(field string, fields ...string) *SysMenuUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SysMenu entity.
func (smuo *SysMenuUpdateOne) Save(ctx context.Context) (*SysMenu, error) {
	smuo.defaults()
	return withHooks(ctx, smuo.sqlSave, smuo.mutation, smuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) SaveX(ctx context.Context) *SysMenu {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SysMenuUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SysMenuUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smuo *SysMenuUpdateOne) defaults() {
	if _, ok := smuo.mutation.UpdatedAt(); !ok && !smuo.mutation.UpdatedAtCleared() {
		v := sysmenu.UpdateDefaultUpdatedAt()
		smuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *SysMenuUpdateOne) check() error {
	if v, ok := smuo.mutation.Memo(); ok {
		if err := sysmenu.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.memo": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Name(); ok {
		if err := sysmenu.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.name": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Icon(); ok {
		if err := sysmenu.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.icon": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Router(); ok {
		if err := sysmenu.RouterValidator(v); err != nil {
			return &ValidationError{Name: "router", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.router": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.ParentID(); ok {
		if err := sysmenu.ParentIDValidator(v); err != nil {
			return &ValidationError{Name: "parent_id", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.parent_id": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.ParentPath(); ok {
		if err := sysmenu.ParentPathValidator(v); err != nil {
			return &ValidationError{Name: "parent_path", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.parent_path": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.Level(); ok {
		if err := sysmenu.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`entscheme: validator failed for field "SysMenu.level": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (smuo *SysMenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SysMenuUpdateOne {
	smuo.modifiers = append(smuo.modifiers, modifiers...)
	return smuo
}

func (smuo *SysMenuUpdateOne) sqlSave(ctx context.Context) (_node *SysMenu, err error) {
	if err := smuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sysmenu.Table, sysmenu.Columns, sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString))
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entscheme: missing "SysMenu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sysmenu.FieldID)
		for _, f := range fields {
			if !sysmenu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entscheme: invalid field %q for query", f)}
			}
			if f != sysmenu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.IsDel(); ok {
		_spec.SetField(sysmenu.FieldIsDel, field.TypeBool, value)
	}
	if value, ok := smuo.mutation.Memo(); ok {
		_spec.SetField(sysmenu.FieldMemo, field.TypeString, value)
	}
	if smuo.mutation.MemoCleared() {
		_spec.ClearField(sysmenu.FieldMemo, field.TypeString)
	}
	if value, ok := smuo.mutation.Sort(); ok {
		_spec.SetField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.AddedSort(); ok {
		_spec.AddField(sysmenu.FieldSort, field.TypeInt32, value)
	}
	if smuo.mutation.CreatedAtCleared() {
		_spec.ClearField(sysmenu.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sysmenu.FieldUpdatedAt, field.TypeTime, value)
	}
	if smuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(sysmenu.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.DeletedAt(); ok {
		_spec.SetField(sysmenu.FieldDeletedAt, field.TypeTime, value)
	}
	if smuo.mutation.DeletedAtCleared() {
		_spec.ClearField(sysmenu.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := smuo.mutation.IsActive(); ok {
		_spec.SetField(sysmenu.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := smuo.mutation.Name(); ok {
		_spec.SetField(sysmenu.FieldName, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Icon(); ok {
		_spec.SetField(sysmenu.FieldIcon, field.TypeString, value)
	}
	if value, ok := smuo.mutation.Router(); ok {
		_spec.SetField(sysmenu.FieldRouter, field.TypeString, value)
	}
	if value, ok := smuo.mutation.IsShow(); ok {
		_spec.SetField(sysmenu.FieldIsShow, field.TypeBool, value)
	}
	if value, ok := smuo.mutation.ParentPath(); ok {
		_spec.SetField(sysmenu.FieldParentPath, field.TypeString, value)
	}
	if smuo.mutation.ParentPathCleared() {
		_spec.ClearField(sysmenu.FieldParentPath, field.TypeString)
	}
	if value, ok := smuo.mutation.Level(); ok {
		_spec.SetField(sysmenu.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.AddedLevel(); ok {
		_spec.AddField(sysmenu.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := smuo.mutation.IsLeaf(); ok {
		_spec.SetField(sysmenu.FieldIsLeaf, field.TypeBool, value)
	}
	if smuo.mutation.IsLeafCleared() {
		_spec.ClearField(sysmenu.FieldIsLeaf, field.TypeBool)
	}
	if value, ok := smuo.mutation.OpenBlank(); ok {
		_spec.SetField(sysmenu.FieldOpenBlank, field.TypeBool, value)
	}
	if smuo.mutation.OpenBlankCleared() {
		_spec.ClearField(sysmenu.FieldOpenBlank, field.TypeBool)
	}
	if smuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sysmenu.ParentTable,
			Columns: []string{sysmenu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if smuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !smuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := smuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sysmenu.ChildrenTable,
			Columns: []string{sysmenu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sysmenu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(smuo.modifiers...)
	_node = &SysMenu{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sysmenu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	smuo.mutation.done = true
	return _node, nil
}
